                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Tue Apr 21 22:20:47 2015
                              5 ;--------------------------------------------------------
                              6 	.module tff
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Stat
                             13 	.globl _f_mount
                             14 	.globl _f_open
                             15 	.globl _f_read
                             16 	.globl _f_close
                             17 	.globl _f_lseek
                             18 	.globl _f_opendir
                             19 	.globl _f_readdir
                             20 ;--------------------------------------------------------
                             21 ; special function registers
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (DATA)
                             24 ;--------------------------------------------------------
                             25 ; special function bits
                             26 ;--------------------------------------------------------
                             27 	.area RSEG    (DATA)
                             28 ;--------------------------------------------------------
                             29 ; overlayable register banks
                             30 ;--------------------------------------------------------
                             31 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      32 	.ds 8
                             33 ;--------------------------------------------------------
                             34 ; internal ram data
                             35 ;--------------------------------------------------------
                             36 	.area DSEG    (DATA)
                    0000     37 Ftff$FatFs$0$0==.
   0000                      38 _FatFs:
   0000                      39 	.ds 3
                    0003     40 Ftff$fsid$0$0==.
   0003                      41 _fsid:
   0003                      42 	.ds 2
                             43 ;--------------------------------------------------------
                             44 ; overlayable items in internal ram 
                             45 ;--------------------------------------------------------
                             46 	.area OSEG    (OVR,DATA)
                             47 ;--------------------------------------------------------
                             48 ; indirectly addressable internal ram data
                             49 ;--------------------------------------------------------
                             50 	.area ISEG    (DATA)
                             51 ;--------------------------------------------------------
                             52 ; bit data
                             53 ;--------------------------------------------------------
                             54 	.area BSEG    (BIT)
                             55 ;--------------------------------------------------------
                             56 ; paged external ram data
                             57 ;--------------------------------------------------------
                             58 	.area PSEG    (PAG,XDATA)
                             59 ;--------------------------------------------------------
                             60 ; external ram data
                             61 ;--------------------------------------------------------
                             62 	.area XSEG    (XDATA)
                    0000     63 G$Stat$0$0==.
   0000                      64 _Stat::
   0000                      65 	.ds 1
                             66 ;--------------------------------------------------------
                             67 ; external initialized ram data
                             68 ;--------------------------------------------------------
                             69 	.area XISEG   (XDATA)
                             70 	.area HOME    (CODE)
                             71 	.area GSINIT0 (CODE)
                             72 	.area GSINIT1 (CODE)
                             73 	.area GSINIT2 (CODE)
                             74 	.area GSINIT3 (CODE)
                             75 	.area GSINIT4 (CODE)
                             76 	.area GSINIT5 (CODE)
                             77 	.area GSINIT  (CODE)
                             78 	.area GSFINAL (CODE)
                             79 	.area CSEG    (CODE)
                             80 ;--------------------------------------------------------
                             81 ; global & static initialisations
                             82 ;--------------------------------------------------------
                             83 	.area HOME    (CODE)
                             84 	.area GSINIT  (CODE)
                             85 	.area GSFINAL (CODE)
                             86 	.area GSINIT  (CODE)
                             87 ;--------------------------------------------------------
                             88 ; Home
                             89 ;--------------------------------------------------------
                             90 	.area HOME    (CODE)
                             91 	.area CSEG    (CODE)
                             92 ;--------------------------------------------------------
                             93 ; code
                             94 ;--------------------------------------------------------
                             95 	.area CSEG    (CODE)
                             96 ;------------------------------------------------------------
                             97 ;Allocation info for local variables in function 'move_window'
                             98 ;------------------------------------------------------------
                             99 ;sector                    Allocated to stack - offset 1
                            100 ;wsect                     Allocated to registers r6 r7 r2 r3 
                            101 ;fs                        Allocated to stack - offset 5
                            102 ;------------------------------------------------------------
                    0000    103 	Ftff$move_window$0$0 ==.
                    0000    104 	C$tff.c$60$0$0 ==.
                            105 ;	tff.c:60: BOOL move_window (		/* TRUE: successful, FALSE: failed */
                            106 ;	-----------------------------------------
                            107 ;	 function move_window
                            108 ;	-----------------------------------------
   0000                     109 _move_window:
                    0002    110 	ar2 = 0x02
                    0003    111 	ar3 = 0x03
                    0004    112 	ar4 = 0x04
                    0005    113 	ar5 = 0x05
                    0006    114 	ar6 = 0x06
                    0007    115 	ar7 = 0x07
                    0000    116 	ar0 = 0x00
                    0001    117 	ar1 = 0x01
   0000 C0*00               118 	push	_bp
   0002 85 81*00            119 	mov	_bp,sp
                            120 ;     genReceive
   0005 C0 82               121 	push	dpl
   0007 C0 83               122 	push	dph
   0009 C0 F0               123 	push	b
   000B C0 E0               124 	push	acc
   000D 05 81               125 	inc	sp
   000F 05 81               126 	inc	sp
   0011 05 81               127 	inc	sp
                    0013    128 	C$tff.c$65$1$0 ==.
                            129 ;	tff.c:65: FATFS *fs = FatFs;
                            130 ;	genAssign
   0013 E5*00               131 	mov	a,_bp
   0015 24 05               132 	add	a,#0x05
   0017 F8                  133 	mov	r0,a
   0018 A6*00               134 	mov	@r0,_FatFs
   001A 08                  135 	inc	r0
   001B A6*01               136 	mov	@r0,(_FatFs + 1)
   001D 08                  137 	inc	r0
   001E A6*02               138 	mov	@r0,(_FatFs + 2)
                    0020    139 	C$tff.c$68$1$1 ==.
                            140 ;	tff.c:68: wsect = fs->winsect;
                            141 ;	genPlus
   0020 E5*00               142 	mov	a,_bp
   0022 24 05               143 	add	a,#0x05
   0024 F8                  144 	mov	r0,a
                            145 ;     genPlusIncr
   0025 74 04               146 	mov	a,#0x04
   0027 26                  147 	add	a,@r0
   0028 FE                  148 	mov	r6,a
                            149 ;	Peephole 181	changed mov to clr
   0029 E4                  150 	clr	a
   002A 08                  151 	inc	r0
   002B 36                  152 	addc	a,@r0
   002C FF                  153 	mov	r7,a
   002D 08                  154 	inc	r0
   002E 86 02               155 	mov	ar2,@r0
                            156 ;	genPointerGet
                            157 ;	genGenPointerGet
   0030 8E 82               158 	mov	dpl,r6
   0032 8F 83               159 	mov	dph,r7
   0034 8A F0               160 	mov	b,r2
   0036 12s00r00            161 	lcall	__gptrget
   0039 FE                  162 	mov	r6,a
   003A A3                  163 	inc	dptr
   003B 12s00r00            164 	lcall	__gptrget
   003E FF                  165 	mov	r7,a
   003F A3                  166 	inc	dptr
   0040 12s00r00            167 	lcall	__gptrget
   0043 FA                  168 	mov	r2,a
   0044 A3                  169 	inc	dptr
   0045 12s00r00            170 	lcall	__gptrget
   0048 FB                  171 	mov	r3,a
                            172 ;	genAssign
                    0049    173 	C$tff.c$69$1$1 ==.
                            174 ;	tff.c:69: if (wsect != sector) {	/* Changed current window */
                            175 ;	genCmpEq
   0049 A8*00               176 	mov	r0,_bp
   004B 08                  177 	inc	r0
                            178 ;	gencjneshort
   004C E6                  179 	mov	a,@r0
   004D B5 06 12            180 	cjne	a,ar6,00112$
   0050 08                  181 	inc	r0
   0051 E6                  182 	mov	a,@r0
   0052 B5 07 0D            183 	cjne	a,ar7,00112$
   0055 08                  184 	inc	r0
   0056 E6                  185 	mov	a,@r0
   0057 B5 02 08            186 	cjne	a,ar2,00112$
   005A 08                  187 	inc	r0
   005B E6                  188 	mov	a,@r0
   005C B5 03 03            189 	cjne	a,ar3,00112$
   005F 02s00rE1            190 	ljmp	00106$
   0062                     191 00112$:
                    0062    192 	C$tff.c$84$2$2 ==.
                            193 ;	tff.c:84: if (sector) {
                            194 ;	genIfx
   0062 A8*00               195 	mov	r0,_bp
   0064 08                  196 	inc	r0
   0065 E6                  197 	mov	a,@r0
   0066 08                  198 	inc	r0
   0067 46                  199 	orl	a,@r0
   0068 08                  200 	inc	r0
   0069 46                  201 	orl	a,@r0
   006A 08                  202 	inc	r0
   006B 46                  203 	orl	a,@r0
                            204 ;	genIfxJump
                            205 ;	Peephole 108.c	removed ljmp by inverse jump logic
   006C 60 73               206 	jz	00106$
                            207 ;	Peephole 300	removed redundant label 00113$
                    006E    208 	C$tff.c$85$3$3 ==.
                            209 ;	tff.c:85: if (disk_read(0, fs->win, sector, 1) != RES_OK)
                            210 ;	genPlus
   006E E5*00               211 	mov	a,_bp
   0070 24 05               212 	add	a,#0x05
   0072 F8                  213 	mov	r0,a
                            214 ;     genPlusIncr
   0073 74 20               215 	mov	a,#0x20
   0075 26                  216 	add	a,@r0
   0076 FA                  217 	mov	r2,a
                            218 ;	Peephole 181	changed mov to clr
   0077 E4                  219 	clr	a
   0078 08                  220 	inc	r0
   0079 36                  221 	addc	a,@r0
   007A FB                  222 	mov	r3,a
   007B 08                  223 	inc	r0
   007C 86 04               224 	mov	ar4,@r0
                            225 ;	genIpush
   007E 74 01               226 	mov	a,#0x01
   0080 C0 E0               227 	push	acc
                            228 ;	genIpush
   0082 A8*00               229 	mov	r0,_bp
   0084 08                  230 	inc	r0
   0085 E6                  231 	mov	a,@r0
   0086 C0 E0               232 	push	acc
   0088 08                  233 	inc	r0
   0089 E6                  234 	mov	a,@r0
   008A C0 E0               235 	push	acc
   008C 08                  236 	inc	r0
   008D E6                  237 	mov	a,@r0
   008E C0 E0               238 	push	acc
   0090 08                  239 	inc	r0
   0091 E6                  240 	mov	a,@r0
   0092 C0 E0               241 	push	acc
                            242 ;	genIpush
   0094 C0 02               243 	push	ar2
   0096 C0 03               244 	push	ar3
   0098 C0 04               245 	push	ar4
                            246 ;	genCall
   009A 75 82 00            247 	mov	dpl,#0x00
   009D 12s00r00            248 	lcall	_disk_read
   00A0 AA 82               249 	mov	r2,dpl
   00A2 E5 81               250 	mov	a,sp
   00A4 24 F8               251 	add	a,#0xf8
   00A6 F5 81               252 	mov	sp,a
                            253 ;	genCmpEq
                            254 ;	gencjneshort
   00A8 BA 00 02            255 	cjne	r2,#0x00,00114$
                            256 ;	Peephole 112.b	changed ljmp to sjmp
   00AB 80 05               257 	sjmp	00102$
   00AD                     258 00114$:
                    00AD    259 	C$tff.c$86$3$3 ==.
                            260 ;	tff.c:86: return FALSE;
                            261 ;	genRet
   00AD 75 82 00            262 	mov	dpl,#0x00
                            263 ;	Peephole 112.b	changed ljmp to sjmp
   00B0 80 32               264 	sjmp	00107$
   00B2                     265 00102$:
                    00B2    266 	C$tff.c$87$3$3 ==.
                            267 ;	tff.c:87: fs->winsect = sector;
                            268 ;	genPlus
   00B2 E5*00               269 	mov	a,_bp
   00B4 24 05               270 	add	a,#0x05
   00B6 F8                  271 	mov	r0,a
                            272 ;     genPlusIncr
   00B7 74 04               273 	mov	a,#0x04
   00B9 26                  274 	add	a,@r0
   00BA FA                  275 	mov	r2,a
                            276 ;	Peephole 181	changed mov to clr
   00BB E4                  277 	clr	a
   00BC 08                  278 	inc	r0
   00BD 36                  279 	addc	a,@r0
   00BE FB                  280 	mov	r3,a
   00BF 08                  281 	inc	r0
   00C0 86 04               282 	mov	ar4,@r0
                            283 ;	genPointerSet
                            284 ;	genGenPointerSet
   00C2 8A 82               285 	mov	dpl,r2
   00C4 8B 83               286 	mov	dph,r3
   00C6 8C F0               287 	mov	b,r4
   00C8 A8*00               288 	mov	r0,_bp
   00CA 08                  289 	inc	r0
   00CB E6                  290 	mov	a,@r0
   00CC 12s00r00            291 	lcall	__gptrput
   00CF A3                  292 	inc	dptr
   00D0 08                  293 	inc	r0
   00D1 E6                  294 	mov	a,@r0
   00D2 12s00r00            295 	lcall	__gptrput
   00D5 A3                  296 	inc	dptr
   00D6 08                  297 	inc	r0
   00D7 E6                  298 	mov	a,@r0
   00D8 12s00r00            299 	lcall	__gptrput
   00DB A3                  300 	inc	dptr
   00DC 08                  301 	inc	r0
   00DD E6                  302 	mov	a,@r0
   00DE 12s00r00            303 	lcall	__gptrput
   00E1                     304 00106$:
                    00E1    305 	C$tff.c$90$1$1 ==.
                            306 ;	tff.c:90: return TRUE;
                            307 ;	genRet
   00E1 75 82 01            308 	mov	dpl,#0x01
   00E4                     309 00107$:
   00E4 85*00 81            310 	mov	sp,_bp
   00E7 D0*00               311 	pop	_bp
                    00E9    312 	C$tff.c$91$1$1 ==.
                    00E9    313 	XFtff$move_window$0$0 ==.
   00E9 22                  314 	ret
                            315 ;------------------------------------------------------------
                            316 ;Allocation info for local variables in function 'get_cluster'
                            317 ;------------------------------------------------------------
                            318 ;clust                     Allocated to stack - offset 1
                            319 ;wc                        Allocated to stack - offset 5
                            320 ;bc                        Allocated to stack - offset 7
                            321 ;fatsect                   Allocated to stack - offset 9
                            322 ;fs                        Allocated to stack - offset 13
                            323 ;sloc0                     Allocated to stack - offset 16
                            324 ;sloc1                     Allocated to stack - offset 19
                            325 ;------------------------------------------------------------
                    00EA    326 	Ftff$get_cluster$0$0 ==.
                    00EA    327 	C$tff.c$137$1$1 ==.
                            328 ;	tff.c:137: CLUST get_cluster (		/* 0,>=2: successful, 1: failed */
                            329 ;	-----------------------------------------
                            330 ;	 function get_cluster
                            331 ;	-----------------------------------------
   00EA                     332 _get_cluster:
   00EA C0*00               333 	push	_bp
   00EC 85 81*00            334 	mov	_bp,sp
                            335 ;     genReceive
   00EF C0 82               336 	push	dpl
   00F1 C0 83               337 	push	dph
   00F3 C0 F0               338 	push	b
   00F5 C0 E0               339 	push	acc
   00F7 E5 81               340 	mov	a,sp
   00F9 24 16               341 	add	a,#0x16
   00FB F5 81               342 	mov	sp,a
                    00FD    343 	C$tff.c$143$1$1 ==.
                            344 ;	tff.c:143: FATFS *fs = FatFs;
                            345 ;	genAssign
   00FD E5*00               346 	mov	a,_bp
   00FF 24 0D               347 	add	a,#0x0d
   0101 F8                  348 	mov	r0,a
   0102 A6*00               349 	mov	@r0,_FatFs
   0104 08                  350 	inc	r0
   0105 A6*01               351 	mov	@r0,(_FatFs + 1)
   0107 08                  352 	inc	r0
   0108 A6*02               353 	mov	@r0,(_FatFs + 2)
                    010A    354 	C$tff.c$146$1$1 ==.
                            355 ;	tff.c:146: if (clust >= 2 && clust < fs->max_clust) {		/* Valid cluster# */
                            356 ;	genCmpLt
   010A A8*00               357 	mov	r0,_bp
   010C 08                  358 	inc	r0
                            359 ;	genCmp
   010D C3                  360 	clr	c
   010E E6                  361 	mov	a,@r0
   010F 94 02               362 	subb	a,#0x02
   0111 08                  363 	inc	r0
   0112 E6                  364 	mov	a,@r0
   0113 94 00               365 	subb	a,#0x00
   0115 08                  366 	inc	r0
   0116 E6                  367 	mov	a,@r0
   0117 94 00               368 	subb	a,#0x00
   0119 08                  369 	inc	r0
   011A E6                  370 	mov	a,@r0
   011B 94 00               371 	subb	a,#0x00
                            372 ;	genIfxJump
   011D 50 03               373 	jnc	00130$
   011F 02s04rEF            374 	ljmp	00114$
   0122                     375 00130$:
                            376 ;	genPlus
   0122 E5*00               377 	mov	a,_bp
   0124 24 0D               378 	add	a,#0x0d
   0126 F8                  379 	mov	r0,a
                            380 ;     genPlusIncr
   0127 74 18               381 	mov	a,#0x18
   0129 26                  382 	add	a,@r0
   012A FE                  383 	mov	r6,a
                            384 ;	Peephole 181	changed mov to clr
   012B E4                  385 	clr	a
   012C 08                  386 	inc	r0
   012D 36                  387 	addc	a,@r0
   012E FF                  388 	mov	r7,a
   012F 08                  389 	inc	r0
   0130 86 02               390 	mov	ar2,@r0
                            391 ;	genPointerGet
                            392 ;	genGenPointerGet
   0132 8E 82               393 	mov	dpl,r6
   0134 8F 83               394 	mov	dph,r7
   0136 8A F0               395 	mov	b,r2
   0138 12s00r00            396 	lcall	__gptrget
   013B FE                  397 	mov	r6,a
   013C A3                  398 	inc	dptr
   013D 12s00r00            399 	lcall	__gptrget
   0140 FF                  400 	mov	r7,a
   0141 A3                  401 	inc	dptr
   0142 12s00r00            402 	lcall	__gptrget
   0145 FA                  403 	mov	r2,a
   0146 A3                  404 	inc	dptr
   0147 12s00r00            405 	lcall	__gptrget
   014A FB                  406 	mov	r3,a
                            407 ;	genCmpLt
   014B A8*00               408 	mov	r0,_bp
   014D 08                  409 	inc	r0
                            410 ;	genCmp
   014E C3                  411 	clr	c
   014F E6                  412 	mov	a,@r0
   0150 9E                  413 	subb	a,r6
   0151 08                  414 	inc	r0
   0152 E6                  415 	mov	a,@r0
   0153 9F                  416 	subb	a,r7
   0154 08                  417 	inc	r0
   0155 E6                  418 	mov	a,@r0
   0156 9A                  419 	subb	a,r2
   0157 08                  420 	inc	r0
   0158 E6                  421 	mov	a,@r0
   0159 9B                  422 	subb	a,r3
                            423 ;	genIfxJump
   015A 40 03               424 	jc	00131$
   015C 02s04rEF            425 	ljmp	00114$
   015F                     426 00131$:
                    015F    427 	C$tff.c$147$2$2 ==.
                            428 ;	tff.c:147: fatsect = fs->fatbase;
                            429 ;	genPlus
   015F E5*00               430 	mov	a,_bp
   0161 24 0D               431 	add	a,#0x0d
   0163 F8                  432 	mov	r0,a
                            433 ;     genPlusIncr
   0164 74 08               434 	mov	a,#0x08
   0166 26                  435 	add	a,@r0
   0167 FA                  436 	mov	r2,a
                            437 ;	Peephole 181	changed mov to clr
   0168 E4                  438 	clr	a
   0169 08                  439 	inc	r0
   016A 36                  440 	addc	a,@r0
   016B FB                  441 	mov	r3,a
   016C 08                  442 	inc	r0
   016D 86 04               443 	mov	ar4,@r0
                            444 ;	genPointerGet
                            445 ;	genGenPointerGet
   016F 8A 82               446 	mov	dpl,r2
   0171 8B 83               447 	mov	dph,r3
   0173 8C F0               448 	mov	b,r4
   0175 12s00r00            449 	lcall	__gptrget
   0178 FA                  450 	mov	r2,a
   0179 A3                  451 	inc	dptr
   017A 12s00r00            452 	lcall	__gptrget
   017D FB                  453 	mov	r3,a
   017E A3                  454 	inc	dptr
   017F 12s00r00            455 	lcall	__gptrget
   0182 FC                  456 	mov	r4,a
   0183 A3                  457 	inc	dptr
   0184 12s00r00            458 	lcall	__gptrget
   0187 FD                  459 	mov	r5,a
                            460 ;	genAssign
   0188 E5*00               461 	mov	a,_bp
   018A 24 09               462 	add	a,#0x09
   018C F8                  463 	mov	r0,a
   018D A6 02               464 	mov	@r0,ar2
   018F 08                  465 	inc	r0
   0190 A6 03               466 	mov	@r0,ar3
   0192 08                  467 	inc	r0
   0193 A6 04               468 	mov	@r0,ar4
   0195 08                  469 	inc	r0
   0196 A6 05               470 	mov	@r0,ar5
                    0198    471 	C$tff.c$148$2$2 ==.
                            472 ;	tff.c:148: switch (fs->fs_type) {
                            473 ;	genPlus
   0198 E5*00               474 	mov	a,_bp
   019A 24 0D               475 	add	a,#0x0d
   019C F8                  476 	mov	r0,a
                            477 ;     genPlusIncr
   019D 74 1C               478 	mov	a,#0x1C
   019F 26                  479 	add	a,@r0
   01A0 FE                  480 	mov	r6,a
                            481 ;	Peephole 181	changed mov to clr
   01A1 E4                  482 	clr	a
   01A2 08                  483 	inc	r0
   01A3 36                  484 	addc	a,@r0
   01A4 FF                  485 	mov	r7,a
   01A5 08                  486 	inc	r0
   01A6 86 02               487 	mov	ar2,@r0
                            488 ;	genPointerGet
                            489 ;	genGenPointerGet
   01A8 8E 82               490 	mov	dpl,r6
   01AA 8F 83               491 	mov	dph,r7
   01AC 8A F0               492 	mov	b,r2
   01AE 12s00r00            493 	lcall	__gptrget
   01B1 FA                  494 	mov	r2,a
                            495 ;	genCmpEq
                            496 ;	gencjneshort
   01B2 BA 01 02            497 	cjne	r2,#0x01,00132$
                            498 ;	Peephole 112.b	changed ljmp to sjmp
   01B5 80 0F               499 	sjmp	00101$
   01B7                     500 00132$:
                            501 ;	genCmpEq
                            502 ;	gencjneshort
   01B7 BA 02 03            503 	cjne	r2,#0x02,00133$
   01BA 02s03r0B            504 	ljmp	00106$
   01BD                     505 00133$:
                            506 ;	genCmpEq
                            507 ;	gencjneshort
   01BD BA 03 03            508 	cjne	r2,#0x03,00134$
   01C0 02s03r9B            509 	ljmp	00109$
   01C3                     510 00134$:
   01C3 02s04rEF            511 	ljmp	00114$
                    01C6    512 	C$tff.c$149$3$3 ==.
                            513 ;	tff.c:149: case FS_FAT12 :
   01C6                     514 00101$:
                    01C6    515 	C$tff.c$150$3$3 ==.
                            516 ;	tff.c:150: bc = (WORD)clust * 3 / 2;
                            517 ;	genCast
   01C6 A8*00               518 	mov	r0,_bp
   01C8 08                  519 	inc	r0
   01C9 86 82               520 	mov	dpl,@r0
   01CB 08                  521 	inc	r0
   01CC 86 83               522 	mov	dph,@r0
                            523 ;	genIpush
   01CE 74 03               524 	mov	a,#0x03
   01D0 C0 E0               525 	push	acc
                            526 ;	Peephole 181	changed mov to clr
   01D2 E4                  527 	clr	a
   01D3 C0 E0               528 	push	acc
                            529 ;	genCall
   01D5 12s00r00            530 	lcall	__mulint
   01D8 AA 82               531 	mov	r2,dpl
   01DA AB 83               532 	mov	r3,dph
   01DC 15 81               533 	dec	sp
   01DE 15 81               534 	dec	sp
                            535 ;	genRightShift
                            536 ;	genRightShiftLiteral
   01E0 E5*00               537 	mov	a,_bp
   01E2 24 07               538 	add	a,#0x07
   01E4 F8                  539 	mov	r0,a
                            540 ;	genrshTwo
   01E5 A6 02               541 	mov	@r0,ar2
   01E7 EB                  542 	mov	a,r3
   01E8 C3                  543 	clr	c
   01E9 13                  544 	rrc	a
   01EA C6                  545 	xch	a,@r0
   01EB 13                  546 	rrc	a
   01EC C6                  547 	xch	a,@r0
   01ED 08                  548 	inc	r0
   01EE F6                  549 	mov	@r0,a
                    01EF    550 	C$tff.c$151$3$3 ==.
                            551 ;	tff.c:151: if (!move_window(fatsect + bc / 512)) break;
                            552 ;	genRightShift
                            553 ;	genRightShiftLiteral
   01EF E5*00               554 	mov	a,_bp
   01F1 24 07               555 	add	a,#0x07
                            556 ;	genrshTwo
                            557 ;	Peephole 185	changed order of increment (acc incremented also!)
   01F3 04                  558 	inc	a
   01F4 F8                  559 	mov	r0,a
   01F5 E6                  560 	mov	a,@r0
   01F6 C3                  561 	clr	c
   01F7 13                  562 	rrc	a
   01F8 FC                  563 	mov	r4,a
                            564 ;	genCast
                            565 ;	genPlus
                            566 ;	Peephole 3.c	changed mov to clr
                            567 ;	Peephole 3.b	changed mov to clr
   01F9 E4                  568 	clr	a
   01FA FD                  569 	mov	r5,a
   01FB FE                  570 	mov	r6,a
   01FC FF                  571 	mov	r7,a
   01FD E5*00               572 	mov	a,_bp
   01FF 24 09               573 	add	a,#0x09
   0201 F8                  574 	mov	r0,a
                            575 ;	Peephole 236.g	used r4 instead of ar4
   0202 EC                  576 	mov	a,r4
   0203 26                  577 	add	a,@r0
   0204 FC                  578 	mov	r4,a
                            579 ;	Peephole 236.g	used r5 instead of ar5
   0205 ED                  580 	mov	a,r5
   0206 08                  581 	inc	r0
   0207 36                  582 	addc	a,@r0
   0208 FD                  583 	mov	r5,a
                            584 ;	Peephole 236.g	used r6 instead of ar6
   0209 EE                  585 	mov	a,r6
   020A 08                  586 	inc	r0
   020B 36                  587 	addc	a,@r0
   020C FE                  588 	mov	r6,a
                            589 ;	Peephole 236.g	used r7 instead of ar7
   020D EF                  590 	mov	a,r7
   020E 08                  591 	inc	r0
   020F 36                  592 	addc	a,@r0
                            593 ;	genCall
   0210 FF                  594 	mov	r7,a
   0211 8C 82               595 	mov	dpl,r4
   0213 8D 83               596 	mov	dph,r5
   0215 8E F0               597 	mov	b,r6
                            598 ;	Peephole 191	removed redundant mov
   0217 12s00r00            599 	lcall	_move_window
   021A E5 82               600 	mov	a,dpl
                            601 ;	genIfx
                            602 ;	genIfxJump
   021C 70 03               603 	jnz	00135$
   021E 02s04rEF            604 	ljmp	00114$
   0221                     605 00135$:
                    0221    606 	C$tff.c$152$3$3 ==.
                            607 ;	tff.c:152: wc = fs->win[bc % 512]; bc++;
                            608 ;	genPlus
   0221 E5*00               609 	mov	a,_bp
   0223 24 0D               610 	add	a,#0x0d
   0225 F8                  611 	mov	r0,a
                            612 ;     genPlusIncr
   0226 74 20               613 	mov	a,#0x20
   0228 26                  614 	add	a,@r0
   0229 FC                  615 	mov	r4,a
                            616 ;	Peephole 181	changed mov to clr
   022A E4                  617 	clr	a
   022B 08                  618 	inc	r0
   022C 36                  619 	addc	a,@r0
   022D FD                  620 	mov	r5,a
   022E 08                  621 	inc	r0
   022F 86 06               622 	mov	ar6,@r0
                            623 ;	genAnd
   0231 E5*00               624 	mov	a,_bp
   0233 24 07               625 	add	a,#0x07
   0235 F8                  626 	mov	r0,a
   0236 86 07               627 	mov	ar7,@r0
   0238 74 01               628 	mov	a,#0x01
   023A 08                  629 	inc	r0
   023B 56                  630 	anl	a,@r0
   023C FA                  631 	mov	r2,a
                            632 ;	genPlus
                            633 ;	Peephole 236.g	used r7 instead of ar7
   023D EF                  634 	mov	a,r7
                            635 ;	Peephole 236.a	used r4 instead of ar4
   023E 2C                  636 	add	a,r4
   023F FC                  637 	mov	r4,a
                            638 ;	Peephole 236.g	used r2 instead of ar2
   0240 EA                  639 	mov	a,r2
                            640 ;	Peephole 236.b	used r5 instead of ar5
   0241 3D                  641 	addc	a,r5
   0242 FD                  642 	mov	r5,a
                            643 ;	genPointerGet
                            644 ;	genGenPointerGet
   0243 8C 82               645 	mov	dpl,r4
   0245 8D 83               646 	mov	dph,r5
   0247 8E F0               647 	mov	b,r6
   0249 12s00r00            648 	lcall	__gptrget
   024C FC                  649 	mov	r4,a
                            650 ;	genCast
   024D E5*00               651 	mov	a,_bp
   024F 24 05               652 	add	a,#0x05
   0251 F8                  653 	mov	r0,a
   0252 A6 04               654 	mov	@r0,ar4
   0254 08                  655 	inc	r0
   0255 76 00               656 	mov	@r0,#0x00
                            657 ;	genPlus
   0257 E5*00               658 	mov	a,_bp
   0259 24 07               659 	add	a,#0x07
   025B F8                  660 	mov	r0,a
                            661 ;     genPlusIncr
   025C 74 01               662 	mov	a,#0x01
   025E 26                  663 	add	a,@r0
   025F F6                  664 	mov	@r0,a
                            665 ;	Peephole 181	changed mov to clr
   0260 E4                  666 	clr	a
   0261 08                  667 	inc	r0
   0262 36                  668 	addc	a,@r0
   0263 F6                  669 	mov	@r0,a
                    0264    670 	C$tff.c$153$3$3 ==.
                            671 ;	tff.c:153: if (!move_window(fatsect + bc / 512)) break;
                            672 ;	genRightShift
                            673 ;	genRightShiftLiteral
   0264 E5*00               674 	mov	a,_bp
   0266 24 07               675 	add	a,#0x07
                            676 ;	genrshTwo
                            677 ;	Peephole 185	changed order of increment (acc incremented also!)
   0268 04                  678 	inc	a
   0269 F8                  679 	mov	r0,a
   026A E6                  680 	mov	a,@r0
   026B C3                  681 	clr	c
   026C 13                  682 	rrc	a
   026D FB                  683 	mov	r3,a
                            684 ;	genCast
                            685 ;	genPlus
                            686 ;	Peephole 3.c	changed mov to clr
                            687 ;	Peephole 3.b	changed mov to clr
   026E E4                  688 	clr	a
   026F FD                  689 	mov	r5,a
   0270 FE                  690 	mov	r6,a
   0271 FF                  691 	mov	r7,a
   0272 E5*00               692 	mov	a,_bp
   0274 24 09               693 	add	a,#0x09
   0276 F8                  694 	mov	r0,a
                            695 ;	Peephole 236.g	used r3 instead of ar3
   0277 EB                  696 	mov	a,r3
   0278 26                  697 	add	a,@r0
   0279 FB                  698 	mov	r3,a
                            699 ;	Peephole 236.g	used r5 instead of ar5
   027A ED                  700 	mov	a,r5
   027B 08                  701 	inc	r0
   027C 36                  702 	addc	a,@r0
   027D FD                  703 	mov	r5,a
                            704 ;	Peephole 236.g	used r6 instead of ar6
   027E EE                  705 	mov	a,r6
   027F 08                  706 	inc	r0
   0280 36                  707 	addc	a,@r0
   0281 FE                  708 	mov	r6,a
                            709 ;	Peephole 236.g	used r7 instead of ar7
   0282 EF                  710 	mov	a,r7
   0283 08                  711 	inc	r0
   0284 36                  712 	addc	a,@r0
                            713 ;	genCall
   0285 FF                  714 	mov	r7,a
   0286 8B 82               715 	mov	dpl,r3
   0288 8D 83               716 	mov	dph,r5
   028A 8E F0               717 	mov	b,r6
                            718 ;	Peephole 191	removed redundant mov
   028C 12s00r00            719 	lcall	_move_window
   028F E5 82               720 	mov	a,dpl
                            721 ;	genIfx
                            722 ;	genIfxJump
   0291 70 03               723 	jnz	00136$
   0293 02s04rEF            724 	ljmp	00114$
   0296                     725 00136$:
                    0296    726 	C$tff.c$154$3$3 ==.
                            727 ;	tff.c:154: wc |= (WORD)fs->win[bc % 512] << 8;
                            728 ;	genPlus
   0296 E5*00               729 	mov	a,_bp
   0298 24 0D               730 	add	a,#0x0d
   029A F8                  731 	mov	r0,a
                            732 ;     genPlusIncr
   029B 74 20               733 	mov	a,#0x20
   029D 26                  734 	add	a,@r0
   029E FB                  735 	mov	r3,a
                            736 ;	Peephole 181	changed mov to clr
   029F E4                  737 	clr	a
   02A0 08                  738 	inc	r0
   02A1 36                  739 	addc	a,@r0
   02A2 FD                  740 	mov	r5,a
   02A3 08                  741 	inc	r0
   02A4 86 06               742 	mov	ar6,@r0
                            743 ;	genAnd
   02A6 E5*00               744 	mov	a,_bp
   02A8 24 07               745 	add	a,#0x07
   02AA F8                  746 	mov	r0,a
   02AB 86 07               747 	mov	ar7,@r0
   02AD 74 01               748 	mov	a,#0x01
   02AF 08                  749 	inc	r0
   02B0 56                  750 	anl	a,@r0
   02B1 FA                  751 	mov	r2,a
                            752 ;	genPlus
                            753 ;	Peephole 236.g	used r7 instead of ar7
   02B2 EF                  754 	mov	a,r7
                            755 ;	Peephole 236.a	used r3 instead of ar3
   02B3 2B                  756 	add	a,r3
   02B4 FB                  757 	mov	r3,a
                            758 ;	Peephole 236.g	used r2 instead of ar2
   02B5 EA                  759 	mov	a,r2
                            760 ;	Peephole 236.b	used r5 instead of ar5
   02B6 3D                  761 	addc	a,r5
   02B7 FD                  762 	mov	r5,a
                            763 ;	genPointerGet
                            764 ;	genGenPointerGet
   02B8 8B 82               765 	mov	dpl,r3
   02BA 8D 83               766 	mov	dph,r5
   02BC 8E F0               767 	mov	b,r6
   02BE 12s00r00            768 	lcall	__gptrget
   02C1 FB                  769 	mov	r3,a
                            770 ;	genCast
                            771 ;	genLeftShift
                            772 ;	genLeftShiftLiteral
                            773 ;	genlshTwo
                            774 ;	peephole 177.e	removed redundant move
   02C2 8B 02               775 	mov	ar2,r3
   02C4 7B 00               776 	mov	r3,#0x00
                            777 ;	genOr
   02C6 E5*00               778 	mov	a,_bp
   02C8 24 05               779 	add	a,#0x05
   02CA F8                  780 	mov	r0,a
   02CB EB                  781 	mov	a,r3
   02CC 46                  782 	orl	a,@r0
   02CD F6                  783 	mov	@r0,a
   02CE EA                  784 	mov	a,r2
   02CF 08                  785 	inc	r0
   02D0 46                  786 	orl	a,@r0
   02D1 F6                  787 	mov	@r0,a
                    02D2    788 	C$tff.c$155$3$3 ==.
                            789 ;	tff.c:155: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
                            790 ;	genAnd
   02D2 A8*00               791 	mov	r0,_bp
   02D4 08                  792 	inc	r0
   02D5 E6                  793 	mov	a,@r0
                            794 ;	genIfxJump
                            795 ;	Peephole 108.d	removed ljmp by inverse jump logic
   02D6 30 E0 18            796 	jnb	acc.0,00118$
                            797 ;	Peephole 300	removed redundant label 00137$
                            798 ;	genRightShift
                            799 ;	genRightShiftLiteral
   02D9 E5*00               800 	mov	a,_bp
   02DB 24 05               801 	add	a,#0x05
   02DD F8                  802 	mov	r0,a
                            803 ;	genrshTwo
   02DE 86 02               804 	mov	ar2,@r0
   02E0 08                  805 	inc	r0
   02E1 E6                  806 	mov	a,@r0
   02E2 C4                  807 	swap	a
   02E3 CA                  808 	xch	a,r2
   02E4 C4                  809 	swap	a
   02E5 54 0F               810 	anl	a,#0x0f
   02E7 6A                  811 	xrl	a,r2
   02E8 CA                  812 	xch	a,r2
   02E9 54 0F               813 	anl	a,#0x0f
   02EB CA                  814 	xch	a,r2
   02EC 6A                  815 	xrl	a,r2
   02ED CA                  816 	xch	a,r2
   02EE FB                  817 	mov	r3,a
                            818 ;	Peephole 112.b	changed ljmp to sjmp
   02EF 80 0C               819 	sjmp	00119$
   02F1                     820 00118$:
                            821 ;	genAnd
   02F1 E5*00               822 	mov	a,_bp
   02F3 24 05               823 	add	a,#0x05
   02F5 F8                  824 	mov	r0,a
   02F6 86 02               825 	mov	ar2,@r0
   02F8 74 0F               826 	mov	a,#0x0F
   02FA 08                  827 	inc	r0
   02FB 56                  828 	anl	a,@r0
   02FC FB                  829 	mov	r3,a
   02FD                     830 00119$:
                            831 ;	genCast
   02FD 7C 00               832 	mov	r4,#0x00
   02FF 7D 00               833 	mov	r5,#0x00
                            834 ;	genRet
   0301 8A 82               835 	mov	dpl,r2
   0303 8B 83               836 	mov	dph,r3
   0305 8C F0               837 	mov	b,r4
   0307 ED                  838 	mov	a,r5
   0308 02s04rF5            839 	ljmp	00116$
                    030B    840 	C$tff.c$157$3$3 ==.
                            841 ;	tff.c:157: case FS_FAT16 :
   030B                     842 00106$:
                    030B    843 	C$tff.c$158$3$3 ==.
                            844 ;	tff.c:158: if (!move_window(fatsect + clust / 256)) break;
                            845 ;	genRightShift
                            846 ;	genRightShiftLiteral
   030B A8*00               847 	mov	r0,_bp
   030D 08                  848 	inc	r0
                            849 ;	genrshFour
   030E 08                  850 	inc	r0
   030F 86 02               851 	mov	ar2,@r0
   0311 08                  852 	inc	r0
   0312 86 03               853 	mov	ar3,@r0
   0314 08                  854 	inc	r0
   0315 86 04               855 	mov	ar4,@r0
   0317 7D 00               856 	mov	r5,#0x00
                            857 ;	genPlus
   0319 E5*00               858 	mov	a,_bp
   031B 24 09               859 	add	a,#0x09
   031D F8                  860 	mov	r0,a
                            861 ;	Peephole 236.g	used r2 instead of ar2
   031E EA                  862 	mov	a,r2
   031F 26                  863 	add	a,@r0
   0320 FA                  864 	mov	r2,a
                            865 ;	Peephole 236.g	used r3 instead of ar3
   0321 EB                  866 	mov	a,r3
   0322 08                  867 	inc	r0
   0323 36                  868 	addc	a,@r0
   0324 FB                  869 	mov	r3,a
                            870 ;	Peephole 236.g	used r4 instead of ar4
   0325 EC                  871 	mov	a,r4
   0326 08                  872 	inc	r0
   0327 36                  873 	addc	a,@r0
   0328 FC                  874 	mov	r4,a
                            875 ;	Peephole 236.g	used r5 instead of ar5
   0329 ED                  876 	mov	a,r5
   032A 08                  877 	inc	r0
   032B 36                  878 	addc	a,@r0
                            879 ;	genCall
   032C FD                  880 	mov	r5,a
   032D 8A 82               881 	mov	dpl,r2
   032F 8B 83               882 	mov	dph,r3
   0331 8C F0               883 	mov	b,r4
                            884 ;	Peephole 191	removed redundant mov
   0333 12s00r00            885 	lcall	_move_window
   0336 E5 82               886 	mov	a,dpl
                            887 ;	genIfx
                            888 ;	genIfxJump
   0338 70 03               889 	jnz	00138$
   033A 02s04rEF            890 	ljmp	00114$
   033D                     891 00138$:
                    033D    892 	C$tff.c$159$3$3 ==.
                            893 ;	tff.c:159: return LD_WORD(&fs->win[((WORD)clust * 2) % 512]);
                            894 ;	genPlus
   033D E5*00               895 	mov	a,_bp
   033F 24 0D               896 	add	a,#0x0d
   0341 F8                  897 	mov	r0,a
                            898 ;     genPlusIncr
   0342 74 20               899 	mov	a,#0x20
   0344 26                  900 	add	a,@r0
   0345 FA                  901 	mov	r2,a
                            902 ;	Peephole 181	changed mov to clr
   0346 E4                  903 	clr	a
   0347 08                  904 	inc	r0
   0348 36                  905 	addc	a,@r0
   0349 FB                  906 	mov	r3,a
   034A 08                  907 	inc	r0
   034B 86 04               908 	mov	ar4,@r0
                            909 ;	genCast
   034D A8*00               910 	mov	r0,_bp
   034F 08                  911 	inc	r0
   0350 86 05               912 	mov	ar5,@r0
   0352 08                  913 	inc	r0
   0353 86 06               914 	mov	ar6,@r0
                            915 ;	genLeftShift
                            916 ;	genLeftShiftLiteral
                            917 ;	genlshTwo
   0355 EE                  918 	mov	a,r6
   0356 CD                  919 	xch	a,r5
   0357 25 E0               920 	add	a,acc
   0359 CD                  921 	xch	a,r5
   035A 33                  922 	rlc	a
   035B FE                  923 	mov	r6,a
                            924 ;	genAnd
   035C 53 06 01            925 	anl	ar6,#0x01
                            926 ;	genPlus
                            927 ;	Peephole 236.g	used r5 instead of ar5
   035F ED                  928 	mov	a,r5
                            929 ;	Peephole 236.a	used r2 instead of ar2
   0360 2A                  930 	add	a,r2
   0361 FA                  931 	mov	r2,a
                            932 ;	Peephole 236.g	used r6 instead of ar6
   0362 EE                  933 	mov	a,r6
                            934 ;	Peephole 236.b	used r3 instead of ar3
   0363 3B                  935 	addc	a,r3
   0364 FB                  936 	mov	r3,a
                            937 ;	genPlus
                            938 ;     genPlusIncr
   0365 74 01               939 	mov	a,#0x01
                            940 ;	Peephole 236.a	used r2 instead of ar2
   0367 2A                  941 	add	a,r2
   0368 FD                  942 	mov	r5,a
                            943 ;	Peephole 181	changed mov to clr
   0369 E4                  944 	clr	a
                            945 ;	Peephole 236.b	used r3 instead of ar3
   036A 3B                  946 	addc	a,r3
   036B FE                  947 	mov	r6,a
   036C 8C 07               948 	mov	ar7,r4
                            949 ;	genPointerGet
                            950 ;	genGenPointerGet
   036E 8D 82               951 	mov	dpl,r5
   0370 8E 83               952 	mov	dph,r6
   0372 8F F0               953 	mov	b,r7
   0374 12s00r00            954 	lcall	__gptrget
   0377 FD                  955 	mov	r5,a
                            956 ;	genCast
                            957 ;	genLeftShift
                            958 ;	genLeftShiftLiteral
                            959 ;	genlshTwo
                            960 ;	peephole 177.e	removed redundant move
   0378 8D 06               961 	mov	ar6,r5
   037A 7D 00               962 	mov	r5,#0x00
                            963 ;	genPointerGet
                            964 ;	genGenPointerGet
   037C 8A 82               965 	mov	dpl,r2
   037E 8B 83               966 	mov	dph,r3
   0380 8C F0               967 	mov	b,r4
   0382 12s00r00            968 	lcall	__gptrget
                            969 ;	genCast
                            970 ;	genOr
   0385 FA                  971 	mov	r2,a
   0386 7B 00               972 	mov	r3,#0x00
                            973 ;	Peephole 177.d	removed redundant move
   0388 42 05               974 	orl	ar5,a
   038A EB                  975 	mov	a,r3
   038B 42 06               976 	orl	ar6,a
                            977 ;	genCast
   038D 7A 00               978 	mov	r2,#0x00
   038F 7B 00               979 	mov	r3,#0x00
                            980 ;	genRet
   0391 8D 82               981 	mov	dpl,r5
   0393 8E 83               982 	mov	dph,r6
   0395 8A F0               983 	mov	b,r2
   0397 EB                  984 	mov	a,r3
   0398 02s04rF5            985 	ljmp	00116$
                    039B    986 	C$tff.c$161$3$3 ==.
                            987 ;	tff.c:161: case FS_FAT32 :
   039B                     988 00109$:
                    039B    989 	C$tff.c$162$3$3 ==.
                            990 ;	tff.c:162: if (!move_window(fatsect + clust / 128)) break;
                            991 ;	genRightShift
                            992 ;	genRightShiftLiteral
   039B A8*00               993 	mov	r0,_bp
   039D 08                  994 	inc	r0
                            995 ;	genrshFour
   039E 86 02               996 	mov	ar2,@r0
   03A0 08                  997 	inc	r0
   03A1 E6                  998 	mov	a,@r0
   03A2 A2 E7               999 	mov	c,acc.7
   03A4 CA                 1000 	xch	a,r2
   03A5 33                 1001 	rlc	a
   03A6 CA                 1002 	xch	a,r2
   03A7 33                 1003 	rlc	a
   03A8 CA                 1004 	xch	a,r2
   03A9 54 01              1005 	anl	a,#0x01
   03AB FB                 1006 	mov	r3,a
   03AC 08                 1007 	inc	r0
   03AD E6                 1008 	mov	a,@r0
   03AE 25 E0              1009 	add	a,acc
   03B0 4B                 1010 	orl	a,r3
   03B1 FB                 1011 	mov	r3,a
   03B2 86 04              1012 	mov	ar4,@r0
   03B4 08                 1013 	inc	r0
   03B5 E6                 1014 	mov	a,@r0
   03B6 A2 E7              1015 	mov	c,acc.7
   03B8 CC                 1016 	xch	a,r4
   03B9 33                 1017 	rlc	a
   03BA CC                 1018 	xch	a,r4
   03BB 33                 1019 	rlc	a
   03BC CC                 1020 	xch	a,r4
   03BD 54 01              1021 	anl	a,#0x01
   03BF FD                 1022 	mov	r5,a
                           1023 ;	genPlus
   03C0 E5*00              1024 	mov	a,_bp
   03C2 24 09              1025 	add	a,#0x09
   03C4 F8                 1026 	mov	r0,a
                           1027 ;	Peephole 236.g	used r2 instead of ar2
   03C5 EA                 1028 	mov	a,r2
   03C6 26                 1029 	add	a,@r0
   03C7 FA                 1030 	mov	r2,a
                           1031 ;	Peephole 236.g	used r3 instead of ar3
   03C8 EB                 1032 	mov	a,r3
   03C9 08                 1033 	inc	r0
   03CA 36                 1034 	addc	a,@r0
   03CB FB                 1035 	mov	r3,a
                           1036 ;	Peephole 236.g	used r4 instead of ar4
   03CC EC                 1037 	mov	a,r4
   03CD 08                 1038 	inc	r0
   03CE 36                 1039 	addc	a,@r0
   03CF FC                 1040 	mov	r4,a
                           1041 ;	Peephole 236.g	used r5 instead of ar5
   03D0 ED                 1042 	mov	a,r5
   03D1 08                 1043 	inc	r0
   03D2 36                 1044 	addc	a,@r0
                           1045 ;	genCall
   03D3 FD                 1046 	mov	r5,a
   03D4 8A 82              1047 	mov	dpl,r2
   03D6 8B 83              1048 	mov	dph,r3
   03D8 8C F0              1049 	mov	b,r4
                           1050 ;	Peephole 191	removed redundant mov
   03DA 12s00r00           1051 	lcall	_move_window
   03DD E5 82              1052 	mov	a,dpl
                           1053 ;	genIfx
                           1054 ;	genIfxJump
   03DF 70 03              1055 	jnz	00139$
   03E1 02s04rEF           1056 	ljmp	00114$
   03E4                    1057 00139$:
                    03E4   1058 	C$tff.c$163$3$3 ==.
                           1059 ;	tff.c:163: return LD_DWORD(&fs->win[((WORD)clust * 4) % 512]) & 0x0FFFFFFF;
                           1060 ;	genPlus
   03E4 E5*00              1061 	mov	a,_bp
   03E6 24 0D              1062 	add	a,#0x0d
   03E8 F8                 1063 	mov	r0,a
                           1064 ;     genPlusIncr
   03E9 74 20              1065 	mov	a,#0x20
   03EB 26                 1066 	add	a,@r0
   03EC FA                 1067 	mov	r2,a
                           1068 ;	Peephole 181	changed mov to clr
   03ED E4                 1069 	clr	a
   03EE 08                 1070 	inc	r0
   03EF 36                 1071 	addc	a,@r0
   03F0 FB                 1072 	mov	r3,a
   03F1 08                 1073 	inc	r0
   03F2 86 04              1074 	mov	ar4,@r0
                           1075 ;	genCast
   03F4 A8*00              1076 	mov	r0,_bp
   03F6 08                 1077 	inc	r0
   03F7 86 05              1078 	mov	ar5,@r0
   03F9 08                 1079 	inc	r0
   03FA 86 06              1080 	mov	ar6,@r0
                           1081 ;	genLeftShift
                           1082 ;	genLeftShiftLiteral
                           1083 ;	genlshTwo
   03FC EE                 1084 	mov	a,r6
   03FD CD                 1085 	xch	a,r5
   03FE 25 E0              1086 	add	a,acc
   0400 CD                 1087 	xch	a,r5
   0401 33                 1088 	rlc	a
   0402 CD                 1089 	xch	a,r5
   0403 25 E0              1090 	add	a,acc
   0405 CD                 1091 	xch	a,r5
   0406 33                 1092 	rlc	a
   0407 FE                 1093 	mov	r6,a
                           1094 ;	genAnd
   0408 53 06 01           1095 	anl	ar6,#0x01
                           1096 ;	genPlus
   040B E5*00              1097 	mov	a,_bp
   040D 24 10              1098 	add	a,#0x10
   040F F8                 1099 	mov	r0,a
                           1100 ;	Peephole 236.g	used r5 instead of ar5
   0410 ED                 1101 	mov	a,r5
                           1102 ;	Peephole 236.a	used r2 instead of ar2
   0411 2A                 1103 	add	a,r2
   0412 F6                 1104 	mov	@r0,a
                           1105 ;	Peephole 236.g	used r6 instead of ar6
   0413 EE                 1106 	mov	a,r6
                           1107 ;	Peephole 236.b	used r3 instead of ar3
   0414 3B                 1108 	addc	a,r3
   0415 08                 1109 	inc	r0
   0416 F6                 1110 	mov	@r0,a
   0417 08                 1111 	inc	r0
   0418 A6 04              1112 	mov	@r0,ar4
                           1113 ;	genPlus
   041A E5*00              1114 	mov	a,_bp
   041C 24 10              1115 	add	a,#0x10
   041E F8                 1116 	mov	r0,a
                           1117 ;     genPlusIncr
   041F 74 03              1118 	mov	a,#0x03
   0421 26                 1119 	add	a,@r0
   0422 FD                 1120 	mov	r5,a
                           1121 ;	Peephole 181	changed mov to clr
   0423 E4                 1122 	clr	a
   0424 08                 1123 	inc	r0
   0425 36                 1124 	addc	a,@r0
   0426 FE                 1125 	mov	r6,a
   0427 08                 1126 	inc	r0
   0428 86 07              1127 	mov	ar7,@r0
                           1128 ;	genPointerGet
                           1129 ;	genGenPointerGet
   042A 8D 82              1130 	mov	dpl,r5
   042C 8E 83              1131 	mov	dph,r6
   042E 8F F0              1132 	mov	b,r7
   0430 12s00r00           1133 	lcall	__gptrget
   0433 FD                 1134 	mov	r5,a
                           1135 ;	genCast
                           1136 ;	genLeftShift
                           1137 ;	genLeftShiftLiteral
                           1138 ;	Peephole 3.c	changed mov to clr
                           1139 ;	Peephole 3.b	changed mov to clr
   0434 E4                 1140 	clr	a
   0435 FE                 1141 	mov	r6,a
   0436 FF                 1142 	mov	r7,a
   0437 FA                 1143 	mov	r2,a
   0438 E5*00              1144 	mov	a,_bp
   043A 24 13              1145 	add	a,#0x13
                           1146 ;	genlshFour
                           1147 ;	Peephole 185	changed order of increment (acc incremented also!)
   043C 04                 1148 	inc	a
                           1149 ;	Peephole 185	changed order of increment (acc incremented also!)
   043D 04                 1150 	inc	a
                           1151 ;	Peephole 185	changed order of increment (acc incremented also!)
   043E 04                 1152 	inc	a
   043F F8                 1153 	mov	r0,a
   0440 A6 05              1154 	mov	@r0,ar5
   0442 18                 1155 	dec	r0
   0443 18                 1156 	dec	r0
   0444 18                 1157 	dec	r0
   0445 76 00              1158 	mov	@r0,#0x00
   0447 08                 1159 	inc	r0
   0448 76 00              1160 	mov	@r0,#0x00
   044A 08                 1161 	inc	r0
   044B 76 00              1162 	mov	@r0,#0x00
                           1163 ;	genPlus
   044D E5*00              1164 	mov	a,_bp
   044F 24 10              1165 	add	a,#0x10
   0451 F8                 1166 	mov	r0,a
                           1167 ;     genPlusIncr
   0452 74 02              1168 	mov	a,#0x02
   0454 26                 1169 	add	a,@r0
   0455 FB                 1170 	mov	r3,a
                           1171 ;	Peephole 181	changed mov to clr
   0456 E4                 1172 	clr	a
   0457 08                 1173 	inc	r0
   0458 36                 1174 	addc	a,@r0
   0459 FC                 1175 	mov	r4,a
   045A 08                 1176 	inc	r0
   045B 86 02              1177 	mov	ar2,@r0
                           1178 ;	genPointerGet
                           1179 ;	genGenPointerGet
   045D 8B 82              1180 	mov	dpl,r3
   045F 8C 83              1181 	mov	dph,r4
   0461 8A F0              1182 	mov	b,r2
   0463 12s00r00           1183 	lcall	__gptrget
   0466 FB                 1184 	mov	r3,a
                           1185 ;	genCast
   0467 7A 00              1186 	mov	r2,#0x00
   0469 7C 00              1187 	mov	r4,#0x00
                           1188 ;	genLeftShift
                           1189 ;	genLeftShiftLiteral
                           1190 ;	genlshFour
                           1191 ;	peephole 177.e	removed redundant move
   046B 8A 05              1192 	mov	ar5,r2
   046D 8B 04              1193 	mov	ar4,r3
                           1194 ;	genOr
                           1195 ;	Peephole 3.c	changed mov to clr
   046F E4                 1196 	clr	a
   0470 FA                 1197 	mov	r2,a
   0471 FB                 1198 	mov	r3,a
   0472 E5*00              1199 	mov	a,_bp
   0474 24 13              1200 	add	a,#0x13
   0476 F8                 1201 	mov	r0,a
   0477 EB                 1202 	mov	a,r3
   0478 46                 1203 	orl	a,@r0
   0479 F6                 1204 	mov	@r0,a
   047A EA                 1205 	mov	a,r2
   047B 08                 1206 	inc	r0
   047C 46                 1207 	orl	a,@r0
   047D F6                 1208 	mov	@r0,a
   047E EC                 1209 	mov	a,r4
   047F 08                 1210 	inc	r0
   0480 46                 1211 	orl	a,@r0
   0481 F6                 1212 	mov	@r0,a
   0482 ED                 1213 	mov	a,r5
   0483 08                 1214 	inc	r0
   0484 46                 1215 	orl	a,@r0
   0485 F6                 1216 	mov	@r0,a
                           1217 ;	genPlus
   0486 E5*00              1218 	mov	a,_bp
   0488 24 10              1219 	add	a,#0x10
   048A F8                 1220 	mov	r0,a
                           1221 ;     genPlusIncr
   048B 74 01              1222 	mov	a,#0x01
   048D 26                 1223 	add	a,@r0
   048E FE                 1224 	mov	r6,a
                           1225 ;	Peephole 181	changed mov to clr
   048F E4                 1226 	clr	a
   0490 08                 1227 	inc	r0
   0491 36                 1228 	addc	a,@r0
   0492 FF                 1229 	mov	r7,a
   0493 08                 1230 	inc	r0
   0494 86 02              1231 	mov	ar2,@r0
                           1232 ;	genPointerGet
                           1233 ;	genGenPointerGet
   0496 8E 82              1234 	mov	dpl,r6
   0498 8F 83              1235 	mov	dph,r7
   049A 8A F0              1236 	mov	b,r2
   049C 12s00r00           1237 	lcall	__gptrget
   049F FE                 1238 	mov	r6,a
                           1239 ;	genCast
                           1240 ;	genLeftShift
                           1241 ;	genLeftShiftLiteral
                           1242 ;	genlshTwo
                           1243 ;	peephole 177.e	removed redundant move
   04A0 8E 02              1244 	mov	ar2,r6
                           1245 ;	genCast
                           1246 ;	genOr
                           1247 ;	Peephole 3.c	changed mov to clr
                           1248 ;	Peephole 3.b	changed mov to clr
   04A2 E4                 1249 	clr	a
   04A3 FE                 1250 	mov	r6,a
   04A4 FB                 1251 	mov	r3,a
   04A5 FC                 1252 	mov	r4,a
   04A6 E5*00              1253 	mov	a,_bp
   04A8 24 13              1254 	add	a,#0x13
   04AA F8                 1255 	mov	r0,a
   04AB EE                 1256 	mov	a,r6
   04AC 46                 1257 	orl	a,@r0
   04AD F6                 1258 	mov	@r0,a
   04AE EA                 1259 	mov	a,r2
   04AF 08                 1260 	inc	r0
   04B0 46                 1261 	orl	a,@r0
   04B1 F6                 1262 	mov	@r0,a
   04B2 EB                 1263 	mov	a,r3
   04B3 08                 1264 	inc	r0
   04B4 46                 1265 	orl	a,@r0
   04B5 F6                 1266 	mov	@r0,a
   04B6 EC                 1267 	mov	a,r4
   04B7 08                 1268 	inc	r0
   04B8 46                 1269 	orl	a,@r0
   04B9 F6                 1270 	mov	@r0,a
                           1271 ;	genPointerGet
                           1272 ;	genGenPointerGet
   04BA E5*00              1273 	mov	a,_bp
   04BC 24 10              1274 	add	a,#0x10
   04BE F8                 1275 	mov	r0,a
   04BF 86 82              1276 	mov	dpl,@r0
   04C1 08                 1277 	inc	r0
   04C2 86 83              1278 	mov	dph,@r0
   04C4 08                 1279 	inc	r0
   04C5 86 F0              1280 	mov	b,@r0
   04C7 12s00r00           1281 	lcall	__gptrget
   04CA FD                 1282 	mov	r5,a
                           1283 ;	genCast
                           1284 ;	genOr
                           1285 ;	Peephole 3.c	changed mov to clr
                           1286 ;	Peephole 3.b	changed mov to clr
   04CB E4                 1287 	clr	a
   04CC FF                 1288 	mov	r7,a
   04CD FA                 1289 	mov	r2,a
   04CE FB                 1290 	mov	r3,a
   04CF E5*00              1291 	mov	a,_bp
   04D1 24 13              1292 	add	a,#0x13
   04D3 F8                 1293 	mov	r0,a
   04D4 E6                 1294 	mov	a,@r0
   04D5 42 05              1295 	orl	ar5,a
   04D7 08                 1296 	inc	r0
   04D8 E6                 1297 	mov	a,@r0
   04D9 42 07              1298 	orl	ar7,a
   04DB 08                 1299 	inc	r0
   04DC E6                 1300 	mov	a,@r0
   04DD 42 02              1301 	orl	ar2,a
   04DF 08                 1302 	inc	r0
   04E0 E6                 1303 	mov	a,@r0
   04E1 42 03              1304 	orl	ar3,a
                           1305 ;	genAnd
   04E3 53 03 0F           1306 	anl	ar3,#0x0F
                           1307 ;	genRet
   04E6 8D 82              1308 	mov	dpl,r5
   04E8 8F 83              1309 	mov	dph,r7
   04EA 8A F0              1310 	mov	b,r2
   04EC EB                 1311 	mov	a,r3
                    04ED   1312 	C$tff.c$165$1$1 ==.
                           1313 ;	tff.c:165: }
                           1314 ;	Peephole 112.b	changed ljmp to sjmp
   04ED 80 06              1315 	sjmp	00116$
   04EF                    1316 00114$:
                    04EF   1317 	C$tff.c$168$1$1 ==.
                           1318 ;	tff.c:168: return 1;	/* There is no cluster information, or an error occured */
                           1319 ;	genRet
                           1320 ;	Peephole 3.a	changed mov to clr
                           1321 ;	Peephole 3.b	changed mov to clr
                           1322 ;	Peephole 182.d	used 16 bit load of dptr
   04EF 90 00 01           1323 	mov	dptr,#(0x01&0x00ff)
   04F2 E4                 1324 	clr	a
   04F3 F5 F0              1325 	mov	b,a
   04F5                    1326 00116$:
   04F5 85*00 81           1327 	mov	sp,_bp
   04F8 D0*00              1328 	pop	_bp
                    04FA   1329 	C$tff.c$169$1$1 ==.
                    04FA   1330 	XFtff$get_cluster$0$0 ==.
   04FA 22                 1331 	ret
                           1332 ;------------------------------------------------------------
                           1333 ;Allocation info for local variables in function 'clust2sect'
                           1334 ;------------------------------------------------------------
                           1335 ;clust                     Allocated to stack - offset 1
                           1336 ;fs                        Allocated to stack - offset 5
                           1337 ;sloc0                     Allocated to stack - offset 8
                           1338 ;------------------------------------------------------------
                    04FB   1339 	Ftff$clust2sect$0$0 ==.
                    04FB   1340 	C$tff.c$321$1$1 ==.
                           1341 ;	tff.c:321: DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
                           1342 ;	-----------------------------------------
                           1343 ;	 function clust2sect
                           1344 ;	-----------------------------------------
   04FB                    1345 _clust2sect:
   04FB C0*00              1346 	push	_bp
   04FD 85 81*00           1347 	mov	_bp,sp
                           1348 ;     genReceive
   0500 C0 82              1349 	push	dpl
   0502 C0 83              1350 	push	dph
   0504 C0 F0              1351 	push	b
   0506 C0 E0              1352 	push	acc
   0508 E5 81              1353 	mov	a,sp
   050A 24 0B              1354 	add	a,#0x0b
   050C F5 81              1355 	mov	sp,a
                    050E   1356 	C$tff.c$325$1$1 ==.
                           1357 ;	tff.c:325: FATFS *fs = FatFs;
                           1358 ;	genAssign
   050E E5*00              1359 	mov	a,_bp
   0510 24 05              1360 	add	a,#0x05
   0512 F8                 1361 	mov	r0,a
   0513 A6*00              1362 	mov	@r0,_FatFs
   0515 08                 1363 	inc	r0
   0516 A6*01              1364 	mov	@r0,(_FatFs + 1)
   0518 08                 1365 	inc	r0
   0519 A6*02              1366 	mov	@r0,(_FatFs + 2)
                    051B   1367 	C$tff.c$328$1$1 ==.
                           1368 ;	tff.c:328: clust -= 2;
                           1369 ;	genMinus
   051B A8*00              1370 	mov	r0,_bp
   051D 08                 1371 	inc	r0
                           1372 ;	genMinusDec
   051E E6                 1373 	mov	a,@r0
   051F 24 FE              1374 	add	a,#0xfe
   0521 F6                 1375 	mov	@r0,a
   0522 08                 1376 	inc	r0
   0523 E6                 1377 	mov	a,@r0
   0524 34 FF              1378 	addc	a,#0xff
   0526 F6                 1379 	mov	@r0,a
   0527 08                 1380 	inc	r0
   0528 E6                 1381 	mov	a,@r0
   0529 34 FF              1382 	addc	a,#0xff
   052B F6                 1383 	mov	@r0,a
   052C 08                 1384 	inc	r0
   052D E6                 1385 	mov	a,@r0
   052E 34 FF              1386 	addc	a,#0xff
   0530 F6                 1387 	mov	@r0,a
                    0531   1388 	C$tff.c$329$1$1 ==.
                           1389 ;	tff.c:329: if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
                           1390 ;	genPlus
   0531 E5*00              1391 	mov	a,_bp
   0533 24 05              1392 	add	a,#0x05
   0535 F8                 1393 	mov	r0,a
                           1394 ;     genPlusIncr
   0536 74 18              1395 	mov	a,#0x18
   0538 26                 1396 	add	a,@r0
   0539 FB                 1397 	mov	r3,a
                           1398 ;	Peephole 181	changed mov to clr
   053A E4                 1399 	clr	a
   053B 08                 1400 	inc	r0
   053C 36                 1401 	addc	a,@r0
   053D FC                 1402 	mov	r4,a
   053E 08                 1403 	inc	r0
   053F 86 05              1404 	mov	ar5,@r0
                           1405 ;	genPointerGet
                           1406 ;	genGenPointerGet
   0541 8B 82              1407 	mov	dpl,r3
   0543 8C 83              1408 	mov	dph,r4
   0545 8D F0              1409 	mov	b,r5
   0547 12s00r00           1410 	lcall	__gptrget
   054A FB                 1411 	mov	r3,a
   054B A3                 1412 	inc	dptr
   054C 12s00r00           1413 	lcall	__gptrget
   054F FC                 1414 	mov	r4,a
   0550 A3                 1415 	inc	dptr
   0551 12s00r00           1416 	lcall	__gptrget
   0554 FD                 1417 	mov	r5,a
   0555 A3                 1418 	inc	dptr
   0556 12s00r00           1419 	lcall	__gptrget
   0559 FA                 1420 	mov	r2,a
                           1421 ;	genMinus
                           1422 ;	genMinusDec
   055A EB                 1423 	mov	a,r3
   055B 24 FE              1424 	add	a,#0xfe
   055D FB                 1425 	mov	r3,a
   055E EC                 1426 	mov	a,r4
   055F 34 FF              1427 	addc	a,#0xff
   0561 FC                 1428 	mov	r4,a
   0562 ED                 1429 	mov	a,r5
   0563 34 FF              1430 	addc	a,#0xff
   0565 FD                 1431 	mov	r5,a
   0566 EA                 1432 	mov	a,r2
   0567 34 FF              1433 	addc	a,#0xff
   0569 FA                 1434 	mov	r2,a
                           1435 ;	genCmpLt
   056A A8*00              1436 	mov	r0,_bp
   056C 08                 1437 	inc	r0
                           1438 ;	genCmp
   056D C3                 1439 	clr	c
   056E E6                 1440 	mov	a,@r0
   056F 9B                 1441 	subb	a,r3
   0570 08                 1442 	inc	r0
   0571 E6                 1443 	mov	a,@r0
   0572 9C                 1444 	subb	a,r4
   0573 08                 1445 	inc	r0
   0574 E6                 1446 	mov	a,@r0
   0575 9D                 1447 	subb	a,r5
   0576 08                 1448 	inc	r0
   0577 E6                 1449 	mov	a,@r0
   0578 9A                 1450 	subb	a,r2
                           1451 ;	genIfxJump
                           1452 ;	Peephole 112.b	changed ljmp to sjmp
                           1453 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0579 40 09              1454 	jc	00102$
                           1455 ;	Peephole 300	removed redundant label 00106$
                           1456 ;	genRet
                           1457 ;	Peephole 3.a	changed mov to clr
                           1458 ;	Peephole 3.b	changed mov to clr
                           1459 ;	Peephole 182.d	used 16 bit load of dptr
   057B 90 00 00           1460 	mov	dptr,#(0x00&0x00ff)
   057E E4                 1461 	clr	a
   057F F5 F0              1462 	mov	b,a
   0581 02s06r18           1463 	ljmp	00103$
   0584                    1464 00102$:
                    0584   1465 	C$tff.c$330$1$1 ==.
                           1466 ;	tff.c:330: return (DWORD)clust * fs->sects_clust + fs->database;
                           1467 ;	genPlus
   0584 E5*00              1468 	mov	a,_bp
   0586 24 05              1469 	add	a,#0x05
   0588 F8                 1470 	mov	r0,a
                           1471 ;     genPlusIncr
   0589 74 1D              1472 	mov	a,#0x1D
   058B 26                 1473 	add	a,@r0
   058C FA                 1474 	mov	r2,a
                           1475 ;	Peephole 181	changed mov to clr
   058D E4                 1476 	clr	a
   058E 08                 1477 	inc	r0
   058F 36                 1478 	addc	a,@r0
   0590 FB                 1479 	mov	r3,a
   0591 08                 1480 	inc	r0
   0592 86 04              1481 	mov	ar4,@r0
                           1482 ;	genPointerGet
                           1483 ;	genGenPointerGet
   0594 8A 82              1484 	mov	dpl,r2
   0596 8B 83              1485 	mov	dph,r3
   0598 8C F0              1486 	mov	b,r4
   059A 12s00r00           1487 	lcall	__gptrget
   059D FA                 1488 	mov	r2,a
                           1489 ;	genCast
   059E 7B 00              1490 	mov	r3,#0x00
   05A0 7C 00              1491 	mov	r4,#0x00
   05A2 7D 00              1492 	mov	r5,#0x00
                           1493 ;	genIpush
   05A4 C0 02              1494 	push	ar2
   05A6 C0 03              1495 	push	ar3
   05A8 C0 04              1496 	push	ar4
   05AA C0 05              1497 	push	ar5
                           1498 ;	genCall
   05AC A8*00              1499 	mov	r0,_bp
   05AE 08                 1500 	inc	r0
   05AF 86 82              1501 	mov	dpl,@r0
   05B1 08                 1502 	inc	r0
   05B2 86 83              1503 	mov	dph,@r0
   05B4 08                 1504 	inc	r0
   05B5 86 F0              1505 	mov	b,@r0
   05B7 08                 1506 	inc	r0
   05B8 E6                 1507 	mov	a,@r0
   05B9 12s00r00           1508 	lcall	__mullong
   05BC C0 E0              1509 	push	acc
   05BE E5*00              1510 	mov	a,_bp
   05C0 24 08              1511 	add	a,#0x08
   05C2 F8                 1512 	mov	r0,a
   05C3 D0 E0              1513 	pop	acc
   05C5 A6 82              1514 	mov	@r0,dpl
   05C7 08                 1515 	inc	r0
   05C8 A6 83              1516 	mov	@r0,dph
   05CA 08                 1517 	inc	r0
   05CB A6 F0              1518 	mov	@r0,b
   05CD 08                 1519 	inc	r0
   05CE F6                 1520 	mov	@r0,a
   05CF E5 81              1521 	mov	a,sp
   05D1 24 FC              1522 	add	a,#0xfc
   05D3 F5 81              1523 	mov	sp,a
                           1524 ;	genPlus
   05D5 E5*00              1525 	mov	a,_bp
   05D7 24 05              1526 	add	a,#0x05
   05D9 F8                 1527 	mov	r0,a
                           1528 ;     genPlusIncr
   05DA 74 10              1529 	mov	a,#0x10
   05DC 26                 1530 	add	a,@r0
   05DD FE                 1531 	mov	r6,a
                           1532 ;	Peephole 181	changed mov to clr
   05DE E4                 1533 	clr	a
   05DF 08                 1534 	inc	r0
   05E0 36                 1535 	addc	a,@r0
   05E1 FF                 1536 	mov	r7,a
   05E2 08                 1537 	inc	r0
   05E3 86 02              1538 	mov	ar2,@r0
                           1539 ;	genPointerGet
                           1540 ;	genGenPointerGet
   05E5 8E 82              1541 	mov	dpl,r6
   05E7 8F 83              1542 	mov	dph,r7
   05E9 8A F0              1543 	mov	b,r2
   05EB 12s00r00           1544 	lcall	__gptrget
   05EE FE                 1545 	mov	r6,a
   05EF A3                 1546 	inc	dptr
   05F0 12s00r00           1547 	lcall	__gptrget
   05F3 FF                 1548 	mov	r7,a
   05F4 A3                 1549 	inc	dptr
   05F5 12s00r00           1550 	lcall	__gptrget
   05F8 FA                 1551 	mov	r2,a
   05F9 A3                 1552 	inc	dptr
   05FA 12s00r00           1553 	lcall	__gptrget
   05FD FB                 1554 	mov	r3,a
                           1555 ;	genPlus
   05FE E5*00              1556 	mov	a,_bp
   0600 24 08              1557 	add	a,#0x08
   0602 F8                 1558 	mov	r0,a
                           1559 ;	Peephole 236.g	used r6 instead of ar6
   0603 EE                 1560 	mov	a,r6
   0604 26                 1561 	add	a,@r0
   0605 FE                 1562 	mov	r6,a
                           1563 ;	Peephole 236.g	used r7 instead of ar7
   0606 EF                 1564 	mov	a,r7
   0607 08                 1565 	inc	r0
   0608 36                 1566 	addc	a,@r0
   0609 FF                 1567 	mov	r7,a
                           1568 ;	Peephole 236.g	used r2 instead of ar2
   060A EA                 1569 	mov	a,r2
   060B 08                 1570 	inc	r0
   060C 36                 1571 	addc	a,@r0
   060D FA                 1572 	mov	r2,a
                           1573 ;	Peephole 236.g	used r3 instead of ar3
   060E EB                 1574 	mov	a,r3
   060F 08                 1575 	inc	r0
   0610 36                 1576 	addc	a,@r0
                           1577 ;	genRet
   0611 FB                 1578 	mov	r3,a
   0612 8E 82              1579 	mov	dpl,r6
   0614 8F 83              1580 	mov	dph,r7
   0616 8A F0              1581 	mov	b,r2
                           1582 ;	Peephole 191	removed redundant mov
   0618                    1583 00103$:
   0618 85*00 81           1584 	mov	sp,_bp
   061B D0*00              1585 	pop	_bp
                    061D   1586 	C$tff.c$331$1$1 ==.
                    061D   1587 	XFtff$clust2sect$0$0 ==.
   061D 22                 1588 	ret
                           1589 ;------------------------------------------------------------
                           1590 ;Allocation info for local variables in function 'next_dir_entry'
                           1591 ;------------------------------------------------------------
                           1592 ;dirobj                    Allocated to stack - offset 1
                           1593 ;clust                     Allocated to stack - offset 4
                           1594 ;idx                       Allocated to stack - offset 8
                           1595 ;fs                        Allocated to stack - offset 10
                           1596 ;sloc0                     Allocated to stack - offset 13
                           1597 ;sloc1                     Allocated to stack - offset 16
                           1598 ;sloc2                     Allocated to stack - offset 19
                           1599 ;sloc3                     Allocated to stack - offset 23
                           1600 ;------------------------------------------------------------
                    061E   1601 	Ftff$next_dir_entry$0$0 ==.
                    061E   1602 	C$tff.c$341$1$1 ==.
                           1603 ;	tff.c:341: BOOL next_dir_entry (	/* TRUE: successful, FALSE: could not move next */
                           1604 ;	-----------------------------------------
                           1605 ;	 function next_dir_entry
                           1606 ;	-----------------------------------------
   061E                    1607 _next_dir_entry:
   061E C0*00              1608 	push	_bp
   0620 85 81*00           1609 	mov	_bp,sp
                           1610 ;     genReceive
   0623 C0 82              1611 	push	dpl
   0625 C0 83              1612 	push	dph
   0627 C0 F0              1613 	push	b
   0629 E5 81              1614 	mov	a,sp
   062B 24 19              1615 	add	a,#0x19
   062D F5 81              1616 	mov	sp,a
                    062F   1617 	C$tff.c$347$1$1 ==.
                           1618 ;	tff.c:347: FATFS *fs = FatFs;
                           1619 ;	genAssign
   062F E5*00              1620 	mov	a,_bp
   0631 24 0A              1621 	add	a,#0x0a
   0633 F8                 1622 	mov	r0,a
   0634 A6*00              1623 	mov	@r0,_FatFs
   0636 08                 1624 	inc	r0
   0637 A6*01              1625 	mov	@r0,(_FatFs + 1)
   0639 08                 1626 	inc	r0
   063A A6*02              1627 	mov	@r0,(_FatFs + 2)
                    063C   1628 	C$tff.c$350$1$1 ==.
                           1629 ;	tff.c:350: idx = dirobj->index + 1;
                           1630 ;	genPlus
   063C A8*00              1631 	mov	r0,_bp
   063E 08                 1632 	inc	r0
   063F E5*00              1633 	mov	a,_bp
   0641 24 17              1634 	add	a,#0x17
   0643 F9                 1635 	mov	r1,a
                           1636 ;     genPlusIncr
   0644 74 02              1637 	mov	a,#0x02
   0646 26                 1638 	add	a,@r0
   0647 F7                 1639 	mov	@r1,a
                           1640 ;	Peephole 181	changed mov to clr
   0648 E4                 1641 	clr	a
   0649 08                 1642 	inc	r0
   064A 36                 1643 	addc	a,@r0
   064B 09                 1644 	inc	r1
   064C F7                 1645 	mov	@r1,a
   064D 08                 1646 	inc	r0
   064E 09                 1647 	inc	r1
   064F E6                 1648 	mov	a,@r0
   0650 F7                 1649 	mov	@r1,a
                           1650 ;	genPointerGet
                           1651 ;	genGenPointerGet
   0651 E5*00              1652 	mov	a,_bp
   0653 24 17              1653 	add	a,#0x17
   0655 F8                 1654 	mov	r0,a
   0656 86 82              1655 	mov	dpl,@r0
   0658 08                 1656 	inc	r0
   0659 86 83              1657 	mov	dph,@r0
   065B 08                 1658 	inc	r0
   065C 86 F0              1659 	mov	b,@r0
   065E 12s00r00           1660 	lcall	__gptrget
   0661 FA                 1661 	mov	r2,a
   0662 A3                 1662 	inc	dptr
   0663 12s00r00           1663 	lcall	__gptrget
   0666 FB                 1664 	mov	r3,a
                           1665 ;	genPlus
   0667 E5*00              1666 	mov	a,_bp
   0669 24 08              1667 	add	a,#0x08
   066B F8                 1668 	mov	r0,a
                           1669 ;     genPlusIncr
   066C 74 01              1670 	mov	a,#0x01
                           1671 ;	Peephole 236.a	used r2 instead of ar2
   066E 2A                 1672 	add	a,r2
   066F F6                 1673 	mov	@r0,a
                           1674 ;	Peephole 181	changed mov to clr
   0670 E4                 1675 	clr	a
                           1676 ;	Peephole 236.b	used r3 instead of ar3
   0671 3B                 1677 	addc	a,r3
   0672 08                 1678 	inc	r0
   0673 F6                 1679 	mov	@r0,a
                    0674   1680 	C$tff.c$351$1$1 ==.
                           1681 ;	tff.c:351: if ((idx & 15) == 0) {		/* Table sector changed? */
                           1682 ;	genAnd
   0674 E5*00              1683 	mov	a,_bp
   0676 24 08              1684 	add	a,#0x08
   0678 F8                 1685 	mov	r0,a
   0679 E6                 1686 	mov	a,@r0
   067A 54 0F              1687 	anl	a,#0x0F
                           1688 ;	Peephole 160.c	removed sjmp by inverse jump logic
   067C 60 03              1689 	jz	00121$
                           1690 ;	Peephole 300	removed redundant label 00120$
   067E 02s08r8A           1691 	ljmp	00112$
   0681                    1692 00121$:
                    0681   1693 	C$tff.c$352$1$1 ==.
                           1694 ;	tff.c:352: dirobj->sect++;			/* Next sector */
                           1695 ;	genIpush
                           1696 ;	genPlus
   0681 A8*00              1697 	mov	r0,_bp
   0683 08                 1698 	inc	r0
   0684 E5*00              1699 	mov	a,_bp
   0686 24 0D              1700 	add	a,#0x0d
   0688 F9                 1701 	mov	r1,a
                           1702 ;     genPlusIncr
   0689 74 0F              1703 	mov	a,#0x0F
   068B 26                 1704 	add	a,@r0
   068C F7                 1705 	mov	@r1,a
                           1706 ;	Peephole 181	changed mov to clr
   068D E4                 1707 	clr	a
   068E 08                 1708 	inc	r0
   068F 36                 1709 	addc	a,@r0
   0690 09                 1710 	inc	r1
   0691 F7                 1711 	mov	@r1,a
   0692 08                 1712 	inc	r0
   0693 09                 1713 	inc	r1
   0694 E6                 1714 	mov	a,@r0
   0695 F7                 1715 	mov	@r1,a
                           1716 ;	genPointerGet
                           1717 ;	genGenPointerGet
   0696 E5*00              1718 	mov	a,_bp
   0698 24 0D              1719 	add	a,#0x0d
   069A F8                 1720 	mov	r0,a
   069B 86 82              1721 	mov	dpl,@r0
   069D 08                 1722 	inc	r0
   069E 86 83              1723 	mov	dph,@r0
   06A0 08                 1724 	inc	r0
   06A1 86 F0              1725 	mov	b,@r0
   06A3 12s00r00           1726 	lcall	__gptrget
   06A6 FC                 1727 	mov	r4,a
   06A7 A3                 1728 	inc	dptr
   06A8 12s00r00           1729 	lcall	__gptrget
   06AB FD                 1730 	mov	r5,a
   06AC A3                 1731 	inc	dptr
   06AD 12s00r00           1732 	lcall	__gptrget
   06B0 FE                 1733 	mov	r6,a
   06B1 A3                 1734 	inc	dptr
   06B2 12s00r00           1735 	lcall	__gptrget
   06B5 FF                 1736 	mov	r7,a
                           1737 ;	genPlus
                           1738 ;     genPlusIncr
   06B6 0C                 1739 	inc	r4
   06B7 BC 00 09           1740 	cjne	r4,#0x00,00122$
   06BA 0D                 1741 	inc	r5
   06BB BD 00 05           1742 	cjne	r5,#0x00,00122$
   06BE 0E                 1743 	inc	r6
   06BF BE 00 01           1744 	cjne	r6,#0x00,00122$
   06C2 0F                 1745 	inc	r7
   06C3                    1746 00122$:
                           1747 ;	genPointerSet
                           1748 ;	genGenPointerSet
   06C3 E5*00              1749 	mov	a,_bp
   06C5 24 0D              1750 	add	a,#0x0d
   06C7 F8                 1751 	mov	r0,a
   06C8 86 82              1752 	mov	dpl,@r0
   06CA 08                 1753 	inc	r0
   06CB 86 83              1754 	mov	dph,@r0
   06CD 08                 1755 	inc	r0
   06CE 86 F0              1756 	mov	b,@r0
   06D0 EC                 1757 	mov	a,r4
   06D1 12s00r00           1758 	lcall	__gptrput
   06D4 A3                 1759 	inc	dptr
   06D5 ED                 1760 	mov	a,r5
   06D6 12s00r00           1761 	lcall	__gptrput
   06D9 A3                 1762 	inc	dptr
   06DA EE                 1763 	mov	a,r6
   06DB 12s00r00           1764 	lcall	__gptrput
   06DE A3                 1765 	inc	dptr
   06DF EF                 1766 	mov	a,r7
   06E0 12s00r00           1767 	lcall	__gptrput
                    06E3   1768 	C$tff.c$353$2$2 ==.
                           1769 ;	tff.c:353: if (!dirobj->clust) {		/* In static table */
                           1770 ;	genPlus
   06E3 A8*00              1771 	mov	r0,_bp
   06E5 08                 1772 	inc	r0
   06E6 E5*00              1773 	mov	a,_bp
   06E8 24 10              1774 	add	a,#0x10
   06EA F9                 1775 	mov	r1,a
                           1776 ;     genPlusIncr
   06EB 74 0B              1777 	mov	a,#0x0B
   06ED 26                 1778 	add	a,@r0
   06EE F7                 1779 	mov	@r1,a
                           1780 ;	Peephole 181	changed mov to clr
   06EF E4                 1781 	clr	a
   06F0 08                 1782 	inc	r0
   06F1 36                 1783 	addc	a,@r0
   06F2 09                 1784 	inc	r1
   06F3 F7                 1785 	mov	@r1,a
   06F4 08                 1786 	inc	r0
   06F5 09                 1787 	inc	r1
   06F6 E6                 1788 	mov	a,@r0
   06F7 F7                 1789 	mov	@r1,a
                           1790 ;	genPointerGet
                           1791 ;	genGenPointerGet
   06F8 E5*00              1792 	mov	a,_bp
   06FA 24 10              1793 	add	a,#0x10
   06FC F8                 1794 	mov	r0,a
   06FD 86 82              1795 	mov	dpl,@r0
   06FF 08                 1796 	inc	r0
   0700 86 83              1797 	mov	dph,@r0
   0702 08                 1798 	inc	r0
   0703 86 F0              1799 	mov	b,@r0
   0705 E5*00              1800 	mov	a,_bp
   0707 24 13              1801 	add	a,#0x13
   0709 F9                 1802 	mov	r1,a
   070A 12s00r00           1803 	lcall	__gptrget
   070D F7                 1804 	mov	@r1,a
   070E A3                 1805 	inc	dptr
   070F 12s00r00           1806 	lcall	__gptrget
   0712 09                 1807 	inc	r1
   0713 F7                 1808 	mov	@r1,a
   0714 A3                 1809 	inc	dptr
   0715 12s00r00           1810 	lcall	__gptrget
   0718 09                 1811 	inc	r1
   0719 F7                 1812 	mov	@r1,a
   071A A3                 1813 	inc	dptr
   071B 12s00r00           1814 	lcall	__gptrget
   071E 09                 1815 	inc	r1
   071F F7                 1816 	mov	@r1,a
                           1817 ;	genIpop
                           1818 ;	genIfx
   0720 E5*00              1819 	mov	a,_bp
   0722 24 13              1820 	add	a,#0x13
   0724 F8                 1821 	mov	r0,a
   0725 E6                 1822 	mov	a,@r0
   0726 08                 1823 	inc	r0
   0727 46                 1824 	orl	a,@r0
   0728 08                 1825 	inc	r0
   0729 46                 1826 	orl	a,@r0
   072A 08                 1827 	inc	r0
   072B 46                 1828 	orl	a,@r0
                           1829 ;	genIfxJump
                           1830 ;	Peephole 108.b	removed ljmp by inverse jump logic
   072C 70 35              1831 	jnz	00109$
                           1832 ;	Peephole 300	removed redundant label 00123$
                    072E   1833 	C$tff.c$354$1$1 ==.
                           1834 ;	tff.c:354: if (idx >= fs->n_rootdir) return FALSE;	/* Reached to end of table */
                           1835 ;	genIpush
                           1836 ;	genPlus
   072E E5*00              1837 	mov	a,_bp
   0730 24 0A              1838 	add	a,#0x0a
   0732 F8                 1839 	mov	r0,a
                           1840 ;     genPlusIncr
   0733 74 02              1841 	mov	a,#0x02
   0735 26                 1842 	add	a,@r0
   0736 FC                 1843 	mov	r4,a
                           1844 ;	Peephole 181	changed mov to clr
   0737 E4                 1845 	clr	a
   0738 08                 1846 	inc	r0
   0739 36                 1847 	addc	a,@r0
   073A FD                 1848 	mov	r5,a
   073B 08                 1849 	inc	r0
   073C 86 06              1850 	mov	ar6,@r0
                           1851 ;	genPointerGet
                           1852 ;	genGenPointerGet
   073E 8C 82              1853 	mov	dpl,r4
   0740 8D 83              1854 	mov	dph,r5
   0742 8E F0              1855 	mov	b,r6
   0744 12s00r00           1856 	lcall	__gptrget
   0747 FC                 1857 	mov	r4,a
   0748 A3                 1858 	inc	dptr
   0749 12s00r00           1859 	lcall	__gptrget
   074C FD                 1860 	mov	r5,a
                           1861 ;	genCmpLt
   074D E5*00              1862 	mov	a,_bp
   074F 24 08              1863 	add	a,#0x08
   0751 F8                 1864 	mov	r0,a
                           1865 ;	genCmp
   0752 C3                 1866 	clr	c
   0753 E6                 1867 	mov	a,@r0
   0754 9C                 1868 	subb	a,r4
   0755 08                 1869 	inc	r0
   0756 E6                 1870 	mov	a,@r0
   0757 9D                 1871 	subb	a,r5
                           1872 ;	genIpop
                           1873 ;	genIfx
                           1874 ;	genIfxJump
                           1875 ;	Peephole 128	jump optimization
   0758 50 03              1876 	jnc	00124$
   075A 02s08r8A           1877 	ljmp	00112$
   075D                    1878 00124$:
                           1879 ;	genRet
   075D 75 82 00           1880 	mov	dpl,#0x00
   0760 02s08rA9           1881 	ljmp	00113$
   0763                    1882 00109$:
                    0763   1883 	C$tff.c$356$1$1 ==.
                           1884 ;	tff.c:356: if (((idx / 16) & (fs->sects_clust - 1)) == 0) {	/* Cluster changed? */
                           1885 ;	genIpush
                           1886 ;	genRightShift
                           1887 ;	genRightShiftLiteral
   0763 E5*00              1888 	mov	a,_bp
   0765 24 08              1889 	add	a,#0x08
   0767 F8                 1890 	mov	r0,a
                           1891 ;	genrshTwo
   0768 86 04              1892 	mov	ar4,@r0
   076A 08                 1893 	inc	r0
   076B E6                 1894 	mov	a,@r0
   076C C4                 1895 	swap	a
   076D CC                 1896 	xch	a,r4
   076E C4                 1897 	swap	a
   076F 54 0F              1898 	anl	a,#0x0f
   0771 6C                 1899 	xrl	a,r4
   0772 CC                 1900 	xch	a,r4
   0773 54 0F              1901 	anl	a,#0x0f
   0775 CC                 1902 	xch	a,r4
   0776 6C                 1903 	xrl	a,r4
   0777 CC                 1904 	xch	a,r4
   0778 FD                 1905 	mov	r5,a
                           1906 ;	genPlus
   0779 E5*00              1907 	mov	a,_bp
   077B 24 0A              1908 	add	a,#0x0a
   077D F8                 1909 	mov	r0,a
                           1910 ;     genPlusIncr
   077E 74 1D              1911 	mov	a,#0x1D
   0780 26                 1912 	add	a,@r0
   0781 FE                 1913 	mov	r6,a
                           1914 ;	Peephole 181	changed mov to clr
   0782 E4                 1915 	clr	a
   0783 08                 1916 	inc	r0
   0784 36                 1917 	addc	a,@r0
   0785 FF                 1918 	mov	r7,a
   0786 08                 1919 	inc	r0
   0787 86 02              1920 	mov	ar2,@r0
                           1921 ;	genPointerGet
                           1922 ;	genGenPointerGet
   0789 8E 82              1923 	mov	dpl,r6
   078B 8F 83              1924 	mov	dph,r7
   078D 8A F0              1925 	mov	b,r2
   078F 12s00r00           1926 	lcall	__gptrget
   0792 FE                 1927 	mov	r6,a
                           1928 ;	genCast
   0793 7A 00              1929 	mov	r2,#0x00
                           1930 ;	genMinus
                           1931 ;	genMinusDec
   0795 1E                 1932 	dec	r6
   0796 BE FF 01           1933 	cjne	r6,#0xff,00125$
   0799 1A                 1934 	dec	r2
   079A                    1935 00125$:
                           1936 ;	genAnd
   079A EE                 1937 	mov	a,r6
   079B 52 04              1938 	anl	ar4,a
   079D EA                 1939 	mov	a,r2
   079E 52 05              1940 	anl	ar5,a
                           1941 ;	genIfx
   07A0 EC                 1942 	mov	a,r4
   07A1 4D                 1943 	orl	a,r5
                           1944 ;	genIpop
                           1945 ;	genIfxJump
   07A2 60 03              1946 	jz	00126$
   07A4 02s08r8A           1947 	ljmp	00112$
   07A7                    1948 00126$:
                    07A7   1949 	C$tff.c$357$4$5 ==.
                           1950 ;	tff.c:357: clust = get_cluster(dirobj->clust);			/* Get next cluster */
                           1951 ;	genCall
   07A7 E5*00              1952 	mov	a,_bp
   07A9 24 13              1953 	add	a,#0x13
   07AB F8                 1954 	mov	r0,a
   07AC 86 82              1955 	mov	dpl,@r0
   07AE 08                 1956 	inc	r0
   07AF 86 83              1957 	mov	dph,@r0
   07B1 08                 1958 	inc	r0
   07B2 86 F0              1959 	mov	b,@r0
   07B4 08                 1960 	inc	r0
   07B5 E6                 1961 	mov	a,@r0
   07B6 12s00rEA           1962 	lcall	_get_cluster
   07B9 AA 82              1963 	mov	r2,dpl
   07BB AB 83              1964 	mov	r3,dph
   07BD AC F0              1965 	mov	r4,b
   07BF FD                 1966 	mov	r5,a
                           1967 ;	genAssign
   07C0 E5*00              1968 	mov	a,_bp
   07C2 24 04              1969 	add	a,#0x04
   07C4 F8                 1970 	mov	r0,a
   07C5 A6 02              1971 	mov	@r0,ar2
   07C7 08                 1972 	inc	r0
   07C8 A6 03              1973 	mov	@r0,ar3
   07CA 08                 1974 	inc	r0
   07CB A6 04              1975 	mov	@r0,ar4
   07CD 08                 1976 	inc	r0
   07CE A6 05              1977 	mov	@r0,ar5
                    07D0   1978 	C$tff.c$358$4$5 ==.
                           1979 ;	tff.c:358: if (clust < 2 || clust >= fs->max_clust)	/* Reached to end of table */
                           1980 ;	genCmpLt
   07D0 E5*00              1981 	mov	a,_bp
   07D2 24 04              1982 	add	a,#0x04
   07D4 F8                 1983 	mov	r0,a
                           1984 ;	genCmp
   07D5 C3                 1985 	clr	c
   07D6 E6                 1986 	mov	a,@r0
   07D7 94 02              1987 	subb	a,#0x02
   07D9 08                 1988 	inc	r0
   07DA E6                 1989 	mov	a,@r0
   07DB 94 00              1990 	subb	a,#0x00
   07DD 08                 1991 	inc	r0
   07DE E6                 1992 	mov	a,@r0
   07DF 94 00              1993 	subb	a,#0x00
   07E1 08                 1994 	inc	r0
   07E2 E6                 1995 	mov	a,@r0
   07E3 94 00              1996 	subb	a,#0x00
                           1997 ;	genIfxJump
                           1998 ;	Peephole 112.b	changed ljmp to sjmp
                           1999 ;	Peephole 160.a	removed sjmp by inverse jump logic
   07E5 40 3C              2000 	jc	00103$
                           2001 ;	Peephole 300	removed redundant label 00127$
                           2002 ;	genPlus
   07E7 E5*00              2003 	mov	a,_bp
   07E9 24 0A              2004 	add	a,#0x0a
   07EB F8                 2005 	mov	r0,a
                           2006 ;     genPlusIncr
   07EC 74 18              2007 	mov	a,#0x18
   07EE 26                 2008 	add	a,@r0
   07EF FE                 2009 	mov	r6,a
                           2010 ;	Peephole 181	changed mov to clr
   07F0 E4                 2011 	clr	a
   07F1 08                 2012 	inc	r0
   07F2 36                 2013 	addc	a,@r0
   07F3 FF                 2014 	mov	r7,a
   07F4 08                 2015 	inc	r0
   07F5 86 02              2016 	mov	ar2,@r0
                           2017 ;	genPointerGet
                           2018 ;	genGenPointerGet
   07F7 8E 82              2019 	mov	dpl,r6
   07F9 8F 83              2020 	mov	dph,r7
   07FB 8A F0              2021 	mov	b,r2
   07FD 12s00r00           2022 	lcall	__gptrget
   0800 FE                 2023 	mov	r6,a
   0801 A3                 2024 	inc	dptr
   0802 12s00r00           2025 	lcall	__gptrget
   0805 FF                 2026 	mov	r7,a
   0806 A3                 2027 	inc	dptr
   0807 12s00r00           2028 	lcall	__gptrget
   080A FA                 2029 	mov	r2,a
   080B A3                 2030 	inc	dptr
   080C 12s00r00           2031 	lcall	__gptrget
   080F FB                 2032 	mov	r3,a
                           2033 ;	genCmpLt
   0810 E5*00              2034 	mov	a,_bp
   0812 24 04              2035 	add	a,#0x04
   0814 F8                 2036 	mov	r0,a
                           2037 ;	genCmp
   0815 C3                 2038 	clr	c
   0816 E6                 2039 	mov	a,@r0
   0817 9E                 2040 	subb	a,r6
   0818 08                 2041 	inc	r0
   0819 E6                 2042 	mov	a,@r0
   081A 9F                 2043 	subb	a,r7
   081B 08                 2044 	inc	r0
   081C E6                 2045 	mov	a,@r0
   081D 9A                 2046 	subb	a,r2
   081E 08                 2047 	inc	r0
   081F E6                 2048 	mov	a,@r0
   0820 9B                 2049 	subb	a,r3
                           2050 ;	genIfxJump
                           2051 ;	Peephole 112.b	changed ljmp to sjmp
                           2052 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0821 40 06              2053 	jc	00104$
                           2054 ;	Peephole 300	removed redundant label 00128$
   0823                    2055 00103$:
                    0823   2056 	C$tff.c$359$4$5 ==.
                           2057 ;	tff.c:359: return FALSE;
                           2058 ;	genRet
   0823 75 82 00           2059 	mov	dpl,#0x00
   0826 02s08rA9           2060 	ljmp	00113$
   0829                    2061 00104$:
                    0829   2062 	C$tff.c$360$4$5 ==.
                           2063 ;	tff.c:360: dirobj->clust = clust;				/* Initialize for new cluster */
                           2064 ;	genPointerSet
                           2065 ;	genGenPointerSet
   0829 E5*00              2066 	mov	a,_bp
   082B 24 10              2067 	add	a,#0x10
   082D F8                 2068 	mov	r0,a
   082E 86 82              2069 	mov	dpl,@r0
   0830 08                 2070 	inc	r0
   0831 86 83              2071 	mov	dph,@r0
   0833 08                 2072 	inc	r0
   0834 86 F0              2073 	mov	b,@r0
   0836 E5*00              2074 	mov	a,_bp
   0838 24 04              2075 	add	a,#0x04
   083A F9                 2076 	mov	r1,a
   083B E7                 2077 	mov	a,@r1
   083C 12s00r00           2078 	lcall	__gptrput
   083F A3                 2079 	inc	dptr
   0840 09                 2080 	inc	r1
   0841 E7                 2081 	mov	a,@r1
   0842 12s00r00           2082 	lcall	__gptrput
   0845 A3                 2083 	inc	dptr
   0846 09                 2084 	inc	r1
   0847 E7                 2085 	mov	a,@r1
   0848 12s00r00           2086 	lcall	__gptrput
   084B A3                 2087 	inc	dptr
   084C 09                 2088 	inc	r1
   084D E7                 2089 	mov	a,@r1
   084E 12s00r00           2090 	lcall	__gptrput
                    0851   2091 	C$tff.c$361$4$5 ==.
                           2092 ;	tff.c:361: dirobj->sect = clust2sect(clust);
                           2093 ;	genCall
   0851 E5*00              2094 	mov	a,_bp
   0853 24 04              2095 	add	a,#0x04
   0855 F8                 2096 	mov	r0,a
   0856 86 82              2097 	mov	dpl,@r0
   0858 08                 2098 	inc	r0
   0859 86 83              2099 	mov	dph,@r0
   085B 08                 2100 	inc	r0
   085C 86 F0              2101 	mov	b,@r0
   085E 08                 2102 	inc	r0
   085F E6                 2103 	mov	a,@r0
   0860 12s04rFB           2104 	lcall	_clust2sect
   0863 AA 82              2105 	mov	r2,dpl
   0865 AB 83              2106 	mov	r3,dph
   0867 AC F0              2107 	mov	r4,b
   0869 FD                 2108 	mov	r5,a
                           2109 ;	genPointerSet
                           2110 ;	genGenPointerSet
   086A E5*00              2111 	mov	a,_bp
   086C 24 0D              2112 	add	a,#0x0d
   086E F8                 2113 	mov	r0,a
   086F 86 82              2114 	mov	dpl,@r0
   0871 08                 2115 	inc	r0
   0872 86 83              2116 	mov	dph,@r0
   0874 08                 2117 	inc	r0
   0875 86 F0              2118 	mov	b,@r0
   0877 EA                 2119 	mov	a,r2
   0878 12s00r00           2120 	lcall	__gptrput
   087B A3                 2121 	inc	dptr
   087C EB                 2122 	mov	a,r3
   087D 12s00r00           2123 	lcall	__gptrput
   0880 A3                 2124 	inc	dptr
   0881 EC                 2125 	mov	a,r4
   0882 12s00r00           2126 	lcall	__gptrput
   0885 A3                 2127 	inc	dptr
   0886 ED                 2128 	mov	a,r5
   0887 12s00r00           2129 	lcall	__gptrput
   088A                    2130 00112$:
                    088A   2131 	C$tff.c$365$1$1 ==.
                           2132 ;	tff.c:365: dirobj->index = idx;	/* Lower 4 bit of dirobj->index indicates offset in dirobj->sect */
                           2133 ;	genPointerSet
                           2134 ;	genGenPointerSet
   088A E5*00              2135 	mov	a,_bp
   088C 24 17              2136 	add	a,#0x17
   088E F8                 2137 	mov	r0,a
   088F 86 82              2138 	mov	dpl,@r0
   0891 08                 2139 	inc	r0
   0892 86 83              2140 	mov	dph,@r0
   0894 08                 2141 	inc	r0
   0895 86 F0              2142 	mov	b,@r0
   0897 E5*00              2143 	mov	a,_bp
   0899 24 08              2144 	add	a,#0x08
   089B F9                 2145 	mov	r1,a
   089C E7                 2146 	mov	a,@r1
   089D 12s00r00           2147 	lcall	__gptrput
   08A0 A3                 2148 	inc	dptr
   08A1 09                 2149 	inc	r1
   08A2 E7                 2150 	mov	a,@r1
   08A3 12s00r00           2151 	lcall	__gptrput
                    08A6   2152 	C$tff.c$366$1$1 ==.
                           2153 ;	tff.c:366: return TRUE;
                           2154 ;	genRet
   08A6 75 82 01           2155 	mov	dpl,#0x01
   08A9                    2156 00113$:
   08A9 85*00 81           2157 	mov	sp,_bp
   08AC D0*00              2158 	pop	_bp
                    08AE   2159 	C$tff.c$367$1$1 ==.
                    08AE   2160 	XFtff$next_dir_entry$0$0 ==.
   08AE 22                 2161 	ret
                           2162 ;------------------------------------------------------------
                           2163 ;Allocation info for local variables in function 'get_fileinfo'
                           2164 ;------------------------------------------------------------
                           2165 ;dir                       Allocated to stack - offset -5
                           2166 ;finfo                     Allocated to stack - offset 1
                           2167 ;n                         Allocated to stack - offset 4
                           2168 ;c                         Allocated to stack - offset 5
                           2169 ;a                         Allocated to registers r5 
                           2170 ;p                         Allocated to stack - offset 6
                           2171 ;sloc0                     Allocated to stack - offset 9
                           2172 ;sloc1                     Allocated to stack - offset 12
                           2173 ;------------------------------------------------------------
                    08AF   2174 	Ftff$get_fileinfo$0$0 ==.
                    08AF   2175 	C$tff.c$378$1$1 ==.
                           2176 ;	tff.c:378: void get_fileinfo (		/* No return code */
                           2177 ;	-----------------------------------------
                           2178 ;	 function get_fileinfo
                           2179 ;	-----------------------------------------
   08AF                    2180 _get_fileinfo:
   08AF C0*00              2181 	push	_bp
   08B1 85 81*00           2182 	mov	_bp,sp
                           2183 ;     genReceive
   08B4 C0 82              2184 	push	dpl
   08B6 C0 83              2185 	push	dph
   08B8 C0 F0              2186 	push	b
   08BA E5 81              2187 	mov	a,sp
   08BC 24 0F              2188 	add	a,#0x0f
   08BE F5 81              2189 	mov	sp,a
                    08C0   2190 	C$tff.c$387$1$1 ==.
                           2191 ;	tff.c:387: p = &finfo->fname[0];
                           2192 ;	genPlus
   08C0 A8*00              2193 	mov	r0,_bp
   08C2 08                 2194 	inc	r0
                           2195 ;     genPlusIncr
   08C3 74 09              2196 	mov	a,#0x09
   08C5 26                 2197 	add	a,@r0
   08C6 FD                 2198 	mov	r5,a
                           2199 ;	Peephole 181	changed mov to clr
   08C7 E4                 2200 	clr	a
   08C8 08                 2201 	inc	r0
   08C9 36                 2202 	addc	a,@r0
   08CA FE                 2203 	mov	r6,a
   08CB 08                 2204 	inc	r0
   08CC 86 07              2205 	mov	ar7,@r0
                           2206 ;	genCast
   08CE E5*00              2207 	mov	a,_bp
   08D0 24 06              2208 	add	a,#0x06
   08D2 F8                 2209 	mov	r0,a
   08D3 A6 05              2210 	mov	@r0,ar5
   08D5 08                 2211 	inc	r0
   08D6 A6 06              2212 	mov	@r0,ar6
   08D8 08                 2213 	inc	r0
   08D9 A6 07              2214 	mov	@r0,ar7
                    08DB   2215 	C$tff.c$388$1$1 ==.
                           2216 ;	tff.c:388: a = _USE_NTFLAG ? dir[DIR_NTres] : 0;	/* NT flag */
                           2217 ;	genPlus
   08DB E5*00              2218 	mov	a,_bp
   08DD 24 FB              2219 	add	a,#0xfffffffb
   08DF F8                 2220 	mov	r0,a
                           2221 ;     genPlusIncr
   08E0 74 0C              2222 	mov	a,#0x0C
   08E2 26                 2223 	add	a,@r0
   08E3 FD                 2224 	mov	r5,a
                           2225 ;	Peephole 181	changed mov to clr
   08E4 E4                 2226 	clr	a
   08E5 08                 2227 	inc	r0
   08E6 36                 2228 	addc	a,@r0
   08E7 FE                 2229 	mov	r6,a
   08E8 08                 2230 	inc	r0
   08E9 86 07              2231 	mov	ar7,@r0
                           2232 ;	genPointerGet
                           2233 ;	genGenPointerGet
   08EB 8D 82              2234 	mov	dpl,r5
   08ED 8E 83              2235 	mov	dph,r6
   08EF 8F F0              2236 	mov	b,r7
   08F1 12s00r00           2237 	lcall	__gptrget
   08F4 FD                 2238 	mov	r5,a
                           2239 ;	genAssign
                    08F5   2240 	C$tff.c$389$2$2 ==.
                           2241 ;	tff.c:389: for (n = 0; n < 8; n++) {	/* Convert file name (body) */
                           2242 ;	genAnd
   08F5 74 08              2243 	mov	a,#0x08
   08F7 5D                 2244 	anl	a,r5
   08F8 FE                 2245 	mov	r6,a
                           2246 ;	genAssign
   08F9 E5*00              2247 	mov	a,_bp
   08FB 24 06              2248 	add	a,#0x06
   08FD F8                 2249 	mov	r0,a
   08FE E5*00              2250 	mov	a,_bp
   0900 24 09              2251 	add	a,#0x09
   0902 F9                 2252 	mov	r1,a
   0903 E6                 2253 	mov	a,@r0
   0904 F7                 2254 	mov	@r1,a
   0905 08                 2255 	inc	r0
   0906 09                 2256 	inc	r1
   0907 E6                 2257 	mov	a,@r0
   0908 F7                 2258 	mov	@r1,a
   0909 08                 2259 	inc	r0
   090A 09                 2260 	inc	r1
   090B E6                 2261 	mov	a,@r0
   090C F7                 2262 	mov	@r1,a
                           2263 ;	genAssign
   090D 7B 00              2264 	mov	r3,#0x00
   090F                    2265 00109$:
                           2266 ;	genCmpLt
                           2267 ;	genCmp
   090F BB 08 00           2268 	cjne	r3,#0x08,00143$
   0912                    2269 00143$:
                           2270 ;	genIfxJump
   0912 40 03              2271 	jc	00144$
   0914 02s09r98           2272 	ljmp	00141$
   0917                    2273 00144$:
                    0917   2274 	C$tff.c$390$1$1 ==.
                           2275 ;	tff.c:390: c = dir[n];
                           2276 ;	genIpush
   0917 C0 05              2277 	push	ar5
                           2278 ;	genPlus
   0919 E5*00              2279 	mov	a,_bp
   091B 24 FB              2280 	add	a,#0xfffffffb
   091D F8                 2281 	mov	r0,a
                           2282 ;	Peephole 236.g	used r3 instead of ar3
   091E EB                 2283 	mov	a,r3
   091F 26                 2284 	add	a,@r0
   0920 FD                 2285 	mov	r5,a
                           2286 ;	Peephole 181	changed mov to clr
   0921 E4                 2287 	clr	a
   0922 08                 2288 	inc	r0
   0923 36                 2289 	addc	a,@r0
   0924 FF                 2290 	mov	r7,a
   0925 08                 2291 	inc	r0
   0926 86 02              2292 	mov	ar2,@r0
                           2293 ;	genPointerGet
                           2294 ;	genGenPointerGet
   0928 8D 82              2295 	mov	dpl,r5
   092A 8F 83              2296 	mov	dph,r7
   092C 8A F0              2297 	mov	b,r2
   092E 12s00r00           2298 	lcall	__gptrget
   0931 FD                 2299 	mov	r5,a
                           2300 ;	genAssign
   0932 E5*00              2301 	mov	a,_bp
   0934 24 05              2302 	add	a,#0x05
   0936 F8                 2303 	mov	r0,a
   0937 A6 05              2304 	mov	@r0,ar5
                    0939   2305 	C$tff.c$391$2$2 ==.
                           2306 ;	tff.c:391: if (c == ' ') break;
                           2307 ;	genCmpEq
   0939 E5*00              2308 	mov	a,_bp
   093B 24 05              2309 	add	a,#0x05
   093D F8                 2310 	mov	r0,a
                           2311 ;	gencjne
                           2312 ;	gencjneshort
                           2313 ;	Peephole 241.h	optimized compare
   093E E4                 2314 	clr	a
   093F B6 20 01           2315 	cjne	@r0,#0x20,00145$
   0942 04                 2316 	inc	a
   0943                    2317 00145$:
                           2318 ;	Peephole 300	removed redundant label 00146$
                           2319 ;	genIpop
   0943 D0 05              2320 	pop	ar5
                           2321 ;	genIfx
                           2322 ;	genIfxJump
                           2323 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0945 70 51              2324 	jnz	00141$
                           2325 ;	Peephole 300	removed redundant label 00147$
                    0947   2326 	C$tff.c$392$2$2 ==.
                           2327 ;	tff.c:392: if (c == 0x05) c = 0xE5;
                           2328 ;	genCmpEq
   0947 E5*00              2329 	mov	a,_bp
   0949 24 05              2330 	add	a,#0x05
   094B F8                 2331 	mov	r0,a
                           2332 ;	gencjneshort
                           2333 ;	Peephole 112.b	changed ljmp to sjmp
                           2334 ;	Peephole 198.b	optimized misc jump sequence
   094C B6 05 07           2335 	cjne	@r0,#0x05,00104$
                           2336 ;	Peephole 200.b	removed redundant sjmp
                           2337 ;	Peephole 300	removed redundant label 00148$
                           2338 ;	Peephole 300	removed redundant label 00149$
                           2339 ;	genAssign
   094F E5*00              2340 	mov	a,_bp
   0951 24 05              2341 	add	a,#0x05
   0953 F8                 2342 	mov	r0,a
   0954 76 E5              2343 	mov	@r0,#0xE5
   0956                    2344 00104$:
                    0956   2345 	C$tff.c$393$2$2 ==.
                           2346 ;	tff.c:393: if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
                           2347 ;	genIfx
   0956 EE                 2348 	mov	a,r6
                           2349 ;	genIfxJump
                           2350 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0957 60 1D              2351 	jz	00106$
                           2352 ;	Peephole 300	removed redundant label 00150$
                           2353 ;	genCmpLt
   0959 E5*00              2354 	mov	a,_bp
   095B 24 05              2355 	add	a,#0x05
   095D F8                 2356 	mov	r0,a
                           2357 ;	genCmp
   095E B6 41 00           2358 	cjne	@r0,#0x41,00151$
   0961                    2359 00151$:
                           2360 ;	genIfxJump
                           2361 ;	Peephole 112.b	changed ljmp to sjmp
                           2362 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0961 40 13              2363 	jc	00106$
                           2364 ;	Peephole 300	removed redundant label 00152$
                           2365 ;	genCmpGt
   0963 E5*00              2366 	mov	a,_bp
   0965 24 05              2367 	add	a,#0x05
   0967 F8                 2368 	mov	r0,a
                           2369 ;	genCmp
                           2370 ;	genIfxJump
                           2371 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0968 E6                 2372 	mov	a,@r0
   0969 24 A5              2373 	add	a,#0xff - 0x5A
                           2374 ;	Peephole 112.b	changed ljmp to sjmp
                           2375 ;	Peephole 160.a	removed sjmp by inverse jump logic
   096B 40 09              2376 	jc	00106$
                           2377 ;	Peephole 300	removed redundant label 00153$
                           2378 ;	genPlus
   096D E5*00              2379 	mov	a,_bp
   096F 24 05              2380 	add	a,#0x05
   0971 F8                 2381 	mov	r0,a
                           2382 ;     genPlusIncr
   0972 74 20              2383 	mov	a,#0x20
   0974 26                 2384 	add	a,@r0
   0975 F6                 2385 	mov	@r0,a
   0976                    2386 00106$:
                    0976   2387 	C$tff.c$394$2$2 ==.
                           2388 ;	tff.c:394: *p++ = c;
                           2389 ;	genPointerSet
                           2390 ;	genGenPointerSet
   0976 E5*00              2391 	mov	a,_bp
   0978 24 09              2392 	add	a,#0x09
   097A F8                 2393 	mov	r0,a
   097B 86 82              2394 	mov	dpl,@r0
   097D 08                 2395 	inc	r0
   097E 86 83              2396 	mov	dph,@r0
   0980 08                 2397 	inc	r0
   0981 86 F0              2398 	mov	b,@r0
   0983 E5*00              2399 	mov	a,_bp
   0985 24 05              2400 	add	a,#0x05
   0987 F9                 2401 	mov	r1,a
   0988 E7                 2402 	mov	a,@r1
   0989 12s00r00           2403 	lcall	__gptrput
   098C A3                 2404 	inc	dptr
   098D 18                 2405 	dec	r0
   098E 18                 2406 	dec	r0
   098F A6 82              2407 	mov	@r0,dpl
   0991 08                 2408 	inc	r0
   0992 A6 83              2409 	mov	@r0,dph
                    0994   2410 	C$tff.c$389$1$1 ==.
                           2411 ;	tff.c:389: for (n = 0; n < 8; n++) {	/* Convert file name (body) */
                           2412 ;	genPlus
                           2413 ;     genPlusIncr
   0994 0B                 2414 	inc	r3
   0995 02s09r0F           2415 	ljmp	00109$
   0998                    2416 00141$:
                           2417 ;	genAssign
   0998 E5*00              2418 	mov	a,_bp
   099A 24 09              2419 	add	a,#0x09
   099C F8                 2420 	mov	r0,a
   099D E5*00              2421 	mov	a,_bp
   099F 24 06              2422 	add	a,#0x06
   09A1 F9                 2423 	mov	r1,a
   09A2 E6                 2424 	mov	a,@r0
   09A3 F7                 2425 	mov	@r1,a
   09A4 08                 2426 	inc	r0
   09A5 09                 2427 	inc	r1
   09A6 E6                 2428 	mov	a,@r0
   09A7 F7                 2429 	mov	@r1,a
   09A8 08                 2430 	inc	r0
   09A9 09                 2431 	inc	r1
   09AA E6                 2432 	mov	a,@r0
   09AB F7                 2433 	mov	@r1,a
                    09AC   2434 	C$tff.c$396$1$1 ==.
                           2435 ;	tff.c:396: if (dir[8] != ' ') {		/* Convert file name (extension) */
                           2436 ;	genPlus
   09AC E5*00              2437 	mov	a,_bp
   09AE 24 FB              2438 	add	a,#0xfffffffb
   09B0 F8                 2439 	mov	r0,a
                           2440 ;     genPlusIncr
   09B1 74 08              2441 	mov	a,#0x08
   09B3 26                 2442 	add	a,@r0
   09B4 FA                 2443 	mov	r2,a
                           2444 ;	Peephole 181	changed mov to clr
   09B5 E4                 2445 	clr	a
   09B6 08                 2446 	inc	r0
   09B7 36                 2447 	addc	a,@r0
   09B8 FB                 2448 	mov	r3,a
   09B9 08                 2449 	inc	r0
   09BA 86 04              2450 	mov	ar4,@r0
                           2451 ;	genPointerGet
                           2452 ;	genGenPointerGet
   09BC 8A 82              2453 	mov	dpl,r2
   09BE 8B 83              2454 	mov	dph,r3
   09C0 8C F0              2455 	mov	b,r4
   09C2 12s00r00           2456 	lcall	__gptrget
   09C5 FA                 2457 	mov	r2,a
                           2458 ;	genCmpEq
                           2459 ;	gencjneshort
   09C6 BA 20 03           2460 	cjne	r2,#0x20,00154$
   09C9 02s0Ar95           2461 	ljmp	00124$
   09CC                    2462 00154$:
                    09CC   2463 	C$tff.c$397$2$3 ==.
                           2464 ;	tff.c:397: *p++ = '.';
                           2465 ;	genPointerSet
                           2466 ;	genGenPointerSet
   09CC E5*00              2467 	mov	a,_bp
   09CE 24 09              2468 	add	a,#0x09
   09D0 F8                 2469 	mov	r0,a
   09D1 86 82              2470 	mov	dpl,@r0
   09D3 08                 2471 	inc	r0
   09D4 86 83              2472 	mov	dph,@r0
   09D6 08                 2473 	inc	r0
   09D7 86 F0              2474 	mov	b,@r0
   09D9 74 2E              2475 	mov	a,#0x2E
   09DB 12s00r00           2476 	lcall	__gptrput
                           2477 ;	genPlus
   09DE E5*00              2478 	mov	a,_bp
   09E0 24 09              2479 	add	a,#0x09
   09E2 F8                 2480 	mov	r0,a
   09E3 E5*00              2481 	mov	a,_bp
   09E5 24 06              2482 	add	a,#0x06
   09E7 F9                 2483 	mov	r1,a
                           2484 ;     genPlusIncr
   09E8 74 01              2485 	mov	a,#0x01
   09EA 26                 2486 	add	a,@r0
   09EB F7                 2487 	mov	@r1,a
                           2488 ;	Peephole 181	changed mov to clr
   09EC E4                 2489 	clr	a
   09ED 08                 2490 	inc	r0
   09EE 36                 2491 	addc	a,@r0
   09EF 09                 2492 	inc	r1
   09F0 F7                 2493 	mov	@r1,a
   09F1 08                 2494 	inc	r0
   09F2 09                 2495 	inc	r1
   09F3 E6                 2496 	mov	a,@r0
   09F4 F7                 2497 	mov	@r1,a
                    09F5   2498 	C$tff.c$398$3$4 ==.
                           2499 ;	tff.c:398: for (n = 8; n < 11; n++) {
                           2500 ;	genAnd
   09F5 74 10              2501 	mov	a,#0x10
   09F7 5D                 2502 	anl	a,r5
   09F8 FA                 2503 	mov	r2,a
                           2504 ;	genAssign
   09F9 E5*00              2505 	mov	a,_bp
   09FB 24 06              2506 	add	a,#0x06
   09FD F8                 2507 	mov	r0,a
   09FE 86 03              2508 	mov	ar3,@r0
   0A00 08                 2509 	inc	r0
   0A01 86 04              2510 	mov	ar4,@r0
   0A03 08                 2511 	inc	r0
   0A04 86 05              2512 	mov	ar5,@r0
                           2513 ;	genAssign
   0A06 E5*00              2514 	mov	a,_bp
   0A08 24 04              2515 	add	a,#0x04
   0A0A F8                 2516 	mov	r0,a
   0A0B 76 08              2517 	mov	@r0,#0x08
   0A0D                    2518 00119$:
                           2519 ;	genCmpLt
   0A0D E5*00              2520 	mov	a,_bp
   0A0F 24 04              2521 	add	a,#0x04
   0A11 F8                 2522 	mov	r0,a
                           2523 ;	genCmp
   0A12 B6 0B 00           2524 	cjne	@r0,#0x0B,00155$
   0A15                    2525 00155$:
                           2526 ;	genIfxJump
                           2527 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0A15 50 71              2528 	jnc	00142$
                           2529 ;	Peephole 300	removed redundant label 00156$
                    0A17   2530 	C$tff.c$399$1$1 ==.
                           2531 ;	tff.c:399: c = dir[n];
                           2532 ;	genIpush
   0A17 C0 02              2533 	push	ar2
                           2534 ;	genPlus
   0A19 E5*00              2535 	mov	a,_bp
   0A1B 24 FB              2536 	add	a,#0xfffffffb
   0A1D F8                 2537 	mov	r0,a
   0A1E E5*00              2538 	mov	a,_bp
   0A20 24 04              2539 	add	a,#0x04
   0A22 F9                 2540 	mov	r1,a
   0A23 E7                 2541 	mov	a,@r1
   0A24 26                 2542 	add	a,@r0
   0A25 FF                 2543 	mov	r7,a
                           2544 ;	Peephole 181	changed mov to clr
   0A26 E4                 2545 	clr	a
   0A27 08                 2546 	inc	r0
   0A28 36                 2547 	addc	a,@r0
   0A29 FA                 2548 	mov	r2,a
   0A2A 08                 2549 	inc	r0
   0A2B 86 06              2550 	mov	ar6,@r0
                           2551 ;	genPointerGet
                           2552 ;	genGenPointerGet
   0A2D 8F 82              2553 	mov	dpl,r7
   0A2F 8A 83              2554 	mov	dph,r2
   0A31 8E F0              2555 	mov	b,r6
   0A33 12s00r00           2556 	lcall	__gptrget
   0A36 FF                 2557 	mov	r7,a
                           2558 ;	genAssign
   0A37 E5*00              2559 	mov	a,_bp
   0A39 24 05              2560 	add	a,#0x05
   0A3B F8                 2561 	mov	r0,a
   0A3C A6 07              2562 	mov	@r0,ar7
                    0A3E   2563 	C$tff.c$400$3$4 ==.
                           2564 ;	tff.c:400: if (c == ' ') break;
                           2565 ;	genCmpEq
   0A3E E5*00              2566 	mov	a,_bp
   0A40 24 05              2567 	add	a,#0x05
   0A42 F8                 2568 	mov	r0,a
                           2569 ;	gencjne
                           2570 ;	gencjneshort
                           2571 ;	Peephole 241.h	optimized compare
   0A43 E4                 2572 	clr	a
   0A44 B6 20 01           2573 	cjne	@r0,#0x20,00157$
   0A47 04                 2574 	inc	a
   0A48                    2575 00157$:
                           2576 ;	Peephole 300	removed redundant label 00158$
                           2577 ;	genIpop
   0A48 D0 02              2578 	pop	ar2
                           2579 ;	genIfx
                           2580 ;	genIfxJump
                           2581 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A4A 70 3C              2582 	jnz	00142$
                           2583 ;	Peephole 300	removed redundant label 00159$
                    0A4C   2584 	C$tff.c$401$3$4 ==.
                           2585 ;	tff.c:401: if (a & 0x10 && c >= 'A' && c <= 'Z') c += 0x20;
                           2586 ;	genIfx
   0A4C EA                 2587 	mov	a,r2
                           2588 ;	genIfxJump
                           2589 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0A4D 60 1D              2590 	jz	00116$
                           2591 ;	Peephole 300	removed redundant label 00160$
                           2592 ;	genCmpLt
   0A4F E5*00              2593 	mov	a,_bp
   0A51 24 05              2594 	add	a,#0x05
   0A53 F8                 2595 	mov	r0,a
                           2596 ;	genCmp
   0A54 B6 41 00           2597 	cjne	@r0,#0x41,00161$
   0A57                    2598 00161$:
                           2599 ;	genIfxJump
                           2600 ;	Peephole 112.b	changed ljmp to sjmp
                           2601 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A57 40 13              2602 	jc	00116$
                           2603 ;	Peephole 300	removed redundant label 00162$
                           2604 ;	genCmpGt
   0A59 E5*00              2605 	mov	a,_bp
   0A5B 24 05              2606 	add	a,#0x05
   0A5D F8                 2607 	mov	r0,a
                           2608 ;	genCmp
                           2609 ;	genIfxJump
                           2610 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0A5E E6                 2611 	mov	a,@r0
   0A5F 24 A5              2612 	add	a,#0xff - 0x5A
                           2613 ;	Peephole 112.b	changed ljmp to sjmp
                           2614 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A61 40 09              2615 	jc	00116$
                           2616 ;	Peephole 300	removed redundant label 00163$
                           2617 ;	genPlus
   0A63 E5*00              2618 	mov	a,_bp
   0A65 24 05              2619 	add	a,#0x05
   0A67 F8                 2620 	mov	r0,a
                           2621 ;     genPlusIncr
   0A68 74 20              2622 	mov	a,#0x20
   0A6A 26                 2623 	add	a,@r0
   0A6B F6                 2624 	mov	@r0,a
   0A6C                    2625 00116$:
                    0A6C   2626 	C$tff.c$402$3$4 ==.
                           2627 ;	tff.c:402: *p++ = c;
                           2628 ;	genPointerSet
                           2629 ;	genGenPointerSet
   0A6C 8B 82              2630 	mov	dpl,r3
   0A6E 8C 83              2631 	mov	dph,r4
   0A70 8D F0              2632 	mov	b,r5
   0A72 E5*00              2633 	mov	a,_bp
   0A74 24 05              2634 	add	a,#0x05
   0A76 F8                 2635 	mov	r0,a
   0A77 E6                 2636 	mov	a,@r0
   0A78 12s00r00           2637 	lcall	__gptrput
   0A7B A3                 2638 	inc	dptr
   0A7C AB 82              2639 	mov	r3,dpl
   0A7E AC 83              2640 	mov	r4,dph
                    0A80   2641 	C$tff.c$398$2$3 ==.
                           2642 ;	tff.c:398: for (n = 8; n < 11; n++) {
                           2643 ;	genPlus
   0A80 E5*00              2644 	mov	a,_bp
   0A82 24 04              2645 	add	a,#0x04
   0A84 F8                 2646 	mov	r0,a
                           2647 ;     genPlusIncr
   0A85 06                 2648 	inc	@r0
                           2649 ;	Peephole 112.b	changed ljmp to sjmp
   0A86 80 85              2650 	sjmp	00119$
   0A88                    2651 00142$:
                           2652 ;	genAssign
   0A88 E5*00              2653 	mov	a,_bp
   0A8A 24 06              2654 	add	a,#0x06
   0A8C F8                 2655 	mov	r0,a
   0A8D A6 03              2656 	mov	@r0,ar3
   0A8F 08                 2657 	inc	r0
   0A90 A6 04              2658 	mov	@r0,ar4
   0A92 08                 2659 	inc	r0
   0A93 A6 05              2660 	mov	@r0,ar5
   0A95                    2661 00124$:
                    0A95   2662 	C$tff.c$405$1$1 ==.
                           2663 ;	tff.c:405: *p = '\0';
                           2664 ;	genPointerSet
                           2665 ;	genGenPointerSet
   0A95 E5*00              2666 	mov	a,_bp
   0A97 24 06              2667 	add	a,#0x06
   0A99 F8                 2668 	mov	r0,a
   0A9A 86 82              2669 	mov	dpl,@r0
   0A9C 08                 2670 	inc	r0
   0A9D 86 83              2671 	mov	dph,@r0
   0A9F 08                 2672 	inc	r0
   0AA0 86 F0              2673 	mov	b,@r0
                           2674 ;	Peephole 181	changed mov to clr
   0AA2 E4                 2675 	clr	a
   0AA3 12s00r00           2676 	lcall	__gptrput
                    0AA6   2677 	C$tff.c$407$1$1 ==.
                           2678 ;	tff.c:407: finfo->fattrib = dir[DIR_Attr];			/* Attribute */
                           2679 ;	genPlus
   0AA6 A8*00              2680 	mov	r0,_bp
   0AA8 08                 2681 	inc	r0
                           2682 ;     genPlusIncr
   0AA9 74 08              2683 	mov	a,#0x08
   0AAB 26                 2684 	add	a,@r0
   0AAC FA                 2685 	mov	r2,a
                           2686 ;	Peephole 181	changed mov to clr
   0AAD E4                 2687 	clr	a
   0AAE 08                 2688 	inc	r0
   0AAF 36                 2689 	addc	a,@r0
   0AB0 FB                 2690 	mov	r3,a
   0AB1 08                 2691 	inc	r0
   0AB2 86 04              2692 	mov	ar4,@r0
                           2693 ;	genPlus
   0AB4 E5*00              2694 	mov	a,_bp
   0AB6 24 FB              2695 	add	a,#0xfffffffb
   0AB8 F8                 2696 	mov	r0,a
                           2697 ;     genPlusIncr
   0AB9 74 0B              2698 	mov	a,#0x0B
   0ABB 26                 2699 	add	a,@r0
   0ABC FD                 2700 	mov	r5,a
                           2701 ;	Peephole 181	changed mov to clr
   0ABD E4                 2702 	clr	a
   0ABE 08                 2703 	inc	r0
   0ABF 36                 2704 	addc	a,@r0
   0AC0 FE                 2705 	mov	r6,a
   0AC1 08                 2706 	inc	r0
   0AC2 86 07              2707 	mov	ar7,@r0
                           2708 ;	genPointerGet
                           2709 ;	genGenPointerGet
   0AC4 8D 82              2710 	mov	dpl,r5
   0AC6 8E 83              2711 	mov	dph,r6
   0AC8 8F F0              2712 	mov	b,r7
   0ACA 12s00r00           2713 	lcall	__gptrget
                           2714 ;	genPointerSet
                           2715 ;	genGenPointerSet
   0ACD FD                 2716 	mov	r5,a
   0ACE 8A 82              2717 	mov	dpl,r2
   0AD0 8B 83              2718 	mov	dph,r3
   0AD2 8C F0              2719 	mov	b,r4
                           2720 ;	Peephole 191	removed redundant mov
   0AD4 12s00r00           2721 	lcall	__gptrput
                    0AD7   2722 	C$tff.c$408$1$1 ==.
                           2723 ;	tff.c:408: finfo->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* Size */
                           2724 ;	genPlus
   0AD7 E5*00              2725 	mov	a,_bp
   0AD9 24 FB              2726 	add	a,#0xfffffffb
   0ADB F8                 2727 	mov	r0,a
   0ADC E5*00              2728 	mov	a,_bp
   0ADE 24 09              2729 	add	a,#0x09
   0AE0 F9                 2730 	mov	r1,a
                           2731 ;     genPlusIncr
   0AE1 74 1C              2732 	mov	a,#0x1C
   0AE3 26                 2733 	add	a,@r0
   0AE4 F7                 2734 	mov	@r1,a
                           2735 ;	Peephole 181	changed mov to clr
   0AE5 E4                 2736 	clr	a
   0AE6 08                 2737 	inc	r0
   0AE7 36                 2738 	addc	a,@r0
   0AE8 09                 2739 	inc	r1
   0AE9 F7                 2740 	mov	@r1,a
   0AEA 08                 2741 	inc	r0
   0AEB 09                 2742 	inc	r1
   0AEC E6                 2743 	mov	a,@r0
   0AED F7                 2744 	mov	@r1,a
                           2745 ;	genPlus
   0AEE E5*00              2746 	mov	a,_bp
   0AF0 24 09              2747 	add	a,#0x09
   0AF2 F8                 2748 	mov	r0,a
                           2749 ;     genPlusIncr
   0AF3 74 03              2750 	mov	a,#0x03
   0AF5 26                 2751 	add	a,@r0
   0AF6 FD                 2752 	mov	r5,a
                           2753 ;	Peephole 181	changed mov to clr
   0AF7 E4                 2754 	clr	a
   0AF8 08                 2755 	inc	r0
   0AF9 36                 2756 	addc	a,@r0
   0AFA FE                 2757 	mov	r6,a
   0AFB 08                 2758 	inc	r0
   0AFC 86 07              2759 	mov	ar7,@r0
                           2760 ;	genPointerGet
                           2761 ;	genGenPointerGet
   0AFE 8D 82              2762 	mov	dpl,r5
   0B00 8E 83              2763 	mov	dph,r6
   0B02 8F F0              2764 	mov	b,r7
   0B04 12s00r00           2765 	lcall	__gptrget
   0B07 FD                 2766 	mov	r5,a
                           2767 ;	genCast
                           2768 ;	genLeftShift
                           2769 ;	genLeftShiftLiteral
                           2770 ;	Peephole 3.c	changed mov to clr
                           2771 ;	Peephole 3.b	changed mov to clr
   0B08 E4                 2772 	clr	a
   0B09 FE                 2773 	mov	r6,a
   0B0A FF                 2774 	mov	r7,a
   0B0B FA                 2775 	mov	r2,a
   0B0C E5*00              2776 	mov	a,_bp
   0B0E 24 0C              2777 	add	a,#0x0c
                           2778 ;	genlshFour
                           2779 ;	Peephole 185	changed order of increment (acc incremented also!)
   0B10 04                 2780 	inc	a
                           2781 ;	Peephole 185	changed order of increment (acc incremented also!)
   0B11 04                 2782 	inc	a
                           2783 ;	Peephole 185	changed order of increment (acc incremented also!)
   0B12 04                 2784 	inc	a
   0B13 F8                 2785 	mov	r0,a
   0B14 A6 05              2786 	mov	@r0,ar5
   0B16 18                 2787 	dec	r0
   0B17 18                 2788 	dec	r0
   0B18 18                 2789 	dec	r0
   0B19 76 00              2790 	mov	@r0,#0x00
   0B1B 08                 2791 	inc	r0
   0B1C 76 00              2792 	mov	@r0,#0x00
   0B1E 08                 2793 	inc	r0
   0B1F 76 00              2794 	mov	@r0,#0x00
                           2795 ;	genPlus
   0B21 E5*00              2796 	mov	a,_bp
   0B23 24 09              2797 	add	a,#0x09
   0B25 F8                 2798 	mov	r0,a
                           2799 ;     genPlusIncr
   0B26 74 02              2800 	mov	a,#0x02
   0B28 26                 2801 	add	a,@r0
   0B29 FB                 2802 	mov	r3,a
                           2803 ;	Peephole 181	changed mov to clr
   0B2A E4                 2804 	clr	a
   0B2B 08                 2805 	inc	r0
   0B2C 36                 2806 	addc	a,@r0
   0B2D FC                 2807 	mov	r4,a
   0B2E 08                 2808 	inc	r0
   0B2F 86 02              2809 	mov	ar2,@r0
                           2810 ;	genPointerGet
                           2811 ;	genGenPointerGet
   0B31 8B 82              2812 	mov	dpl,r3
   0B33 8C 83              2813 	mov	dph,r4
   0B35 8A F0              2814 	mov	b,r2
   0B37 12s00r00           2815 	lcall	__gptrget
   0B3A FB                 2816 	mov	r3,a
                           2817 ;	genCast
   0B3B 7A 00              2818 	mov	r2,#0x00
   0B3D 7C 00              2819 	mov	r4,#0x00
                           2820 ;	genLeftShift
                           2821 ;	genLeftShiftLiteral
                           2822 ;	genlshFour
                           2823 ;	peephole 177.e	removed redundant move
   0B3F 8A 05              2824 	mov	ar5,r2
   0B41 8B 04              2825 	mov	ar4,r3
                           2826 ;	genOr
                           2827 ;	Peephole 3.c	changed mov to clr
   0B43 E4                 2828 	clr	a
   0B44 FA                 2829 	mov	r2,a
   0B45 FB                 2830 	mov	r3,a
   0B46 E5*00              2831 	mov	a,_bp
   0B48 24 0C              2832 	add	a,#0x0c
   0B4A F8                 2833 	mov	r0,a
   0B4B EB                 2834 	mov	a,r3
   0B4C 46                 2835 	orl	a,@r0
   0B4D F6                 2836 	mov	@r0,a
   0B4E EA                 2837 	mov	a,r2
   0B4F 08                 2838 	inc	r0
   0B50 46                 2839 	orl	a,@r0
   0B51 F6                 2840 	mov	@r0,a
   0B52 EC                 2841 	mov	a,r4
   0B53 08                 2842 	inc	r0
   0B54 46                 2843 	orl	a,@r0
   0B55 F6                 2844 	mov	@r0,a
   0B56 ED                 2845 	mov	a,r5
   0B57 08                 2846 	inc	r0
   0B58 46                 2847 	orl	a,@r0
   0B59 F6                 2848 	mov	@r0,a
                           2849 ;	genPlus
   0B5A E5*00              2850 	mov	a,_bp
   0B5C 24 09              2851 	add	a,#0x09
   0B5E F8                 2852 	mov	r0,a
                           2853 ;     genPlusIncr
   0B5F 74 01              2854 	mov	a,#0x01
   0B61 26                 2855 	add	a,@r0
   0B62 FE                 2856 	mov	r6,a
                           2857 ;	Peephole 181	changed mov to clr
   0B63 E4                 2858 	clr	a
   0B64 08                 2859 	inc	r0
   0B65 36                 2860 	addc	a,@r0
   0B66 FF                 2861 	mov	r7,a
   0B67 08                 2862 	inc	r0
   0B68 86 02              2863 	mov	ar2,@r0
                           2864 ;	genPointerGet
                           2865 ;	genGenPointerGet
   0B6A 8E 82              2866 	mov	dpl,r6
   0B6C 8F 83              2867 	mov	dph,r7
   0B6E 8A F0              2868 	mov	b,r2
   0B70 12s00r00           2869 	lcall	__gptrget
   0B73 FE                 2870 	mov	r6,a
                           2871 ;	genCast
                           2872 ;	genLeftShift
                           2873 ;	genLeftShiftLiteral
                           2874 ;	genlshTwo
                           2875 ;	peephole 177.e	removed redundant move
   0B74 8E 02              2876 	mov	ar2,r6
                           2877 ;	genCast
                           2878 ;	genOr
                           2879 ;	Peephole 3.c	changed mov to clr
                           2880 ;	Peephole 3.b	changed mov to clr
   0B76 E4                 2881 	clr	a
   0B77 FE                 2882 	mov	r6,a
   0B78 FB                 2883 	mov	r3,a
   0B79 FC                 2884 	mov	r4,a
   0B7A E5*00              2885 	mov	a,_bp
   0B7C 24 0C              2886 	add	a,#0x0c
   0B7E F8                 2887 	mov	r0,a
   0B7F EE                 2888 	mov	a,r6
   0B80 46                 2889 	orl	a,@r0
   0B81 F6                 2890 	mov	@r0,a
   0B82 EA                 2891 	mov	a,r2
   0B83 08                 2892 	inc	r0
   0B84 46                 2893 	orl	a,@r0
   0B85 F6                 2894 	mov	@r0,a
   0B86 EB                 2895 	mov	a,r3
   0B87 08                 2896 	inc	r0
   0B88 46                 2897 	orl	a,@r0
   0B89 F6                 2898 	mov	@r0,a
   0B8A EC                 2899 	mov	a,r4
   0B8B 08                 2900 	inc	r0
   0B8C 46                 2901 	orl	a,@r0
   0B8D F6                 2902 	mov	@r0,a
                           2903 ;	genPointerGet
                           2904 ;	genGenPointerGet
   0B8E E5*00              2905 	mov	a,_bp
   0B90 24 09              2906 	add	a,#0x09
   0B92 F8                 2907 	mov	r0,a
   0B93 86 82              2908 	mov	dpl,@r0
   0B95 08                 2909 	inc	r0
   0B96 86 83              2910 	mov	dph,@r0
   0B98 08                 2911 	inc	r0
   0B99 86 F0              2912 	mov	b,@r0
   0B9B 12s00r00           2913 	lcall	__gptrget
   0B9E FD                 2914 	mov	r5,a
                           2915 ;	genCast
                           2916 ;	genOr
                           2917 ;	Peephole 3.c	changed mov to clr
                           2918 ;	Peephole 3.b	changed mov to clr
   0B9F E4                 2919 	clr	a
   0BA0 FF                 2920 	mov	r7,a
   0BA1 FA                 2921 	mov	r2,a
   0BA2 FB                 2922 	mov	r3,a
   0BA3 E5*00              2923 	mov	a,_bp
   0BA5 24 0C              2924 	add	a,#0x0c
   0BA7 F8                 2925 	mov	r0,a
   0BA8 E6                 2926 	mov	a,@r0
   0BA9 42 05              2927 	orl	ar5,a
   0BAB 08                 2928 	inc	r0
   0BAC E6                 2929 	mov	a,@r0
   0BAD 42 07              2930 	orl	ar7,a
   0BAF 08                 2931 	inc	r0
   0BB0 E6                 2932 	mov	a,@r0
   0BB1 42 02              2933 	orl	ar2,a
   0BB3 08                 2934 	inc	r0
   0BB4 E6                 2935 	mov	a,@r0
   0BB5 42 03              2936 	orl	ar3,a
                           2937 ;	genPointerSet
                           2938 ;	genGenPointerSet
   0BB7 A8*00              2939 	mov	r0,_bp
   0BB9 08                 2940 	inc	r0
   0BBA 86 82              2941 	mov	dpl,@r0
   0BBC 08                 2942 	inc	r0
   0BBD 86 83              2943 	mov	dph,@r0
   0BBF 08                 2944 	inc	r0
   0BC0 86 F0              2945 	mov	b,@r0
   0BC2 ED                 2946 	mov	a,r5
   0BC3 12s00r00           2947 	lcall	__gptrput
   0BC6 A3                 2948 	inc	dptr
   0BC7 EF                 2949 	mov	a,r7
   0BC8 12s00r00           2950 	lcall	__gptrput
   0BCB A3                 2951 	inc	dptr
   0BCC EA                 2952 	mov	a,r2
   0BCD 12s00r00           2953 	lcall	__gptrput
   0BD0 A3                 2954 	inc	dptr
   0BD1 EB                 2955 	mov	a,r3
   0BD2 12s00r00           2956 	lcall	__gptrput
                    0BD5   2957 	C$tff.c$409$1$1 ==.
                           2958 ;	tff.c:409: finfo->fdate = LD_WORD(&dir[DIR_WrtDate]);	/* Date */
                           2959 ;	genPlus
   0BD5 A8*00              2960 	mov	r0,_bp
   0BD7 08                 2961 	inc	r0
   0BD8 E5*00              2962 	mov	a,_bp
   0BDA 24 0C              2963 	add	a,#0x0c
   0BDC F9                 2964 	mov	r1,a
                           2965 ;     genPlusIncr
   0BDD 74 04              2966 	mov	a,#0x04
   0BDF 26                 2967 	add	a,@r0
   0BE0 F7                 2968 	mov	@r1,a
                           2969 ;	Peephole 181	changed mov to clr
   0BE1 E4                 2970 	clr	a
   0BE2 08                 2971 	inc	r0
   0BE3 36                 2972 	addc	a,@r0
   0BE4 09                 2973 	inc	r1
   0BE5 F7                 2974 	mov	@r1,a
   0BE6 08                 2975 	inc	r0
   0BE7 09                 2976 	inc	r1
   0BE8 E6                 2977 	mov	a,@r0
   0BE9 F7                 2978 	mov	@r1,a
                           2979 ;	genPlus
   0BEA E5*00              2980 	mov	a,_bp
   0BEC 24 FB              2981 	add	a,#0xfffffffb
   0BEE F8                 2982 	mov	r0,a
                           2983 ;     genPlusIncr
   0BEF 74 18              2984 	mov	a,#0x18
   0BF1 26                 2985 	add	a,@r0
   0BF2 FD                 2986 	mov	r5,a
                           2987 ;	Peephole 181	changed mov to clr
   0BF3 E4                 2988 	clr	a
   0BF4 08                 2989 	inc	r0
   0BF5 36                 2990 	addc	a,@r0
   0BF6 FE                 2991 	mov	r6,a
   0BF7 08                 2992 	inc	r0
   0BF8 86 07              2993 	mov	ar7,@r0
                           2994 ;	genPlus
                           2995 ;     genPlusIncr
   0BFA 74 01              2996 	mov	a,#0x01
                           2997 ;	Peephole 236.a	used r5 instead of ar5
   0BFC 2D                 2998 	add	a,r5
   0BFD FA                 2999 	mov	r2,a
                           3000 ;	Peephole 181	changed mov to clr
   0BFE E4                 3001 	clr	a
                           3002 ;	Peephole 236.b	used r6 instead of ar6
   0BFF 3E                 3003 	addc	a,r6
   0C00 FB                 3004 	mov	r3,a
   0C01 8F 04              3005 	mov	ar4,r7
                           3006 ;	genPointerGet
                           3007 ;	genGenPointerGet
   0C03 8A 82              3008 	mov	dpl,r2
   0C05 8B 83              3009 	mov	dph,r3
   0C07 8C F0              3010 	mov	b,r4
   0C09 12s00r00           3011 	lcall	__gptrget
   0C0C FA                 3012 	mov	r2,a
                           3013 ;	genCast
                           3014 ;	genLeftShift
                           3015 ;	genLeftShiftLiteral
                           3016 ;	genlshTwo
                           3017 ;	peephole 177.e	removed redundant move
   0C0D 8A 03              3018 	mov	ar3,r2
   0C0F 7A 00              3019 	mov	r2,#0x00
                           3020 ;	genPointerGet
                           3021 ;	genGenPointerGet
   0C11 8D 82              3022 	mov	dpl,r5
   0C13 8E 83              3023 	mov	dph,r6
   0C15 8F F0              3024 	mov	b,r7
   0C17 12s00r00           3025 	lcall	__gptrget
                           3026 ;	genCast
                           3027 ;	genOr
   0C1A FD                 3028 	mov	r5,a
   0C1B 7C 00              3029 	mov	r4,#0x00
                           3030 ;	Peephole 177.d	removed redundant move
   0C1D 42 02              3031 	orl	ar2,a
   0C1F EC                 3032 	mov	a,r4
   0C20 42 03              3033 	orl	ar3,a
                           3034 ;	genPointerSet
                           3035 ;	genGenPointerSet
   0C22 E5*00              3036 	mov	a,_bp
   0C24 24 0C              3037 	add	a,#0x0c
   0C26 F8                 3038 	mov	r0,a
   0C27 86 82              3039 	mov	dpl,@r0
   0C29 08                 3040 	inc	r0
   0C2A 86 83              3041 	mov	dph,@r0
   0C2C 08                 3042 	inc	r0
   0C2D 86 F0              3043 	mov	b,@r0
   0C2F EA                 3044 	mov	a,r2
   0C30 12s00r00           3045 	lcall	__gptrput
   0C33 A3                 3046 	inc	dptr
   0C34 EB                 3047 	mov	a,r3
   0C35 12s00r00           3048 	lcall	__gptrput
                    0C38   3049 	C$tff.c$410$1$1 ==.
                           3050 ;	tff.c:410: finfo->ftime = LD_WORD(&dir[DIR_WrtTime]);	/* Time */
                           3051 ;	genPlus
   0C38 A8*00              3052 	mov	r0,_bp
   0C3A 08                 3053 	inc	r0
   0C3B E5*00              3054 	mov	a,_bp
   0C3D 24 0C              3055 	add	a,#0x0c
   0C3F F9                 3056 	mov	r1,a
                           3057 ;     genPlusIncr
   0C40 74 06              3058 	mov	a,#0x06
   0C42 26                 3059 	add	a,@r0
   0C43 F7                 3060 	mov	@r1,a
                           3061 ;	Peephole 181	changed mov to clr
   0C44 E4                 3062 	clr	a
   0C45 08                 3063 	inc	r0
   0C46 36                 3064 	addc	a,@r0
   0C47 09                 3065 	inc	r1
   0C48 F7                 3066 	mov	@r1,a
   0C49 08                 3067 	inc	r0
   0C4A 09                 3068 	inc	r1
   0C4B E6                 3069 	mov	a,@r0
   0C4C F7                 3070 	mov	@r1,a
                           3071 ;	genPlus
   0C4D E5*00              3072 	mov	a,_bp
   0C4F 24 FB              3073 	add	a,#0xfffffffb
   0C51 F8                 3074 	mov	r0,a
                           3075 ;     genPlusIncr
   0C52 74 16              3076 	mov	a,#0x16
   0C54 26                 3077 	add	a,@r0
   0C55 FD                 3078 	mov	r5,a
                           3079 ;	Peephole 181	changed mov to clr
   0C56 E4                 3080 	clr	a
   0C57 08                 3081 	inc	r0
   0C58 36                 3082 	addc	a,@r0
   0C59 FE                 3083 	mov	r6,a
   0C5A 08                 3084 	inc	r0
   0C5B 86 07              3085 	mov	ar7,@r0
                           3086 ;	genPlus
                           3087 ;     genPlusIncr
   0C5D 74 01              3088 	mov	a,#0x01
                           3089 ;	Peephole 236.a	used r5 instead of ar5
   0C5F 2D                 3090 	add	a,r5
   0C60 FA                 3091 	mov	r2,a
                           3092 ;	Peephole 181	changed mov to clr
   0C61 E4                 3093 	clr	a
                           3094 ;	Peephole 236.b	used r6 instead of ar6
   0C62 3E                 3095 	addc	a,r6
   0C63 FB                 3096 	mov	r3,a
   0C64 8F 04              3097 	mov	ar4,r7
                           3098 ;	genPointerGet
                           3099 ;	genGenPointerGet
   0C66 8A 82              3100 	mov	dpl,r2
   0C68 8B 83              3101 	mov	dph,r3
   0C6A 8C F0              3102 	mov	b,r4
   0C6C 12s00r00           3103 	lcall	__gptrget
   0C6F FA                 3104 	mov	r2,a
                           3105 ;	genCast
                           3106 ;	genLeftShift
                           3107 ;	genLeftShiftLiteral
                           3108 ;	genlshTwo
                           3109 ;	peephole 177.e	removed redundant move
   0C70 8A 03              3110 	mov	ar3,r2
   0C72 7A 00              3111 	mov	r2,#0x00
                           3112 ;	genPointerGet
                           3113 ;	genGenPointerGet
   0C74 8D 82              3114 	mov	dpl,r5
   0C76 8E 83              3115 	mov	dph,r6
   0C78 8F F0              3116 	mov	b,r7
   0C7A 12s00r00           3117 	lcall	__gptrget
                           3118 ;	genCast
                           3119 ;	genOr
   0C7D FD                 3120 	mov	r5,a
   0C7E 7C 00              3121 	mov	r4,#0x00
                           3122 ;	Peephole 177.d	removed redundant move
   0C80 42 02              3123 	orl	ar2,a
   0C82 EC                 3124 	mov	a,r4
   0C83 42 03              3125 	orl	ar3,a
                           3126 ;	genPointerSet
                           3127 ;	genGenPointerSet
   0C85 E5*00              3128 	mov	a,_bp
   0C87 24 0C              3129 	add	a,#0x0c
   0C89 F8                 3130 	mov	r0,a
   0C8A 86 82              3131 	mov	dpl,@r0
   0C8C 08                 3132 	inc	r0
   0C8D 86 83              3133 	mov	dph,@r0
   0C8F 08                 3134 	inc	r0
   0C90 86 F0              3135 	mov	b,@r0
   0C92 EA                 3136 	mov	a,r2
   0C93 12s00r00           3137 	lcall	__gptrput
   0C96 A3                 3138 	inc	dptr
   0C97 EB                 3139 	mov	a,r3
   0C98 12s00r00           3140 	lcall	__gptrput
                           3141 ;	Peephole 300	removed redundant label 00125$
   0C9B 85*00 81           3142 	mov	sp,_bp
   0C9E D0*00              3143 	pop	_bp
                    0CA0   3144 	C$tff.c$411$1$1 ==.
                    0CA0   3145 	XFtff$get_fileinfo$0$0 ==.
   0CA0 22                 3146 	ret
                           3147 ;------------------------------------------------------------
                           3148 ;Allocation info for local variables in function 'make_dirfile'
                           3149 ;------------------------------------------------------------
                           3150 ;dirname                   Allocated to stack - offset -5
                           3151 ;path                      Allocated to stack - offset 1
                           3152 ;n                         Allocated to stack - offset 4
                           3153 ;t                         Allocated to registers r6 
                           3154 ;c                         Allocated to registers r7 
                           3155 ;a                         Allocated to stack - offset 5
                           3156 ;b                         Allocated to stack - offset 6
                           3157 ;------------------------------------------------------------
                    0CA1   3158 	Ftff$make_dirfile$0$0 ==.
                    0CA1   3159 	C$tff.c$422$1$1 ==.
                           3160 ;	tff.c:422: char make_dirfile (			/* 1: error - detected an invalid format, '\0'or'/': next character */
                           3161 ;	-----------------------------------------
                           3162 ;	 function make_dirfile
                           3163 ;	-----------------------------------------
   0CA1                    3164 _make_dirfile:
   0CA1 C0*00              3165 	push	_bp
   0CA3 85 81*00           3166 	mov	_bp,sp
                           3167 ;     genReceive
   0CA6 C0 82              3168 	push	dpl
   0CA8 C0 83              3169 	push	dph
   0CAA C0 F0              3170 	push	b
   0CAC 05 81              3171 	inc	sp
   0CAE 05 81              3172 	inc	sp
   0CB0 05 81              3173 	inc	sp
                    0CB2   3174 	C$tff.c$430$1$1 ==.
                           3175 ;	tff.c:430: memset(dirname, ' ', 8+3);	/* Fill buffer with spaces */
                           3176 ;	genAssign
   0CB2 E5*00              3177 	mov	a,_bp
   0CB4 24 FB              3178 	add	a,#0xfffffffb
   0CB6 F8                 3179 	mov	r0,a
   0CB7 86 05              3180 	mov	ar5,@r0
   0CB9 08                 3181 	inc	r0
   0CBA 86 06              3182 	mov	ar6,@r0
   0CBC 08                 3183 	inc	r0
   0CBD 86 07              3184 	mov	ar7,@r0
                           3185 ;	genIpush
   0CBF 74 0B              3186 	mov	a,#0x0B
   0CC1 C0 E0              3187 	push	acc
                           3188 ;	Peephole 181	changed mov to clr
   0CC3 E4                 3189 	clr	a
   0CC4 C0 E0              3190 	push	acc
                           3191 ;	genIpush
   0CC6 74 20              3192 	mov	a,#0x20
   0CC8 C0 E0              3193 	push	acc
                           3194 ;	genCall
   0CCA 8D 82              3195 	mov	dpl,r5
   0CCC 8E 83              3196 	mov	dph,r6
   0CCE 8F F0              3197 	mov	b,r7
   0CD0 12s00r00           3198 	lcall	_memset
   0CD3 15 81              3199 	dec	sp
   0CD5 15 81              3200 	dec	sp
   0CD7 15 81              3201 	dec	sp
                    0CD9   3202 	C$tff.c$431$1$1 ==.
                           3203 ;	tff.c:431: a = 0; b = 0x18;	/* NT flag */
                           3204 ;	genAssign
   0CD9 E5*00              3205 	mov	a,_bp
   0CDB 24 05              3206 	add	a,#0x05
   0CDD F8                 3207 	mov	r0,a
   0CDE 76 00              3208 	mov	@r0,#0x00
                           3209 ;	genAssign
   0CE0 E5*00              3210 	mov	a,_bp
   0CE2 24 06              3211 	add	a,#0x06
   0CE4 F8                 3212 	mov	r0,a
   0CE5 76 18              3213 	mov	@r0,#0x18
                    0CE7   3214 	C$tff.c$432$1$1 ==.
                           3215 ;	tff.c:432: n = 0; t = 8;
                           3216 ;	genAssign
   0CE7 E5*00              3217 	mov	a,_bp
   0CE9 24 04              3218 	add	a,#0x04
   0CEB F8                 3219 	mov	r0,a
   0CEC 76 00              3220 	mov	@r0,#0x00
                           3221 ;	genAssign
   0CEE 7E 08              3222 	mov	r6,#0x08
   0CF0                    3223 00155$:
                    0CF0   3224 	C$tff.c$434$1$1 ==.
                           3225 ;	tff.c:434: c = *(*path)++;
                           3226 ;	genIpush
   0CF0 C0 06              3227 	push	ar6
                           3228 ;	genPointerGet
                           3229 ;	genGenPointerGet
   0CF2 A8*00              3230 	mov	r0,_bp
   0CF4 08                 3231 	inc	r0
   0CF5 86 82              3232 	mov	dpl,@r0
   0CF7 08                 3233 	inc	r0
   0CF8 86 83              3234 	mov	dph,@r0
   0CFA 08                 3235 	inc	r0
   0CFB 86 F0              3236 	mov	b,@r0
   0CFD 12s00r00           3237 	lcall	__gptrget
   0D00 FE                 3238 	mov	r6,a
   0D01 A3                 3239 	inc	dptr
   0D02 12s00r00           3240 	lcall	__gptrget
   0D05 FF                 3241 	mov	r7,a
   0D06 A3                 3242 	inc	dptr
   0D07 12s00r00           3243 	lcall	__gptrget
   0D0A FD                 3244 	mov	r5,a
                           3245 ;	genPlus
                           3246 ;     genPlusIncr
   0D0B 74 01              3247 	mov	a,#0x01
                           3248 ;	Peephole 236.a	used r6 instead of ar6
   0D0D 2E                 3249 	add	a,r6
   0D0E FA                 3250 	mov	r2,a
                           3251 ;	Peephole 181	changed mov to clr
   0D0F E4                 3252 	clr	a
                           3253 ;	Peephole 236.b	used r7 instead of ar7
   0D10 3F                 3254 	addc	a,r7
   0D11 FB                 3255 	mov	r3,a
   0D12 8D 04              3256 	mov	ar4,r5
                           3257 ;	genPointerSet
                           3258 ;	genGenPointerSet
   0D14 A8*00              3259 	mov	r0,_bp
   0D16 08                 3260 	inc	r0
   0D17 86 82              3261 	mov	dpl,@r0
   0D19 08                 3262 	inc	r0
   0D1A 86 83              3263 	mov	dph,@r0
   0D1C 08                 3264 	inc	r0
   0D1D 86 F0              3265 	mov	b,@r0
   0D1F EA                 3266 	mov	a,r2
   0D20 12s00r00           3267 	lcall	__gptrput
   0D23 A3                 3268 	inc	dptr
   0D24 EB                 3269 	mov	a,r3
   0D25 12s00r00           3270 	lcall	__gptrput
   0D28 A3                 3271 	inc	dptr
   0D29 EC                 3272 	mov	a,r4
   0D2A 12s00r00           3273 	lcall	__gptrput
                           3274 ;	genPointerGet
                           3275 ;	genGenPointerGet
   0D2D 8E 82              3276 	mov	dpl,r6
   0D2F 8F 83              3277 	mov	dph,r7
   0D31 8D F0              3278 	mov	b,r5
   0D33 12s00r00           3279 	lcall	__gptrget
   0D36 FE                 3280 	mov	r6,a
                           3281 ;	genAssign
   0D37 8E 07              3282 	mov	ar7,r6
                    0D39   3283 	C$tff.c$435$1$1 ==.
                           3284 ;	tff.c:435: if (c == '\0' || c == '/') {		/* Reached to end of str or directory separator */
                           3285 ;	genIpop
   0D39 D0 06              3286 	pop	ar6
                           3287 ;	genIfx
   0D3B EF                 3288 	mov	a,r7
                           3289 ;	genIfxJump
                           3290 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0D3C 60 03              3291 	jz	00103$
                           3292 ;	Peephole 300	removed redundant label 00191$
                           3293 ;	genCmpEq
                           3294 ;	gencjneshort
                           3295 ;	Peephole 112.b	changed ljmp to sjmp
                           3296 ;	Peephole 198.b	optimized misc jump sequence
   0D3E BF 2F 36           3297 	cjne	r7,#0x2F,00104$
                           3298 ;	Peephole 200.b	removed redundant sjmp
                           3299 ;	Peephole 300	removed redundant label 00192$
                           3300 ;	Peephole 300	removed redundant label 00193$
   0D41                    3301 00103$:
                    0D41   3302 	C$tff.c$436$3$3 ==.
                           3303 ;	tff.c:436: if (n == 0) break;
                           3304 ;	genIfx
   0D41 E5*00              3305 	mov	a,_bp
   0D43 24 04              3306 	add	a,#0x04
   0D45 F8                 3307 	mov	r0,a
   0D46 E6                 3308 	mov	a,@r0
                           3309 ;	genIfxJump
   0D47 70 03              3310 	jnz	00194$
   0D49 02s0ErAB           3311 	ljmp	00156$
   0D4C                    3312 00194$:
                    0D4C   3313 	C$tff.c$437$3$3 ==.
                           3314 ;	tff.c:437: dirname[11] = _USE_NTFLAG ? (a & b) : 0;
                           3315 ;	genPlus
   0D4C E5*00              3316 	mov	a,_bp
   0D4E 24 FB              3317 	add	a,#0xfffffffb
   0D50 F8                 3318 	mov	r0,a
                           3319 ;     genPlusIncr
   0D51 74 0B              3320 	mov	a,#0x0B
   0D53 26                 3321 	add	a,@r0
   0D54 FA                 3322 	mov	r2,a
                           3323 ;	Peephole 181	changed mov to clr
   0D55 E4                 3324 	clr	a
   0D56 08                 3325 	inc	r0
   0D57 36                 3326 	addc	a,@r0
   0D58 FB                 3327 	mov	r3,a
   0D59 08                 3328 	inc	r0
   0D5A 86 04              3329 	mov	ar4,@r0
                           3330 ;	genAnd
   0D5C E5*00              3331 	mov	a,_bp
   0D5E 24 05              3332 	add	a,#0x05
   0D60 F8                 3333 	mov	r0,a
   0D61 E5*00              3334 	mov	a,_bp
   0D63 24 06              3335 	add	a,#0x06
   0D65 F9                 3336 	mov	r1,a
   0D66 E7                 3337 	mov	a,@r1
   0D67 56                 3338 	anl	a,@r0
                           3339 ;	genPointerSet
                           3340 ;	genGenPointerSet
   0D68 FD                 3341 	mov	r5,a
   0D69 8A 82              3342 	mov	dpl,r2
   0D6B 8B 83              3343 	mov	dph,r3
   0D6D 8C F0              3344 	mov	b,r4
                           3345 ;	Peephole 191	removed redundant mov
   0D6F 12s00r00           3346 	lcall	__gptrput
                    0D72   3347 	C$tff.c$438$3$3 ==.
                           3348 ;	tff.c:438: return c;
                           3349 ;	genRet
   0D72 8F 82              3350 	mov	dpl,r7
   0D74 02s0ErAE           3351 	ljmp	00157$
   0D77                    3352 00104$:
                    0D77   3353 	C$tff.c$440$2$2 ==.
                           3354 ;	tff.c:440: if (c <= ' ' || c == 0x7F) break;		/* Reject invisible chars */
                           3355 ;	genCmpGt
                           3356 ;	genCmp
                           3357 ;	genIfxJump
                           3358 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0D77 EF                 3359 	mov	a,r7
   0D78 24 DF              3360 	add	a,#0xff - 0x20
   0D7A 40 03              3361 	jc	00195$
   0D7C 02s0ErAB           3362 	ljmp	00156$
   0D7F                    3363 00195$:
                           3364 ;	genCmpEq
                           3365 ;	gencjneshort
   0D7F BF 7F 03           3366 	cjne	r7,#0x7F,00196$
   0D82 02s0ErAB           3367 	ljmp	00156$
   0D85                    3368 00196$:
                    0D85   3369 	C$tff.c$441$2$2 ==.
                           3370 ;	tff.c:441: if (c == '.') {
                           3371 ;	genCmpEq
                           3372 ;	gencjneshort
                           3373 ;	Peephole 112.b	changed ljmp to sjmp
                           3374 ;	Peephole 198.b	optimized misc jump sequence
   0D85 BF 2E 32           3375 	cjne	r7,#0x2E,00123$
                           3376 ;	Peephole 200.b	removed redundant sjmp
                           3377 ;	Peephole 300	removed redundant label 00197$
                           3378 ;	Peephole 300	removed redundant label 00198$
                    0D88   3379 	C$tff.c$442$3$4 ==.
                           3380 ;	tff.c:442: if (!(a & 1) && n >= 1 && n <= 8) {	/* Enter extension part */
                           3381 ;	genAnd
   0D88 E5*00              3382 	mov	a,_bp
   0D8A 24 05              3383 	add	a,#0x05
   0D8C F8                 3384 	mov	r0,a
   0D8D E6                 3385 	mov	a,@r0
                           3386 ;	genIfxJump
   0D8E 30 E0 03           3387 	jnb	acc.0,00199$
   0D91 02s0ErAB           3388 	ljmp	00156$
   0D94                    3389 00199$:
                           3390 ;	genCmpLt
   0D94 E5*00              3391 	mov	a,_bp
   0D96 24 04              3392 	add	a,#0x04
   0D98 F8                 3393 	mov	r0,a
                           3394 ;	genCmp
   0D99 B6 01 00           3395 	cjne	@r0,#0x01,00200$
   0D9C                    3396 00200$:
                           3397 ;	genIfxJump
   0D9C 50 03              3398 	jnc	00201$
   0D9E 02s0ErAB           3399 	ljmp	00156$
   0DA1                    3400 00201$:
                           3401 ;	genCmpGt
   0DA1 E5*00              3402 	mov	a,_bp
   0DA3 24 04              3403 	add	a,#0x04
   0DA5 F8                 3404 	mov	r0,a
                           3405 ;	genCmp
                           3406 ;	genIfxJump
                           3407 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0DA6 E6                 3408 	mov	a,@r0
   0DA7 24 F7              3409 	add	a,#0xff - 0x08
   0DA9 50 03              3410 	jnc	00202$
   0DAB 02s0ErAB           3411 	ljmp	00156$
   0DAE                    3412 00202$:
                    0DAE   3413 	C$tff.c$443$4$5 ==.
                           3414 ;	tff.c:443: n = 8; t = 11; continue;
                           3415 ;	genAssign
   0DAE E5*00              3416 	mov	a,_bp
   0DB0 24 04              3417 	add	a,#0x04
   0DB2 F8                 3418 	mov	r0,a
   0DB3 76 08              3419 	mov	@r0,#0x08
                           3420 ;	genAssign
   0DB5 7E 0B              3421 	mov	r6,#0x0B
   0DB7 02s0CrF0           3422 	ljmp	00155$
                    0DBA   3423 	C$tff.c$447$2$2 ==.
                           3424 ;	tff.c:447: if (_USE_SJIS &&
   0DBA                    3425 00123$:
                    0DBA   3426 	C$tff.c$448$2$2 ==.
                           3427 ;	tff.c:448: ((c >= 0x81 && c <= 0x9F) ||		/* Accept S-JIS code */
                           3428 ;	genCmpLt
                           3429 ;	genCmp
   0DBA BF 81 00           3430 	cjne	r7,#0x81,00203$
   0DBD                    3431 00203$:
                           3432 ;	genIfxJump
                           3433 ;	Peephole 112.b	changed ljmp to sjmp
                           3434 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0DBD 40 05              3435 	jc	00122$
                           3436 ;	Peephole 300	removed redundant label 00204$
                           3437 ;	genCmpGt
                           3438 ;	genCmp
                           3439 ;	genIfxJump
                           3440 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3441 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0DBF EF                 3442 	mov	a,r7
   0DC0 24 60              3443 	add	a,#0xff - 0x9F
   0DC2 50 0A              3444 	jnc	00118$
                           3445 ;	Peephole 300	removed redundant label 00205$
   0DC4                    3446 00122$:
                    0DC4   3447 	C$tff.c$449$2$2 ==.
                           3448 ;	tff.c:449: (c >= 0xE0 && c <= 0xFC))) {
                           3449 ;	genCmpLt
                           3450 ;	genCmp
   0DC4 BF E0 00           3451 	cjne	r7,#0xE0,00206$
   0DC7                    3452 00206$:
                           3453 ;	genIfxJump
                           3454 ;	Peephole 112.b	changed ljmp to sjmp
                           3455 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0DC7 40 1E              3456 	jc	00119$
                           3457 ;	Peephole 300	removed redundant label 00207$
                           3458 ;	genCmpGt
                           3459 ;	genCmp
                           3460 ;	genIfxJump
                           3461 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0DC9 EF                 3462 	mov	a,r7
   0DCA 24 03              3463 	add	a,#0xff - 0xFC
                           3464 ;	Peephole 112.b	changed ljmp to sjmp
                           3465 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0DCC 40 19              3466 	jc	00119$
                           3467 ;	Peephole 300	removed redundant label 00208$
   0DCE                    3468 00118$:
                    0DCE   3469 	C$tff.c$450$3$6 ==.
                           3470 ;	tff.c:450: if (n == 0 && c == 0xE5)		/* Change heading \xE5 to \x05 */
                           3471 ;	genIfx
   0DCE E5*00              3472 	mov	a,_bp
   0DD0 24 04              3473 	add	a,#0x04
   0DD2 F8                 3474 	mov	r0,a
   0DD3 E6                 3475 	mov	a,@r0
                           3476 ;	genIfxJump
                           3477 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0DD4 70 05              3478 	jnz	00116$
                           3479 ;	Peephole 300	removed redundant label 00209$
                           3480 ;	genCmpEq
                           3481 ;	gencjneshort
                           3482 ;	Peephole 112.b	changed ljmp to sjmp
                           3483 ;	Peephole 198.b	optimized misc jump sequence
   0DD6 BF E5 02           3484 	cjne	r7,#0xE5,00116$
                           3485 ;	Peephole 200.b	removed redundant sjmp
                           3486 ;	Peephole 300	removed redundant label 00210$
                           3487 ;	Peephole 300	removed redundant label 00211$
                    0DD9   3488 	C$tff.c$451$3$6 ==.
                           3489 ;	tff.c:451: c = 0x05;
                           3490 ;	genAssign
   0DD9 7F 05              3491 	mov	r7,#0x05
   0DDB                    3492 00116$:
                    0DDB   3493 	C$tff.c$452$3$6 ==.
                           3494 ;	tff.c:452: a ^= 1; goto md_l2;
                           3495 ;	genXor
   0DDB E5*00              3496 	mov	a,_bp
   0DDD 24 05              3497 	add	a,#0x05
   0DDF F8                 3498 	mov	r0,a
   0DE0 E6                 3499 	mov	a,@r0
   0DE1 64 01              3500 	xrl	a,#0x01
   0DE3 F6                 3501 	mov	@r0,a
   0DE4 02s0Er78           3502 	ljmp	00151$
   0DE7                    3503 00119$:
                    0DE7   3504 	C$tff.c$454$2$2 ==.
                           3505 ;	tff.c:454: if (c == '"') break;				/* Reject " */
                           3506 ;	genCmpEq
                           3507 ;	gencjneshort
   0DE7 BF 22 03           3508 	cjne	r7,#0x22,00212$
   0DEA 02s0ErAB           3509 	ljmp	00156$
   0DED                    3510 00212$:
                    0DED   3511 	C$tff.c$455$2$2 ==.
                           3512 ;	tff.c:455: if (c <= ')') goto md_l1;			/* Accept ! # $ % & ' ( ) */
                           3513 ;	genCmpGt
                           3514 ;	genCmp
                           3515 ;	genIfxJump
                           3516 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0DED EF                 3517 	mov	a,r7
   0DEE 24 D6              3518 	add	a,#0xff - 0x29
   0DF0 40 03              3519 	jc	00213$
   0DF2 02s0Er6F           3520 	ljmp	00150$
   0DF5                    3521 00213$:
                    0DF5   3522 	C$tff.c$456$2$2 ==.
                           3523 ;	tff.c:456: if (c <= ',') break;				/* Reject * + , */
                           3524 ;	genCmpGt
                           3525 ;	genCmp
                           3526 ;	genIfxJump
                           3527 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0DF5 EF                 3528 	mov	a,r7
   0DF6 24 D3              3529 	add	a,#0xff - 0x2C
   0DF8 40 03              3530 	jc	00214$
   0DFA 02s0ErAB           3531 	ljmp	00156$
   0DFD                    3532 00214$:
                    0DFD   3533 	C$tff.c$457$2$2 ==.
                           3534 ;	tff.c:457: if (c <= '9') goto md_l1;			/* Accept - 0-9 */
                           3535 ;	genCmpGt
                           3536 ;	genCmp
                           3537 ;	genIfxJump
                           3538 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0DFD EF                 3539 	mov	a,r7
   0DFE 24 C6              3540 	add	a,#0xff - 0x39
   0E00 40 03              3541 	jc	00215$
   0E02 02s0Er6F           3542 	ljmp	00150$
   0E05                    3543 00215$:
                    0E05   3544 	C$tff.c$458$2$2 ==.
                           3545 ;	tff.c:458: if (c <= '?') break;				/* Reject : ; < = > ? */
                           3546 ;	genCmpGt
                           3547 ;	genCmp
                           3548 ;	genIfxJump
                           3549 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0E05 EF                 3550 	mov	a,r7
   0E06 24 C0              3551 	add	a,#0xff - 0x3F
   0E08 40 03              3552 	jc	00216$
   0E0A 02s0ErAB           3553 	ljmp	00156$
   0E0D                    3554 00216$:
                    0E0D   3555 	C$tff.c$459$2$2 ==.
                           3556 ;	tff.c:459: if (!(a & 1)) {	/* These checks are not applied to S-JIS 2nd byte */
                           3557 ;	genAnd
   0E0D E5*00              3558 	mov	a,_bp
   0E0F 24 05              3559 	add	a,#0x05
   0E11 F8                 3560 	mov	r0,a
   0E12 E6                 3561 	mov	a,@r0
                           3562 ;	genIfxJump
                           3563 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0E13 20 E0 59           3564 	jb	acc.0,00150$
                           3565 ;	Peephole 300	removed redundant label 00217$
                    0E16   3566 	C$tff.c$460$3$7 ==.
                           3567 ;	tff.c:460: if (c == '|') break;			/* Reject | */
                           3568 ;	genCmpEq
                           3569 ;	gencjneshort
   0E16 BF 7C 03           3570 	cjne	r7,#0x7C,00218$
   0E19 02s0ErAB           3571 	ljmp	00156$
   0E1C                    3572 00218$:
                    0E1C   3573 	C$tff.c$461$3$7 ==.
                           3574 ;	tff.c:461: if (c >= '[' && c <= ']') break;/* Reject [ \ ] */
                           3575 ;	genCmpLt
                           3576 ;	genCmp
   0E1C BF 5B 00           3577 	cjne	r7,#0x5B,00219$
   0E1F                    3578 00219$:
                           3579 ;	genIfxJump
                           3580 ;	Peephole 112.b	changed ljmp to sjmp
                           3581 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E1F 40 08              3582 	jc	00141$
                           3583 ;	Peephole 300	removed redundant label 00220$
                           3584 ;	genCmpGt
                           3585 ;	genCmp
                           3586 ;	genIfxJump
                           3587 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0E21 EF                 3588 	mov	a,r7
   0E22 24 A2              3589 	add	a,#0xff - 0x5D
   0E24 40 03              3590 	jc	00221$
   0E26 02s0ErAB           3591 	ljmp	00156$
   0E29                    3592 00221$:
                    0E29   3593 	C$tff.c$462$3$7 ==.
                           3594 ;	tff.c:462: if (_USE_NTFLAG && c >= 'A' && c <= 'Z')
   0E29                    3595 00141$:
                           3596 ;	genCmpLt
                           3597 ;	genCmp
   0E29 BF 41 00           3598 	cjne	r7,#0x41,00222$
   0E2C                    3599 00222$:
                           3600 ;	genIfxJump
                           3601 ;	Peephole 112.b	changed ljmp to sjmp
                           3602 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E2C 40 1C              3603 	jc	00140$
                           3604 ;	Peephole 300	removed redundant label 00223$
                           3605 ;	genCmpGt
                           3606 ;	genCmp
                           3607 ;	genIfxJump
                           3608 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0E2E EF                 3609 	mov	a,r7
   0E2F 24 A5              3610 	add	a,#0xff - 0x5A
                           3611 ;	Peephole 112.b	changed ljmp to sjmp
                           3612 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E31 40 17              3613 	jc	00140$
                           3614 ;	Peephole 300	removed redundant label 00224$
                    0E33   3615 	C$tff.c$463$3$7 ==.
                           3616 ;	tff.c:463: (t == 8) ? (b &= ~0x08) : (b &= ~0x10);
                           3617 ;	genCmpEq
                           3618 ;	gencjneshort
                           3619 ;	Peephole 112.b	changed ljmp to sjmp
                           3620 ;	Peephole 198.b	optimized misc jump sequence
   0E33 BE 08 0B           3621 	cjne	r6,#0x08,00159$
                           3622 ;	Peephole 200.b	removed redundant sjmp
                           3623 ;	Peephole 300	removed redundant label 00225$
                           3624 ;	Peephole 300	removed redundant label 00226$
                           3625 ;	genAnd
   0E36 E5*00              3626 	mov	a,_bp
   0E38 24 06              3627 	add	a,#0x06
   0E3A F8                 3628 	mov	r0,a
   0E3B E6                 3629 	mov	a,@r0
   0E3C 54 F7              3630 	anl	a,#0xF7
   0E3E F6                 3631 	mov	@r0,a
                           3632 ;	Peephole 112.b	changed ljmp to sjmp
   0E3F 80 09              3633 	sjmp	00140$
   0E41                    3634 00159$:
                           3635 ;	genAnd
   0E41 E5*00              3636 	mov	a,_bp
   0E43 24 06              3637 	add	a,#0x06
   0E45 F8                 3638 	mov	r0,a
   0E46 E6                 3639 	mov	a,@r0
   0E47 54 EF              3640 	anl	a,#0xEF
   0E49 F6                 3641 	mov	@r0,a
   0E4A                    3642 00140$:
                    0E4A   3643 	C$tff.c$464$3$7 ==.
                           3644 ;	tff.c:464: if (c >= 'a' && c <= 'z') {		/* Convert to upper case */
                           3645 ;	genCmpLt
                           3646 ;	genCmp
   0E4A BF 61 00           3647 	cjne	r7,#0x61,00227$
   0E4D                    3648 00227$:
                           3649 ;	genIfxJump
                           3650 ;	Peephole 112.b	changed ljmp to sjmp
                           3651 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E4D 40 20              3652 	jc	00150$
                           3653 ;	Peephole 300	removed redundant label 00228$
                           3654 ;	genCmpGt
                           3655 ;	genCmp
                           3656 ;	genIfxJump
                           3657 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0E4F EF                 3658 	mov	a,r7
   0E50 24 85              3659 	add	a,#0xff - 0x7A
                           3660 ;	Peephole 112.b	changed ljmp to sjmp
                           3661 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E52 40 1B              3662 	jc	00150$
                           3663 ;	Peephole 300	removed redundant label 00229$
                    0E54   3664 	C$tff.c$465$4$8 ==.
                           3665 ;	tff.c:465: c -= 0x20;
                           3666 ;	genMinus
   0E54 EF                 3667 	mov	a,r7
   0E55 24 E0              3668 	add	a,#0xe0
   0E57 FF                 3669 	mov	r7,a
                    0E58   3670 	C$tff.c$466$4$8 ==.
                           3671 ;	tff.c:466: if (_USE_NTFLAG) (t == 8) ? (a |= 0x08) : (a |= 0x10);
                           3672 ;	genCmpEq
                           3673 ;	gencjneshort
                           3674 ;	Peephole 112.b	changed ljmp to sjmp
                           3675 ;	Peephole 198.b	optimized misc jump sequence
   0E58 BE 08 0B           3676 	cjne	r6,#0x08,00161$
                           3677 ;	Peephole 200.b	removed redundant sjmp
                           3678 ;	Peephole 300	removed redundant label 00230$
                           3679 ;	Peephole 300	removed redundant label 00231$
                           3680 ;	genOr
   0E5B E5*00              3681 	mov	a,_bp
   0E5D 24 05              3682 	add	a,#0x05
   0E5F F8                 3683 	mov	r0,a
   0E60 E6                 3684 	mov	a,@r0
   0E61 44 08              3685 	orl	a,#0x08
   0E63 F6                 3686 	mov	@r0,a
                           3687 ;	Peephole 112.b	changed ljmp to sjmp
   0E64 80 09              3688 	sjmp	00150$
   0E66                    3689 00161$:
                           3690 ;	genOr
   0E66 E5*00              3691 	mov	a,_bp
   0E68 24 05              3692 	add	a,#0x05
   0E6A F8                 3693 	mov	r0,a
   0E6B E6                 3694 	mov	a,@r0
   0E6C 44 10              3695 	orl	a,#0x10
   0E6E F6                 3696 	mov	@r0,a
                    0E6F   3697 	C$tff.c$469$2$2 ==.
                           3698 ;	tff.c:469: md_l1:
   0E6F                    3699 00150$:
                    0E6F   3700 	C$tff.c$470$2$2 ==.
                           3701 ;	tff.c:470: a &= ~1;
                           3702 ;	genAnd
   0E6F E5*00              3703 	mov	a,_bp
   0E71 24 05              3704 	add	a,#0x05
   0E73 F8                 3705 	mov	r0,a
   0E74 E6                 3706 	mov	a,@r0
   0E75 54 FE              3707 	anl	a,#0xFE
   0E77 F6                 3708 	mov	@r0,a
                    0E78   3709 	C$tff.c$471$2$2 ==.
                           3710 ;	tff.c:471: md_l2:
   0E78                    3711 00151$:
                    0E78   3712 	C$tff.c$472$2$2 ==.
                           3713 ;	tff.c:472: if (n >= t) break;
                           3714 ;	genCmpLt
   0E78 E5*00              3715 	mov	a,_bp
   0E7A 24 04              3716 	add	a,#0x04
   0E7C F8                 3717 	mov	r0,a
                           3718 ;	genCmp
   0E7D C3                 3719 	clr	c
   0E7E E6                 3720 	mov	a,@r0
   0E7F 9E                 3721 	subb	a,r6
                           3722 ;	genIfxJump
                           3723 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0E80 50 29              3724 	jnc	00156$
                           3725 ;	Peephole 300	removed redundant label 00232$
                    0E82   3726 	C$tff.c$473$2$2 ==.
                           3727 ;	tff.c:473: dirname[n++] = c;
                           3728 ;	genAssign
   0E82 E5*00              3729 	mov	a,_bp
   0E84 24 04              3730 	add	a,#0x04
   0E86 F8                 3731 	mov	r0,a
   0E87 86 02              3732 	mov	ar2,@r0
                           3733 ;	genPlus
   0E89 E5*00              3734 	mov	a,_bp
   0E8B 24 04              3735 	add	a,#0x04
   0E8D F8                 3736 	mov	r0,a
                           3737 ;     genPlusIncr
   0E8E 06                 3738 	inc	@r0
                           3739 ;	genPlus
   0E8F E5*00              3740 	mov	a,_bp
   0E91 24 FB              3741 	add	a,#0xfffffffb
   0E93 F8                 3742 	mov	r0,a
                           3743 ;	Peephole 236.g	used r2 instead of ar2
   0E94 EA                 3744 	mov	a,r2
   0E95 26                 3745 	add	a,@r0
   0E96 FA                 3746 	mov	r2,a
                           3747 ;	Peephole 181	changed mov to clr
   0E97 E4                 3748 	clr	a
   0E98 08                 3749 	inc	r0
   0E99 36                 3750 	addc	a,@r0
   0E9A FB                 3751 	mov	r3,a
   0E9B 08                 3752 	inc	r0
   0E9C 86 04              3753 	mov	ar4,@r0
                           3754 ;	genPointerSet
                           3755 ;	genGenPointerSet
   0E9E 8A 82              3756 	mov	dpl,r2
   0EA0 8B 83              3757 	mov	dph,r3
   0EA2 8C F0              3758 	mov	b,r4
   0EA4 EF                 3759 	mov	a,r7
   0EA5 12s00r00           3760 	lcall	__gptrput
   0EA8 02s0CrF0           3761 	ljmp	00155$
   0EAB                    3762 00156$:
                    0EAB   3763 	C$tff.c$475$1$1 ==.
                           3764 ;	tff.c:475: return 1;
                           3765 ;	genRet
   0EAB 75 82 01           3766 	mov	dpl,#0x01
   0EAE                    3767 00157$:
   0EAE 85*00 81           3768 	mov	sp,_bp
   0EB1 D0*00              3769 	pop	_bp
                    0EB3   3770 	C$tff.c$476$1$1 ==.
                    0EB3   3771 	XFtff$make_dirfile$0$0 ==.
   0EB3 22                 3772 	ret
                           3773 ;------------------------------------------------------------
                           3774 ;Allocation info for local variables in function 'trace_path'
                           3775 ;------------------------------------------------------------
                           3776 ;fn                        Allocated to stack - offset -5
                           3777 ;path                      Allocated to stack - offset -8
                           3778 ;dir                       Allocated to stack - offset -11
                           3779 ;dirobj                    Allocated to stack - offset 1
                           3780 ;clust                     Allocated to stack - offset 4
                           3781 ;ds                        Allocated to registers r2 
                           3782 ;dptr                      Allocated to stack - offset 8
                           3783 ;fs                        Allocated to stack - offset 11
                           3784 ;sloc0                     Allocated to stack - offset 14
                           3785 ;sloc1                     Allocated to stack - offset 17
                           3786 ;sloc2                     Allocated to stack - offset 20
                           3787 ;------------------------------------------------------------
                    0EB4   3788 	Ftff$trace_path$0$0 ==.
                    0EB4   3789 	C$tff.c$485$1$1 ==.
                           3790 ;	tff.c:485: FRESULT trace_path (	/* FR_OK(0): successful, !=0: error code */
                           3791 ;	-----------------------------------------
                           3792 ;	 function trace_path
                           3793 ;	-----------------------------------------
   0EB4                    3794 _trace_path:
   0EB4 C0*00              3795 	push	_bp
   0EB6 85 81*00           3796 	mov	_bp,sp
                           3797 ;     genReceive
   0EB9 C0 82              3798 	push	dpl
   0EBB C0 83              3799 	push	dph
   0EBD C0 F0              3800 	push	b
   0EBF E5 81              3801 	mov	a,sp
   0EC1 24 17              3802 	add	a,#0x17
   0EC3 F5 81              3803 	mov	sp,a
                    0EC5   3804 	C$tff.c$495$1$1 ==.
                           3805 ;	tff.c:495: FATFS *fs = FatFs;
                           3806 ;	genAssign
   0EC5 E5*00              3807 	mov	a,_bp
   0EC7 24 0B              3808 	add	a,#0x0b
   0EC9 F8                 3809 	mov	r0,a
   0ECA A6*00              3810 	mov	@r0,_FatFs
   0ECC 08                 3811 	inc	r0
   0ECD A6*01              3812 	mov	@r0,(_FatFs + 1)
   0ECF 08                 3813 	inc	r0
   0ED0 A6*02              3814 	mov	@r0,(_FatFs + 2)
                    0ED2   3815 	C$tff.c$498$1$1 ==.
                           3816 ;	tff.c:498: clust = fs->dirbase;
                           3817 ;	genPlus
   0ED2 E5*00              3818 	mov	a,_bp
   0ED4 24 0B              3819 	add	a,#0x0b
   0ED6 F8                 3820 	mov	r0,a
                           3821 ;     genPlusIncr
   0ED7 74 0C              3822 	mov	a,#0x0C
   0ED9 26                 3823 	add	a,@r0
   0EDA FD                 3824 	mov	r5,a
                           3825 ;	Peephole 181	changed mov to clr
   0EDB E4                 3826 	clr	a
   0EDC 08                 3827 	inc	r0
   0EDD 36                 3828 	addc	a,@r0
   0EDE FE                 3829 	mov	r6,a
   0EDF 08                 3830 	inc	r0
   0EE0 86 07              3831 	mov	ar7,@r0
                           3832 ;	genPointerGet
                           3833 ;	genGenPointerGet
   0EE2 8D 82              3834 	mov	dpl,r5
   0EE4 8E 83              3835 	mov	dph,r6
   0EE6 8F F0              3836 	mov	b,r7
   0EE8 12s00r00           3837 	lcall	__gptrget
   0EEB FA                 3838 	mov	r2,a
   0EEC A3                 3839 	inc	dptr
   0EED 12s00r00           3840 	lcall	__gptrget
   0EF0 FB                 3841 	mov	r3,a
   0EF1 A3                 3842 	inc	dptr
   0EF2 12s00r00           3843 	lcall	__gptrget
   0EF5 FC                 3844 	mov	r4,a
   0EF6 A3                 3845 	inc	dptr
   0EF7 12s00r00           3846 	lcall	__gptrget
   0EFA FD                 3847 	mov	r5,a
                           3848 ;	genAssign
   0EFB E5*00              3849 	mov	a,_bp
   0EFD 24 04              3850 	add	a,#0x04
   0EFF F8                 3851 	mov	r0,a
   0F00 A6 02              3852 	mov	@r0,ar2
   0F02 08                 3853 	inc	r0
   0F03 A6 03              3854 	mov	@r0,ar3
   0F05 08                 3855 	inc	r0
   0F06 A6 04              3856 	mov	@r0,ar4
   0F08 08                 3857 	inc	r0
   0F09 A6 05              3858 	mov	@r0,ar5
                    0F0B   3859 	C$tff.c$500$1$1 ==.
                           3860 ;	tff.c:500: if (fs->fs_type == FS_FAT32) {
                           3861 ;	genPlus
   0F0B E5*00              3862 	mov	a,_bp
   0F0D 24 0B              3863 	add	a,#0x0b
   0F0F F8                 3864 	mov	r0,a
                           3865 ;     genPlusIncr
   0F10 74 1C              3866 	mov	a,#0x1C
   0F12 26                 3867 	add	a,@r0
   0F13 FD                 3868 	mov	r5,a
                           3869 ;	Peephole 181	changed mov to clr
   0F14 E4                 3870 	clr	a
   0F15 08                 3871 	inc	r0
   0F16 36                 3872 	addc	a,@r0
   0F17 FE                 3873 	mov	r6,a
   0F18 08                 3874 	inc	r0
   0F19 86 07              3875 	mov	ar7,@r0
                           3876 ;	genPointerGet
                           3877 ;	genGenPointerGet
   0F1B 8D 82              3878 	mov	dpl,r5
   0F1D 8E 83              3879 	mov	dph,r6
   0F1F 8F F0              3880 	mov	b,r7
   0F21 12s00r00           3881 	lcall	__gptrget
   0F24 FD                 3882 	mov	r5,a
                           3883 ;	genCmpEq
                           3884 ;	gencjneshort
   0F25 BD 03 02           3885 	cjne	r5,#0x03,00148$
   0F28 80 03              3886 	sjmp	00149$
   0F2A                    3887 00148$:
   0F2A 02s0FrDC           3888 	ljmp	00102$
   0F2D                    3889 00149$:
                    0F2D   3890 	C$tff.c$501$2$2 ==.
                           3891 ;	tff.c:501: dirobj->clust = dirobj->sclust = clust;
                           3892 ;	genPlus
   0F2D A8*00              3893 	mov	r0,_bp
   0F2F 08                 3894 	inc	r0
                           3895 ;     genPlusIncr
   0F30 74 0B              3896 	mov	a,#0x0B
   0F32 26                 3897 	add	a,@r0
   0F33 FD                 3898 	mov	r5,a
                           3899 ;	Peephole 181	changed mov to clr
   0F34 E4                 3900 	clr	a
   0F35 08                 3901 	inc	r0
   0F36 36                 3902 	addc	a,@r0
   0F37 FE                 3903 	mov	r6,a
   0F38 08                 3904 	inc	r0
   0F39 86 07              3905 	mov	ar7,@r0
                           3906 ;	genPlus
   0F3B A8*00              3907 	mov	r0,_bp
   0F3D 08                 3908 	inc	r0
                           3909 ;     genPlusIncr
   0F3E 74 07              3910 	mov	a,#0x07
   0F40 26                 3911 	add	a,@r0
   0F41 FA                 3912 	mov	r2,a
                           3913 ;	Peephole 181	changed mov to clr
   0F42 E4                 3914 	clr	a
   0F43 08                 3915 	inc	r0
   0F44 36                 3916 	addc	a,@r0
   0F45 FB                 3917 	mov	r3,a
   0F46 08                 3918 	inc	r0
   0F47 86 04              3919 	mov	ar4,@r0
                           3920 ;	genPointerSet
                           3921 ;	genGenPointerSet
   0F49 8A 82              3922 	mov	dpl,r2
   0F4B 8B 83              3923 	mov	dph,r3
   0F4D 8C F0              3924 	mov	b,r4
   0F4F E5*00              3925 	mov	a,_bp
   0F51 24 04              3926 	add	a,#0x04
   0F53 F8                 3927 	mov	r0,a
   0F54 E6                 3928 	mov	a,@r0
   0F55 12s00r00           3929 	lcall	__gptrput
   0F58 A3                 3930 	inc	dptr
   0F59 08                 3931 	inc	r0
   0F5A E6                 3932 	mov	a,@r0
   0F5B 12s00r00           3933 	lcall	__gptrput
   0F5E A3                 3934 	inc	dptr
   0F5F 08                 3935 	inc	r0
   0F60 E6                 3936 	mov	a,@r0
   0F61 12s00r00           3937 	lcall	__gptrput
   0F64 A3                 3938 	inc	dptr
   0F65 08                 3939 	inc	r0
   0F66 E6                 3940 	mov	a,@r0
   0F67 12s00r00           3941 	lcall	__gptrput
                           3942 ;	genPointerSet
                           3943 ;	genGenPointerSet
   0F6A 8D 82              3944 	mov	dpl,r5
   0F6C 8E 83              3945 	mov	dph,r6
   0F6E 8F F0              3946 	mov	b,r7
   0F70 E5*00              3947 	mov	a,_bp
   0F72 24 04              3948 	add	a,#0x04
   0F74 F8                 3949 	mov	r0,a
   0F75 E6                 3950 	mov	a,@r0
   0F76 12s00r00           3951 	lcall	__gptrput
   0F79 A3                 3952 	inc	dptr
   0F7A 08                 3953 	inc	r0
   0F7B E6                 3954 	mov	a,@r0
   0F7C 12s00r00           3955 	lcall	__gptrput
   0F7F A3                 3956 	inc	dptr
   0F80 08                 3957 	inc	r0
   0F81 E6                 3958 	mov	a,@r0
   0F82 12s00r00           3959 	lcall	__gptrput
   0F85 A3                 3960 	inc	dptr
   0F86 08                 3961 	inc	r0
   0F87 E6                 3962 	mov	a,@r0
   0F88 12s00r00           3963 	lcall	__gptrput
                    0F8B   3964 	C$tff.c$502$2$2 ==.
                           3965 ;	tff.c:502: dirobj->sect = clust2sect(clust);
                           3966 ;	genPlus
   0F8B A8*00              3967 	mov	r0,_bp
   0F8D 08                 3968 	inc	r0
   0F8E E5*00              3969 	mov	a,_bp
   0F90 24 0E              3970 	add	a,#0x0e
   0F92 F9                 3971 	mov	r1,a
                           3972 ;     genPlusIncr
   0F93 74 0F              3973 	mov	a,#0x0F
   0F95 26                 3974 	add	a,@r0
   0F96 F7                 3975 	mov	@r1,a
                           3976 ;	Peephole 181	changed mov to clr
   0F97 E4                 3977 	clr	a
   0F98 08                 3978 	inc	r0
   0F99 36                 3979 	addc	a,@r0
   0F9A 09                 3980 	inc	r1
   0F9B F7                 3981 	mov	@r1,a
   0F9C 08                 3982 	inc	r0
   0F9D 09                 3983 	inc	r1
   0F9E E6                 3984 	mov	a,@r0
   0F9F F7                 3985 	mov	@r1,a
                           3986 ;	genCall
   0FA0 E5*00              3987 	mov	a,_bp
   0FA2 24 04              3988 	add	a,#0x04
   0FA4 F8                 3989 	mov	r0,a
   0FA5 86 82              3990 	mov	dpl,@r0
   0FA7 08                 3991 	inc	r0
   0FA8 86 83              3992 	mov	dph,@r0
   0FAA 08                 3993 	inc	r0
   0FAB 86 F0              3994 	mov	b,@r0
   0FAD 08                 3995 	inc	r0
   0FAE E6                 3996 	mov	a,@r0
   0FAF 12s04rFB           3997 	lcall	_clust2sect
   0FB2 AD 82              3998 	mov	r5,dpl
   0FB4 AE 83              3999 	mov	r6,dph
   0FB6 AF F0              4000 	mov	r7,b
   0FB8 FA                 4001 	mov	r2,a
                           4002 ;	genPointerSet
                           4003 ;	genGenPointerSet
   0FB9 E5*00              4004 	mov	a,_bp
   0FBB 24 0E              4005 	add	a,#0x0e
   0FBD F8                 4006 	mov	r0,a
   0FBE 86 82              4007 	mov	dpl,@r0
   0FC0 08                 4008 	inc	r0
   0FC1 86 83              4009 	mov	dph,@r0
   0FC3 08                 4010 	inc	r0
   0FC4 86 F0              4011 	mov	b,@r0
   0FC6 ED                 4012 	mov	a,r5
   0FC7 12s00r00           4013 	lcall	__gptrput
   0FCA A3                 4014 	inc	dptr
   0FCB EE                 4015 	mov	a,r6
   0FCC 12s00r00           4016 	lcall	__gptrput
   0FCF A3                 4017 	inc	dptr
   0FD0 EF                 4018 	mov	a,r7
   0FD1 12s00r00           4019 	lcall	__gptrput
   0FD4 A3                 4020 	inc	dptr
   0FD5 EA                 4021 	mov	a,r2
   0FD6 12s00r00           4022 	lcall	__gptrput
   0FD9 02s10r59           4023 	ljmp	00103$
   0FDC                    4024 00102$:
                    0FDC   4025 	C$tff.c$506$2$3 ==.
                           4026 ;	tff.c:506: dirobj->clust = dirobj->sclust = 0;
                           4027 ;	genPlus
   0FDC A8*00              4028 	mov	r0,_bp
   0FDE 08                 4029 	inc	r0
                           4030 ;     genPlusIncr
   0FDF 74 0B              4031 	mov	a,#0x0B
   0FE1 26                 4032 	add	a,@r0
   0FE2 FA                 4033 	mov	r2,a
                           4034 ;	Peephole 181	changed mov to clr
   0FE3 E4                 4035 	clr	a
   0FE4 08                 4036 	inc	r0
   0FE5 36                 4037 	addc	a,@r0
   0FE6 FB                 4038 	mov	r3,a
   0FE7 08                 4039 	inc	r0
   0FE8 86 04              4040 	mov	ar4,@r0
                           4041 ;	genPlus
   0FEA A8*00              4042 	mov	r0,_bp
   0FEC 08                 4043 	inc	r0
                           4044 ;     genPlusIncr
   0FED 74 07              4045 	mov	a,#0x07
   0FEF 26                 4046 	add	a,@r0
   0FF0 FD                 4047 	mov	r5,a
                           4048 ;	Peephole 181	changed mov to clr
   0FF1 E4                 4049 	clr	a
   0FF2 08                 4050 	inc	r0
   0FF3 36                 4051 	addc	a,@r0
   0FF4 FE                 4052 	mov	r6,a
   0FF5 08                 4053 	inc	r0
   0FF6 86 07              4054 	mov	ar7,@r0
                           4055 ;	genPointerSet
                           4056 ;	genGenPointerSet
   0FF8 8D 82              4057 	mov	dpl,r5
   0FFA 8E 83              4058 	mov	dph,r6
   0FFC 8F F0              4059 	mov	b,r7
                           4060 ;	Peephole 181	changed mov to clr
   0FFE E4                 4061 	clr	a
   0FFF 12s00r00           4062 	lcall	__gptrput
   1002 A3                 4063 	inc	dptr
                           4064 ;	Peephole 181	changed mov to clr
   1003 E4                 4065 	clr	a
   1004 12s00r00           4066 	lcall	__gptrput
   1007 A3                 4067 	inc	dptr
                           4068 ;	Peephole 181	changed mov to clr
   1008 E4                 4069 	clr	a
   1009 12s00r00           4070 	lcall	__gptrput
   100C A3                 4071 	inc	dptr
                           4072 ;	Peephole 181	changed mov to clr
   100D E4                 4073 	clr	a
   100E 12s00r00           4074 	lcall	__gptrput
                           4075 ;	genPointerSet
                           4076 ;	genGenPointerSet
   1011 8A 82              4077 	mov	dpl,r2
   1013 8B 83              4078 	mov	dph,r3
   1015 8C F0              4079 	mov	b,r4
                           4080 ;	Peephole 181	changed mov to clr
   1017 E4                 4081 	clr	a
   1018 12s00r00           4082 	lcall	__gptrput
   101B A3                 4083 	inc	dptr
                           4084 ;	Peephole 181	changed mov to clr
   101C E4                 4085 	clr	a
   101D 12s00r00           4086 	lcall	__gptrput
   1020 A3                 4087 	inc	dptr
                           4088 ;	Peephole 181	changed mov to clr
   1021 E4                 4089 	clr	a
   1022 12s00r00           4090 	lcall	__gptrput
   1025 A3                 4091 	inc	dptr
                           4092 ;	Peephole 181	changed mov to clr
   1026 E4                 4093 	clr	a
   1027 12s00r00           4094 	lcall	__gptrput
                    102A   4095 	C$tff.c$507$2$3 ==.
                           4096 ;	tff.c:507: dirobj->sect = clust;
                           4097 ;	genPlus
   102A A8*00              4098 	mov	r0,_bp
   102C 08                 4099 	inc	r0
                           4100 ;     genPlusIncr
   102D 74 0F              4101 	mov	a,#0x0F
   102F 26                 4102 	add	a,@r0
   1030 FA                 4103 	mov	r2,a
                           4104 ;	Peephole 181	changed mov to clr
   1031 E4                 4105 	clr	a
   1032 08                 4106 	inc	r0
   1033 36                 4107 	addc	a,@r0
   1034 FB                 4108 	mov	r3,a
   1035 08                 4109 	inc	r0
   1036 86 04              4110 	mov	ar4,@r0
                           4111 ;	genPointerSet
                           4112 ;	genGenPointerSet
   1038 8A 82              4113 	mov	dpl,r2
   103A 8B 83              4114 	mov	dph,r3
   103C 8C F0              4115 	mov	b,r4
   103E E5*00              4116 	mov	a,_bp
   1040 24 04              4117 	add	a,#0x04
   1042 F8                 4118 	mov	r0,a
   1043 E6                 4119 	mov	a,@r0
   1044 12s00r00           4120 	lcall	__gptrput
   1047 A3                 4121 	inc	dptr
   1048 08                 4122 	inc	r0
   1049 E6                 4123 	mov	a,@r0
   104A 12s00r00           4124 	lcall	__gptrput
   104D A3                 4125 	inc	dptr
   104E 08                 4126 	inc	r0
   104F E6                 4127 	mov	a,@r0
   1050 12s00r00           4128 	lcall	__gptrput
   1053 A3                 4129 	inc	dptr
   1054 08                 4130 	inc	r0
   1055 E6                 4131 	mov	a,@r0
   1056 12s00r00           4132 	lcall	__gptrput
   1059                    4133 00103$:
                    1059   4134 	C$tff.c$509$1$1 ==.
                           4135 ;	tff.c:509: dirobj->index = 0;
                           4136 ;	genPlus
   1059 A8*00              4137 	mov	r0,_bp
   105B 08                 4138 	inc	r0
                           4139 ;     genPlusIncr
   105C 74 02              4140 	mov	a,#0x02
   105E 26                 4141 	add	a,@r0
   105F FA                 4142 	mov	r2,a
                           4143 ;	Peephole 181	changed mov to clr
   1060 E4                 4144 	clr	a
   1061 08                 4145 	inc	r0
   1062 36                 4146 	addc	a,@r0
   1063 FB                 4147 	mov	r3,a
   1064 08                 4148 	inc	r0
   1065 86 04              4149 	mov	ar4,@r0
                           4150 ;	genPointerSet
                           4151 ;	genGenPointerSet
   1067 8A 82              4152 	mov	dpl,r2
   1069 8B 83              4153 	mov	dph,r3
   106B 8C F0              4154 	mov	b,r4
                           4155 ;	Peephole 181	changed mov to clr
   106D E4                 4156 	clr	a
   106E 12s00r00           4157 	lcall	__gptrput
   1071 A3                 4158 	inc	dptr
                           4159 ;	Peephole 181	changed mov to clr
   1072 E4                 4160 	clr	a
   1073 12s00r00           4161 	lcall	__gptrput
                    1076   4162 	C$tff.c$510$1$1 ==.
                           4163 ;	tff.c:510: dirobj->fs = fs;
                           4164 ;	genPlus
   1076 A8*00              4165 	mov	r0,_bp
   1078 08                 4166 	inc	r0
                           4167 ;     genPlusIncr
   1079 74 04              4168 	mov	a,#0x04
   107B 26                 4169 	add	a,@r0
   107C FA                 4170 	mov	r2,a
                           4171 ;	Peephole 181	changed mov to clr
   107D E4                 4172 	clr	a
   107E 08                 4173 	inc	r0
   107F 36                 4174 	addc	a,@r0
   1080 FB                 4175 	mov	r3,a
   1081 08                 4176 	inc	r0
   1082 86 04              4177 	mov	ar4,@r0
                           4178 ;	genPointerSet
                           4179 ;	genGenPointerSet
   1084 8A 82              4180 	mov	dpl,r2
   1086 8B 83              4181 	mov	dph,r3
   1088 8C F0              4182 	mov	b,r4
   108A E5*00              4183 	mov	a,_bp
   108C 24 0B              4184 	add	a,#0x0b
   108E F8                 4185 	mov	r0,a
   108F E6                 4186 	mov	a,@r0
   1090 12s00r00           4187 	lcall	__gptrput
   1093 A3                 4188 	inc	dptr
   1094 08                 4189 	inc	r0
   1095 E6                 4190 	mov	a,@r0
   1096 12s00r00           4191 	lcall	__gptrput
   1099 A3                 4192 	inc	dptr
   109A 08                 4193 	inc	r0
   109B E6                 4194 	mov	a,@r0
   109C 12s00r00           4195 	lcall	__gptrput
                    109F   4196 	C$tff.c$512$1$1 ==.
                           4197 ;	tff.c:512: if (*path == '\0') {							/* Null path means the root directory */
                           4198 ;	genAssign
   109F E5*00              4199 	mov	a,_bp
   10A1 24 F8              4200 	add	a,#0xfffffff8
   10A3 F8                 4201 	mov	r0,a
   10A4 86 02              4202 	mov	ar2,@r0
   10A6 08                 4203 	inc	r0
   10A7 86 03              4204 	mov	ar3,@r0
   10A9 08                 4205 	inc	r0
   10AA 86 04              4206 	mov	ar4,@r0
                           4207 ;	genPointerGet
                           4208 ;	genGenPointerGet
   10AC 8A 82              4209 	mov	dpl,r2
   10AE 8B 83              4210 	mov	dph,r3
   10B0 8C F0              4211 	mov	b,r4
   10B2 12s00r00           4212 	lcall	__gptrget
                           4213 ;	genIfxJump
                           4214 ;	Peephole 108.b	removed ljmp by inverse jump logic
   10B5 70 27              4215 	jnz	00126$
                           4216 ;	Peephole 300	removed redundant label 00150$
                    10B7   4217 	C$tff.c$513$2$4 ==.
                           4218 ;	tff.c:513: *dir = NULL; return FR_OK;
                           4219 ;	genAssign
   10B7 E5*00              4220 	mov	a,_bp
   10B9 24 F5              4221 	add	a,#0xfffffff5
   10BB F8                 4222 	mov	r0,a
   10BC 86 02              4223 	mov	ar2,@r0
   10BE 08                 4224 	inc	r0
   10BF 86 03              4225 	mov	ar3,@r0
   10C1 08                 4226 	inc	r0
   10C2 86 04              4227 	mov	ar4,@r0
                           4228 ;	genPointerSet
                           4229 ;	genGenPointerSet
   10C4 8A 82              4230 	mov	dpl,r2
   10C6 8B 83              4231 	mov	dph,r3
   10C8 8C F0              4232 	mov	b,r4
                           4233 ;	Peephole 181	changed mov to clr
   10CA E4                 4234 	clr	a
   10CB 12s00r00           4235 	lcall	__gptrput
   10CE A3                 4236 	inc	dptr
                           4237 ;	Peephole 181	changed mov to clr
   10CF E4                 4238 	clr	a
   10D0 12s00r00           4239 	lcall	__gptrput
   10D3 A3                 4240 	inc	dptr
                           4241 ;	Peephole 181	changed mov to clr
   10D4 E4                 4242 	clr	a
   10D5 12s00r00           4243 	lcall	__gptrput
                           4244 ;	genRet
   10D8 75 82 00           4245 	mov	dpl,#0x00
   10DB 02s14r73           4246 	ljmp	00128$
   10DE                    4247 00126$:
                    10DE   4248 	C$tff.c$517$2$5 ==.
                           4249 ;	tff.c:517: ds = make_dirfile(&path, fn);					/* Get a paragraph into fn[] */
                           4250 ;	genAddrOf
   10DE E5*00              4251 	mov	a,_bp
   10E0 24 F8              4252 	add	a,#0xf8
   10E2 FA                 4253 	mov	r2,a
                           4254 ;	genCast
   10E3 7B 00              4255 	mov	r3,#0x00
   10E5 7C 40              4256 	mov	r4,#0x40
                           4257 ;	genIpush
   10E7 E5*00              4258 	mov	a,_bp
   10E9 24 FB              4259 	add	a,#0xfffffffb
   10EB F8                 4260 	mov	r0,a
   10EC E6                 4261 	mov	a,@r0
   10ED C0 E0              4262 	push	acc
   10EF 08                 4263 	inc	r0
   10F0 E6                 4264 	mov	a,@r0
   10F1 C0 E0              4265 	push	acc
   10F3 08                 4266 	inc	r0
   10F4 E6                 4267 	mov	a,@r0
   10F5 C0 E0              4268 	push	acc
                           4269 ;	genCall
   10F7 8A 82              4270 	mov	dpl,r2
   10F9 8B 83              4271 	mov	dph,r3
   10FB 8C F0              4272 	mov	b,r4
   10FD 12s0CrA1           4273 	lcall	_make_dirfile
   1100 AA 82              4274 	mov	r2,dpl
   1102 15 81              4275 	dec	sp
   1104 15 81              4276 	dec	sp
   1106 15 81              4277 	dec	sp
                           4278 ;	genAssign
                    1108   4279 	C$tff.c$518$2$5 ==.
                           4280 ;	tff.c:518: if (ds == 1) return FR_INVALID_NAME;
                           4281 ;	genCmpEq
                           4282 ;	gencjneshort
                           4283 ;	Peephole 112.b	changed ljmp to sjmp
                           4284 ;	Peephole 198.b	optimized misc jump sequence
   1108 BA 01 06           4285 	cjne	r2,#0x01,00142$
                           4286 ;	Peephole 200.b	removed redundant sjmp
                           4287 ;	Peephole 300	removed redundant label 00151$
                           4288 ;	Peephole 300	removed redundant label 00152$
                           4289 ;	genRet
   110B 75 82 04           4290 	mov	dpl,#0x04
   110E 02s14r73           4291 	ljmp	00128$
   1111                    4292 00142$:
                           4293 ;	genPlus
   1111 E5*00              4294 	mov	a,_bp
   1113 24 0B              4295 	add	a,#0x0b
   1115 F8                 4296 	mov	r0,a
                           4297 ;     genPlusIncr
   1116 74 20              4298 	mov	a,#0x20
   1118 26                 4299 	add	a,@r0
   1119 FB                 4300 	mov	r3,a
                           4301 ;	Peephole 181	changed mov to clr
   111A E4                 4302 	clr	a
   111B 08                 4303 	inc	r0
   111C 36                 4304 	addc	a,@r0
   111D FC                 4305 	mov	r4,a
   111E 08                 4306 	inc	r0
   111F 86 05              4307 	mov	ar5,@r0
                           4308 ;	genPlus
   1121 A8*00              4309 	mov	r0,_bp
   1123 08                 4310 	inc	r0
   1124 E5*00              4311 	mov	a,_bp
   1126 24 0E              4312 	add	a,#0x0e
   1128 F9                 4313 	mov	r1,a
                           4314 ;     genPlusIncr
   1129 74 0F              4315 	mov	a,#0x0F
   112B 26                 4316 	add	a,@r0
   112C F7                 4317 	mov	@r1,a
                           4318 ;	Peephole 181	changed mov to clr
   112D E4                 4319 	clr	a
   112E 08                 4320 	inc	r0
   112F 36                 4321 	addc	a,@r0
   1130 09                 4322 	inc	r1
   1131 F7                 4323 	mov	@r1,a
   1132 08                 4324 	inc	r0
   1133 09                 4325 	inc	r1
   1134 E6                 4326 	mov	a,@r0
   1135 F7                 4327 	mov	@r1,a
   1136                    4328 00119$:
                    1136   4329 	C$tff.c$520$2$5 ==.
                           4330 ;	tff.c:520: if (!move_window(dirobj->sect)) return FR_RW_ERROR;
                           4331 ;	genIpush
   1136 C0 03              4332 	push	ar3
   1138 C0 04              4333 	push	ar4
   113A C0 05              4334 	push	ar5
                           4335 ;	genPointerGet
                           4336 ;	genGenPointerGet
   113C E5*00              4337 	mov	a,_bp
   113E 24 0E              4338 	add	a,#0x0e
   1140 F8                 4339 	mov	r0,a
   1141 86 82              4340 	mov	dpl,@r0
   1143 08                 4341 	inc	r0
   1144 86 83              4342 	mov	dph,@r0
   1146 08                 4343 	inc	r0
   1147 86 F0              4344 	mov	b,@r0
   1149 12s00r00           4345 	lcall	__gptrget
   114C FE                 4346 	mov	r6,a
   114D A3                 4347 	inc	dptr
   114E 12s00r00           4348 	lcall	__gptrget
   1151 FF                 4349 	mov	r7,a
   1152 A3                 4350 	inc	dptr
   1153 12s00r00           4351 	lcall	__gptrget
   1156 FB                 4352 	mov	r3,a
   1157 A3                 4353 	inc	dptr
   1158 12s00r00           4354 	lcall	__gptrget
                           4355 ;	genCall
   115B FC                 4356 	mov	r4,a
   115C 8E 82              4357 	mov	dpl,r6
   115E 8F 83              4358 	mov	dph,r7
   1160 8B F0              4359 	mov	b,r3
                           4360 ;	Peephole 191	removed redundant mov
   1162 C0 02              4361 	push	ar2
   1164 C0 03              4362 	push	ar3
   1166 C0 04              4363 	push	ar4
   1168 C0 05              4364 	push	ar5
   116A 12s00r00           4365 	lcall	_move_window
   116D E5 82              4366 	mov	a,dpl
   116F D0 05              4367 	pop	ar5
   1171 D0 04              4368 	pop	ar4
   1173 D0 03              4369 	pop	ar3
   1175 D0 02              4370 	pop	ar2
                           4371 ;	genIpop
   1177 D0 05              4372 	pop	ar5
   1179 D0 04              4373 	pop	ar4
   117B D0 03              4374 	pop	ar3
                           4375 ;	genIfx
                           4376 ;	genIfxJump
                           4377 ;	Peephole 108.b	removed ljmp by inverse jump logic
   117D 70 06              4378 	jnz	00109$
                           4379 ;	Peephole 300	removed redundant label 00153$
                           4380 ;	genRet
   117F 75 82 08           4381 	mov	dpl,#0x08
   1182 02s14r73           4382 	ljmp	00128$
   1185                    4383 00109$:
                    1185   4384 	C$tff.c$521$2$5 ==.
                           4385 ;	tff.c:521: dptr = &fs->win[(dirobj->index & 15) * 32];		/* Pointer to the directory entry */
                           4386 ;	genIpush
   1185 C0 02              4387 	push	ar2
                           4388 ;	genPlus
   1187 A8*00              4389 	mov	r0,_bp
   1189 08                 4390 	inc	r0
   118A E5*00              4391 	mov	a,_bp
   118C 24 11              4392 	add	a,#0x11
   118E F9                 4393 	mov	r1,a
                           4394 ;     genPlusIncr
   118F 74 02              4395 	mov	a,#0x02
   1191 26                 4396 	add	a,@r0
   1192 F7                 4397 	mov	@r1,a
                           4398 ;	Peephole 181	changed mov to clr
   1193 E4                 4399 	clr	a
   1194 08                 4400 	inc	r0
   1195 36                 4401 	addc	a,@r0
   1196 09                 4402 	inc	r1
   1197 F7                 4403 	mov	@r1,a
   1198 08                 4404 	inc	r0
   1199 09                 4405 	inc	r1
   119A E6                 4406 	mov	a,@r0
   119B F7                 4407 	mov	@r1,a
                           4408 ;	genPointerGet
                           4409 ;	genGenPointerGet
   119C E5*00              4410 	mov	a,_bp
   119E 24 11              4411 	add	a,#0x11
   11A0 F8                 4412 	mov	r0,a
   11A1 86 82              4413 	mov	dpl,@r0
   11A3 08                 4414 	inc	r0
   11A4 86 83              4415 	mov	dph,@r0
   11A6 08                 4416 	inc	r0
   11A7 86 F0              4417 	mov	b,@r0
   11A9 12s00r00           4418 	lcall	__gptrget
   11AC FE                 4419 	mov	r6,a
   11AD A3                 4420 	inc	dptr
   11AE 12s00r00           4421 	lcall	__gptrget
   11B1 FF                 4422 	mov	r7,a
                           4423 ;	genAnd
   11B2 53 06 0F           4424 	anl	ar6,#0x0F
                           4425 ;	genLeftShift
                           4426 ;	genLeftShiftLiteral
                           4427 ;	genlshTwo
                           4428 ;	peephole 177.g	optimized mov sequence
                           4429 ;	Peephole 181	changed mov to clr
   11B5 E4                 4430 	clr	a
   11B6 FF                 4431 	mov	r7,a
   11B7 C4                 4432 	swap	a
   11B8 23                 4433 	rl	a
   11B9 54 E0              4434 	anl	a,#0xe0
   11BB CE                 4435 	xch	a,r6
   11BC C4                 4436 	swap	a
   11BD 23                 4437 	rl	a
   11BE CE                 4438 	xch	a,r6
   11BF 6E                 4439 	xrl	a,r6
   11C0 CE                 4440 	xch	a,r6
   11C1 54 E0              4441 	anl	a,#0xe0
   11C3 CE                 4442 	xch	a,r6
   11C4 6E                 4443 	xrl	a,r6
   11C5 FF                 4444 	mov	r7,a
                           4445 ;	genPlus
                           4446 ;	Peephole 236.g	used r6 instead of ar6
   11C6 EE                 4447 	mov	a,r6
                           4448 ;	Peephole 236.a	used r3 instead of ar3
   11C7 2B                 4449 	add	a,r3
   11C8 FE                 4450 	mov	r6,a
                           4451 ;	Peephole 236.g	used r7 instead of ar7
   11C9 EF                 4452 	mov	a,r7
                           4453 ;	Peephole 236.b	used r4 instead of ar4
   11CA 3C                 4454 	addc	a,r4
   11CB FF                 4455 	mov	r7,a
   11CC 8D 02              4456 	mov	ar2,r5
                           4457 ;	genAssign
   11CE E5*00              4458 	mov	a,_bp
   11D0 24 08              4459 	add	a,#0x08
   11D2 F8                 4460 	mov	r0,a
   11D3 A6 06              4461 	mov	@r0,ar6
   11D5 08                 4462 	inc	r0
   11D6 A6 07              4463 	mov	@r0,ar7
   11D8 08                 4464 	inc	r0
   11D9 A6 02              4465 	mov	@r0,ar2
                    11DB   4466 	C$tff.c$522$3$6 ==.
                           4467 ;	tff.c:522: if (dptr[DIR_Name] == 0)						/* Has it reached to end of dir? */
                           4468 ;	genPointerGet
                           4469 ;	genGenPointerGet
   11DB E5*00              4470 	mov	a,_bp
   11DD 24 08              4471 	add	a,#0x08
   11DF F8                 4472 	mov	r0,a
   11E0 86 82              4473 	mov	dpl,@r0
   11E2 08                 4474 	inc	r0
   11E3 86 83              4475 	mov	dph,@r0
   11E5 08                 4476 	inc	r0
   11E6 86 F0              4477 	mov	b,@r0
   11E8 12s00r00           4478 	lcall	__gptrget
                           4479 ;	genIpop
   11EB D0 02              4480 	pop	ar2
                           4481 ;	genIfx
                           4482 ;	genIfxJump
                           4483 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11ED 70 14              4484 	jnz	00111$
                           4485 ;	Peephole 300	removed redundant label 00154$
                    11EF   4486 	C$tff.c$523$3$6 ==.
                           4487 ;	tff.c:523: return !ds ? FR_NO_FILE : FR_NO_PATH;
                           4488 ;	genNot
   11EF EA                 4489 	mov	a,r2
   11F0 B4 01 00           4490 	cjne	a,#0x01,00155$
   11F3                    4491 00155$:
   11F3 E4                 4492 	clr	a
   11F4 33                 4493 	rlc	a
                           4494 ;	genIfx
   11F5 FE                 4495 	mov	r6,a
                           4496 ;	Peephole 105	removed redundant mov
                           4497 ;	genIfxJump
                           4498 ;	Peephole 108.c	removed ljmp by inverse jump logic
   11F6 60 04              4499 	jz	00130$
                           4500 ;	Peephole 300	removed redundant label 00156$
                           4501 ;	genAssign
   11F8 7E 02              4502 	mov	r6,#0x02
                           4503 ;	Peephole 112.b	changed ljmp to sjmp
   11FA 80 02              4504 	sjmp	00131$
   11FC                    4505 00130$:
                           4506 ;	genAssign
   11FC 7E 03              4507 	mov	r6,#0x03
   11FE                    4508 00131$:
                           4509 ;	genRet
   11FE 8E 82              4510 	mov	dpl,r6
   1200 02s14r73           4511 	ljmp	00128$
   1203                    4512 00111$:
                    1203   4513 	C$tff.c$524$3$6 ==.
                           4514 ;	tff.c:524: if (dptr[DIR_Name] != 0xE5						/* Matched? */
                           4515 ;	genPointerGet
                           4516 ;	genGenPointerGet
   1203 E5*00              4517 	mov	a,_bp
   1205 24 08              4518 	add	a,#0x08
   1207 F8                 4519 	mov	r0,a
   1208 86 82              4520 	mov	dpl,@r0
   120A 08                 4521 	inc	r0
   120B 86 83              4522 	mov	dph,@r0
   120D 08                 4523 	inc	r0
   120E 86 F0              4524 	mov	b,@r0
   1210 12s00r00           4525 	lcall	__gptrget
   1213 FE                 4526 	mov	r6,a
                           4527 ;	genCmpEq
                           4528 ;	gencjneshort
   1214 BE E5 02           4529 	cjne	r6,#0xE5,00157$
                           4530 ;	Peephole 112.b	changed ljmp to sjmp
   1217 80 6F              4531 	sjmp	00113$
   1219                    4532 00157$:
                    1219   4533 	C$tff.c$525$2$5 ==.
                           4534 ;	tff.c:525: && !(dptr[DIR_Attr] & AM_VOL)
                           4535 ;	genIpush
   1219 C0 03              4536 	push	ar3
   121B C0 04              4537 	push	ar4
   121D C0 05              4538 	push	ar5
                           4539 ;	genPlus
   121F E5*00              4540 	mov	a,_bp
   1221 24 08              4541 	add	a,#0x08
   1223 F8                 4542 	mov	r0,a
                           4543 ;     genPlusIncr
   1224 74 0B              4544 	mov	a,#0x0B
   1226 26                 4545 	add	a,@r0
   1227 FE                 4546 	mov	r6,a
                           4547 ;	Peephole 181	changed mov to clr
   1228 E4                 4548 	clr	a
   1229 08                 4549 	inc	r0
   122A 36                 4550 	addc	a,@r0
   122B FF                 4551 	mov	r7,a
   122C 08                 4552 	inc	r0
   122D 86 03              4553 	mov	ar3,@r0
                           4554 ;	genPointerGet
                           4555 ;	genGenPointerGet
   122F 8E 82              4556 	mov	dpl,r6
   1231 8F 83              4557 	mov	dph,r7
   1233 8B F0              4558 	mov	b,r3
   1235 12s00r00           4559 	lcall	__gptrget
                           4560 ;	genAnd
   1238 FE                 4561 	mov	r6,a
                           4562 ;	Peephole 105	removed redundant mov
   1239 54 08              4563 	anl	a,#0x08
                           4564 ;	genIpop
   123B D0 05              4565 	pop	ar5
   123D D0 04              4566 	pop	ar4
   123F D0 03              4567 	pop	ar3
                           4568 ;	genIfx
                           4569 ;	genIfxJump
                           4570 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1241 70 45              4571 	jnz	00113$
                           4572 ;	Peephole 300	removed redundant label 00158$
                    1243   4573 	C$tff.c$526$3$6 ==.
                           4574 ;	tff.c:526: && !memcmp(&dptr[DIR_Name], fn, 8+3) ) break;
                           4575 ;	genIpush
   1243 C0 02              4576 	push	ar2
   1245 C0 03              4577 	push	ar3
   1247 C0 04              4578 	push	ar4
   1249 C0 05              4579 	push	ar5
   124B 74 0B              4580 	mov	a,#0x0B
   124D C0 E0              4581 	push	acc
                           4582 ;	Peephole 181	changed mov to clr
   124F E4                 4583 	clr	a
   1250 C0 E0              4584 	push	acc
                           4585 ;	genIpush
   1252 E5*00              4586 	mov	a,_bp
   1254 24 FB              4587 	add	a,#0xfffffffb
   1256 F8                 4588 	mov	r0,a
   1257 E6                 4589 	mov	a,@r0
   1258 C0 E0              4590 	push	acc
   125A 08                 4591 	inc	r0
   125B E6                 4592 	mov	a,@r0
   125C C0 E0              4593 	push	acc
   125E 08                 4594 	inc	r0
   125F E6                 4595 	mov	a,@r0
   1260 C0 E0              4596 	push	acc
                           4597 ;	genCall
   1262 E5*00              4598 	mov	a,_bp
   1264 24 08              4599 	add	a,#0x08
   1266 F8                 4600 	mov	r0,a
   1267 86 82              4601 	mov	dpl,@r0
   1269 08                 4602 	inc	r0
   126A 86 83              4603 	mov	dph,@r0
   126C 08                 4604 	inc	r0
   126D 86 F0              4605 	mov	b,@r0
   126F 12s00r00           4606 	lcall	_memcmp
   1272 AE 82              4607 	mov	r6,dpl
   1274 AF 83              4608 	mov	r7,dph
   1276 E5 81              4609 	mov	a,sp
   1278 24 FB              4610 	add	a,#0xfb
   127A F5 81              4611 	mov	sp,a
   127C D0 05              4612 	pop	ar5
   127E D0 04              4613 	pop	ar4
   1280 D0 03              4614 	pop	ar3
   1282 D0 02              4615 	pop	ar2
                           4616 ;	genIfx
   1284 EE                 4617 	mov	a,r6
   1285 4F                 4618 	orl	a,r7
                           4619 ;	genIfxJump
                           4620 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1286 60 39              4621 	jz	00120$
                           4622 ;	Peephole 300	removed redundant label 00159$
   1288                    4623 00113$:
                    1288   4624 	C$tff.c$527$3$6 ==.
                           4625 ;	tff.c:527: if (!next_dir_entry(dirobj))					/* Next directory pointer */
                           4626 ;	genCall
   1288 A8*00              4627 	mov	r0,_bp
   128A 08                 4628 	inc	r0
   128B 86 82              4629 	mov	dpl,@r0
   128D 08                 4630 	inc	r0
   128E 86 83              4631 	mov	dph,@r0
   1290 08                 4632 	inc	r0
   1291 86 F0              4633 	mov	b,@r0
   1293 C0 02              4634 	push	ar2
   1295 C0 03              4635 	push	ar3
   1297 C0 04              4636 	push	ar4
   1299 C0 05              4637 	push	ar5
   129B 12s06r1E           4638 	lcall	_next_dir_entry
   129E E5 82              4639 	mov	a,dpl
   12A0 D0 05              4640 	pop	ar5
   12A2 D0 04              4641 	pop	ar4
   12A4 D0 03              4642 	pop	ar3
   12A6 D0 02              4643 	pop	ar2
                           4644 ;	genIfx
                           4645 ;	genIfxJump
   12A8 60 03              4646 	jz	00160$
   12AA 02s11r36           4647 	ljmp	00119$
   12AD                    4648 00160$:
                    12AD   4649 	C$tff.c$528$3$6 ==.
                           4650 ;	tff.c:528: return !ds ? FR_NO_FILE : FR_NO_PATH;
                           4651 ;	genNot
   12AD EA                 4652 	mov	a,r2
   12AE B4 01 00           4653 	cjne	a,#0x01,00161$
   12B1                    4654 00161$:
   12B1 E4                 4655 	clr	a
   12B2 33                 4656 	rlc	a
                           4657 ;	genIfx
   12B3 FB                 4658 	mov	r3,a
                           4659 ;	Peephole 105	removed redundant mov
                           4660 ;	genIfxJump
                           4661 ;	Peephole 108.c	removed ljmp by inverse jump logic
   12B4 60 04              4662 	jz	00132$
                           4663 ;	Peephole 300	removed redundant label 00162$
                           4664 ;	genAssign
   12B6 7B 02              4665 	mov	r3,#0x02
                           4666 ;	Peephole 112.b	changed ljmp to sjmp
   12B8 80 02              4667 	sjmp	00133$
   12BA                    4668 00132$:
                           4669 ;	genAssign
   12BA 7B 03              4670 	mov	r3,#0x03
   12BC                    4671 00133$:
                           4672 ;	genRet
   12BC 8B 82              4673 	mov	dpl,r3
   12BE 02s14r73           4674 	ljmp	00128$
   12C1                    4675 00120$:
                    12C1   4676 	C$tff.c$530$2$5 ==.
                           4677 ;	tff.c:530: if (!ds) { *dir = dptr; return FR_OK; }				/* Matched with end of path */
                           4678 ;	genIfx
   12C1 EA                 4679 	mov	a,r2
                           4680 ;	genIfxJump
                           4681 ;	Peephole 108.b	removed ljmp by inverse jump logic
   12C2 70 2E              4682 	jnz	00122$
                           4683 ;	Peephole 300	removed redundant label 00163$
                           4684 ;	genAssign
   12C4 E5*00              4685 	mov	a,_bp
   12C6 24 F5              4686 	add	a,#0xfffffff5
   12C8 F8                 4687 	mov	r0,a
   12C9 86 02              4688 	mov	ar2,@r0
   12CB 08                 4689 	inc	r0
   12CC 86 03              4690 	mov	ar3,@r0
   12CE 08                 4691 	inc	r0
   12CF 86 04              4692 	mov	ar4,@r0
                           4693 ;	genPointerSet
                           4694 ;	genGenPointerSet
   12D1 8A 82              4695 	mov	dpl,r2
   12D3 8B 83              4696 	mov	dph,r3
   12D5 8C F0              4697 	mov	b,r4
   12D7 E5*00              4698 	mov	a,_bp
   12D9 24 08              4699 	add	a,#0x08
   12DB F8                 4700 	mov	r0,a
   12DC E6                 4701 	mov	a,@r0
   12DD 12s00r00           4702 	lcall	__gptrput
   12E0 A3                 4703 	inc	dptr
   12E1 08                 4704 	inc	r0
   12E2 E6                 4705 	mov	a,@r0
   12E3 12s00r00           4706 	lcall	__gptrput
   12E6 A3                 4707 	inc	dptr
   12E7 08                 4708 	inc	r0
   12E8 E6                 4709 	mov	a,@r0
   12E9 12s00r00           4710 	lcall	__gptrput
                           4711 ;	genRet
   12EC 75 82 00           4712 	mov	dpl,#0x00
   12EF 02s14r73           4713 	ljmp	00128$
   12F2                    4714 00122$:
                    12F2   4715 	C$tff.c$531$2$5 ==.
                           4716 ;	tff.c:531: if (!(dptr[DIR_Attr] & AM_DIR)) return FR_NO_PATH;	/* Cannot trace because it is a file */
                           4717 ;	genPlus
   12F2 E5*00              4718 	mov	a,_bp
   12F4 24 08              4719 	add	a,#0x08
   12F6 F8                 4720 	mov	r0,a
                           4721 ;     genPlusIncr
   12F7 74 0B              4722 	mov	a,#0x0B
   12F9 26                 4723 	add	a,@r0
   12FA FA                 4724 	mov	r2,a
                           4725 ;	Peephole 181	changed mov to clr
   12FB E4                 4726 	clr	a
   12FC 08                 4727 	inc	r0
   12FD 36                 4728 	addc	a,@r0
   12FE FB                 4729 	mov	r3,a
   12FF 08                 4730 	inc	r0
   1300 86 04              4731 	mov	ar4,@r0
                           4732 ;	genPointerGet
                           4733 ;	genGenPointerGet
   1302 8A 82              4734 	mov	dpl,r2
   1304 8B 83              4735 	mov	dph,r3
   1306 8C F0              4736 	mov	b,r4
   1308 12s00r00           4737 	lcall	__gptrget
                           4738 ;	genAnd
   130B FA                 4739 	mov	r2,a
                           4740 ;	Peephole 105	removed redundant mov
                           4741 ;	genIfxJump
                           4742 ;	Peephole 108.e	removed ljmp by inverse jump logic
   130C 20 E4 06           4743 	jb	acc.4,00124$
                           4744 ;	Peephole 300	removed redundant label 00164$
                           4745 ;	genRet
   130F 75 82 03           4746 	mov	dpl,#0x03
   1312 02s14r73           4747 	ljmp	00128$
   1315                    4748 00124$:
                    1315   4749 	C$tff.c$534$2$5 ==.
                           4750 ;	tff.c:534: ((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) |
                           4751 ;	genPlus
   1315 E5*00              4752 	mov	a,_bp
   1317 24 08              4753 	add	a,#0x08
   1319 F8                 4754 	mov	r0,a
                           4755 ;     genPlusIncr
   131A 74 14              4756 	mov	a,#0x14
   131C 26                 4757 	add	a,@r0
   131D FA                 4758 	mov	r2,a
                           4759 ;	Peephole 181	changed mov to clr
   131E E4                 4760 	clr	a
   131F 08                 4761 	inc	r0
   1320 36                 4762 	addc	a,@r0
   1321 FB                 4763 	mov	r3,a
   1322 08                 4764 	inc	r0
   1323 86 04              4765 	mov	ar4,@r0
                           4766 ;	genPlus
                           4767 ;     genPlusIncr
   1325 74 01              4768 	mov	a,#0x01
                           4769 ;	Peephole 236.a	used r2 instead of ar2
   1327 2A                 4770 	add	a,r2
   1328 FD                 4771 	mov	r5,a
                           4772 ;	Peephole 181	changed mov to clr
   1329 E4                 4773 	clr	a
                           4774 ;	Peephole 236.b	used r3 instead of ar3
   132A 3B                 4775 	addc	a,r3
   132B FE                 4776 	mov	r6,a
   132C 8C 07              4777 	mov	ar7,r4
                           4778 ;	genPointerGet
                           4779 ;	genGenPointerGet
   132E 8D 82              4780 	mov	dpl,r5
   1330 8E 83              4781 	mov	dph,r6
   1332 8F F0              4782 	mov	b,r7
   1334 12s00r00           4783 	lcall	__gptrget
   1337 FD                 4784 	mov	r5,a
                           4785 ;	genCast
                           4786 ;	genLeftShift
                           4787 ;	genLeftShiftLiteral
                           4788 ;	genlshTwo
                           4789 ;	peephole 177.e	removed redundant move
   1338 8D 06              4790 	mov	ar6,r5
   133A 7D 00              4791 	mov	r5,#0x00
                           4792 ;	genPointerGet
                           4793 ;	genGenPointerGet
   133C 8A 82              4794 	mov	dpl,r2
   133E 8B 83              4795 	mov	dph,r3
   1340 8C F0              4796 	mov	b,r4
   1342 12s00r00           4797 	lcall	__gptrget
                           4798 ;	genCast
                           4799 ;	genOr
   1345 FA                 4800 	mov	r2,a
   1346 7B 00              4801 	mov	r3,#0x00
                           4802 ;	Peephole 177.d	removed redundant move
   1348 42 05              4803 	orl	ar5,a
   134A EB                 4804 	mov	a,r3
   134B 42 06              4805 	orl	ar6,a
                           4806 ;	genCast
                           4807 ;	genLeftShift
                           4808 ;	genLeftShiftLiteral
                           4809 ;	Peephole 3.c	changed mov to clr
   134D E4                 4810 	clr	a
   134E FA                 4811 	mov	r2,a
   134F FB                 4812 	mov	r3,a
   1350 E5*00              4813 	mov	a,_bp
   1352 24 14              4814 	add	a,#0x14
                           4815 ;	genlshFour
                           4816 ;	Peephole 185	changed order of increment (acc incremented also!)
   1354 04                 4817 	inc	a
                           4818 ;	Peephole 185	changed order of increment (acc incremented also!)
   1355 04                 4819 	inc	a
                           4820 ;	Peephole 185	changed order of increment (acc incremented also!)
   1356 04                 4821 	inc	a
   1357 F8                 4822 	mov	r0,a
   1358 A6 06              4823 	mov	@r0,ar6
   135A 18                 4824 	dec	r0
   135B A6 05              4825 	mov	@r0,ar5
   135D 18                 4826 	dec	r0
   135E 76 00              4827 	mov	@r0,#0x00
   1360 18                 4828 	dec	r0
   1361 76 00              4829 	mov	@r0,#0x00
                    1363   4830 	C$tff.c$536$2$5 ==.
                           4831 ;	tff.c:536: LD_WORD(&dptr[DIR_FstClusLO]);
                           4832 ;	genPlus
   1363 E5*00              4833 	mov	a,_bp
   1365 24 08              4834 	add	a,#0x08
   1367 F8                 4835 	mov	r0,a
                           4836 ;     genPlusIncr
   1368 74 1A              4837 	mov	a,#0x1A
   136A 26                 4838 	add	a,@r0
   136B FC                 4839 	mov	r4,a
                           4840 ;	Peephole 181	changed mov to clr
   136C E4                 4841 	clr	a
   136D 08                 4842 	inc	r0
   136E 36                 4843 	addc	a,@r0
   136F FF                 4844 	mov	r7,a
   1370 08                 4845 	inc	r0
   1371 86 02              4846 	mov	ar2,@r0
                           4847 ;	genPlus
                           4848 ;     genPlusIncr
   1373 74 01              4849 	mov	a,#0x01
                           4850 ;	Peephole 236.a	used r4 instead of ar4
   1375 2C                 4851 	add	a,r4
   1376 FB                 4852 	mov	r3,a
                           4853 ;	Peephole 181	changed mov to clr
   1377 E4                 4854 	clr	a
                           4855 ;	Peephole 236.b	used r7 instead of ar7
   1378 3F                 4856 	addc	a,r7
   1379 FD                 4857 	mov	r5,a
   137A 8A 06              4858 	mov	ar6,r2
                           4859 ;	genPointerGet
                           4860 ;	genGenPointerGet
   137C 8B 82              4861 	mov	dpl,r3
   137E 8D 83              4862 	mov	dph,r5
   1380 8E F0              4863 	mov	b,r6
   1382 12s00r00           4864 	lcall	__gptrget
   1385 FB                 4865 	mov	r3,a
                           4866 ;	genCast
                           4867 ;	genLeftShift
                           4868 ;	genLeftShiftLiteral
                           4869 ;	genlshTwo
                           4870 ;	peephole 177.e	removed redundant move
   1386 8B 05              4871 	mov	ar5,r3
   1388 7B 00              4872 	mov	r3,#0x00
                           4873 ;	genPointerGet
                           4874 ;	genGenPointerGet
   138A 8C 82              4875 	mov	dpl,r4
   138C 8F 83              4876 	mov	dph,r7
   138E 8A F0              4877 	mov	b,r2
   1390 12s00r00           4878 	lcall	__gptrget
                           4879 ;	genCast
                           4880 ;	genOr
   1393 FC                 4881 	mov	r4,a
   1394 7A 00              4882 	mov	r2,#0x00
                           4883 ;	Peephole 177.d	removed redundant move
   1396 42 03              4884 	orl	ar3,a
   1398 EA                 4885 	mov	a,r2
   1399 42 05              4886 	orl	ar5,a
                           4887 ;	genCast
                           4888 ;	genOr
                           4889 ;	Peephole 3.c	changed mov to clr
   139B E4                 4890 	clr	a
   139C FA                 4891 	mov	r2,a
   139D FC                 4892 	mov	r4,a
   139E E5*00              4893 	mov	a,_bp
   13A0 24 14              4894 	add	a,#0x14
   13A2 F8                 4895 	mov	r0,a
   13A3 E6                 4896 	mov	a,@r0
   13A4 42 03              4897 	orl	ar3,a
   13A6 08                 4898 	inc	r0
   13A7 E6                 4899 	mov	a,@r0
   13A8 42 05              4900 	orl	ar5,a
   13AA 08                 4901 	inc	r0
   13AB E6                 4902 	mov	a,@r0
   13AC 42 02              4903 	orl	ar2,a
   13AE 08                 4904 	inc	r0
   13AF E6                 4905 	mov	a,@r0
   13B0 42 04              4906 	orl	ar4,a
                           4907 ;	genAssign
   13B2 E5*00              4908 	mov	a,_bp
   13B4 24 04              4909 	add	a,#0x04
   13B6 F8                 4910 	mov	r0,a
   13B7 A6 03              4911 	mov	@r0,ar3
   13B9 08                 4912 	inc	r0
   13BA A6 05              4913 	mov	@r0,ar5
   13BC 08                 4914 	inc	r0
   13BD A6 02              4915 	mov	@r0,ar2
   13BF 08                 4916 	inc	r0
   13C0 A6 04              4917 	mov	@r0,ar4
                    13C2   4918 	C$tff.c$537$2$5 ==.
                           4919 ;	tff.c:537: dirobj->clust = dirobj->sclust = clust;				/* Restart scannig with the new directory */
                           4920 ;	genPlus
   13C2 A8*00              4921 	mov	r0,_bp
   13C4 08                 4922 	inc	r0
                           4923 ;     genPlusIncr
   13C5 74 0B              4924 	mov	a,#0x0B
   13C7 26                 4925 	add	a,@r0
   13C8 FA                 4926 	mov	r2,a
                           4927 ;	Peephole 181	changed mov to clr
   13C9 E4                 4928 	clr	a
   13CA 08                 4929 	inc	r0
   13CB 36                 4930 	addc	a,@r0
   13CC FB                 4931 	mov	r3,a
   13CD 08                 4932 	inc	r0
   13CE 86 04              4933 	mov	ar4,@r0
                           4934 ;	genPlus
   13D0 A8*00              4935 	mov	r0,_bp
   13D2 08                 4936 	inc	r0
                           4937 ;     genPlusIncr
   13D3 74 07              4938 	mov	a,#0x07
   13D5 26                 4939 	add	a,@r0
   13D6 FD                 4940 	mov	r5,a
                           4941 ;	Peephole 181	changed mov to clr
   13D7 E4                 4942 	clr	a
   13D8 08                 4943 	inc	r0
   13D9 36                 4944 	addc	a,@r0
   13DA FE                 4945 	mov	r6,a
   13DB 08                 4946 	inc	r0
   13DC 86 07              4947 	mov	ar7,@r0
                           4948 ;	genPointerSet
                           4949 ;	genGenPointerSet
   13DE 8D 82              4950 	mov	dpl,r5
   13E0 8E 83              4951 	mov	dph,r6
   13E2 8F F0              4952 	mov	b,r7
   13E4 E5*00              4953 	mov	a,_bp
   13E6 24 04              4954 	add	a,#0x04
   13E8 F8                 4955 	mov	r0,a
   13E9 E6                 4956 	mov	a,@r0
   13EA 12s00r00           4957 	lcall	__gptrput
   13ED A3                 4958 	inc	dptr
   13EE 08                 4959 	inc	r0
   13EF E6                 4960 	mov	a,@r0
   13F0 12s00r00           4961 	lcall	__gptrput
   13F3 A3                 4962 	inc	dptr
   13F4 08                 4963 	inc	r0
   13F5 E6                 4964 	mov	a,@r0
   13F6 12s00r00           4965 	lcall	__gptrput
   13F9 A3                 4966 	inc	dptr
   13FA 08                 4967 	inc	r0
   13FB E6                 4968 	mov	a,@r0
   13FC 12s00r00           4969 	lcall	__gptrput
                           4970 ;	genPointerSet
                           4971 ;	genGenPointerSet
   13FF 8A 82              4972 	mov	dpl,r2
   1401 8B 83              4973 	mov	dph,r3
   1403 8C F0              4974 	mov	b,r4
   1405 E5*00              4975 	mov	a,_bp
   1407 24 04              4976 	add	a,#0x04
   1409 F8                 4977 	mov	r0,a
   140A E6                 4978 	mov	a,@r0
   140B 12s00r00           4979 	lcall	__gptrput
   140E A3                 4980 	inc	dptr
   140F 08                 4981 	inc	r0
   1410 E6                 4982 	mov	a,@r0
   1411 12s00r00           4983 	lcall	__gptrput
   1414 A3                 4984 	inc	dptr
   1415 08                 4985 	inc	r0
   1416 E6                 4986 	mov	a,@r0
   1417 12s00r00           4987 	lcall	__gptrput
   141A A3                 4988 	inc	dptr
   141B 08                 4989 	inc	r0
   141C E6                 4990 	mov	a,@r0
   141D 12s00r00           4991 	lcall	__gptrput
                    1420   4992 	C$tff.c$538$2$5 ==.
                           4993 ;	tff.c:538: dirobj->sect = clust2sect(clust);
                           4994 ;	genCall
   1420 E5*00              4995 	mov	a,_bp
   1422 24 04              4996 	add	a,#0x04
   1424 F8                 4997 	mov	r0,a
   1425 86 82              4998 	mov	dpl,@r0
   1427 08                 4999 	inc	r0
   1428 86 83              5000 	mov	dph,@r0
   142A 08                 5001 	inc	r0
   142B 86 F0              5002 	mov	b,@r0
   142D 08                 5003 	inc	r0
   142E E6                 5004 	mov	a,@r0
   142F 12s04rFB           5005 	lcall	_clust2sect
   1432 AA 82              5006 	mov	r2,dpl
   1434 AB 83              5007 	mov	r3,dph
   1436 AC F0              5008 	mov	r4,b
   1438 FD                 5009 	mov	r5,a
                           5010 ;	genPointerSet
                           5011 ;	genGenPointerSet
   1439 E5*00              5012 	mov	a,_bp
   143B 24 0E              5013 	add	a,#0x0e
   143D F8                 5014 	mov	r0,a
   143E 86 82              5015 	mov	dpl,@r0
   1440 08                 5016 	inc	r0
   1441 86 83              5017 	mov	dph,@r0
   1443 08                 5018 	inc	r0
   1444 86 F0              5019 	mov	b,@r0
   1446 EA                 5020 	mov	a,r2
   1447 12s00r00           5021 	lcall	__gptrput
   144A A3                 5022 	inc	dptr
   144B EB                 5023 	mov	a,r3
   144C 12s00r00           5024 	lcall	__gptrput
   144F A3                 5025 	inc	dptr
   1450 EC                 5026 	mov	a,r4
   1451 12s00r00           5027 	lcall	__gptrput
   1454 A3                 5028 	inc	dptr
   1455 ED                 5029 	mov	a,r5
   1456 12s00r00           5030 	lcall	__gptrput
                    1459   5031 	C$tff.c$539$2$5 ==.
                           5032 ;	tff.c:539: dirobj->index = 2;
                           5033 ;	genPointerSet
                           5034 ;	genGenPointerSet
   1459 E5*00              5035 	mov	a,_bp
   145B 24 11              5036 	add	a,#0x11
   145D F8                 5037 	mov	r0,a
   145E 86 82              5038 	mov	dpl,@r0
   1460 08                 5039 	inc	r0
   1461 86 83              5040 	mov	dph,@r0
   1463 08                 5041 	inc	r0
   1464 86 F0              5042 	mov	b,@r0
   1466 74 02              5043 	mov	a,#0x02
   1468 12s00r00           5044 	lcall	__gptrput
   146B A3                 5045 	inc	dptr
                           5046 ;	Peephole 181	changed mov to clr
   146C E4                 5047 	clr	a
   146D 12s00r00           5048 	lcall	__gptrput
   1470 02s10rDE           5049 	ljmp	00126$
   1473                    5050 00128$:
   1473 85*00 81           5051 	mov	sp,_bp
   1476 D0*00              5052 	pop	_bp
                    1478   5053 	C$tff.c$541$2$5 ==.
                    1478   5054 	XFtff$trace_path$0$0 ==.
   1478 22                 5055 	ret
                           5056 ;------------------------------------------------------------
                           5057 ;Allocation info for local variables in function 'check_fs'
                           5058 ;------------------------------------------------------------
                           5059 ;sect                      Allocated to stack - offset 1
                           5060 ;fs                        Allocated to registers r6 r7 r2 
                           5061 ;------------------------------------------------------------
                    1479   5062 	Ftff$check_fs$0$0 ==.
                    1479   5063 	C$tff.c$607$2$5 ==.
                           5064 ;	tff.c:607: BYTE check_fs (		/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record or error */
                           5065 ;	-----------------------------------------
                           5066 ;	 function check_fs
                           5067 ;	-----------------------------------------
   1479                    5068 _check_fs:
   1479 C0*00              5069 	push	_bp
   147B 85 81*00           5070 	mov	_bp,sp
                           5071 ;     genReceive
   147E C0 82              5072 	push	dpl
   1480 C0 83              5073 	push	dph
   1482 C0 F0              5074 	push	b
   1484 C0 E0              5075 	push	acc
                    1486   5076 	C$tff.c$611$1$5 ==.
                           5077 ;	tff.c:611: FATFS *fs = FatFs;
                           5078 ;	genAssign
   1486 AE*00              5079 	mov	r6,_FatFs
   1488 AF*01              5080 	mov	r7,(_FatFs + 1)
   148A AA*02              5081 	mov	r2,(_FatFs + 2)
                    148C   5082 	C$tff.c$613$1$1 ==.
                           5083 ;	tff.c:613: if (disk_read(0, fs->win, sect, 1) != RES_OK)	/* Load boot record */
                           5084 ;	genPlus
                           5085 ;     genPlusIncr
   148C 74 20              5086 	mov	a,#0x20
                           5087 ;	Peephole 236.a	used r6 instead of ar6
   148E 2E                 5088 	add	a,r6
   148F FB                 5089 	mov	r3,a
                           5090 ;	Peephole 181	changed mov to clr
   1490 E4                 5091 	clr	a
                           5092 ;	Peephole 236.b	used r7 instead of ar7
   1491 3F                 5093 	addc	a,r7
   1492 FC                 5094 	mov	r4,a
   1493 8A 05              5095 	mov	ar5,r2
                           5096 ;	genIpush
   1495 C0 02              5097 	push	ar2
   1497 C0 06              5098 	push	ar6
   1499 C0 07              5099 	push	ar7
   149B 74 01              5100 	mov	a,#0x01
   149D C0 E0              5101 	push	acc
                           5102 ;	genIpush
   149F A8*00              5103 	mov	r0,_bp
   14A1 08                 5104 	inc	r0
   14A2 E6                 5105 	mov	a,@r0
   14A3 C0 E0              5106 	push	acc
   14A5 08                 5107 	inc	r0
   14A6 E6                 5108 	mov	a,@r0
   14A7 C0 E0              5109 	push	acc
   14A9 08                 5110 	inc	r0
   14AA E6                 5111 	mov	a,@r0
   14AB C0 E0              5112 	push	acc
   14AD 08                 5113 	inc	r0
   14AE E6                 5114 	mov	a,@r0
   14AF C0 E0              5115 	push	acc
                           5116 ;	genIpush
   14B1 C0 03              5117 	push	ar3
   14B3 C0 04              5118 	push	ar4
   14B5 C0 05              5119 	push	ar5
                           5120 ;	genCall
   14B7 75 82 00           5121 	mov	dpl,#0x00
   14BA 12s00r00           5122 	lcall	_disk_read
   14BD AB 82              5123 	mov	r3,dpl
   14BF E5 81              5124 	mov	a,sp
   14C1 24 F8              5125 	add	a,#0xf8
   14C3 F5 81              5126 	mov	sp,a
   14C5 D0 07              5127 	pop	ar7
   14C7 D0 06              5128 	pop	ar6
   14C9 D0 02              5129 	pop	ar2
                           5130 ;	genCmpEq
                           5131 ;	gencjneshort
   14CB BB 00 02           5132 	cjne	r3,#0x00,00117$
                           5133 ;	Peephole 112.b	changed ljmp to sjmp
   14CE 80 06              5134 	sjmp	00102$
   14D0                    5135 00117$:
                    14D0   5136 	C$tff.c$614$1$1 ==.
                           5137 ;	tff.c:614: return 2;
                           5138 ;	genRet
   14D0 75 82 02           5139 	mov	dpl,#0x02
   14D3 02s15rDE           5140 	ljmp	00110$
   14D6                    5141 00102$:
                    14D6   5142 	C$tff.c$615$1$1 ==.
                           5143 ;	tff.c:615: if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature */
                           5144 ;	genPlus
                           5145 ;     genPlusIncr
   14D6 74 20              5146 	mov	a,#0x20
                           5147 ;	Peephole 236.a	used r6 instead of ar6
   14D8 2E                 5148 	add	a,r6
   14D9 FB                 5149 	mov	r3,a
                           5150 ;	Peephole 181	changed mov to clr
   14DA E4                 5151 	clr	a
                           5152 ;	Peephole 236.b	used r7 instead of ar7
   14DB 3F                 5153 	addc	a,r7
   14DC FC                 5154 	mov	r4,a
   14DD 8A 05              5155 	mov	ar5,r2
                           5156 ;	genPlus
                           5157 ;     genPlusIncr
   14DF 74 FE              5158 	mov	a,#0xFE
                           5159 ;	Peephole 236.a	used r3 instead of ar3
   14E1 2B                 5160 	add	a,r3
   14E2 FB                 5161 	mov	r3,a
   14E3 74 01              5162 	mov	a,#0x01
                           5163 ;	Peephole 236.b	used r4 instead of ar4
   14E5 3C                 5164 	addc	a,r4
   14E6 FC                 5165 	mov	r4,a
                           5166 ;	genIpush
   14E7 C0 06              5167 	push	ar6
   14E9 C0 07              5168 	push	ar7
   14EB C0 02              5169 	push	ar2
                           5170 ;	genPlus
                           5171 ;     genPlusIncr
   14ED 74 01              5172 	mov	a,#0x01
                           5173 ;	Peephole 236.a	used r3 instead of ar3
   14EF 2B                 5174 	add	a,r3
   14F0 FA                 5175 	mov	r2,a
                           5176 ;	Peephole 181	changed mov to clr
   14F1 E4                 5177 	clr	a
                           5178 ;	Peephole 236.b	used r4 instead of ar4
   14F2 3C                 5179 	addc	a,r4
   14F3 FE                 5180 	mov	r6,a
   14F4 8D 07              5181 	mov	ar7,r5
                           5182 ;	genPointerGet
                           5183 ;	genGenPointerGet
   14F6 8A 82              5184 	mov	dpl,r2
   14F8 8E 83              5185 	mov	dph,r6
   14FA 8F F0              5186 	mov	b,r7
   14FC 12s00r00           5187 	lcall	__gptrget
   14FF FA                 5188 	mov	r2,a
                           5189 ;	genCast
                           5190 ;	genLeftShift
                           5191 ;	genLeftShiftLiteral
                           5192 ;	genlshTwo
                           5193 ;	peephole 177.e	removed redundant move
   1500 8A 06              5194 	mov	ar6,r2
   1502 7A 00              5195 	mov	r2,#0x00
                           5196 ;	genPointerGet
                           5197 ;	genGenPointerGet
   1504 8B 82              5198 	mov	dpl,r3
   1506 8C 83              5199 	mov	dph,r4
   1508 8D F0              5200 	mov	b,r5
   150A 12s00r00           5201 	lcall	__gptrget
                           5202 ;	genCast
                           5203 ;	genOr
   150D FB                 5204 	mov	r3,a
   150E 7C 00              5205 	mov	r4,#0x00
                           5206 ;	Peephole 177.d	removed redundant move
   1510 42 02              5207 	orl	ar2,a
   1512 EC                 5208 	mov	a,r4
   1513 42 06              5209 	orl	ar6,a
                           5210 ;	genCmpEq
                           5211 ;	gencjne
                           5212 ;	gencjneshort
                           5213 ;	Peephole 241.c	optimized compare
   1515 E4                 5214 	clr	a
   1516 BA 55 04           5215 	cjne	r2,#0x55,00118$
   1519 BE AA 01           5216 	cjne	r6,#0xAA,00118$
   151C 04                 5217 	inc	a
   151D                    5218 00118$:
                           5219 ;	Peephole 300	removed redundant label 00119$
                           5220 ;	genIpop
   151D D0 02              5221 	pop	ar2
   151F D0 07              5222 	pop	ar7
   1521 D0 06              5223 	pop	ar6
                           5224 ;	genIfx
                           5225 ;	genIfxJump
                           5226 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1523 70 06              5227 	jnz	00104$
                           5228 ;	Peephole 300	removed redundant label 00120$
                    1525   5229 	C$tff.c$616$1$1 ==.
                           5230 ;	tff.c:616: return 2;
                           5231 ;	genRet
   1525 75 82 02           5232 	mov	dpl,#0x02
   1528 02s15rDE           5233 	ljmp	00110$
   152B                    5234 00104$:
                    152B   5235 	C$tff.c$618$1$1 ==.
                           5236 ;	tff.c:618: if (!memcmp(&fs->win[BS_FilSysType], "FAT", 3))	/* Check FAT signature */
                           5237 ;	genPlus
                           5238 ;     genPlusIncr
   152B 74 20              5239 	mov	a,#0x20
                           5240 ;	Peephole 236.a	used r6 instead of ar6
   152D 2E                 5241 	add	a,r6
   152E FB                 5242 	mov	r3,a
                           5243 ;	Peephole 181	changed mov to clr
   152F E4                 5244 	clr	a
                           5245 ;	Peephole 236.b	used r7 instead of ar7
   1530 3F                 5246 	addc	a,r7
   1531 FC                 5247 	mov	r4,a
   1532 8A 05              5248 	mov	ar5,r2
                           5249 ;	genPlus
                           5250 ;     genPlusIncr
   1534 74 36              5251 	mov	a,#0x36
                           5252 ;	Peephole 236.a	used r3 instead of ar3
   1536 2B                 5253 	add	a,r3
   1537 FB                 5254 	mov	r3,a
                           5255 ;	Peephole 181	changed mov to clr
   1538 E4                 5256 	clr	a
                           5257 ;	Peephole 236.b	used r4 instead of ar4
   1539 3C                 5258 	addc	a,r4
   153A FC                 5259 	mov	r4,a
                           5260 ;	genIpush
   153B C0 02              5261 	push	ar2
   153D C0 06              5262 	push	ar6
   153F C0 07              5263 	push	ar7
   1541 74 03              5264 	mov	a,#0x03
   1543 C0 E0              5265 	push	acc
                           5266 ;	Peephole 181	changed mov to clr
   1545 E4                 5267 	clr	a
   1546 C0 E0              5268 	push	acc
                           5269 ;	genIpush
   1548 74r00              5270 	mov	a,#__str_0
   154A C0 E0              5271 	push	acc
   154C 74s00              5272 	mov	a,#(__str_0 >> 8)
   154E C0 E0              5273 	push	acc
   1550 74 80              5274 	mov	a,#0x80
   1552 C0 E0              5275 	push	acc
                           5276 ;	genCall
   1554 8B 82              5277 	mov	dpl,r3
   1556 8C 83              5278 	mov	dph,r4
   1558 8D F0              5279 	mov	b,r5
   155A 12s00r00           5280 	lcall	_memcmp
   155D AB 82              5281 	mov	r3,dpl
   155F AC 83              5282 	mov	r4,dph
   1561 E5 81              5283 	mov	a,sp
   1563 24 FB              5284 	add	a,#0xfb
   1565 F5 81              5285 	mov	sp,a
   1567 D0 07              5286 	pop	ar7
   1569 D0 06              5287 	pop	ar6
   156B D0 02              5288 	pop	ar2
                           5289 ;	genIfx
   156D EB                 5290 	mov	a,r3
   156E 4C                 5291 	orl	a,r4
                           5292 ;	genIfxJump
                           5293 ;	Peephole 108.b	removed ljmp by inverse jump logic
                    156F   5294 	C$tff.c$619$1$1 ==.
                           5295 ;	tff.c:619: return 0;
                           5296 ;	genRet
   156F 70 04              5297 	jnz	00106$
                           5298 ;	Peephole 300	removed redundant label 00121$
                           5299 ;	Peephole 256.c	loading dpl with zero from a
   1571 F5 82              5300 	mov	dpl,a
                           5301 ;	Peephole 112.b	changed ljmp to sjmp
   1573 80 69              5302 	sjmp	00110$
   1575                    5303 00106$:
                    1575   5304 	C$tff.c$621$1$1 ==.
                           5305 ;	tff.c:621: if (!memcmp(&fs->win[BS_FilSysType32], "FAT32", 5) && !(fs->win[BPB_ExtFlags] & 0x80))
                           5306 ;	genPlus
                           5307 ;     genPlusIncr
   1575 74 20              5308 	mov	a,#0x20
                           5309 ;	Peephole 236.a	used r6 instead of ar6
   1577 2E                 5310 	add	a,r6
   1578 FB                 5311 	mov	r3,a
                           5312 ;	Peephole 181	changed mov to clr
   1579 E4                 5313 	clr	a
                           5314 ;	Peephole 236.b	used r7 instead of ar7
   157A 3F                 5315 	addc	a,r7
   157B FC                 5316 	mov	r4,a
   157C 8A 05              5317 	mov	ar5,r2
                           5318 ;	genPlus
                           5319 ;     genPlusIncr
   157E 74 52              5320 	mov	a,#0x52
                           5321 ;	Peephole 236.a	used r3 instead of ar3
   1580 2B                 5322 	add	a,r3
   1581 FB                 5323 	mov	r3,a
                           5324 ;	Peephole 181	changed mov to clr
   1582 E4                 5325 	clr	a
                           5326 ;	Peephole 236.b	used r4 instead of ar4
   1583 3C                 5327 	addc	a,r4
   1584 FC                 5328 	mov	r4,a
                           5329 ;	genIpush
   1585 C0 02              5330 	push	ar2
   1587 C0 06              5331 	push	ar6
   1589 C0 07              5332 	push	ar7
   158B 74 05              5333 	mov	a,#0x05
   158D C0 E0              5334 	push	acc
                           5335 ;	Peephole 181	changed mov to clr
   158F E4                 5336 	clr	a
   1590 C0 E0              5337 	push	acc
                           5338 ;	genIpush
   1592 74r04              5339 	mov	a,#__str_1
   1594 C0 E0              5340 	push	acc
   1596 74s00              5341 	mov	a,#(__str_1 >> 8)
   1598 C0 E0              5342 	push	acc
   159A 74 80              5343 	mov	a,#0x80
   159C C0 E0              5344 	push	acc
                           5345 ;	genCall
   159E 8B 82              5346 	mov	dpl,r3
   15A0 8C 83              5347 	mov	dph,r4
   15A2 8D F0              5348 	mov	b,r5
   15A4 12s00r00           5349 	lcall	_memcmp
   15A7 AB 82              5350 	mov	r3,dpl
   15A9 AC 83              5351 	mov	r4,dph
   15AB E5 81              5352 	mov	a,sp
   15AD 24 FB              5353 	add	a,#0xfb
   15AF F5 81              5354 	mov	sp,a
   15B1 D0 07              5355 	pop	ar7
   15B3 D0 06              5356 	pop	ar6
   15B5 D0 02              5357 	pop	ar2
                           5358 ;	genIfx
   15B7 EB                 5359 	mov	a,r3
   15B8 4C                 5360 	orl	a,r4
                           5361 ;	genIfxJump
                           5362 ;	Peephole 108.b	removed ljmp by inverse jump logic
   15B9 70 20              5363 	jnz	00108$
                           5364 ;	Peephole 300	removed redundant label 00122$
                           5365 ;	genPlus
                           5366 ;     genPlusIncr
   15BB 74 20              5367 	mov	a,#0x20
                           5368 ;	Peephole 236.a	used r6 instead of ar6
   15BD 2E                 5369 	add	a,r6
   15BE FE                 5370 	mov	r6,a
                           5371 ;	Peephole 181	changed mov to clr
   15BF E4                 5372 	clr	a
                           5373 ;	Peephole 236.b	used r7 instead of ar7
   15C0 3F                 5374 	addc	a,r7
   15C1 FF                 5375 	mov	r7,a
                           5376 ;	genPlus
                           5377 ;     genPlusIncr
   15C2 74 28              5378 	mov	a,#0x28
                           5379 ;	Peephole 236.a	used r6 instead of ar6
   15C4 2E                 5380 	add	a,r6
   15C5 FE                 5381 	mov	r6,a
                           5382 ;	Peephole 181	changed mov to clr
   15C6 E4                 5383 	clr	a
                           5384 ;	Peephole 236.b	used r7 instead of ar7
   15C7 3F                 5385 	addc	a,r7
   15C8 FF                 5386 	mov	r7,a
                           5387 ;	genPointerGet
                           5388 ;	genGenPointerGet
   15C9 8E 82              5389 	mov	dpl,r6
   15CB 8F 83              5390 	mov	dph,r7
   15CD 8A F0              5391 	mov	b,r2
   15CF 12s00r00           5392 	lcall	__gptrget
                           5393 ;	genAnd
   15D2 FE                 5394 	mov	r6,a
                           5395 ;	Peephole 105	removed redundant mov
                           5396 ;	genIfxJump
                           5397 ;	Peephole 108.e	removed ljmp by inverse jump logic
   15D3 20 E7 05           5398 	jb	acc.7,00108$
                           5399 ;	Peephole 300	removed redundant label 00123$
                    15D6   5400 	C$tff.c$622$1$1 ==.
                           5401 ;	tff.c:622: return 0;
                           5402 ;	genRet
   15D6 75 82 00           5403 	mov	dpl,#0x00
                           5404 ;	Peephole 112.b	changed ljmp to sjmp
   15D9 80 03              5405 	sjmp	00110$
   15DB                    5406 00108$:
                    15DB   5407 	C$tff.c$624$1$1 ==.
                           5408 ;	tff.c:624: return 1;
                           5409 ;	genRet
   15DB 75 82 01           5410 	mov	dpl,#0x01
   15DE                    5411 00110$:
   15DE 85*00 81           5412 	mov	sp,_bp
   15E1 D0*00              5413 	pop	_bp
                    15E3   5414 	C$tff.c$625$1$1 ==.
                    15E3   5415 	XFtff$check_fs$0$0 ==.
   15E3 22                 5416 	ret
                           5417 ;------------------------------------------------------------
                           5418 ;Allocation info for local variables in function 'auto_mount'
                           5419 ;------------------------------------------------------------
                           5420 ;chk_wp                    Allocated to stack - offset -3
                           5421 ;path                      Allocated to stack - offset 1
                           5422 ;fmt                       Allocated to stack - offset 4
                           5423 ;stat                      Allocated to registers r2 
                           5424 ;bootsect                  Allocated to stack - offset 5
                           5425 ;fatsize                   Allocated to stack - offset 9
                           5426 ;totalsect                 Allocated to stack - offset 13
                           5427 ;maxclust                  Allocated to stack - offset 17
                           5428 ;p                         Allocated to registers r5 r6 r7 
                           5429 ;fs                        Allocated to stack - offset 21
                           5430 ;sloc0                     Allocated to stack - offset 24
                           5431 ;sloc1                     Allocated to stack - offset 25
                           5432 ;sloc2                     Allocated to stack - offset 28
                           5433 ;sloc3                     Allocated to stack - offset 32
                           5434 ;sloc4                     Allocated to stack - offset 36
                           5435 ;sloc5                     Allocated to stack - offset 44
                           5436 ;sloc6                     Allocated to stack - offset 40
                           5437 ;sloc7                     Allocated to stack - offset 43
                           5438 ;------------------------------------------------------------
                    15E4   5439 	Ftff$auto_mount$0$0 ==.
                    15E4   5440 	C$tff.c$635$1$1 ==.
                           5441 ;	tff.c:635: FRESULT auto_mount (		/* FR_OK(0): successful, !=0: any error occured */
                           5442 ;	-----------------------------------------
                           5443 ;	 function auto_mount
                           5444 ;	-----------------------------------------
   15E4                    5445 _auto_mount:
   15E4 C0*00              5446 	push	_bp
   15E6 85 81*00           5447 	mov	_bp,sp
                           5448 ;     genReceive
   15E9 C0 82              5449 	push	dpl
   15EB C0 83              5450 	push	dph
   15ED C0 F0              5451 	push	b
   15EF E5 81              5452 	mov	a,sp
   15F1 24 2E              5453 	add	a,#0x2e
   15F3 F5 81              5454 	mov	sp,a
                    15F5   5455 	C$tff.c$643$1$1 ==.
                           5456 ;	tff.c:643: const char *p = *path;
                           5457 ;	genPointerGet
                           5458 ;	genGenPointerGet
   15F5 A8*00              5459 	mov	r0,_bp
   15F7 08                 5460 	inc	r0
   15F8 86 82              5461 	mov	dpl,@r0
   15FA 08                 5462 	inc	r0
   15FB 86 83              5463 	mov	dph,@r0
   15FD 08                 5464 	inc	r0
   15FE 86 F0              5465 	mov	b,@r0
   1600 12s00r00           5466 	lcall	__gptrget
   1603 FD                 5467 	mov	r5,a
   1604 A3                 5468 	inc	dptr
   1605 12s00r00           5469 	lcall	__gptrget
   1608 FE                 5470 	mov	r6,a
   1609 A3                 5471 	inc	dptr
   160A 12s00r00           5472 	lcall	__gptrget
   160D FF                 5473 	mov	r7,a
                           5474 ;	genAssign
                    160E   5475 	C$tff.c$644$1$1 ==.
                           5476 ;	tff.c:644: FATFS *fs = FatFs;
                           5477 ;	genAssign
   160E E5*00              5478 	mov	a,_bp
   1610 24 15              5479 	add	a,#0x15
   1612 F8                 5480 	mov	r0,a
   1613 A6*00              5481 	mov	@r0,_FatFs
   1615 08                 5482 	inc	r0
   1616 A6*01              5483 	mov	@r0,(_FatFs + 1)
   1618 08                 5484 	inc	r0
   1619 A6*02              5485 	mov	@r0,(_FatFs + 2)
                    161B   5486 	C$tff.c$648$1$1 ==.
                           5487 ;	tff.c:648: while (*p == ' ') p++;	/* Strip leading spaces */
                           5488 ;	genAssign
   161B 8D 02              5489 	mov	ar2,r5
   161D 8E 03              5490 	mov	ar3,r6
   161F 8F 04              5491 	mov	ar4,r7
   1621                    5492 00101$:
                           5493 ;	genPointerGet
                           5494 ;	genGenPointerGet
   1621 8A 82              5495 	mov	dpl,r2
   1623 8B 83              5496 	mov	dph,r3
   1625 8C F0              5497 	mov	b,r4
   1627 E5*00              5498 	mov	a,_bp
   1629 24 18              5499 	add	a,#0x18
   162B F8                 5500 	mov	r0,a
   162C 12s00r00           5501 	lcall	__gptrget
   162F F6                 5502 	mov	@r0,a
                           5503 ;	genCmpEq
   1630 E5*00              5504 	mov	a,_bp
   1632 24 18              5505 	add	a,#0x18
   1634 F8                 5506 	mov	r0,a
                           5507 ;	gencjneshort
                           5508 ;	Peephole 112.b	changed ljmp to sjmp
                           5509 ;	Peephole 198.b	optimized misc jump sequence
   1635 B6 20 07           5510 	cjne	@r0,#0x20,00149$
                           5511 ;	Peephole 200.b	removed redundant sjmp
                           5512 ;	Peephole 300	removed redundant label 00150$
                           5513 ;	Peephole 300	removed redundant label 00151$
                           5514 ;	genPlus
                           5515 ;     genPlusIncr
                           5516 ;	tail increment optimized (range 4)
   1638 0A                 5517 	inc	r2
   1639 BA 00 E5           5518 	cjne	r2,#0x00,00101$
   163C 0B                 5519 	inc	r3
                           5520 ;	Peephole 112.b	changed ljmp to sjmp
   163D 80 E2              5521 	sjmp	00101$
   163F                    5522 00149$:
                           5523 ;	genAssign
   163F 8A 05              5524 	mov	ar5,r2
   1641 8B 06              5525 	mov	ar6,r3
   1643 8C 07              5526 	mov	ar7,r4
                    1645   5527 	C$tff.c$649$1$1 ==.
                           5528 ;	tff.c:649: if (*p == '/') p++;		/* Strip heading slash */
                           5529 ;	genCmpEq
   1645 E5*00              5530 	mov	a,_bp
   1647 24 18              5531 	add	a,#0x18
   1649 F8                 5532 	mov	r0,a
                           5533 ;	gencjneshort
                           5534 ;	Peephole 112.b	changed ljmp to sjmp
                           5535 ;	Peephole 198.b	optimized misc jump sequence
   164A B6 2F 09           5536 	cjne	@r0,#0x2F,00105$
                           5537 ;	Peephole 200.b	removed redundant sjmp
                           5538 ;	Peephole 300	removed redundant label 00152$
                           5539 ;	Peephole 300	removed redundant label 00153$
                           5540 ;	genPlus
                           5541 ;     genPlusIncr
   164D 74 01              5542 	mov	a,#0x01
                           5543 ;	Peephole 236.a	used r2 instead of ar2
   164F 2A                 5544 	add	a,r2
   1650 FD                 5545 	mov	r5,a
                           5546 ;	Peephole 181	changed mov to clr
   1651 E4                 5547 	clr	a
                           5548 ;	Peephole 236.b	used r3 instead of ar3
   1652 3B                 5549 	addc	a,r3
   1653 FE                 5550 	mov	r6,a
   1654 8C 07              5551 	mov	ar7,r4
   1656                    5552 00105$:
                    1656   5553 	C$tff.c$650$1$1 ==.
                           5554 ;	tff.c:650: *path = p;				/* Return pointer to the path name */
                           5555 ;	genPointerSet
                           5556 ;	genGenPointerSet
   1656 A8*00              5557 	mov	r0,_bp
   1658 08                 5558 	inc	r0
   1659 86 82              5559 	mov	dpl,@r0
   165B 08                 5560 	inc	r0
   165C 86 83              5561 	mov	dph,@r0
   165E 08                 5562 	inc	r0
   165F 86 F0              5563 	mov	b,@r0
   1661 ED                 5564 	mov	a,r5
   1662 12s00r00           5565 	lcall	__gptrput
   1665 A3                 5566 	inc	dptr
   1666 EE                 5567 	mov	a,r6
   1667 12s00r00           5568 	lcall	__gptrput
   166A A3                 5569 	inc	dptr
   166B EF                 5570 	mov	a,r7
   166C 12s00r00           5571 	lcall	__gptrput
                    166F   5572 	C$tff.c$653$1$1 ==.
                           5573 ;	tff.c:653: if (!fs) return FR_NOT_ENABLED;
                           5574 ;	genIfx
   166F E5*00              5575 	mov	a,_bp
   1671 24 15              5576 	add	a,#0x15
   1673 F8                 5577 	mov	r0,a
   1674 E6                 5578 	mov	a,@r0
   1675 08                 5579 	inc	r0
   1676 46                 5580 	orl	a,@r0
   1677 08                 5581 	inc	r0
   1678 46                 5582 	orl	a,@r0
                           5583 ;	genIfxJump
                           5584 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1679 70 06              5585 	jnz	00107$
                           5586 ;	Peephole 300	removed redundant label 00154$
                           5587 ;	genRet
   167B 75 82 0A           5588 	mov	dpl,#0x0A
   167E 02s21r79           5589 	ljmp	00132$
   1681                    5590 00107$:
                    1681   5591 	C$tff.c$656$1$1 ==.
                           5592 ;	tff.c:656: if (fs->fs_type) {
                           5593 ;	genPlus
   1681 E5*00              5594 	mov	a,_bp
   1683 24 15              5595 	add	a,#0x15
   1685 F8                 5596 	mov	r0,a
                           5597 ;     genPlusIncr
   1686 74 1C              5598 	mov	a,#0x1C
   1688 26                 5599 	add	a,@r0
   1689 FA                 5600 	mov	r2,a
                           5601 ;	Peephole 181	changed mov to clr
   168A E4                 5602 	clr	a
   168B 08                 5603 	inc	r0
   168C 36                 5604 	addc	a,@r0
   168D FB                 5605 	mov	r3,a
   168E 08                 5606 	inc	r0
   168F 86 04              5607 	mov	ar4,@r0
                           5608 ;	genPointerGet
                           5609 ;	genGenPointerGet
   1691 8A 82              5610 	mov	dpl,r2
   1693 8B 83              5611 	mov	dph,r3
   1695 8C F0              5612 	mov	b,r4
   1697 12s00r00           5613 	lcall	__gptrget
                           5614 ;	genIfxJump
                           5615 ;	Peephole 108.c	removed ljmp by inverse jump logic
   169A 60 12              5616 	jz	00111$
                           5617 ;	Peephole 300	removed redundant label 00155$
                    169C   5618 	C$tff.c$657$2$2 ==.
                           5619 ;	tff.c:657: stat = disk_status(0);
                           5620 ;	genCall
   169C 75 82 00           5621 	mov	dpl,#0x00
   169F 12s00r00           5622 	lcall	_disk_status
                           5623 ;	genAssign
                    16A2   5624 	C$tff.c$658$2$2 ==.
                           5625 ;	tff.c:658: if (!(stat & STA_NOINIT)) {				/* If the physical drive is kept initialized */
                           5626 ;	genAnd
                           5627 ;	peephole 177.g	optimized mov sequence
   16A2 E5 82              5628 	mov	a,dpl
   16A4 FA                 5629 	mov	r2,a
                           5630 ;	genIfxJump
                           5631 ;	Peephole 108.e	removed ljmp by inverse jump logic
   16A5 20 E0 06           5632 	jb	acc.0,00111$
                           5633 ;	Peephole 300	removed redundant label 00156$
                    16A8   5634 	C$tff.c$663$3$3 ==.
                           5635 ;	tff.c:663: return FR_OK;						/* The file system object is valid */
                           5636 ;	genRet
   16A8 75 82 00           5637 	mov	dpl,#0x00
   16AB 02s21r79           5638 	ljmp	00132$
   16AE                    5639 00111$:
                    16AE   5640 	C$tff.c$669$1$1 ==.
                           5641 ;	tff.c:669: memset(fs, 0, sizeof(FATFS));		/* Clean-up the file system object */
                           5642 ;	genIpush
   16AE 74 20              5643 	mov	a,#0x20
   16B0 C0 E0              5644 	push	acc
   16B2 74 02              5645 	mov	a,#0x02
   16B4 C0 E0              5646 	push	acc
                           5647 ;	genIpush
                           5648 ;	Peephole 181	changed mov to clr
   16B6 E4                 5649 	clr	a
   16B7 C0 E0              5650 	push	acc
                           5651 ;	genCall
   16B9 E5*00              5652 	mov	a,_bp
   16BB 24 15              5653 	add	a,#0x15
   16BD F8                 5654 	mov	r0,a
   16BE 86 82              5655 	mov	dpl,@r0
   16C0 08                 5656 	inc	r0
   16C1 86 83              5657 	mov	dph,@r0
   16C3 08                 5658 	inc	r0
   16C4 86 F0              5659 	mov	b,@r0
   16C6 12s00r00           5660 	lcall	_memset
   16C9 15 81              5661 	dec	sp
   16CB 15 81              5662 	dec	sp
   16CD 15 81              5663 	dec	sp
                    16CF   5664 	C$tff.c$670$1$1 ==.
                           5665 ;	tff.c:670: stat = disk_initialize(0);			/* Initialize low level disk I/O layer */
                           5666 ;	genCall
   16CF 75 82 00           5667 	mov	dpl,#0x00
   16D2 12s00r00           5668 	lcall	_disk_initialize
   16D5 AB 82              5669 	mov	r3,dpl
                           5670 ;	genAssign
   16D7 8B 02              5671 	mov	ar2,r3
                    16D9   5672 	C$tff.c$671$1$1 ==.
                           5673 ;	tff.c:671: if (stat & STA_NOINIT)				/* Check if the drive is ready */
                           5674 ;	genAnd
   16D9 EA                 5675 	mov	a,r2
                           5676 ;	genIfxJump
                           5677 ;	Peephole 108.d	removed ljmp by inverse jump logic
   16DA 30 E0 06           5678 	jnb	acc.0,00113$
                           5679 ;	Peephole 300	removed redundant label 00157$
                    16DD   5680 	C$tff.c$672$1$1 ==.
                           5681 ;	tff.c:672: return FR_NOT_READY;
                           5682 ;	genRet
   16DD 75 82 01           5683 	mov	dpl,#0x01
   16E0 02s21r79           5684 	ljmp	00132$
   16E3                    5685 00113$:
                    16E3   5686 	C$tff.c$679$1$1 ==.
                           5687 ;	tff.c:679: fmt = check_fs(bootsect = 0);		/* Check sector 0 as an SFD format */
                           5688 ;	genAssign
   16E3 E5*00              5689 	mov	a,_bp
   16E5 24 05              5690 	add	a,#0x05
   16E7 F8                 5691 	mov	r0,a
   16E8 E4                 5692 	clr	a
   16E9 F6                 5693 	mov	@r0,a
   16EA 08                 5694 	inc	r0
   16EB F6                 5695 	mov	@r0,a
   16EC 08                 5696 	inc	r0
   16ED F6                 5697 	mov	@r0,a
   16EE 08                 5698 	inc	r0
   16EF F6                 5699 	mov	@r0,a
                           5700 ;	genCall
   16F0 75 82 00           5701 	mov	dpl,#0x00
   16F3 12s14r79           5702 	lcall	_check_fs
   16F6 AA 82              5703 	mov	r2,dpl
                           5704 ;	genAssign
   16F8 E5*00              5705 	mov	a,_bp
   16FA 24 04              5706 	add	a,#0x04
   16FC F8                 5707 	mov	r0,a
   16FD A6 02              5708 	mov	@r0,ar2
                    16FF   5709 	C$tff.c$680$1$1 ==.
                           5710 ;	tff.c:680: if (fmt == 1) {						/* Not a FAT boot record, it may be patitioned */
                           5711 ;	genCmpEq
   16FF E5*00              5712 	mov	a,_bp
   1701 24 04              5713 	add	a,#0x04
   1703 F8                 5714 	mov	r0,a
                           5715 ;	gencjneshort
   1704 B6 01 02           5716 	cjne	@r0,#0x01,00158$
   1707 80 03              5717 	sjmp	00159$
   1709                    5718 00158$:
   1709 02s18r47           5719 	ljmp	00117$
   170C                    5720 00159$:
                    170C   5721 	C$tff.c$682$1$1 ==.
                           5722 ;	tff.c:682: if (fs->win[MBR_Table+4]) {					/* Is the 1st partition existing? */
                           5723 ;	genIpush
                           5724 ;	genPlus
   170C E5*00              5725 	mov	a,_bp
   170E 24 15              5726 	add	a,#0x15
   1710 F8                 5727 	mov	r0,a
                           5728 ;     genPlusIncr
   1711 74 20              5729 	mov	a,#0x20
   1713 26                 5730 	add	a,@r0
   1714 FB                 5731 	mov	r3,a
                           5732 ;	Peephole 181	changed mov to clr
   1715 E4                 5733 	clr	a
   1716 08                 5734 	inc	r0
   1717 36                 5735 	addc	a,@r0
   1718 FC                 5736 	mov	r4,a
   1719 08                 5737 	inc	r0
   171A 86 02              5738 	mov	ar2,@r0
                           5739 ;	genPlus
                           5740 ;     genPlusIncr
   171C 74 C2              5741 	mov	a,#0xC2
                           5742 ;	Peephole 236.a	used r3 instead of ar3
   171E 2B                 5743 	add	a,r3
   171F FB                 5744 	mov	r3,a
   1720 74 01              5745 	mov	a,#0x01
                           5746 ;	Peephole 236.b	used r4 instead of ar4
   1722 3C                 5747 	addc	a,r4
   1723 FC                 5748 	mov	r4,a
                           5749 ;	genPointerGet
                           5750 ;	genGenPointerGet
   1724 8B 82              5751 	mov	dpl,r3
   1726 8C 83              5752 	mov	dph,r4
   1728 8A F0              5753 	mov	b,r2
   172A 12s00r00           5754 	lcall	__gptrget
                           5755 ;	genIpop
                           5756 ;	genIfx
                           5757 ;	genIfxJump
   172D 70 03              5758 	jnz	00160$
   172F 02s18r47           5759 	ljmp	00117$
   1732                    5760 00160$:
                    1732   5761 	C$tff.c$683$3$5 ==.
                           5762 ;	tff.c:683: bootsect = LD_DWORD(&fs->win[MBR_Table+8]);	/* Partition offset in LBA */
                           5763 ;	genPlus
   1732 E5*00              5764 	mov	a,_bp
   1734 24 15              5765 	add	a,#0x15
   1736 F8                 5766 	mov	r0,a
                           5767 ;     genPlusIncr
   1737 74 20              5768 	mov	a,#0x20
   1739 26                 5769 	add	a,@r0
   173A FB                 5770 	mov	r3,a
                           5771 ;	Peephole 181	changed mov to clr
   173B E4                 5772 	clr	a
   173C 08                 5773 	inc	r0
   173D 36                 5774 	addc	a,@r0
   173E FC                 5775 	mov	r4,a
   173F 08                 5776 	inc	r0
   1740 86 05              5777 	mov	ar5,@r0
                           5778 ;	genPlus
   1742 E5*00              5779 	mov	a,_bp
   1744 24 19              5780 	add	a,#0x19
   1746 F8                 5781 	mov	r0,a
                           5782 ;     genPlusIncr
   1747 74 C6              5783 	mov	a,#0xC6
                           5784 ;	Peephole 236.a	used r3 instead of ar3
   1749 2B                 5785 	add	a,r3
   174A F6                 5786 	mov	@r0,a
   174B 74 01              5787 	mov	a,#0x01
                           5788 ;	Peephole 236.b	used r4 instead of ar4
   174D 3C                 5789 	addc	a,r4
   174E 08                 5790 	inc	r0
   174F F6                 5791 	mov	@r0,a
   1750 08                 5792 	inc	r0
   1751 A6 05              5793 	mov	@r0,ar5
                           5794 ;	genPlus
   1753 E5*00              5795 	mov	a,_bp
   1755 24 19              5796 	add	a,#0x19
   1757 F8                 5797 	mov	r0,a
                           5798 ;     genPlusIncr
   1758 74 03              5799 	mov	a,#0x03
   175A 26                 5800 	add	a,@r0
   175B FE                 5801 	mov	r6,a
                           5802 ;	Peephole 181	changed mov to clr
   175C E4                 5803 	clr	a
   175D 08                 5804 	inc	r0
   175E 36                 5805 	addc	a,@r0
   175F FF                 5806 	mov	r7,a
   1760 08                 5807 	inc	r0
   1761 86 03              5808 	mov	ar3,@r0
                           5809 ;	genPointerGet
                           5810 ;	genGenPointerGet
   1763 8E 82              5811 	mov	dpl,r6
   1765 8F 83              5812 	mov	dph,r7
   1767 8B F0              5813 	mov	b,r3
   1769 12s00r00           5814 	lcall	__gptrget
   176C FE                 5815 	mov	r6,a
                           5816 ;	genCast
                           5817 ;	genLeftShift
                           5818 ;	genLeftShiftLiteral
                           5819 ;	Peephole 3.c	changed mov to clr
                           5820 ;	Peephole 3.b	changed mov to clr
   176D E4                 5821 	clr	a
   176E FB                 5822 	mov	r3,a
   176F FC                 5823 	mov	r4,a
   1770 FD                 5824 	mov	r5,a
   1771 E5*00              5825 	mov	a,_bp
   1773 24 1C              5826 	add	a,#0x1c
                           5827 ;	genlshFour
                           5828 ;	Peephole 185	changed order of increment (acc incremented also!)
   1775 04                 5829 	inc	a
                           5830 ;	Peephole 185	changed order of increment (acc incremented also!)
   1776 04                 5831 	inc	a
                           5832 ;	Peephole 185	changed order of increment (acc incremented also!)
   1777 04                 5833 	inc	a
   1778 F8                 5834 	mov	r0,a
   1779 A6 06              5835 	mov	@r0,ar6
   177B 18                 5836 	dec	r0
   177C 18                 5837 	dec	r0
   177D 18                 5838 	dec	r0
   177E 76 00              5839 	mov	@r0,#0x00
   1780 08                 5840 	inc	r0
   1781 76 00              5841 	mov	@r0,#0x00
   1783 08                 5842 	inc	r0
   1784 76 00              5843 	mov	@r0,#0x00
                           5844 ;	genPlus
   1786 E5*00              5845 	mov	a,_bp
   1788 24 19              5846 	add	a,#0x19
   178A F8                 5847 	mov	r0,a
                           5848 ;     genPlusIncr
   178B 74 02              5849 	mov	a,#0x02
   178D 26                 5850 	add	a,@r0
   178E FF                 5851 	mov	r7,a
                           5852 ;	Peephole 181	changed mov to clr
   178F E4                 5853 	clr	a
   1790 08                 5854 	inc	r0
   1791 36                 5855 	addc	a,@r0
   1792 FB                 5856 	mov	r3,a
   1793 08                 5857 	inc	r0
   1794 86 04              5858 	mov	ar4,@r0
                           5859 ;	genPointerGet
                           5860 ;	genGenPointerGet
   1796 8F 82              5861 	mov	dpl,r7
   1798 8B 83              5862 	mov	dph,r3
   179A 8C F0              5863 	mov	b,r4
   179C 12s00r00           5864 	lcall	__gptrget
   179F FF                 5865 	mov	r7,a
                           5866 ;	genCast
   17A0 7B 00              5867 	mov	r3,#0x00
   17A2 7C 00              5868 	mov	r4,#0x00
                           5869 ;	genLeftShift
                           5870 ;	genLeftShiftLiteral
                           5871 ;	genlshFour
                           5872 ;	peephole 177.e	removed redundant move
   17A4 8B 05              5873 	mov	ar5,r3
   17A6 8F 04              5874 	mov	ar4,r7
                           5875 ;	genOr
                           5876 ;	Peephole 3.c	changed mov to clr
   17A8 E4                 5877 	clr	a
   17A9 FB                 5878 	mov	r3,a
   17AA FF                 5879 	mov	r7,a
   17AB E5*00              5880 	mov	a,_bp
   17AD 24 1C              5881 	add	a,#0x1c
   17AF F8                 5882 	mov	r0,a
   17B0 EF                 5883 	mov	a,r7
   17B1 46                 5884 	orl	a,@r0
   17B2 F6                 5885 	mov	@r0,a
   17B3 EB                 5886 	mov	a,r3
   17B4 08                 5887 	inc	r0
   17B5 46                 5888 	orl	a,@r0
   17B6 F6                 5889 	mov	@r0,a
   17B7 EC                 5890 	mov	a,r4
   17B8 08                 5891 	inc	r0
   17B9 46                 5892 	orl	a,@r0
   17BA F6                 5893 	mov	@r0,a
   17BB ED                 5894 	mov	a,r5
   17BC 08                 5895 	inc	r0
   17BD 46                 5896 	orl	a,@r0
   17BE F6                 5897 	mov	@r0,a
                           5898 ;	genPlus
   17BF E5*00              5899 	mov	a,_bp
   17C1 24 19              5900 	add	a,#0x19
   17C3 F8                 5901 	mov	r0,a
                           5902 ;     genPlusIncr
   17C4 74 01              5903 	mov	a,#0x01
   17C6 26                 5904 	add	a,@r0
   17C7 FE                 5905 	mov	r6,a
                           5906 ;	Peephole 181	changed mov to clr
   17C8 E4                 5907 	clr	a
   17C9 08                 5908 	inc	r0
   17CA 36                 5909 	addc	a,@r0
   17CB FB                 5910 	mov	r3,a
   17CC 08                 5911 	inc	r0
   17CD 86 04              5912 	mov	ar4,@r0
                           5913 ;	genPointerGet
                           5914 ;	genGenPointerGet
   17CF 8E 82              5915 	mov	dpl,r6
   17D1 8B 83              5916 	mov	dph,r3
   17D3 8C F0              5917 	mov	b,r4
   17D5 12s00r00           5918 	lcall	__gptrget
   17D8 FE                 5919 	mov	r6,a
                           5920 ;	genCast
                           5921 ;	genLeftShift
                           5922 ;	genLeftShiftLiteral
                           5923 ;	genlshTwo
                           5924 ;	peephole 177.e	removed redundant move
   17D9 8E 03              5925 	mov	ar3,r6
                           5926 ;	genCast
                           5927 ;	genOr
                           5928 ;	Peephole 3.c	changed mov to clr
                           5929 ;	Peephole 3.b	changed mov to clr
   17DB E4                 5930 	clr	a
   17DC FE                 5931 	mov	r6,a
   17DD FC                 5932 	mov	r4,a
   17DE FD                 5933 	mov	r5,a
   17DF E5*00              5934 	mov	a,_bp
   17E1 24 1C              5935 	add	a,#0x1c
   17E3 F8                 5936 	mov	r0,a
   17E4 EE                 5937 	mov	a,r6
   17E5 46                 5938 	orl	a,@r0
   17E6 F6                 5939 	mov	@r0,a
   17E7 EB                 5940 	mov	a,r3
   17E8 08                 5941 	inc	r0
   17E9 46                 5942 	orl	a,@r0
   17EA F6                 5943 	mov	@r0,a
   17EB EC                 5944 	mov	a,r4
   17EC 08                 5945 	inc	r0
   17ED 46                 5946 	orl	a,@r0
   17EE F6                 5947 	mov	@r0,a
   17EF ED                 5948 	mov	a,r5
   17F0 08                 5949 	inc	r0
   17F1 46                 5950 	orl	a,@r0
   17F2 F6                 5951 	mov	@r0,a
                           5952 ;	genPointerGet
                           5953 ;	genGenPointerGet
   17F3 E5*00              5954 	mov	a,_bp
   17F5 24 19              5955 	add	a,#0x19
   17F7 F8                 5956 	mov	r0,a
   17F8 86 82              5957 	mov	dpl,@r0
   17FA 08                 5958 	inc	r0
   17FB 86 83              5959 	mov	dph,@r0
   17FD 08                 5960 	inc	r0
   17FE 86 F0              5961 	mov	b,@r0
   1800 12s00r00           5962 	lcall	__gptrget
   1803 FF                 5963 	mov	r7,a
                           5964 ;	genCast
                           5965 ;	genOr
                           5966 ;	Peephole 3.c	changed mov to clr
                           5967 ;	Peephole 3.b	changed mov to clr
   1804 E4                 5968 	clr	a
   1805 FB                 5969 	mov	r3,a
   1806 FC                 5970 	mov	r4,a
   1807 FD                 5971 	mov	r5,a
   1808 E5*00              5972 	mov	a,_bp
   180A 24 1C              5973 	add	a,#0x1c
   180C F8                 5974 	mov	r0,a
   180D E6                 5975 	mov	a,@r0
   180E 42 07              5976 	orl	ar7,a
   1810 08                 5977 	inc	r0
   1811 E6                 5978 	mov	a,@r0
   1812 42 03              5979 	orl	ar3,a
   1814 08                 5980 	inc	r0
   1815 E6                 5981 	mov	a,@r0
   1816 42 04              5982 	orl	ar4,a
   1818 08                 5983 	inc	r0
   1819 E6                 5984 	mov	a,@r0
   181A 42 05              5985 	orl	ar5,a
                           5986 ;	genAssign
   181C E5*00              5987 	mov	a,_bp
   181E 24 05              5988 	add	a,#0x05
   1820 F8                 5989 	mov	r0,a
   1821 A6 07              5990 	mov	@r0,ar7
   1823 08                 5991 	inc	r0
   1824 A6 03              5992 	mov	@r0,ar3
   1826 08                 5993 	inc	r0
   1827 A6 04              5994 	mov	@r0,ar4
   1829 08                 5995 	inc	r0
   182A A6 05              5996 	mov	@r0,ar5
                    182C   5997 	C$tff.c$684$3$5 ==.
                           5998 ;	tff.c:684: fmt = check_fs(bootsect);				/* Check the partition */
                           5999 ;	genCall
   182C E5*00              6000 	mov	a,_bp
   182E 24 05              6001 	add	a,#0x05
   1830 F8                 6002 	mov	r0,a
   1831 86 82              6003 	mov	dpl,@r0
   1833 08                 6004 	inc	r0
   1834 86 83              6005 	mov	dph,@r0
   1836 08                 6006 	inc	r0
   1837 86 F0              6007 	mov	b,@r0
   1839 08                 6008 	inc	r0
   183A E6                 6009 	mov	a,@r0
   183B 12s14r79           6010 	lcall	_check_fs
   183E AB 82              6011 	mov	r3,dpl
                           6012 ;	genAssign
   1840 E5*00              6013 	mov	a,_bp
   1842 24 04              6014 	add	a,#0x04
   1844 F8                 6015 	mov	r0,a
   1845 A6 03              6016 	mov	@r0,ar3
   1847                    6017 00117$:
                    1847   6018 	C$tff.c$687$1$1 ==.
                           6019 ;	tff.c:687: if (fmt || LD_WORD(&fs->win[BPB_BytsPerSec]) != 512)	/* No valid FAT patition is found */
                           6020 ;	genIfx
   1847 E5*00              6021 	mov	a,_bp
   1849 24 04              6022 	add	a,#0x04
   184B F8                 6023 	mov	r0,a
   184C E6                 6024 	mov	a,@r0
                           6025 ;	genIfxJump
                           6026 ;	Peephole 108.b	removed ljmp by inverse jump logic
   184D 70 47              6027 	jnz	00118$
                           6028 ;	Peephole 300	removed redundant label 00161$
                           6029 ;	genPlus
   184F E5*00              6030 	mov	a,_bp
   1851 24 15              6031 	add	a,#0x15
   1853 F8                 6032 	mov	r0,a
                           6033 ;     genPlusIncr
   1854 74 20              6034 	mov	a,#0x20
   1856 26                 6035 	add	a,@r0
   1857 FB                 6036 	mov	r3,a
                           6037 ;	Peephole 181	changed mov to clr
   1858 E4                 6038 	clr	a
   1859 08                 6039 	inc	r0
   185A 36                 6040 	addc	a,@r0
   185B FC                 6041 	mov	r4,a
   185C 08                 6042 	inc	r0
   185D 86 05              6043 	mov	ar5,@r0
                           6044 ;	genPlus
                           6045 ;     genPlusIncr
   185F 74 0B              6046 	mov	a,#0x0B
                           6047 ;	Peephole 236.a	used r3 instead of ar3
   1861 2B                 6048 	add	a,r3
   1862 FA                 6049 	mov	r2,a
                           6050 ;	Peephole 181	changed mov to clr
   1863 E4                 6051 	clr	a
                           6052 ;	Peephole 236.b	used r4 instead of ar4
   1864 3C                 6053 	addc	a,r4
   1865 FC                 6054 	mov	r4,a
                           6055 ;	genPlus
                           6056 ;     genPlusIncr
   1866 74 01              6057 	mov	a,#0x01
                           6058 ;	Peephole 236.a	used r2 instead of ar2
   1868 2A                 6059 	add	a,r2
   1869 FE                 6060 	mov	r6,a
                           6061 ;	Peephole 181	changed mov to clr
   186A E4                 6062 	clr	a
                           6063 ;	Peephole 236.b	used r4 instead of ar4
   186B 3C                 6064 	addc	a,r4
   186C FF                 6065 	mov	r7,a
   186D 8D 03              6066 	mov	ar3,r5
                           6067 ;	genPointerGet
                           6068 ;	genGenPointerGet
   186F 8E 82              6069 	mov	dpl,r6
   1871 8F 83              6070 	mov	dph,r7
   1873 8B F0              6071 	mov	b,r3
   1875 12s00r00           6072 	lcall	__gptrget
   1878 FE                 6073 	mov	r6,a
                           6074 ;	genCast
                           6075 ;	genLeftShift
                           6076 ;	genLeftShiftLiteral
                           6077 ;	genlshTwo
                           6078 ;	peephole 177.e	removed redundant move
   1879 8E 03              6079 	mov	ar3,r6
   187B 7E 00              6080 	mov	r6,#0x00
                           6081 ;	genPointerGet
                           6082 ;	genGenPointerGet
   187D 8A 82              6083 	mov	dpl,r2
   187F 8C 83              6084 	mov	dph,r4
   1881 8D F0              6085 	mov	b,r5
   1883 12s00r00           6086 	lcall	__gptrget
                           6087 ;	genCast
                           6088 ;	genOr
   1886 FC                 6089 	mov	r4,a
   1887 7D 00              6090 	mov	r5,#0x00
                           6091 ;	Peephole 177.d	removed redundant move
   1889 42 06              6092 	orl	ar6,a
   188B ED                 6093 	mov	a,r5
   188C 42 03              6094 	orl	ar3,a
                           6095 ;	genCmpEq
                           6096 ;	gencjneshort
   188E BE 00 05           6097 	cjne	r6,#0x00,00162$
   1891 BB 02 02           6098 	cjne	r3,#0x02,00162$
                           6099 ;	Peephole 112.b	changed ljmp to sjmp
   1894 80 06              6100 	sjmp	00119$
   1896                    6101 00162$:
   1896                    6102 00118$:
                    1896   6103 	C$tff.c$688$1$1 ==.
                           6104 ;	tff.c:688: return FR_NO_FILESYSTEM;
                           6105 ;	genRet
   1896 75 82 0B           6106 	mov	dpl,#0x0B
   1899 02s21r79           6107 	ljmp	00132$
   189C                    6108 00119$:
                    189C   6109 	C$tff.c$691$1$1 ==.
                           6110 ;	tff.c:691: fatsize = LD_WORD(&fs->win[BPB_FATSz16]);			/* Number of sectors per FAT */
                           6111 ;	genPlus
   189C E5*00              6112 	mov	a,_bp
   189E 24 15              6113 	add	a,#0x15
   18A0 F8                 6114 	mov	r0,a
                           6115 ;     genPlusIncr
   18A1 74 20              6116 	mov	a,#0x20
   18A3 26                 6117 	add	a,@r0
   18A4 FB                 6118 	mov	r3,a
                           6119 ;	Peephole 181	changed mov to clr
   18A5 E4                 6120 	clr	a
   18A6 08                 6121 	inc	r0
   18A7 36                 6122 	addc	a,@r0
   18A8 FC                 6123 	mov	r4,a
   18A9 08                 6124 	inc	r0
   18AA 86 05              6125 	mov	ar5,@r0
                           6126 ;	genPlus
                           6127 ;     genPlusIncr
   18AC 74 16              6128 	mov	a,#0x16
                           6129 ;	Peephole 236.a	used r3 instead of ar3
   18AE 2B                 6130 	add	a,r3
   18AF FA                 6131 	mov	r2,a
                           6132 ;	Peephole 181	changed mov to clr
   18B0 E4                 6133 	clr	a
                           6134 ;	Peephole 236.b	used r4 instead of ar4
   18B1 3C                 6135 	addc	a,r4
   18B2 FC                 6136 	mov	r4,a
                           6137 ;	genPlus
                           6138 ;     genPlusIncr
   18B3 74 01              6139 	mov	a,#0x01
                           6140 ;	Peephole 236.a	used r2 instead of ar2
   18B5 2A                 6141 	add	a,r2
   18B6 FE                 6142 	mov	r6,a
                           6143 ;	Peephole 181	changed mov to clr
   18B7 E4                 6144 	clr	a
                           6145 ;	Peephole 236.b	used r4 instead of ar4
   18B8 3C                 6146 	addc	a,r4
   18B9 FF                 6147 	mov	r7,a
   18BA 8D 03              6148 	mov	ar3,r5
                           6149 ;	genPointerGet
                           6150 ;	genGenPointerGet
   18BC 8E 82              6151 	mov	dpl,r6
   18BE 8F 83              6152 	mov	dph,r7
   18C0 8B F0              6153 	mov	b,r3
   18C2 12s00r00           6154 	lcall	__gptrget
   18C5 FE                 6155 	mov	r6,a
                           6156 ;	genCast
                           6157 ;	genLeftShift
                           6158 ;	genLeftShiftLiteral
                           6159 ;	genlshTwo
                           6160 ;	peephole 177.e	removed redundant move
   18C6 8E 03              6161 	mov	ar3,r6
   18C8 7E 00              6162 	mov	r6,#0x00
                           6163 ;	genPointerGet
                           6164 ;	genGenPointerGet
   18CA 8A 82              6165 	mov	dpl,r2
   18CC 8C 83              6166 	mov	dph,r4
   18CE 8D F0              6167 	mov	b,r5
   18D0 12s00r00           6168 	lcall	__gptrget
                           6169 ;	genCast
                           6170 ;	genOr
   18D3 FC                 6171 	mov	r4,a
   18D4 7D 00              6172 	mov	r5,#0x00
                           6173 ;	Peephole 177.d	removed redundant move
   18D6 42 06              6174 	orl	ar6,a
   18D8 ED                 6175 	mov	a,r5
   18D9 42 03              6176 	orl	ar3,a
                           6177 ;	genCast
   18DB E5*00              6178 	mov	a,_bp
   18DD 24 09              6179 	add	a,#0x09
   18DF F8                 6180 	mov	r0,a
   18E0 A6 06              6181 	mov	@r0,ar6
   18E2 08                 6182 	inc	r0
   18E3 A6 03              6183 	mov	@r0,ar3
   18E5 08                 6184 	inc	r0
   18E6 76 00              6185 	mov	@r0,#0x00
   18E8 08                 6186 	inc	r0
   18E9 76 00              6187 	mov	@r0,#0x00
                    18EB   6188 	C$tff.c$692$1$1 ==.
                           6189 ;	tff.c:692: if (!fatsize) fatsize = LD_DWORD(&fs->win[BPB_FATSz32]);
                           6190 ;	genIfx
   18EB E5*00              6191 	mov	a,_bp
   18ED 24 09              6192 	add	a,#0x09
   18EF F8                 6193 	mov	r0,a
   18F0 E6                 6194 	mov	a,@r0
   18F1 08                 6195 	inc	r0
   18F2 46                 6196 	orl	a,@r0
   18F3 08                 6197 	inc	r0
   18F4 46                 6198 	orl	a,@r0
   18F5 08                 6199 	inc	r0
   18F6 46                 6200 	orl	a,@r0
                           6201 ;	genIfxJump
   18F7 60 03              6202 	jz	00163$
   18F9 02s1Ar16           6203 	ljmp	00122$
   18FC                    6204 00163$:
                           6205 ;	genPlus
   18FC E5*00              6206 	mov	a,_bp
   18FE 24 15              6207 	add	a,#0x15
   1900 F8                 6208 	mov	r0,a
                           6209 ;     genPlusIncr
   1901 74 20              6210 	mov	a,#0x20
   1903 26                 6211 	add	a,@r0
   1904 FA                 6212 	mov	r2,a
                           6213 ;	Peephole 181	changed mov to clr
   1905 E4                 6214 	clr	a
   1906 08                 6215 	inc	r0
   1907 36                 6216 	addc	a,@r0
   1908 FB                 6217 	mov	r3,a
   1909 08                 6218 	inc	r0
   190A 86 04              6219 	mov	ar4,@r0
                           6220 ;	genPlus
                           6221 ;     genPlusIncr
   190C 74 24              6222 	mov	a,#0x24
                           6223 ;	Peephole 236.a	used r2 instead of ar2
   190E 2A                 6224 	add	a,r2
   190F FA                 6225 	mov	r2,a
                           6226 ;	Peephole 181	changed mov to clr
   1910 E4                 6227 	clr	a
                           6228 ;	Peephole 236.b	used r3 instead of ar3
   1911 3B                 6229 	addc	a,r3
   1912 FB                 6230 	mov	r3,a
                           6231 ;	genPlus
                           6232 ;     genPlusIncr
   1913 74 03              6233 	mov	a,#0x03
                           6234 ;	Peephole 236.a	used r2 instead of ar2
   1915 2A                 6235 	add	a,r2
   1916 FD                 6236 	mov	r5,a
                           6237 ;	Peephole 181	changed mov to clr
   1917 E4                 6238 	clr	a
                           6239 ;	Peephole 236.b	used r3 instead of ar3
   1918 3B                 6240 	addc	a,r3
   1919 FE                 6241 	mov	r6,a
   191A 8C 07              6242 	mov	ar7,r4
                           6243 ;	genPointerGet
                           6244 ;	genGenPointerGet
   191C 8D 82              6245 	mov	dpl,r5
   191E 8E 83              6246 	mov	dph,r6
   1920 8F F0              6247 	mov	b,r7
   1922 12s00r00           6248 	lcall	__gptrget
   1925 FF                 6249 	mov	r7,a
                           6250 ;	genCast
   1926 E5*00              6251 	mov	a,_bp
   1928 24 20              6252 	add	a,#0x20
   192A F8                 6253 	mov	r0,a
   192B A6 07              6254 	mov	@r0,ar7
   192D 08                 6255 	inc	r0
   192E 76 00              6256 	mov	@r0,#0x00
   1930 08                 6257 	inc	r0
   1931 76 00              6258 	mov	@r0,#0x00
   1933 08                 6259 	inc	r0
   1934 76 00              6260 	mov	@r0,#0x00
                           6261 ;	genLeftShift
                           6262 ;	genLeftShiftLiteral
   1936 E5*00              6263 	mov	a,_bp
   1938 24 20              6264 	add	a,#0x20
   193A F8                 6265 	mov	r0,a
                           6266 ;	genlshFour
   193B E6                 6267 	mov	a,@r0
   193C 08                 6268 	inc	r0
   193D 08                 6269 	inc	r0
   193E 08                 6270 	inc	r0
   193F F6                 6271 	mov	@r0,a
   1940 18                 6272 	dec	r0
   1941 18                 6273 	dec	r0
   1942 18                 6274 	dec	r0
   1943 76 00              6275 	mov	@r0,#0x00
   1945 08                 6276 	inc	r0
   1946 76 00              6277 	mov	@r0,#0x00
   1948 08                 6278 	inc	r0
   1949 76 00              6279 	mov	@r0,#0x00
                           6280 ;	genPlus
                           6281 ;     genPlusIncr
   194B 74 02              6282 	mov	a,#0x02
                           6283 ;	Peephole 236.a	used r2 instead of ar2
   194D 2A                 6284 	add	a,r2
   194E FD                 6285 	mov	r5,a
                           6286 ;	Peephole 181	changed mov to clr
   194F E4                 6287 	clr	a
                           6288 ;	Peephole 236.b	used r3 instead of ar3
   1950 3B                 6289 	addc	a,r3
   1951 FE                 6290 	mov	r6,a
   1952 8C 07              6291 	mov	ar7,r4
                           6292 ;	genPointerGet
                           6293 ;	genGenPointerGet
   1954 8D 82              6294 	mov	dpl,r5
   1956 8E 83              6295 	mov	dph,r6
   1958 8F F0              6296 	mov	b,r7
   195A 12s00r00           6297 	lcall	__gptrget
   195D FF                 6298 	mov	r7,a
                           6299 ;	genCast
   195E E5*00              6300 	mov	a,_bp
   1960 24 24              6301 	add	a,#0x24
   1962 F8                 6302 	mov	r0,a
   1963 A6 07              6303 	mov	@r0,ar7
   1965 08                 6304 	inc	r0
   1966 76 00              6305 	mov	@r0,#0x00
   1968 08                 6306 	inc	r0
   1969 76 00              6307 	mov	@r0,#0x00
   196B 08                 6308 	inc	r0
   196C 76 00              6309 	mov	@r0,#0x00
                           6310 ;	genLeftShift
                           6311 ;	genLeftShiftLiteral
   196E E5*00              6312 	mov	a,_bp
   1970 24 24              6313 	add	a,#0x24
                           6314 ;	genlshFour
                           6315 ;	Peephole 185	changed order of increment (acc incremented also!)
   1972 04                 6316 	inc	a
   1973 F8                 6317 	mov	r0,a
   1974 E6                 6318 	mov	a,@r0
   1975 08                 6319 	inc	r0
   1976 08                 6320 	inc	r0
   1977 F6                 6321 	mov	@r0,a
   1978 18                 6322 	dec	r0
   1979 18                 6323 	dec	r0
   197A 18                 6324 	dec	r0
   197B E6                 6325 	mov	a,@r0
   197C 08                 6326 	inc	r0
   197D 08                 6327 	inc	r0
   197E F6                 6328 	mov	@r0,a
   197F 18                 6329 	dec	r0
   1980 76 00              6330 	mov	@r0,#0x00
   1982 18                 6331 	dec	r0
   1983 76 00              6332 	mov	@r0,#0x00
                           6333 ;	genOr
   1985 E5*00              6334 	mov	a,_bp
   1987 24 20              6335 	add	a,#0x20
   1989 F8                 6336 	mov	r0,a
   198A E5*00              6337 	mov	a,_bp
   198C 24 24              6338 	add	a,#0x24
   198E F9                 6339 	mov	r1,a
   198F E6                 6340 	mov	a,@r0
   1990 47                 6341 	orl	a,@r1
   1991 F7                 6342 	mov	@r1,a
   1992 08                 6343 	inc	r0
   1993 E6                 6344 	mov	a,@r0
   1994 09                 6345 	inc	r1
   1995 47                 6346 	orl	a,@r1
   1996 F7                 6347 	mov	@r1,a
   1997 08                 6348 	inc	r0
   1998 E6                 6349 	mov	a,@r0
   1999 09                 6350 	inc	r1
   199A 47                 6351 	orl	a,@r1
   199B F7                 6352 	mov	@r1,a
   199C 08                 6353 	inc	r0
   199D E6                 6354 	mov	a,@r0
   199E 09                 6355 	inc	r1
   199F 47                 6356 	orl	a,@r1
   19A0 F7                 6357 	mov	@r1,a
                           6358 ;	genPlus
                           6359 ;     genPlusIncr
   19A1 74 01              6360 	mov	a,#0x01
                           6361 ;	Peephole 236.a	used r2 instead of ar2
   19A3 2A                 6362 	add	a,r2
   19A4 FD                 6363 	mov	r5,a
                           6364 ;	Peephole 181	changed mov to clr
   19A5 E4                 6365 	clr	a
                           6366 ;	Peephole 236.b	used r3 instead of ar3
   19A6 3B                 6367 	addc	a,r3
   19A7 FE                 6368 	mov	r6,a
   19A8 8C 07              6369 	mov	ar7,r4
                           6370 ;	genPointerGet
                           6371 ;	genGenPointerGet
   19AA 8D 82              6372 	mov	dpl,r5
   19AC 8E 83              6373 	mov	dph,r6
   19AE 8F F0              6374 	mov	b,r7
   19B0 12s00r00           6375 	lcall	__gptrget
   19B3 FF                 6376 	mov	r7,a
                           6377 ;	genCast
                           6378 ;	genLeftShift
                           6379 ;	genLeftShiftLiteral
                           6380 ;	genlshTwo
                           6381 ;	peephole 177.e	removed redundant move
   19B4 8F 05              6382 	mov	ar5,r7
   19B6 7E 00              6383 	mov	r6,#0x00
                           6384 ;	genCast
   19B8 E5*00              6385 	mov	a,_bp
   19BA 24 20              6386 	add	a,#0x20
   19BC F8                 6387 	mov	r0,a
   19BD A6 06              6388 	mov	@r0,ar6
   19BF 08                 6389 	inc	r0
   19C0 A6 05              6390 	mov	@r0,ar5
   19C2 08                 6391 	inc	r0
   19C3 76 00              6392 	mov	@r0,#0x00
   19C5 08                 6393 	inc	r0
   19C6 76 00              6394 	mov	@r0,#0x00
                           6395 ;	genOr
   19C8 E5*00              6396 	mov	a,_bp
   19CA 24 24              6397 	add	a,#0x24
   19CC F8                 6398 	mov	r0,a
   19CD E5*00              6399 	mov	a,_bp
   19CF 24 20              6400 	add	a,#0x20
   19D1 F9                 6401 	mov	r1,a
   19D2 E7                 6402 	mov	a,@r1
   19D3 46                 6403 	orl	a,@r0
   19D4 F6                 6404 	mov	@r0,a
   19D5 09                 6405 	inc	r1
   19D6 E7                 6406 	mov	a,@r1
   19D7 08                 6407 	inc	r0
   19D8 46                 6408 	orl	a,@r0
   19D9 F6                 6409 	mov	@r0,a
   19DA 09                 6410 	inc	r1
   19DB E7                 6411 	mov	a,@r1
   19DC 08                 6412 	inc	r0
   19DD 46                 6413 	orl	a,@r0
   19DE F6                 6414 	mov	@r0,a
   19DF 09                 6415 	inc	r1
   19E0 E7                 6416 	mov	a,@r1
   19E1 08                 6417 	inc	r0
   19E2 46                 6418 	orl	a,@r0
   19E3 F6                 6419 	mov	@r0,a
                           6420 ;	genPointerGet
                           6421 ;	genGenPointerGet
   19E4 8A 82              6422 	mov	dpl,r2
   19E6 8B 83              6423 	mov	dph,r3
   19E8 8C F0              6424 	mov	b,r4
   19EA 12s00r00           6425 	lcall	__gptrget
   19ED FF                 6426 	mov	r7,a
                           6427 ;	genCast
                           6428 ;	genOr
                           6429 ;	Peephole 3.c	changed mov to clr
                           6430 ;	Peephole 3.b	changed mov to clr
   19EE E4                 6431 	clr	a
   19EF FA                 6432 	mov	r2,a
   19F0 FB                 6433 	mov	r3,a
   19F1 FC                 6434 	mov	r4,a
   19F2 E5*00              6435 	mov	a,_bp
   19F4 24 24              6436 	add	a,#0x24
   19F6 F8                 6437 	mov	r0,a
   19F7 EF                 6438 	mov	a,r7
   19F8 46                 6439 	orl	a,@r0
   19F9 FD                 6440 	mov	r5,a
   19FA EA                 6441 	mov	a,r2
   19FB 08                 6442 	inc	r0
   19FC 46                 6443 	orl	a,@r0
   19FD FA                 6444 	mov	r2,a
   19FE EB                 6445 	mov	a,r3
   19FF 08                 6446 	inc	r0
   1A00 46                 6447 	orl	a,@r0
   1A01 FB                 6448 	mov	r3,a
   1A02 EC                 6449 	mov	a,r4
   1A03 08                 6450 	inc	r0
   1A04 46                 6451 	orl	a,@r0
   1A05 FC                 6452 	mov	r4,a
                           6453 ;	genAssign
   1A06 E5*00              6454 	mov	a,_bp
   1A08 24 09              6455 	add	a,#0x09
   1A0A F8                 6456 	mov	r0,a
   1A0B A6 05              6457 	mov	@r0,ar5
   1A0D 08                 6458 	inc	r0
   1A0E A6 02              6459 	mov	@r0,ar2
   1A10 08                 6460 	inc	r0
   1A11 A6 03              6461 	mov	@r0,ar3
   1A13 08                 6462 	inc	r0
   1A14 A6 04              6463 	mov	@r0,ar4
   1A16                    6464 00122$:
                    1A16   6465 	C$tff.c$693$1$1 ==.
                           6466 ;	tff.c:693: fs->sects_fat = (CLUST)fatsize;
                           6467 ;	genPlus
   1A16 E5*00              6468 	mov	a,_bp
   1A18 24 15              6469 	add	a,#0x15
   1A1A F8                 6470 	mov	r0,a
                           6471 ;     genPlusIncr
   1A1B 74 14              6472 	mov	a,#0x14
   1A1D 26                 6473 	add	a,@r0
   1A1E FF                 6474 	mov	r7,a
                           6475 ;	Peephole 181	changed mov to clr
   1A1F E4                 6476 	clr	a
   1A20 08                 6477 	inc	r0
   1A21 36                 6478 	addc	a,@r0
   1A22 FB                 6479 	mov	r3,a
   1A23 08                 6480 	inc	r0
   1A24 86 04              6481 	mov	ar4,@r0
                           6482 ;	genPointerSet
                           6483 ;	genGenPointerSet
   1A26 8F 82              6484 	mov	dpl,r7
   1A28 8B 83              6485 	mov	dph,r3
   1A2A 8C F0              6486 	mov	b,r4
   1A2C E5*00              6487 	mov	a,_bp
   1A2E 24 09              6488 	add	a,#0x09
   1A30 F8                 6489 	mov	r0,a
   1A31 E6                 6490 	mov	a,@r0
   1A32 12s00r00           6491 	lcall	__gptrput
   1A35 A3                 6492 	inc	dptr
   1A36 08                 6493 	inc	r0
   1A37 E6                 6494 	mov	a,@r0
   1A38 12s00r00           6495 	lcall	__gptrput
   1A3B A3                 6496 	inc	dptr
   1A3C 08                 6497 	inc	r0
   1A3D E6                 6498 	mov	a,@r0
   1A3E 12s00r00           6499 	lcall	__gptrput
   1A41 A3                 6500 	inc	dptr
   1A42 08                 6501 	inc	r0
   1A43 E6                 6502 	mov	a,@r0
   1A44 12s00r00           6503 	lcall	__gptrput
                    1A47   6504 	C$tff.c$694$1$1 ==.
                           6505 ;	tff.c:694: fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
                           6506 ;	genPlus
   1A47 E5*00              6507 	mov	a,_bp
   1A49 24 15              6508 	add	a,#0x15
   1A4B F8                 6509 	mov	r0,a
                           6510 ;     genPlusIncr
   1A4C 74 1E              6511 	mov	a,#0x1E
   1A4E 26                 6512 	add	a,@r0
   1A4F FA                 6513 	mov	r2,a
                           6514 ;	Peephole 181	changed mov to clr
   1A50 E4                 6515 	clr	a
   1A51 08                 6516 	inc	r0
   1A52 36                 6517 	addc	a,@r0
   1A53 FE                 6518 	mov	r6,a
   1A54 08                 6519 	inc	r0
   1A55 86 07              6520 	mov	ar7,@r0
                           6521 ;	genPlus
   1A57 E5*00              6522 	mov	a,_bp
   1A59 24 15              6523 	add	a,#0x15
   1A5B F8                 6524 	mov	r0,a
   1A5C E5*00              6525 	mov	a,_bp
   1A5E 24 20              6526 	add	a,#0x20
   1A60 F9                 6527 	mov	r1,a
                           6528 ;     genPlusIncr
   1A61 74 20              6529 	mov	a,#0x20
   1A63 26                 6530 	add	a,@r0
   1A64 F7                 6531 	mov	@r1,a
                           6532 ;	Peephole 181	changed mov to clr
   1A65 E4                 6533 	clr	a
   1A66 08                 6534 	inc	r0
   1A67 36                 6535 	addc	a,@r0
   1A68 09                 6536 	inc	r1
   1A69 F7                 6537 	mov	@r1,a
   1A6A 08                 6538 	inc	r0
   1A6B 09                 6539 	inc	r1
   1A6C E6                 6540 	mov	a,@r0
   1A6D F7                 6541 	mov	@r1,a
                           6542 ;	genPlus
   1A6E E5*00              6543 	mov	a,_bp
   1A70 24 20              6544 	add	a,#0x20
   1A72 F8                 6545 	mov	r0,a
                           6546 ;     genPlusIncr
   1A73 74 10              6547 	mov	a,#0x10
   1A75 26                 6548 	add	a,@r0
   1A76 FC                 6549 	mov	r4,a
                           6550 ;	Peephole 181	changed mov to clr
   1A77 E4                 6551 	clr	a
   1A78 08                 6552 	inc	r0
   1A79 36                 6553 	addc	a,@r0
   1A7A FD                 6554 	mov	r5,a
   1A7B 08                 6555 	inc	r0
   1A7C 86 03              6556 	mov	ar3,@r0
                           6557 ;	genPointerGet
                           6558 ;	genGenPointerGet
   1A7E 8C 82              6559 	mov	dpl,r4
   1A80 8D 83              6560 	mov	dph,r5
   1A82 8B F0              6561 	mov	b,r3
   1A84 12s00r00           6562 	lcall	__gptrget
                           6563 ;	genPointerSet
                           6564 ;	genGenPointerSet
   1A87 FC                 6565 	mov	r4,a
   1A88 8A 82              6566 	mov	dpl,r2
   1A8A 8E 83              6567 	mov	dph,r6
   1A8C 8F F0              6568 	mov	b,r7
                           6569 ;	Peephole 191	removed redundant mov
   1A8E 12s00r00           6570 	lcall	__gptrput
                    1A91   6571 	C$tff.c$695$1$1 ==.
                           6572 ;	tff.c:695: fatsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
                           6573 ;	genCast
   1A91 7B 00              6574 	mov	r3,#0x00
   1A93 7D 00              6575 	mov	r5,#0x00
   1A95 7E 00              6576 	mov	r6,#0x00
                           6577 ;	genIpush
   1A97 C0 04              6578 	push	ar4
   1A99 C0 03              6579 	push	ar3
   1A9B C0 05              6580 	push	ar5
   1A9D C0 06              6581 	push	ar6
                           6582 ;	genCall
   1A9F E5*00              6583 	mov	a,_bp
   1AA1 24 09              6584 	add	a,#0x09
   1AA3 F8                 6585 	mov	r0,a
   1AA4 86 82              6586 	mov	dpl,@r0
   1AA6 08                 6587 	inc	r0
   1AA7 86 83              6588 	mov	dph,@r0
   1AA9 08                 6589 	inc	r0
   1AAA 86 F0              6590 	mov	b,@r0
   1AAC 08                 6591 	inc	r0
   1AAD E6                 6592 	mov	a,@r0
   1AAE 12s00r00           6593 	lcall	__mullong
   1AB1 AB 82              6594 	mov	r3,dpl
   1AB3 AC 83              6595 	mov	r4,dph
   1AB5 AD F0              6596 	mov	r5,b
   1AB7 FE                 6597 	mov	r6,a
   1AB8 E5 81              6598 	mov	a,sp
   1ABA 24 FC              6599 	add	a,#0xfc
   1ABC F5 81              6600 	mov	sp,a
                           6601 ;	genAssign
   1ABE E5*00              6602 	mov	a,_bp
   1AC0 24 09              6603 	add	a,#0x09
   1AC2 F8                 6604 	mov	r0,a
   1AC3 A6 03              6605 	mov	@r0,ar3
   1AC5 08                 6606 	inc	r0
   1AC6 A6 04              6607 	mov	@r0,ar4
   1AC8 08                 6608 	inc	r0
   1AC9 A6 05              6609 	mov	@r0,ar5
   1ACB 08                 6610 	inc	r0
   1ACC A6 06              6611 	mov	@r0,ar6
                    1ACE   6612 	C$tff.c$696$1$1 ==.
                           6613 ;	tff.c:696: fs->fatbase = bootsect + LD_WORD(&fs->win[BPB_RsvdSecCnt]);	/* FAT start sector (lba) */
                           6614 ;	genPlus
   1ACE E5*00              6615 	mov	a,_bp
   1AD0 24 15              6616 	add	a,#0x15
   1AD2 F8                 6617 	mov	r0,a
   1AD3 E5*00              6618 	mov	a,_bp
   1AD5 24 24              6619 	add	a,#0x24
   1AD7 F9                 6620 	mov	r1,a
                           6621 ;     genPlusIncr
   1AD8 74 08              6622 	mov	a,#0x08
   1ADA 26                 6623 	add	a,@r0
   1ADB F7                 6624 	mov	@r1,a
                           6625 ;	Peephole 181	changed mov to clr
   1ADC E4                 6626 	clr	a
   1ADD 08                 6627 	inc	r0
   1ADE 36                 6628 	addc	a,@r0
   1ADF 09                 6629 	inc	r1
   1AE0 F7                 6630 	mov	@r1,a
   1AE1 08                 6631 	inc	r0
   1AE2 09                 6632 	inc	r1
   1AE3 E6                 6633 	mov	a,@r0
   1AE4 F7                 6634 	mov	@r1,a
                           6635 ;	genPlus
   1AE5 E5*00              6636 	mov	a,_bp
   1AE7 24 20              6637 	add	a,#0x20
   1AE9 F8                 6638 	mov	r0,a
                           6639 ;     genPlusIncr
   1AEA 74 0E              6640 	mov	a,#0x0E
   1AEC 26                 6641 	add	a,@r0
   1AED FA                 6642 	mov	r2,a
                           6643 ;	Peephole 181	changed mov to clr
   1AEE E4                 6644 	clr	a
   1AEF 08                 6645 	inc	r0
   1AF0 36                 6646 	addc	a,@r0
   1AF1 FE                 6647 	mov	r6,a
   1AF2 08                 6648 	inc	r0
   1AF3 86 07              6649 	mov	ar7,@r0
                           6650 ;	genPlus
                           6651 ;     genPlusIncr
   1AF5 74 01              6652 	mov	a,#0x01
                           6653 ;	Peephole 236.a	used r2 instead of ar2
   1AF7 2A                 6654 	add	a,r2
   1AF8 FC                 6655 	mov	r4,a
                           6656 ;	Peephole 181	changed mov to clr
   1AF9 E4                 6657 	clr	a
                           6658 ;	Peephole 236.b	used r6 instead of ar6
   1AFA 3E                 6659 	addc	a,r6
   1AFB FD                 6660 	mov	r5,a
   1AFC 8F 03              6661 	mov	ar3,r7
                           6662 ;	genPointerGet
                           6663 ;	genGenPointerGet
   1AFE 8C 82              6664 	mov	dpl,r4
   1B00 8D 83              6665 	mov	dph,r5
   1B02 8B F0              6666 	mov	b,r3
   1B04 12s00r00           6667 	lcall	__gptrget
   1B07 FC                 6668 	mov	r4,a
                           6669 ;	genCast
                           6670 ;	genLeftShift
                           6671 ;	genLeftShiftLiteral
                           6672 ;	genlshTwo
                           6673 ;	peephole 177.e	removed redundant move
   1B08 8C 03              6674 	mov	ar3,r4
   1B0A 7C 00              6675 	mov	r4,#0x00
                           6676 ;	genPointerGet
                           6677 ;	genGenPointerGet
   1B0C 8A 82              6678 	mov	dpl,r2
   1B0E 8E 83              6679 	mov	dph,r6
   1B10 8F F0              6680 	mov	b,r7
   1B12 12s00r00           6681 	lcall	__gptrget
                           6682 ;	genCast
                           6683 ;	genOr
   1B15 FD                 6684 	mov	r5,a
   1B16 7E 00              6685 	mov	r6,#0x00
                           6686 ;	Peephole 177.d	removed redundant move
   1B18 42 04              6687 	orl	ar4,a
   1B1A EE                 6688 	mov	a,r6
   1B1B 42 03              6689 	orl	ar3,a
                           6690 ;	genCast
                           6691 ;	genPlus
                           6692 ;	Peephole 3.c	changed mov to clr
   1B1D E4                 6693 	clr	a
   1B1E FD                 6694 	mov	r5,a
   1B1F FE                 6695 	mov	r6,a
   1B20 E5*00              6696 	mov	a,_bp
   1B22 24 05              6697 	add	a,#0x05
   1B24 F8                 6698 	mov	r0,a
                           6699 ;	Peephole 236.g	used r4 instead of ar4
   1B25 EC                 6700 	mov	a,r4
   1B26 26                 6701 	add	a,@r0
   1B27 FC                 6702 	mov	r4,a
                           6703 ;	Peephole 236.g	used r3 instead of ar3
   1B28 EB                 6704 	mov	a,r3
   1B29 08                 6705 	inc	r0
   1B2A 36                 6706 	addc	a,@r0
   1B2B FB                 6707 	mov	r3,a
                           6708 ;	Peephole 236.g	used r5 instead of ar5
   1B2C ED                 6709 	mov	a,r5
   1B2D 08                 6710 	inc	r0
   1B2E 36                 6711 	addc	a,@r0
   1B2F FD                 6712 	mov	r5,a
                           6713 ;	Peephole 236.g	used r6 instead of ar6
   1B30 EE                 6714 	mov	a,r6
   1B31 08                 6715 	inc	r0
   1B32 36                 6716 	addc	a,@r0
   1B33 FE                 6717 	mov	r6,a
                           6718 ;	genPointerSet
                           6719 ;	genGenPointerSet
   1B34 E5*00              6720 	mov	a,_bp
   1B36 24 24              6721 	add	a,#0x24
   1B38 F8                 6722 	mov	r0,a
   1B39 86 82              6723 	mov	dpl,@r0
   1B3B 08                 6724 	inc	r0
   1B3C 86 83              6725 	mov	dph,@r0
   1B3E 08                 6726 	inc	r0
   1B3F 86 F0              6727 	mov	b,@r0
   1B41 EC                 6728 	mov	a,r4
   1B42 12s00r00           6729 	lcall	__gptrput
   1B45 A3                 6730 	inc	dptr
   1B46 EB                 6731 	mov	a,r3
   1B47 12s00r00           6732 	lcall	__gptrput
   1B4A A3                 6733 	inc	dptr
   1B4B ED                 6734 	mov	a,r5
   1B4C 12s00r00           6735 	lcall	__gptrput
   1B4F A3                 6736 	inc	dptr
   1B50 EE                 6737 	mov	a,r6
   1B51 12s00r00           6738 	lcall	__gptrput
                    1B54   6739 	C$tff.c$697$1$1 ==.
                           6740 ;	tff.c:697: fs->sects_clust = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
                           6741 ;	genPlus
   1B54 E5*00              6742 	mov	a,_bp
   1B56 24 15              6743 	add	a,#0x15
   1B58 F8                 6744 	mov	r0,a
   1B59 E5*00              6745 	mov	a,_bp
   1B5B 24 1C              6746 	add	a,#0x1c
   1B5D F9                 6747 	mov	r1,a
                           6748 ;     genPlusIncr
   1B5E 74 1D              6749 	mov	a,#0x1D
   1B60 26                 6750 	add	a,@r0
   1B61 F7                 6751 	mov	@r1,a
                           6752 ;	Peephole 181	changed mov to clr
   1B62 E4                 6753 	clr	a
   1B63 08                 6754 	inc	r0
   1B64 36                 6755 	addc	a,@r0
   1B65 09                 6756 	inc	r1
   1B66 F7                 6757 	mov	@r1,a
   1B67 08                 6758 	inc	r0
   1B68 09                 6759 	inc	r1
   1B69 E6                 6760 	mov	a,@r0
   1B6A F7                 6761 	mov	@r1,a
                           6762 ;	genPlus
   1B6B E5*00              6763 	mov	a,_bp
   1B6D 24 20              6764 	add	a,#0x20
   1B6F F8                 6765 	mov	r0,a
                           6766 ;     genPlusIncr
   1B70 74 0D              6767 	mov	a,#0x0D
   1B72 26                 6768 	add	a,@r0
   1B73 FE                 6769 	mov	r6,a
                           6770 ;	Peephole 181	changed mov to clr
   1B74 E4                 6771 	clr	a
   1B75 08                 6772 	inc	r0
   1B76 36                 6773 	addc	a,@r0
   1B77 FF                 6774 	mov	r7,a
   1B78 08                 6775 	inc	r0
   1B79 86 03              6776 	mov	ar3,@r0
                           6777 ;	genPointerGet
                           6778 ;	genGenPointerGet
   1B7B 8E 82              6779 	mov	dpl,r6
   1B7D 8F 83              6780 	mov	dph,r7
   1B7F 8B F0              6781 	mov	b,r3
   1B81 12s00r00           6782 	lcall	__gptrget
   1B84 FE                 6783 	mov	r6,a
                           6784 ;	genPointerSet
                           6785 ;	genGenPointerSet
   1B85 E5*00              6786 	mov	a,_bp
   1B87 24 1C              6787 	add	a,#0x1c
   1B89 F8                 6788 	mov	r0,a
   1B8A 86 82              6789 	mov	dpl,@r0
   1B8C 08                 6790 	inc	r0
   1B8D 86 83              6791 	mov	dph,@r0
   1B8F 08                 6792 	inc	r0
   1B90 86 F0              6793 	mov	b,@r0
   1B92 EE                 6794 	mov	a,r6
   1B93 12s00r00           6795 	lcall	__gptrput
                    1B96   6796 	C$tff.c$698$1$1 ==.
                           6797 ;	tff.c:698: fs->n_rootdir = LD_WORD(&fs->win[BPB_RootEntCnt]);	/* Nmuber of root directory entries */
                           6798 ;	genPlus
   1B96 E5*00              6799 	mov	a,_bp
   1B98 24 15              6800 	add	a,#0x15
   1B9A F8                 6801 	mov	r0,a
   1B9B E5*00              6802 	mov	a,_bp
   1B9D 24 19              6803 	add	a,#0x19
   1B9F F9                 6804 	mov	r1,a
                           6805 ;     genPlusIncr
   1BA0 74 02              6806 	mov	a,#0x02
   1BA2 26                 6807 	add	a,@r0
   1BA3 F7                 6808 	mov	@r1,a
                           6809 ;	Peephole 181	changed mov to clr
   1BA4 E4                 6810 	clr	a
   1BA5 08                 6811 	inc	r0
   1BA6 36                 6812 	addc	a,@r0
   1BA7 09                 6813 	inc	r1
   1BA8 F7                 6814 	mov	@r1,a
   1BA9 08                 6815 	inc	r0
   1BAA 09                 6816 	inc	r1
   1BAB E6                 6817 	mov	a,@r0
   1BAC F7                 6818 	mov	@r1,a
                           6819 ;	genPlus
   1BAD E5*00              6820 	mov	a,_bp
   1BAF 24 20              6821 	add	a,#0x20
   1BB1 F8                 6822 	mov	r0,a
                           6823 ;     genPlusIncr
   1BB2 74 11              6824 	mov	a,#0x11
   1BB4 26                 6825 	add	a,@r0
   1BB5 FA                 6826 	mov	r2,a
                           6827 ;	Peephole 181	changed mov to clr
   1BB6 E4                 6828 	clr	a
   1BB7 08                 6829 	inc	r0
   1BB8 36                 6830 	addc	a,@r0
   1BB9 FE                 6831 	mov	r6,a
   1BBA 08                 6832 	inc	r0
   1BBB 86 07              6833 	mov	ar7,@r0
                           6834 ;	genPlus
                           6835 ;     genPlusIncr
   1BBD 74 01              6836 	mov	a,#0x01
                           6837 ;	Peephole 236.a	used r2 instead of ar2
   1BBF 2A                 6838 	add	a,r2
   1BC0 FC                 6839 	mov	r4,a
                           6840 ;	Peephole 181	changed mov to clr
   1BC1 E4                 6841 	clr	a
                           6842 ;	Peephole 236.b	used r6 instead of ar6
   1BC2 3E                 6843 	addc	a,r6
   1BC3 FD                 6844 	mov	r5,a
   1BC4 8F 03              6845 	mov	ar3,r7
                           6846 ;	genPointerGet
                           6847 ;	genGenPointerGet
   1BC6 8C 82              6848 	mov	dpl,r4
   1BC8 8D 83              6849 	mov	dph,r5
   1BCA 8B F0              6850 	mov	b,r3
   1BCC 12s00r00           6851 	lcall	__gptrget
   1BCF FC                 6852 	mov	r4,a
                           6853 ;	genCast
                           6854 ;	genLeftShift
                           6855 ;	genLeftShiftLiteral
                           6856 ;	genlshTwo
                           6857 ;	peephole 177.e	removed redundant move
   1BD0 8C 03              6858 	mov	ar3,r4
   1BD2 7C 00              6859 	mov	r4,#0x00
                           6860 ;	genPointerGet
                           6861 ;	genGenPointerGet
   1BD4 8A 82              6862 	mov	dpl,r2
   1BD6 8E 83              6863 	mov	dph,r6
   1BD8 8F F0              6864 	mov	b,r7
   1BDA 12s00r00           6865 	lcall	__gptrget
                           6866 ;	genCast
                           6867 ;	genOr
   1BDD FD                 6868 	mov	r5,a
   1BDE 7E 00              6869 	mov	r6,#0x00
                           6870 ;	Peephole 177.d	removed redundant move
   1BE0 42 04              6871 	orl	ar4,a
   1BE2 EE                 6872 	mov	a,r6
   1BE3 42 03              6873 	orl	ar3,a
                           6874 ;	genPointerSet
                           6875 ;	genGenPointerSet
   1BE5 E5*00              6876 	mov	a,_bp
   1BE7 24 19              6877 	add	a,#0x19
   1BE9 F8                 6878 	mov	r0,a
   1BEA 86 82              6879 	mov	dpl,@r0
   1BEC 08                 6880 	inc	r0
   1BED 86 83              6881 	mov	dph,@r0
   1BEF 08                 6882 	inc	r0
   1BF0 86 F0              6883 	mov	b,@r0
   1BF2 EC                 6884 	mov	a,r4
   1BF3 12s00r00           6885 	lcall	__gptrput
   1BF6 A3                 6886 	inc	dptr
   1BF7 EB                 6887 	mov	a,r3
   1BF8 12s00r00           6888 	lcall	__gptrput
                    1BFB   6889 	C$tff.c$699$1$1 ==.
                           6890 ;	tff.c:699: totalsect = LD_WORD(&fs->win[BPB_TotSec16]);		/* Number of sectors on the file system */
                           6891 ;	genPlus
   1BFB E5*00              6892 	mov	a,_bp
   1BFD 24 20              6893 	add	a,#0x20
   1BFF F8                 6894 	mov	r0,a
                           6895 ;     genPlusIncr
   1C00 74 13              6896 	mov	a,#0x13
   1C02 26                 6897 	add	a,@r0
   1C03 FA                 6898 	mov	r2,a
                           6899 ;	Peephole 181	changed mov to clr
   1C04 E4                 6900 	clr	a
   1C05 08                 6901 	inc	r0
   1C06 36                 6902 	addc	a,@r0
   1C07 FC                 6903 	mov	r4,a
   1C08 08                 6904 	inc	r0
   1C09 86 05              6905 	mov	ar5,@r0
                           6906 ;	genPlus
                           6907 ;     genPlusIncr
   1C0B 74 01              6908 	mov	a,#0x01
                           6909 ;	Peephole 236.a	used r2 instead of ar2
   1C0D 2A                 6910 	add	a,r2
   1C0E FE                 6911 	mov	r6,a
                           6912 ;	Peephole 181	changed mov to clr
   1C0F E4                 6913 	clr	a
                           6914 ;	Peephole 236.b	used r4 instead of ar4
   1C10 3C                 6915 	addc	a,r4
   1C11 FF                 6916 	mov	r7,a
   1C12 8D 03              6917 	mov	ar3,r5
                           6918 ;	genPointerGet
                           6919 ;	genGenPointerGet
   1C14 8E 82              6920 	mov	dpl,r6
   1C16 8F 83              6921 	mov	dph,r7
   1C18 8B F0              6922 	mov	b,r3
   1C1A 12s00r00           6923 	lcall	__gptrget
   1C1D FE                 6924 	mov	r6,a
                           6925 ;	genCast
                           6926 ;	genLeftShift
                           6927 ;	genLeftShiftLiteral
                           6928 ;	genlshTwo
                           6929 ;	peephole 177.e	removed redundant move
   1C1E 8E 03              6930 	mov	ar3,r6
   1C20 7E 00              6931 	mov	r6,#0x00
                           6932 ;	genPointerGet
                           6933 ;	genGenPointerGet
   1C22 8A 82              6934 	mov	dpl,r2
   1C24 8C 83              6935 	mov	dph,r4
   1C26 8D F0              6936 	mov	b,r5
   1C28 12s00r00           6937 	lcall	__gptrget
                           6938 ;	genCast
                           6939 ;	genOr
   1C2B FC                 6940 	mov	r4,a
   1C2C 7D 00              6941 	mov	r5,#0x00
                           6942 ;	Peephole 177.d	removed redundant move
   1C2E 42 06              6943 	orl	ar6,a
   1C30 ED                 6944 	mov	a,r5
   1C31 42 03              6945 	orl	ar3,a
                           6946 ;	genCast
   1C33 E5*00              6947 	mov	a,_bp
   1C35 24 0D              6948 	add	a,#0x0d
   1C37 F8                 6949 	mov	r0,a
   1C38 A6 06              6950 	mov	@r0,ar6
   1C3A 08                 6951 	inc	r0
   1C3B A6 03              6952 	mov	@r0,ar3
   1C3D 08                 6953 	inc	r0
   1C3E 76 00              6954 	mov	@r0,#0x00
   1C40 08                 6955 	inc	r0
   1C41 76 00              6956 	mov	@r0,#0x00
                    1C43   6957 	C$tff.c$700$1$1 ==.
                           6958 ;	tff.c:700: if (!totalsect) totalsect = LD_DWORD(&fs->win[BPB_TotSec32]);
                           6959 ;	genIfx
   1C43 E5*00              6960 	mov	a,_bp
   1C45 24 0D              6961 	add	a,#0x0d
   1C47 F8                 6962 	mov	r0,a
   1C48 E6                 6963 	mov	a,@r0
   1C49 08                 6964 	inc	r0
   1C4A 46                 6965 	orl	a,@r0
   1C4B 08                 6966 	inc	r0
   1C4C 46                 6967 	orl	a,@r0
   1C4D 08                 6968 	inc	r0
   1C4E 46                 6969 	orl	a,@r0
                           6970 ;	genIfxJump
   1C4F 60 03              6971 	jz	00164$
   1C51 02s1Dr6E           6972 	ljmp	00124$
   1C54                    6973 00164$:
                           6974 ;	genPlus
   1C54 E5*00              6975 	mov	a,_bp
   1C56 24 15              6976 	add	a,#0x15
   1C58 F8                 6977 	mov	r0,a
                           6978 ;     genPlusIncr
   1C59 74 20              6979 	mov	a,#0x20
   1C5B 26                 6980 	add	a,@r0
   1C5C FA                 6981 	mov	r2,a
                           6982 ;	Peephole 181	changed mov to clr
   1C5D E4                 6983 	clr	a
   1C5E 08                 6984 	inc	r0
   1C5F 36                 6985 	addc	a,@r0
   1C60 FB                 6986 	mov	r3,a
   1C61 08                 6987 	inc	r0
   1C62 86 04              6988 	mov	ar4,@r0
                           6989 ;	genPlus
                           6990 ;     genPlusIncr
   1C64 74 20              6991 	mov	a,#0x20
                           6992 ;	Peephole 236.a	used r2 instead of ar2
   1C66 2A                 6993 	add	a,r2
   1C67 FA                 6994 	mov	r2,a
                           6995 ;	Peephole 181	changed mov to clr
   1C68 E4                 6996 	clr	a
                           6997 ;	Peephole 236.b	used r3 instead of ar3
   1C69 3B                 6998 	addc	a,r3
   1C6A FB                 6999 	mov	r3,a
                           7000 ;	genPlus
                           7001 ;     genPlusIncr
   1C6B 74 03              7002 	mov	a,#0x03
                           7003 ;	Peephole 236.a	used r2 instead of ar2
   1C6D 2A                 7004 	add	a,r2
   1C6E FD                 7005 	mov	r5,a
                           7006 ;	Peephole 181	changed mov to clr
   1C6F E4                 7007 	clr	a
                           7008 ;	Peephole 236.b	used r3 instead of ar3
   1C70 3B                 7009 	addc	a,r3
   1C71 FE                 7010 	mov	r6,a
   1C72 8C 07              7011 	mov	ar7,r4
                           7012 ;	genPointerGet
                           7013 ;	genGenPointerGet
   1C74 8D 82              7014 	mov	dpl,r5
   1C76 8E 83              7015 	mov	dph,r6
   1C78 8F F0              7016 	mov	b,r7
   1C7A 12s00r00           7017 	lcall	__gptrget
   1C7D FF                 7018 	mov	r7,a
                           7019 ;	genCast
   1C7E E5*00              7020 	mov	a,_bp
   1C80 24 20              7021 	add	a,#0x20
   1C82 F8                 7022 	mov	r0,a
   1C83 A6 07              7023 	mov	@r0,ar7
   1C85 08                 7024 	inc	r0
   1C86 76 00              7025 	mov	@r0,#0x00
   1C88 08                 7026 	inc	r0
   1C89 76 00              7027 	mov	@r0,#0x00
   1C8B 08                 7028 	inc	r0
   1C8C 76 00              7029 	mov	@r0,#0x00
                           7030 ;	genLeftShift
                           7031 ;	genLeftShiftLiteral
   1C8E E5*00              7032 	mov	a,_bp
   1C90 24 20              7033 	add	a,#0x20
   1C92 F8                 7034 	mov	r0,a
                           7035 ;	genlshFour
   1C93 E6                 7036 	mov	a,@r0
   1C94 08                 7037 	inc	r0
   1C95 08                 7038 	inc	r0
   1C96 08                 7039 	inc	r0
   1C97 F6                 7040 	mov	@r0,a
   1C98 18                 7041 	dec	r0
   1C99 18                 7042 	dec	r0
   1C9A 18                 7043 	dec	r0
   1C9B 76 00              7044 	mov	@r0,#0x00
   1C9D 08                 7045 	inc	r0
   1C9E 76 00              7046 	mov	@r0,#0x00
   1CA0 08                 7047 	inc	r0
   1CA1 76 00              7048 	mov	@r0,#0x00
                           7049 ;	genPlus
                           7050 ;     genPlusIncr
   1CA3 74 02              7051 	mov	a,#0x02
                           7052 ;	Peephole 236.a	used r2 instead of ar2
   1CA5 2A                 7053 	add	a,r2
   1CA6 FD                 7054 	mov	r5,a
                           7055 ;	Peephole 181	changed mov to clr
   1CA7 E4                 7056 	clr	a
                           7057 ;	Peephole 236.b	used r3 instead of ar3
   1CA8 3B                 7058 	addc	a,r3
   1CA9 FE                 7059 	mov	r6,a
   1CAA 8C 07              7060 	mov	ar7,r4
                           7061 ;	genPointerGet
                           7062 ;	genGenPointerGet
   1CAC 8D 82              7063 	mov	dpl,r5
   1CAE 8E 83              7064 	mov	dph,r6
   1CB0 8F F0              7065 	mov	b,r7
   1CB2 12s00r00           7066 	lcall	__gptrget
   1CB5 FF                 7067 	mov	r7,a
                           7068 ;	genCast
   1CB6 E5*00              7069 	mov	a,_bp
   1CB8 24 2B              7070 	add	a,#0x2b
   1CBA F8                 7071 	mov	r0,a
   1CBB A6 07              7072 	mov	@r0,ar7
   1CBD 08                 7073 	inc	r0
   1CBE 76 00              7074 	mov	@r0,#0x00
   1CC0 08                 7075 	inc	r0
   1CC1 76 00              7076 	mov	@r0,#0x00
   1CC3 08                 7077 	inc	r0
   1CC4 76 00              7078 	mov	@r0,#0x00
                           7079 ;	genLeftShift
                           7080 ;	genLeftShiftLiteral
   1CC6 E5*00              7081 	mov	a,_bp
   1CC8 24 2B              7082 	add	a,#0x2b
                           7083 ;	genlshFour
                           7084 ;	Peephole 185	changed order of increment (acc incremented also!)
   1CCA 04                 7085 	inc	a
   1CCB F8                 7086 	mov	r0,a
   1CCC E6                 7087 	mov	a,@r0
   1CCD 08                 7088 	inc	r0
   1CCE 08                 7089 	inc	r0
   1CCF F6                 7090 	mov	@r0,a
   1CD0 18                 7091 	dec	r0
   1CD1 18                 7092 	dec	r0
   1CD2 18                 7093 	dec	r0
   1CD3 E6                 7094 	mov	a,@r0
   1CD4 08                 7095 	inc	r0
   1CD5 08                 7096 	inc	r0
   1CD6 F6                 7097 	mov	@r0,a
   1CD7 18                 7098 	dec	r0
   1CD8 76 00              7099 	mov	@r0,#0x00
   1CDA 18                 7100 	dec	r0
   1CDB 76 00              7101 	mov	@r0,#0x00
                           7102 ;	genOr
   1CDD E5*00              7103 	mov	a,_bp
   1CDF 24 20              7104 	add	a,#0x20
   1CE1 F8                 7105 	mov	r0,a
   1CE2 E5*00              7106 	mov	a,_bp
   1CE4 24 2B              7107 	add	a,#0x2b
   1CE6 F9                 7108 	mov	r1,a
   1CE7 E6                 7109 	mov	a,@r0
   1CE8 47                 7110 	orl	a,@r1
   1CE9 F7                 7111 	mov	@r1,a
   1CEA 08                 7112 	inc	r0
   1CEB E6                 7113 	mov	a,@r0
   1CEC 09                 7114 	inc	r1
   1CED 47                 7115 	orl	a,@r1
   1CEE F7                 7116 	mov	@r1,a
   1CEF 08                 7117 	inc	r0
   1CF0 E6                 7118 	mov	a,@r0
   1CF1 09                 7119 	inc	r1
   1CF2 47                 7120 	orl	a,@r1
   1CF3 F7                 7121 	mov	@r1,a
   1CF4 08                 7122 	inc	r0
   1CF5 E6                 7123 	mov	a,@r0
   1CF6 09                 7124 	inc	r1
   1CF7 47                 7125 	orl	a,@r1
   1CF8 F7                 7126 	mov	@r1,a
                           7127 ;	genPlus
                           7128 ;     genPlusIncr
   1CF9 74 01              7129 	mov	a,#0x01
                           7130 ;	Peephole 236.a	used r2 instead of ar2
   1CFB 2A                 7131 	add	a,r2
   1CFC FD                 7132 	mov	r5,a
                           7133 ;	Peephole 181	changed mov to clr
   1CFD E4                 7134 	clr	a
                           7135 ;	Peephole 236.b	used r3 instead of ar3
   1CFE 3B                 7136 	addc	a,r3
   1CFF FE                 7137 	mov	r6,a
   1D00 8C 07              7138 	mov	ar7,r4
                           7139 ;	genPointerGet
                           7140 ;	genGenPointerGet
   1D02 8D 82              7141 	mov	dpl,r5
   1D04 8E 83              7142 	mov	dph,r6
   1D06 8F F0              7143 	mov	b,r7
   1D08 12s00r00           7144 	lcall	__gptrget
   1D0B FF                 7145 	mov	r7,a
                           7146 ;	genCast
                           7147 ;	genLeftShift
                           7148 ;	genLeftShiftLiteral
                           7149 ;	genlshTwo
                           7150 ;	peephole 177.e	removed redundant move
   1D0C 8F 05              7151 	mov	ar5,r7
   1D0E 7E 00              7152 	mov	r6,#0x00
                           7153 ;	genCast
   1D10 E5*00              7154 	mov	a,_bp
   1D12 24 20              7155 	add	a,#0x20
   1D14 F8                 7156 	mov	r0,a
   1D15 A6 06              7157 	mov	@r0,ar6
   1D17 08                 7158 	inc	r0
   1D18 A6 05              7159 	mov	@r0,ar5
   1D1A 08                 7160 	inc	r0
   1D1B 76 00              7161 	mov	@r0,#0x00
   1D1D 08                 7162 	inc	r0
   1D1E 76 00              7163 	mov	@r0,#0x00
                           7164 ;	genOr
   1D20 E5*00              7165 	mov	a,_bp
   1D22 24 2B              7166 	add	a,#0x2b
   1D24 F8                 7167 	mov	r0,a
   1D25 E5*00              7168 	mov	a,_bp
   1D27 24 20              7169 	add	a,#0x20
   1D29 F9                 7170 	mov	r1,a
   1D2A E7                 7171 	mov	a,@r1
   1D2B 46                 7172 	orl	a,@r0
   1D2C F6                 7173 	mov	@r0,a
   1D2D 09                 7174 	inc	r1
   1D2E E7                 7175 	mov	a,@r1
   1D2F 08                 7176 	inc	r0
   1D30 46                 7177 	orl	a,@r0
   1D31 F6                 7178 	mov	@r0,a
   1D32 09                 7179 	inc	r1
   1D33 E7                 7180 	mov	a,@r1
   1D34 08                 7181 	inc	r0
   1D35 46                 7182 	orl	a,@r0
   1D36 F6                 7183 	mov	@r0,a
   1D37 09                 7184 	inc	r1
   1D38 E7                 7185 	mov	a,@r1
   1D39 08                 7186 	inc	r0
   1D3A 46                 7187 	orl	a,@r0
   1D3B F6                 7188 	mov	@r0,a
                           7189 ;	genPointerGet
                           7190 ;	genGenPointerGet
   1D3C 8A 82              7191 	mov	dpl,r2
   1D3E 8B 83              7192 	mov	dph,r3
   1D40 8C F0              7193 	mov	b,r4
   1D42 12s00r00           7194 	lcall	__gptrget
   1D45 FF                 7195 	mov	r7,a
                           7196 ;	genCast
                           7197 ;	genOr
                           7198 ;	Peephole 3.c	changed mov to clr
                           7199 ;	Peephole 3.b	changed mov to clr
   1D46 E4                 7200 	clr	a
   1D47 FA                 7201 	mov	r2,a
   1D48 FB                 7202 	mov	r3,a
   1D49 FC                 7203 	mov	r4,a
   1D4A E5*00              7204 	mov	a,_bp
   1D4C 24 2B              7205 	add	a,#0x2b
   1D4E F8                 7206 	mov	r0,a
   1D4F EF                 7207 	mov	a,r7
   1D50 46                 7208 	orl	a,@r0
   1D51 FD                 7209 	mov	r5,a
   1D52 EA                 7210 	mov	a,r2
   1D53 08                 7211 	inc	r0
   1D54 46                 7212 	orl	a,@r0
   1D55 FA                 7213 	mov	r2,a
   1D56 EB                 7214 	mov	a,r3
   1D57 08                 7215 	inc	r0
   1D58 46                 7216 	orl	a,@r0
   1D59 FB                 7217 	mov	r3,a
   1D5A EC                 7218 	mov	a,r4
   1D5B 08                 7219 	inc	r0
   1D5C 46                 7220 	orl	a,@r0
   1D5D FC                 7221 	mov	r4,a
                           7222 ;	genAssign
   1D5E E5*00              7223 	mov	a,_bp
   1D60 24 0D              7224 	add	a,#0x0d
   1D62 F8                 7225 	mov	r0,a
   1D63 A6 05              7226 	mov	@r0,ar5
   1D65 08                 7227 	inc	r0
   1D66 A6 02              7228 	mov	@r0,ar2
   1D68 08                 7229 	inc	r0
   1D69 A6 03              7230 	mov	@r0,ar3
   1D6B 08                 7231 	inc	r0
   1D6C A6 04              7232 	mov	@r0,ar4
   1D6E                    7233 00124$:
                    1D6E   7234 	C$tff.c$701$1$1 ==.
                           7235 ;	tff.c:701: fs->max_clust = maxclust = (totalsect				/* Last cluster# + 1 */
                           7236 ;	genPlus
   1D6E E5*00              7237 	mov	a,_bp
   1D70 24 15              7238 	add	a,#0x15
   1D72 F8                 7239 	mov	r0,a
   1D73 E5*00              7240 	mov	a,_bp
   1D75 24 2B              7241 	add	a,#0x2b
   1D77 F9                 7242 	mov	r1,a
                           7243 ;     genPlusIncr
   1D78 74 18              7244 	mov	a,#0x18
   1D7A 26                 7245 	add	a,@r0
   1D7B F7                 7246 	mov	@r1,a
                           7247 ;	Peephole 181	changed mov to clr
   1D7C E4                 7248 	clr	a
   1D7D 08                 7249 	inc	r0
   1D7E 36                 7250 	addc	a,@r0
   1D7F 09                 7251 	inc	r1
   1D80 F7                 7252 	mov	@r1,a
   1D81 08                 7253 	inc	r0
   1D82 09                 7254 	inc	r1
   1D83 E6                 7255 	mov	a,@r0
   1D84 F7                 7256 	mov	@r1,a
                    1D85   7257 	C$tff.c$702$1$1 ==.
                           7258 ;	tff.c:702: - LD_WORD(&fs->win[BPB_RsvdSecCnt]) - fatsize - fs->n_rootdir / 16
                           7259 ;	genPlus
   1D85 E5*00              7260 	mov	a,_bp
   1D87 24 15              7261 	add	a,#0x15
   1D89 F8                 7262 	mov	r0,a
                           7263 ;     genPlusIncr
   1D8A 74 20              7264 	mov	a,#0x20
   1D8C 26                 7265 	add	a,@r0
   1D8D FD                 7266 	mov	r5,a
                           7267 ;	Peephole 181	changed mov to clr
   1D8E E4                 7268 	clr	a
   1D8F 08                 7269 	inc	r0
   1D90 36                 7270 	addc	a,@r0
   1D91 FE                 7271 	mov	r6,a
   1D92 08                 7272 	inc	r0
   1D93 86 03              7273 	mov	ar3,@r0
                           7274 ;	genPlus
                           7275 ;     genPlusIncr
   1D95 74 0E              7276 	mov	a,#0x0E
                           7277 ;	Peephole 236.a	used r5 instead of ar5
   1D97 2D                 7278 	add	a,r5
   1D98 FD                 7279 	mov	r5,a
                           7280 ;	Peephole 181	changed mov to clr
   1D99 E4                 7281 	clr	a
                           7282 ;	Peephole 236.b	used r6 instead of ar6
   1D9A 3E                 7283 	addc	a,r6
   1D9B FE                 7284 	mov	r6,a
   1D9C 8B 02              7285 	mov	ar2,r3
                           7286 ;	genPlus
                           7287 ;     genPlusIncr
   1D9E 74 01              7288 	mov	a,#0x01
                           7289 ;	Peephole 236.a	used r5 instead of ar5
   1DA0 2D                 7290 	add	a,r5
   1DA1 FC                 7291 	mov	r4,a
                           7292 ;	Peephole 181	changed mov to clr
   1DA2 E4                 7293 	clr	a
                           7294 ;	Peephole 236.b	used r6 instead of ar6
   1DA3 3E                 7295 	addc	a,r6
   1DA4 FF                 7296 	mov	r7,a
   1DA5 8A 03              7297 	mov	ar3,r2
                           7298 ;	genPointerGet
                           7299 ;	genGenPointerGet
   1DA7 8C 82              7300 	mov	dpl,r4
   1DA9 8F 83              7301 	mov	dph,r7
   1DAB 8B F0              7302 	mov	b,r3
   1DAD 12s00r00           7303 	lcall	__gptrget
   1DB0 FC                 7304 	mov	r4,a
                           7305 ;	genCast
                           7306 ;	genLeftShift
                           7307 ;	genLeftShiftLiteral
                           7308 ;	genlshTwo
                           7309 ;	peephole 177.e	removed redundant move
   1DB1 8C 03              7310 	mov	ar3,r4
   1DB3 7C 00              7311 	mov	r4,#0x00
                           7312 ;	genPointerGet
                           7313 ;	genGenPointerGet
   1DB5 8D 82              7314 	mov	dpl,r5
   1DB7 8E 83              7315 	mov	dph,r6
   1DB9 8A F0              7316 	mov	b,r2
   1DBB 12s00r00           7317 	lcall	__gptrget
                           7318 ;	genCast
                           7319 ;	genOr
   1DBE FD                 7320 	mov	r5,a
   1DBF 7E 00              7321 	mov	r6,#0x00
                           7322 ;	Peephole 177.d	removed redundant move
   1DC1 42 04              7323 	orl	ar4,a
   1DC3 EE                 7324 	mov	a,r6
   1DC4 42 03              7325 	orl	ar3,a
                           7326 ;	genCast
                           7327 ;	genMinus
                           7328 ;	Peephole 3.c	changed mov to clr
   1DC6 E4                 7329 	clr	a
   1DC7 FD                 7330 	mov	r5,a
   1DC8 FE                 7331 	mov	r6,a
   1DC9 E5*00              7332 	mov	a,_bp
   1DCB 24 0D              7333 	add	a,#0x0d
   1DCD F8                 7334 	mov	r0,a
   1DCE E6                 7335 	mov	a,@r0
   1DCF C3                 7336 	clr	c
                           7337 ;	Peephole 236.l	used r4 instead of ar4
   1DD0 9C                 7338 	subb	a,r4
   1DD1 FC                 7339 	mov	r4,a
   1DD2 08                 7340 	inc	r0
   1DD3 E6                 7341 	mov	a,@r0
                           7342 ;	Peephole 236.l	used r3 instead of ar3
   1DD4 9B                 7343 	subb	a,r3
   1DD5 FB                 7344 	mov	r3,a
   1DD6 08                 7345 	inc	r0
   1DD7 E6                 7346 	mov	a,@r0
                           7347 ;	Peephole 236.l	used r5 instead of ar5
   1DD8 9D                 7348 	subb	a,r5
   1DD9 FD                 7349 	mov	r5,a
   1DDA 08                 7350 	inc	r0
   1DDB E6                 7351 	mov	a,@r0
                           7352 ;	Peephole 236.l	used r6 instead of ar6
   1DDC 9E                 7353 	subb	a,r6
   1DDD FE                 7354 	mov	r6,a
                           7355 ;	genMinus
   1DDE E5*00              7356 	mov	a,_bp
   1DE0 24 09              7357 	add	a,#0x09
   1DE2 F8                 7358 	mov	r0,a
   1DE3 E5*00              7359 	mov	a,_bp
   1DE5 24 20              7360 	add	a,#0x20
   1DE7 F9                 7361 	mov	r1,a
   1DE8 EC                 7362 	mov	a,r4
   1DE9 C3                 7363 	clr	c
   1DEA 96                 7364 	subb	a,@r0
   1DEB F7                 7365 	mov	@r1,a
   1DEC EB                 7366 	mov	a,r3
   1DED 08                 7367 	inc	r0
   1DEE 96                 7368 	subb	a,@r0
   1DEF 09                 7369 	inc	r1
   1DF0 F7                 7370 	mov	@r1,a
   1DF1 ED                 7371 	mov	a,r5
   1DF2 08                 7372 	inc	r0
   1DF3 96                 7373 	subb	a,@r0
   1DF4 09                 7374 	inc	r1
   1DF5 F7                 7375 	mov	@r1,a
   1DF6 EE                 7376 	mov	a,r6
   1DF7 08                 7377 	inc	r0
   1DF8 96                 7378 	subb	a,@r0
   1DF9 09                 7379 	inc	r1
   1DFA F7                 7380 	mov	@r1,a
                           7381 ;	genPointerGet
                           7382 ;	genGenPointerGet
   1DFB E5*00              7383 	mov	a,_bp
   1DFD 24 19              7384 	add	a,#0x19
   1DFF F8                 7385 	mov	r0,a
   1E00 86 82              7386 	mov	dpl,@r0
   1E02 08                 7387 	inc	r0
   1E03 86 83              7388 	mov	dph,@r0
   1E05 08                 7389 	inc	r0
   1E06 86 F0              7390 	mov	b,@r0
   1E08 12s00r00           7391 	lcall	__gptrget
   1E0B FF                 7392 	mov	r7,a
   1E0C A3                 7393 	inc	dptr
   1E0D 12s00r00           7394 	lcall	__gptrget
                           7395 ;	genRightShift
                           7396 ;	genRightShiftLiteral
                           7397 ;	genrshTwo
   1E10 FB                 7398 	mov	r3,a
                           7399 ;	Peephole 105	removed redundant mov
   1E11 C4                 7400 	swap	a
   1E12 CF                 7401 	xch	a,r7
   1E13 C4                 7402 	swap	a
   1E14 54 0F              7403 	anl	a,#0x0f
   1E16 6F                 7404 	xrl	a,r7
   1E17 CF                 7405 	xch	a,r7
   1E18 54 0F              7406 	anl	a,#0x0f
   1E1A CF                 7407 	xch	a,r7
   1E1B 6F                 7408 	xrl	a,r7
   1E1C CF                 7409 	xch	a,r7
   1E1D FB                 7410 	mov	r3,a
                           7411 ;	genCast
                           7412 ;	genMinus
                           7413 ;	Peephole 3.c	changed mov to clr
   1E1E E4                 7414 	clr	a
   1E1F FC                 7415 	mov	r4,a
   1E20 FD                 7416 	mov	r5,a
   1E21 E5*00              7417 	mov	a,_bp
   1E23 24 20              7418 	add	a,#0x20
   1E25 F8                 7419 	mov	r0,a
   1E26 E6                 7420 	mov	a,@r0
   1E27 C3                 7421 	clr	c
                           7422 ;	Peephole 236.l	used r7 instead of ar7
   1E28 9F                 7423 	subb	a,r7
   1E29 F6                 7424 	mov	@r0,a
   1E2A 08                 7425 	inc	r0
   1E2B E6                 7426 	mov	a,@r0
                           7427 ;	Peephole 236.l	used r3 instead of ar3
   1E2C 9B                 7428 	subb	a,r3
   1E2D F6                 7429 	mov	@r0,a
   1E2E 08                 7430 	inc	r0
   1E2F E6                 7431 	mov	a,@r0
                           7432 ;	Peephole 236.l	used r4 instead of ar4
   1E30 9C                 7433 	subb	a,r4
   1E31 F6                 7434 	mov	@r0,a
   1E32 08                 7435 	inc	r0
   1E33 E6                 7436 	mov	a,@r0
                           7437 ;	Peephole 236.l	used r5 instead of ar5
   1E34 9D                 7438 	subb	a,r5
   1E35 F6                 7439 	mov	@r0,a
                    1E36   7440 	C$tff.c$703$1$1 ==.
                           7441 ;	tff.c:703: ) / fs->sects_clust + 2;
                           7442 ;	genPointerGet
                           7443 ;	genGenPointerGet
   1E36 E5*00              7444 	mov	a,_bp
   1E38 24 1C              7445 	add	a,#0x1c
   1E3A F8                 7446 	mov	r0,a
   1E3B 86 82              7447 	mov	dpl,@r0
   1E3D 08                 7448 	inc	r0
   1E3E 86 83              7449 	mov	dph,@r0
   1E40 08                 7450 	inc	r0
   1E41 86 F0              7451 	mov	b,@r0
   1E43 12s00r00           7452 	lcall	__gptrget
   1E46 FE                 7453 	mov	r6,a
                           7454 ;	genCast
   1E47 7B 00              7455 	mov	r3,#0x00
   1E49 7C 00              7456 	mov	r4,#0x00
   1E4B 7D 00              7457 	mov	r5,#0x00
                           7458 ;	genIpush
   1E4D C0 06              7459 	push	ar6
   1E4F C0 03              7460 	push	ar3
   1E51 C0 04              7461 	push	ar4
   1E53 C0 05              7462 	push	ar5
                           7463 ;	genCall
   1E55 E5*00              7464 	mov	a,_bp
   1E57 24 20              7465 	add	a,#0x20
   1E59 F8                 7466 	mov	r0,a
   1E5A 86 82              7467 	mov	dpl,@r0
   1E5C 08                 7468 	inc	r0
   1E5D 86 83              7469 	mov	dph,@r0
   1E5F 08                 7470 	inc	r0
   1E60 86 F0              7471 	mov	b,@r0
   1E62 08                 7472 	inc	r0
   1E63 E6                 7473 	mov	a,@r0
   1E64 12s00r00           7474 	lcall	__divulong
   1E67 AB 82              7475 	mov	r3,dpl
   1E69 AC 83              7476 	mov	r4,dph
   1E6B AD F0              7477 	mov	r5,b
   1E6D FE                 7478 	mov	r6,a
   1E6E E5 81              7479 	mov	a,sp
   1E70 24 FC              7480 	add	a,#0xfc
   1E72 F5 81              7481 	mov	sp,a
                           7482 ;	genPlus
   1E74 E5*00              7483 	mov	a,_bp
   1E76 24 11              7484 	add	a,#0x11
   1E78 F8                 7485 	mov	r0,a
                           7486 ;     genPlusIncr
   1E79 74 02              7487 	mov	a,#0x02
                           7488 ;	Peephole 236.a	used r3 instead of ar3
   1E7B 2B                 7489 	add	a,r3
   1E7C F6                 7490 	mov	@r0,a
                           7491 ;	Peephole 181	changed mov to clr
   1E7D E4                 7492 	clr	a
                           7493 ;	Peephole 236.b	used r4 instead of ar4
   1E7E 3C                 7494 	addc	a,r4
   1E7F 08                 7495 	inc	r0
   1E80 F6                 7496 	mov	@r0,a
                           7497 ;	Peephole 181	changed mov to clr
   1E81 E4                 7498 	clr	a
                           7499 ;	Peephole 236.b	used r5 instead of ar5
   1E82 3D                 7500 	addc	a,r5
   1E83 08                 7501 	inc	r0
   1E84 F6                 7502 	mov	@r0,a
                           7503 ;	Peephole 181	changed mov to clr
   1E85 E4                 7504 	clr	a
                           7505 ;	Peephole 236.b	used r6 instead of ar6
   1E86 3E                 7506 	addc	a,r6
   1E87 08                 7507 	inc	r0
   1E88 F6                 7508 	mov	@r0,a
                           7509 ;	genAssign
   1E89 E5*00              7510 	mov	a,_bp
   1E8B 24 11              7511 	add	a,#0x11
   1E8D F8                 7512 	mov	r0,a
   1E8E 86 07              7513 	mov	ar7,@r0
   1E90 08                 7514 	inc	r0
   1E91 86 03              7515 	mov	ar3,@r0
   1E93 08                 7516 	inc	r0
   1E94 86 04              7517 	mov	ar4,@r0
   1E96 08                 7518 	inc	r0
   1E97 86 05              7519 	mov	ar5,@r0
                           7520 ;	genPointerSet
                           7521 ;	genGenPointerSet
   1E99 E5*00              7522 	mov	a,_bp
   1E9B 24 2B              7523 	add	a,#0x2b
   1E9D F8                 7524 	mov	r0,a
   1E9E 86 82              7525 	mov	dpl,@r0
   1EA0 08                 7526 	inc	r0
   1EA1 86 83              7527 	mov	dph,@r0
   1EA3 08                 7528 	inc	r0
   1EA4 86 F0              7529 	mov	b,@r0
   1EA6 E5*00              7530 	mov	a,_bp
   1EA8 24 11              7531 	add	a,#0x11
   1EAA F9                 7532 	mov	r1,a
   1EAB E7                 7533 	mov	a,@r1
   1EAC 12s00r00           7534 	lcall	__gptrput
   1EAF A3                 7535 	inc	dptr
   1EB0 09                 7536 	inc	r1
   1EB1 E7                 7537 	mov	a,@r1
   1EB2 12s00r00           7538 	lcall	__gptrput
   1EB5 A3                 7539 	inc	dptr
   1EB6 09                 7540 	inc	r1
   1EB7 E7                 7541 	mov	a,@r1
   1EB8 12s00r00           7542 	lcall	__gptrput
   1EBB A3                 7543 	inc	dptr
   1EBC 09                 7544 	inc	r1
   1EBD E7                 7545 	mov	a,@r1
   1EBE 12s00r00           7546 	lcall	__gptrput
                    1EC1   7547 	C$tff.c$705$1$1 ==.
                           7548 ;	tff.c:705: fmt = FS_FAT12;										/* Determine the FAT sub type */
                           7549 ;	genAssign
   1EC1 E5*00              7550 	mov	a,_bp
   1EC3 24 04              7551 	add	a,#0x04
   1EC5 F8                 7552 	mov	r0,a
   1EC6 76 01              7553 	mov	@r0,#0x01
                    1EC8   7554 	C$tff.c$706$1$1 ==.
                           7555 ;	tff.c:706: if (maxclust > 0xFF7) fmt = FS_FAT16;
                           7556 ;	genCmpGt
                           7557 ;	genCmp
   1EC8 C3                 7558 	clr	c
   1EC9 74 F7              7559 	mov	a,#0xF7
   1ECB 9F                 7560 	subb	a,r7
   1ECC 74 0F              7561 	mov	a,#0x0F
   1ECE 9B                 7562 	subb	a,r3
                           7563 ;	Peephole 181	changed mov to clr
   1ECF E4                 7564 	clr	a
   1ED0 9C                 7565 	subb	a,r4
                           7566 ;	Peephole 181	changed mov to clr
   1ED1 E4                 7567 	clr	a
   1ED2 9D                 7568 	subb	a,r5
                           7569 ;	genIfxJump
                           7570 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1ED3 50 07              7571 	jnc	00126$
                           7572 ;	Peephole 300	removed redundant label 00165$
                           7573 ;	genAssign
   1ED5 E5*00              7574 	mov	a,_bp
   1ED7 24 04              7575 	add	a,#0x04
   1ED9 F8                 7576 	mov	r0,a
   1EDA 76 02              7577 	mov	@r0,#0x02
   1EDC                    7578 00126$:
                    1EDC   7579 	C$tff.c$707$1$1 ==.
                           7580 ;	tff.c:707: if (maxclust > 0xFFF7)
                           7581 ;	genCmpGt
                           7582 ;	genCmp
   1EDC C3                 7583 	clr	c
   1EDD 74 F7              7584 	mov	a,#0xF7
   1EDF 9F                 7585 	subb	a,r7
   1EE0 74 FF              7586 	mov	a,#0xFF
   1EE2 9B                 7587 	subb	a,r3
                           7588 ;	Peephole 181	changed mov to clr
   1EE3 E4                 7589 	clr	a
   1EE4 9C                 7590 	subb	a,r4
                           7591 ;	Peephole 181	changed mov to clr
   1EE5 E4                 7592 	clr	a
   1EE6 9D                 7593 	subb	a,r5
                           7594 ;	genIfxJump
                           7595 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1EE7 50 07              7596 	jnc	00128$
                           7597 ;	Peephole 300	removed redundant label 00166$
                    1EE9   7598 	C$tff.c$711$1$1 ==.
                           7599 ;	tff.c:711: fmt = FS_FAT32;
                           7600 ;	genAssign
   1EE9 E5*00              7601 	mov	a,_bp
   1EEB 24 04              7602 	add	a,#0x04
   1EED F8                 7603 	mov	r0,a
   1EEE 76 03              7604 	mov	@r0,#0x03
   1EF0                    7605 00128$:
                    1EF0   7606 	C$tff.c$712$1$1 ==.
                           7607 ;	tff.c:712: if (fmt == FS_FAT32)
                           7608 ;	genCmpEq
   1EF0 E5*00              7609 	mov	a,_bp
   1EF2 24 04              7610 	add	a,#0x04
   1EF4 F8                 7611 	mov	r0,a
                           7612 ;	gencjneshort
   1EF5 B6 03 02           7613 	cjne	@r0,#0x03,00167$
   1EF8 80 03              7614 	sjmp	00168$
   1EFA                    7615 00167$:
   1EFA 02s20r1F           7616 	ljmp	00130$
   1EFD                    7617 00168$:
                    1EFD   7618 	C$tff.c$713$1$1 ==.
                           7619 ;	tff.c:713: fs->dirbase = LD_DWORD(&fs->win[BPB_RootClus]);	/* Root directory start cluster */
                           7620 ;	genIpush
                           7621 ;	genPlus
   1EFD E5*00              7622 	mov	a,_bp
   1EFF 24 15              7623 	add	a,#0x15
   1F01 F8                 7624 	mov	r0,a
   1F02 E5*00              7625 	mov	a,_bp
   1F04 24 2B              7626 	add	a,#0x2b
   1F06 F9                 7627 	mov	r1,a
                           7628 ;     genPlusIncr
   1F07 74 0C              7629 	mov	a,#0x0C
   1F09 26                 7630 	add	a,@r0
   1F0A F7                 7631 	mov	@r1,a
                           7632 ;	Peephole 181	changed mov to clr
   1F0B E4                 7633 	clr	a
   1F0C 08                 7634 	inc	r0
   1F0D 36                 7635 	addc	a,@r0
   1F0E 09                 7636 	inc	r1
   1F0F F7                 7637 	mov	@r1,a
   1F10 08                 7638 	inc	r0
   1F11 09                 7639 	inc	r1
   1F12 E6                 7640 	mov	a,@r0
   1F13 F7                 7641 	mov	@r1,a
                           7642 ;	genPlus
   1F14 E5*00              7643 	mov	a,_bp
   1F16 24 15              7644 	add	a,#0x15
   1F18 F8                 7645 	mov	r0,a
                           7646 ;     genPlusIncr
   1F19 74 20              7647 	mov	a,#0x20
   1F1B 26                 7648 	add	a,@r0
   1F1C FE                 7649 	mov	r6,a
                           7650 ;	Peephole 181	changed mov to clr
   1F1D E4                 7651 	clr	a
   1F1E 08                 7652 	inc	r0
   1F1F 36                 7653 	addc	a,@r0
   1F20 FF                 7654 	mov	r7,a
   1F21 08                 7655 	inc	r0
   1F22 86 02              7656 	mov	ar2,@r0
                           7657 ;	genPlus
   1F24 E5*00              7658 	mov	a,_bp
   1F26 24 28              7659 	add	a,#0x28
   1F28 F8                 7660 	mov	r0,a
                           7661 ;     genPlusIncr
   1F29 74 2C              7662 	mov	a,#0x2C
                           7663 ;	Peephole 236.a	used r6 instead of ar6
   1F2B 2E                 7664 	add	a,r6
   1F2C F6                 7665 	mov	@r0,a
                           7666 ;	Peephole 181	changed mov to clr
   1F2D E4                 7667 	clr	a
                           7668 ;	Peephole 236.b	used r7 instead of ar7
   1F2E 3F                 7669 	addc	a,r7
   1F2F 08                 7670 	inc	r0
   1F30 F6                 7671 	mov	@r0,a
   1F31 08                 7672 	inc	r0
   1F32 A6 02              7673 	mov	@r0,ar2
                           7674 ;	genPlus
   1F34 E5*00              7675 	mov	a,_bp
   1F36 24 28              7676 	add	a,#0x28
   1F38 F8                 7677 	mov	r0,a
                           7678 ;     genPlusIncr
   1F39 74 03              7679 	mov	a,#0x03
   1F3B 26                 7680 	add	a,@r0
   1F3C FB                 7681 	mov	r3,a
                           7682 ;	Peephole 181	changed mov to clr
   1F3D E4                 7683 	clr	a
   1F3E 08                 7684 	inc	r0
   1F3F 36                 7685 	addc	a,@r0
   1F40 FC                 7686 	mov	r4,a
   1F41 08                 7687 	inc	r0
   1F42 86 05              7688 	mov	ar5,@r0
                           7689 ;	genPointerGet
                           7690 ;	genGenPointerGet
   1F44 8B 82              7691 	mov	dpl,r3
   1F46 8C 83              7692 	mov	dph,r4
   1F48 8D F0              7693 	mov	b,r5
   1F4A 12s00r00           7694 	lcall	__gptrget
   1F4D FB                 7695 	mov	r3,a
                           7696 ;	genCast
                           7697 ;	genLeftShift
                           7698 ;	genLeftShiftLiteral
                           7699 ;	Peephole 3.c	changed mov to clr
                           7700 ;	Peephole 3.b	changed mov to clr
   1F4E E4                 7701 	clr	a
   1F4F FC                 7702 	mov	r4,a
   1F50 FD                 7703 	mov	r5,a
   1F51 FA                 7704 	mov	r2,a
   1F52 E5*00              7705 	mov	a,_bp
   1F54 24 20              7706 	add	a,#0x20
                           7707 ;	genlshFour
                           7708 ;	Peephole 185	changed order of increment (acc incremented also!)
   1F56 04                 7709 	inc	a
                           7710 ;	Peephole 185	changed order of increment (acc incremented also!)
   1F57 04                 7711 	inc	a
                           7712 ;	Peephole 185	changed order of increment (acc incremented also!)
   1F58 04                 7713 	inc	a
   1F59 F8                 7714 	mov	r0,a
   1F5A A6 03              7715 	mov	@r0,ar3
   1F5C 18                 7716 	dec	r0
   1F5D 18                 7717 	dec	r0
   1F5E 18                 7718 	dec	r0
   1F5F 76 00              7719 	mov	@r0,#0x00
   1F61 08                 7720 	inc	r0
   1F62 76 00              7721 	mov	@r0,#0x00
   1F64 08                 7722 	inc	r0
   1F65 76 00              7723 	mov	@r0,#0x00
                           7724 ;	genPlus
   1F67 E5*00              7725 	mov	a,_bp
   1F69 24 28              7726 	add	a,#0x28
   1F6B F8                 7727 	mov	r0,a
                           7728 ;     genPlusIncr
   1F6C 74 02              7729 	mov	a,#0x02
   1F6E 26                 7730 	add	a,@r0
   1F6F FE                 7731 	mov	r6,a
                           7732 ;	Peephole 181	changed mov to clr
   1F70 E4                 7733 	clr	a
   1F71 08                 7734 	inc	r0
   1F72 36                 7735 	addc	a,@r0
   1F73 FF                 7736 	mov	r7,a
   1F74 08                 7737 	inc	r0
   1F75 86 02              7738 	mov	ar2,@r0
                           7739 ;	genPointerGet
                           7740 ;	genGenPointerGet
   1F77 8E 82              7741 	mov	dpl,r6
   1F79 8F 83              7742 	mov	dph,r7
   1F7B 8A F0              7743 	mov	b,r2
   1F7D 12s00r00           7744 	lcall	__gptrget
   1F80 FE                 7745 	mov	r6,a
                           7746 ;	genCast
   1F81 7A 00              7747 	mov	r2,#0x00
   1F83 7B 00              7748 	mov	r3,#0x00
                           7749 ;	genLeftShift
                           7750 ;	genLeftShiftLiteral
                           7751 ;	genlshFour
                           7752 ;	peephole 177.e	removed redundant move
   1F85 8A 04              7753 	mov	ar4,r2
   1F87 8E 03              7754 	mov	ar3,r6
                           7755 ;	genOr
                           7756 ;	Peephole 3.c	changed mov to clr
   1F89 E4                 7757 	clr	a
   1F8A FA                 7758 	mov	r2,a
   1F8B FE                 7759 	mov	r6,a
   1F8C E5*00              7760 	mov	a,_bp
   1F8E 24 20              7761 	add	a,#0x20
   1F90 F8                 7762 	mov	r0,a
   1F91 EE                 7763 	mov	a,r6
   1F92 46                 7764 	orl	a,@r0
   1F93 F6                 7765 	mov	@r0,a
   1F94 EA                 7766 	mov	a,r2
   1F95 08                 7767 	inc	r0
   1F96 46                 7768 	orl	a,@r0
   1F97 F6                 7769 	mov	@r0,a
   1F98 EB                 7770 	mov	a,r3
   1F99 08                 7771 	inc	r0
   1F9A 46                 7772 	orl	a,@r0
   1F9B F6                 7773 	mov	@r0,a
   1F9C EC                 7774 	mov	a,r4
   1F9D 08                 7775 	inc	r0
   1F9E 46                 7776 	orl	a,@r0
   1F9F F6                 7777 	mov	@r0,a
                           7778 ;	genPlus
   1FA0 E5*00              7779 	mov	a,_bp
   1FA2 24 28              7780 	add	a,#0x28
   1FA4 F8                 7781 	mov	r0,a
                           7782 ;     genPlusIncr
   1FA5 74 01              7783 	mov	a,#0x01
   1FA7 26                 7784 	add	a,@r0
   1FA8 FD                 7785 	mov	r5,a
                           7786 ;	Peephole 181	changed mov to clr
   1FA9 E4                 7787 	clr	a
   1FAA 08                 7788 	inc	r0
   1FAB 36                 7789 	addc	a,@r0
   1FAC FF                 7790 	mov	r7,a
   1FAD 08                 7791 	inc	r0
   1FAE 86 02              7792 	mov	ar2,@r0
                           7793 ;	genPointerGet
                           7794 ;	genGenPointerGet
   1FB0 8D 82              7795 	mov	dpl,r5
   1FB2 8F 83              7796 	mov	dph,r7
   1FB4 8A F0              7797 	mov	b,r2
   1FB6 12s00r00           7798 	lcall	__gptrget
   1FB9 FD                 7799 	mov	r5,a
                           7800 ;	genCast
                           7801 ;	genLeftShift
                           7802 ;	genLeftShiftLiteral
                           7803 ;	genlshTwo
                           7804 ;	peephole 177.e	removed redundant move
   1FBA 8D 02              7805 	mov	ar2,r5
                           7806 ;	genCast
                           7807 ;	genOr
                           7808 ;	Peephole 3.c	changed mov to clr
                           7809 ;	Peephole 3.b	changed mov to clr
   1FBC E4                 7810 	clr	a
   1FBD FD                 7811 	mov	r5,a
   1FBE FB                 7812 	mov	r3,a
   1FBF FC                 7813 	mov	r4,a
   1FC0 E5*00              7814 	mov	a,_bp
   1FC2 24 20              7815 	add	a,#0x20
   1FC4 F8                 7816 	mov	r0,a
   1FC5 ED                 7817 	mov	a,r5
   1FC6 46                 7818 	orl	a,@r0
   1FC7 F6                 7819 	mov	@r0,a
   1FC8 EA                 7820 	mov	a,r2
   1FC9 08                 7821 	inc	r0
   1FCA 46                 7822 	orl	a,@r0
   1FCB F6                 7823 	mov	@r0,a
   1FCC EB                 7824 	mov	a,r3
   1FCD 08                 7825 	inc	r0
   1FCE 46                 7826 	orl	a,@r0
   1FCF F6                 7827 	mov	@r0,a
   1FD0 EC                 7828 	mov	a,r4
   1FD1 08                 7829 	inc	r0
   1FD2 46                 7830 	orl	a,@r0
   1FD3 F6                 7831 	mov	@r0,a
                           7832 ;	genPointerGet
                           7833 ;	genGenPointerGet
   1FD4 E5*00              7834 	mov	a,_bp
   1FD6 24 28              7835 	add	a,#0x28
   1FD8 F8                 7836 	mov	r0,a
   1FD9 86 82              7837 	mov	dpl,@r0
   1FDB 08                 7838 	inc	r0
   1FDC 86 83              7839 	mov	dph,@r0
   1FDE 08                 7840 	inc	r0
   1FDF 86 F0              7841 	mov	b,@r0
   1FE1 12s00r00           7842 	lcall	__gptrget
   1FE4 FE                 7843 	mov	r6,a
                           7844 ;	genCast
                           7845 ;	genOr
                           7846 ;	Peephole 3.c	changed mov to clr
                           7847 ;	Peephole 3.b	changed mov to clr
   1FE5 E4                 7848 	clr	a
   1FE6 FF                 7849 	mov	r7,a
   1FE7 FA                 7850 	mov	r2,a
   1FE8 FB                 7851 	mov	r3,a
   1FE9 E5*00              7852 	mov	a,_bp
   1FEB 24 20              7853 	add	a,#0x20
   1FED F8                 7854 	mov	r0,a
   1FEE E6                 7855 	mov	a,@r0
   1FEF 42 06              7856 	orl	ar6,a
   1FF1 08                 7857 	inc	r0
   1FF2 E6                 7858 	mov	a,@r0
   1FF3 42 07              7859 	orl	ar7,a
   1FF5 08                 7860 	inc	r0
   1FF6 E6                 7861 	mov	a,@r0
   1FF7 42 02              7862 	orl	ar2,a
   1FF9 08                 7863 	inc	r0
   1FFA E6                 7864 	mov	a,@r0
   1FFB 42 03              7865 	orl	ar3,a
                           7866 ;	genPointerSet
                           7867 ;	genGenPointerSet
   1FFD E5*00              7868 	mov	a,_bp
   1FFF 24 2B              7869 	add	a,#0x2b
   2001 F8                 7870 	mov	r0,a
   2002 86 82              7871 	mov	dpl,@r0
   2004 08                 7872 	inc	r0
   2005 86 83              7873 	mov	dph,@r0
   2007 08                 7874 	inc	r0
   2008 86 F0              7875 	mov	b,@r0
   200A EE                 7876 	mov	a,r6
   200B 12s00r00           7877 	lcall	__gptrput
   200E A3                 7878 	inc	dptr
   200F EF                 7879 	mov	a,r7
   2010 12s00r00           7880 	lcall	__gptrput
   2013 A3                 7881 	inc	dptr
   2014 EA                 7882 	mov	a,r2
   2015 12s00r00           7883 	lcall	__gptrput
   2018 A3                 7884 	inc	dptr
   2019 EB                 7885 	mov	a,r3
   201A 12s00r00           7886 	lcall	__gptrput
                           7887 ;	genIpop
                           7888 ;	Peephole 112.b	changed ljmp to sjmp
   201D 80 6B              7889 	sjmp	00131$
   201F                    7890 00130$:
                    201F   7891 	C$tff.c$716$1$1 ==.
                           7892 ;	tff.c:716: fs->dirbase = fs->fatbase + fatsize;			/* Root directory start sector (lba) */
                           7893 ;	genIpush
                           7894 ;	genPlus
   201F E5*00              7895 	mov	a,_bp
   2021 24 15              7896 	add	a,#0x15
   2023 F8                 7897 	mov	r0,a
   2024 E5*00              7898 	mov	a,_bp
   2026 24 2B              7899 	add	a,#0x2b
   2028 F9                 7900 	mov	r1,a
                           7901 ;     genPlusIncr
   2029 74 0C              7902 	mov	a,#0x0C
   202B 26                 7903 	add	a,@r0
   202C F7                 7904 	mov	@r1,a
                           7905 ;	Peephole 181	changed mov to clr
   202D E4                 7906 	clr	a
   202E 08                 7907 	inc	r0
   202F 36                 7908 	addc	a,@r0
   2030 09                 7909 	inc	r1
   2031 F7                 7910 	mov	@r1,a
   2032 08                 7911 	inc	r0
   2033 09                 7912 	inc	r1
   2034 E6                 7913 	mov	a,@r0
   2035 F7                 7914 	mov	@r1,a
                           7915 ;	genPointerGet
                           7916 ;	genGenPointerGet
   2036 E5*00              7917 	mov	a,_bp
   2038 24 24              7918 	add	a,#0x24
   203A F8                 7919 	mov	r0,a
   203B 86 82              7920 	mov	dpl,@r0
   203D 08                 7921 	inc	r0
   203E 86 83              7922 	mov	dph,@r0
   2040 08                 7923 	inc	r0
   2041 86 F0              7924 	mov	b,@r0
   2043 12s00r00           7925 	lcall	__gptrget
   2046 FE                 7926 	mov	r6,a
   2047 A3                 7927 	inc	dptr
   2048 12s00r00           7928 	lcall	__gptrget
   204B FF                 7929 	mov	r7,a
   204C A3                 7930 	inc	dptr
   204D 12s00r00           7931 	lcall	__gptrget
   2050 FA                 7932 	mov	r2,a
   2051 A3                 7933 	inc	dptr
   2052 12s00r00           7934 	lcall	__gptrget
   2055 FB                 7935 	mov	r3,a
                           7936 ;	genPlus
   2056 E5*00              7937 	mov	a,_bp
   2058 24 09              7938 	add	a,#0x09
   205A F8                 7939 	mov	r0,a
   205B E6                 7940 	mov	a,@r0
                           7941 ;	Peephole 236.a	used r6 instead of ar6
   205C 2E                 7942 	add	a,r6
   205D FE                 7943 	mov	r6,a
   205E 08                 7944 	inc	r0
   205F E6                 7945 	mov	a,@r0
                           7946 ;	Peephole 236.b	used r7 instead of ar7
   2060 3F                 7947 	addc	a,r7
   2061 FF                 7948 	mov	r7,a
   2062 08                 7949 	inc	r0
   2063 E6                 7950 	mov	a,@r0
                           7951 ;	Peephole 236.b	used r2 instead of ar2
   2064 3A                 7952 	addc	a,r2
   2065 FA                 7953 	mov	r2,a
   2066 08                 7954 	inc	r0
   2067 E6                 7955 	mov	a,@r0
                           7956 ;	Peephole 236.b	used r3 instead of ar3
   2068 3B                 7957 	addc	a,r3
   2069 FB                 7958 	mov	r3,a
                           7959 ;	genPointerSet
                           7960 ;	genGenPointerSet
   206A E5*00              7961 	mov	a,_bp
   206C 24 2B              7962 	add	a,#0x2b
   206E F8                 7963 	mov	r0,a
   206F 86 82              7964 	mov	dpl,@r0
   2071 08                 7965 	inc	r0
   2072 86 83              7966 	mov	dph,@r0
   2074 08                 7967 	inc	r0
   2075 86 F0              7968 	mov	b,@r0
   2077 EE                 7969 	mov	a,r6
   2078 12s00r00           7970 	lcall	__gptrput
   207B A3                 7971 	inc	dptr
   207C EF                 7972 	mov	a,r7
   207D 12s00r00           7973 	lcall	__gptrput
   2080 A3                 7974 	inc	dptr
   2081 EA                 7975 	mov	a,r2
   2082 12s00r00           7976 	lcall	__gptrput
   2085 A3                 7977 	inc	dptr
   2086 EB                 7978 	mov	a,r3
   2087 12s00r00           7979 	lcall	__gptrput
                    208A   7980 	C$tff.c$737$1$1 ==.
                           7981 ;	tff.c:737: return FR_OK;
                           7982 ;	genIpop
                    208A   7983 	C$tff.c$716$1$1 ==.
                           7984 ;	tff.c:716: fs->dirbase = fs->fatbase + fatsize;			/* Root directory start sector (lba) */
   208A                    7985 00131$:
                    208A   7986 	C$tff.c$717$1$1 ==.
                           7987 ;	tff.c:717: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
                           7988 ;	genPlus
   208A E5*00              7989 	mov	a,_bp
   208C 24 15              7990 	add	a,#0x15
   208E F8                 7991 	mov	r0,a
   208F E5*00              7992 	mov	a,_bp
   2091 24 2B              7993 	add	a,#0x2b
   2093 F9                 7994 	mov	r1,a
                           7995 ;     genPlusIncr
   2094 74 10              7996 	mov	a,#0x10
   2096 26                 7997 	add	a,@r0
   2097 F7                 7998 	mov	@r1,a
                           7999 ;	Peephole 181	changed mov to clr
   2098 E4                 8000 	clr	a
   2099 08                 8001 	inc	r0
   209A 36                 8002 	addc	a,@r0
   209B 09                 8003 	inc	r1
   209C F7                 8004 	mov	@r1,a
   209D 08                 8005 	inc	r0
   209E 09                 8006 	inc	r1
   209F E6                 8007 	mov	a,@r0
   20A0 F7                 8008 	mov	@r1,a
                           8009 ;	genPointerGet
                           8010 ;	genGenPointerGet
   20A1 E5*00              8011 	mov	a,_bp
   20A3 24 24              8012 	add	a,#0x24
   20A5 F8                 8013 	mov	r0,a
   20A6 86 82              8014 	mov	dpl,@r0
   20A8 08                 8015 	inc	r0
   20A9 86 83              8016 	mov	dph,@r0
   20AB 08                 8017 	inc	r0
   20AC 86 F0              8018 	mov	b,@r0
   20AE 12s00r00           8019 	lcall	__gptrget
   20B1 FE                 8020 	mov	r6,a
   20B2 A3                 8021 	inc	dptr
   20B3 12s00r00           8022 	lcall	__gptrget
   20B6 FF                 8023 	mov	r7,a
   20B7 A3                 8024 	inc	dptr
   20B8 12s00r00           8025 	lcall	__gptrget
   20BB FA                 8026 	mov	r2,a
   20BC A3                 8027 	inc	dptr
   20BD 12s00r00           8028 	lcall	__gptrget
   20C0 FB                 8029 	mov	r3,a
                           8030 ;	genPlus
   20C1 E5*00              8031 	mov	a,_bp
   20C3 24 09              8032 	add	a,#0x09
   20C5 F8                 8033 	mov	r0,a
   20C6 E5*00              8034 	mov	a,_bp
   20C8 24 24              8035 	add	a,#0x24
   20CA F9                 8036 	mov	r1,a
   20CB E6                 8037 	mov	a,@r0
                           8038 ;	Peephole 236.a	used r6 instead of ar6
   20CC 2E                 8039 	add	a,r6
   20CD F7                 8040 	mov	@r1,a
   20CE 08                 8041 	inc	r0
   20CF E6                 8042 	mov	a,@r0
                           8043 ;	Peephole 236.b	used r7 instead of ar7
   20D0 3F                 8044 	addc	a,r7
   20D1 09                 8045 	inc	r1
   20D2 F7                 8046 	mov	@r1,a
   20D3 08                 8047 	inc	r0
   20D4 E6                 8048 	mov	a,@r0
                           8049 ;	Peephole 236.b	used r2 instead of ar2
   20D5 3A                 8050 	addc	a,r2
   20D6 09                 8051 	inc	r1
   20D7 F7                 8052 	mov	@r1,a
   20D8 08                 8053 	inc	r0
   20D9 E6                 8054 	mov	a,@r0
                           8055 ;	Peephole 236.b	used r3 instead of ar3
   20DA 3B                 8056 	addc	a,r3
   20DB 09                 8057 	inc	r1
   20DC F7                 8058 	mov	@r1,a
                           8059 ;	genPointerGet
                           8060 ;	genGenPointerGet
   20DD E5*00              8061 	mov	a,_bp
   20DF 24 19              8062 	add	a,#0x19
   20E1 F8                 8063 	mov	r0,a
   20E2 86 82              8064 	mov	dpl,@r0
   20E4 08                 8065 	inc	r0
   20E5 86 83              8066 	mov	dph,@r0
   20E7 08                 8067 	inc	r0
   20E8 86 F0              8068 	mov	b,@r0
   20EA 12s00r00           8069 	lcall	__gptrget
   20ED FC                 8070 	mov	r4,a
   20EE A3                 8071 	inc	dptr
   20EF 12s00r00           8072 	lcall	__gptrget
                           8073 ;	genRightShift
                           8074 ;	genRightShiftLiteral
                           8075 ;	genrshTwo
   20F2 FD                 8076 	mov	r5,a
                           8077 ;	Peephole 105	removed redundant mov
   20F3 C4                 8078 	swap	a
   20F4 CC                 8079 	xch	a,r4
   20F5 C4                 8080 	swap	a
   20F6 54 0F              8081 	anl	a,#0x0f
   20F8 6C                 8082 	xrl	a,r4
   20F9 CC                 8083 	xch	a,r4
   20FA 54 0F              8084 	anl	a,#0x0f
   20FC CC                 8085 	xch	a,r4
   20FD 6C                 8086 	xrl	a,r4
   20FE CC                 8087 	xch	a,r4
   20FF FD                 8088 	mov	r5,a
                           8089 ;	genCast
                           8090 ;	genPlus
                           8091 ;	Peephole 3.c	changed mov to clr
   2100 E4                 8092 	clr	a
   2101 FA                 8093 	mov	r2,a
   2102 FB                 8094 	mov	r3,a
   2103 E5*00              8095 	mov	a,_bp
   2105 24 24              8096 	add	a,#0x24
   2107 F8                 8097 	mov	r0,a
                           8098 ;	Peephole 236.g	used r4 instead of ar4
   2108 EC                 8099 	mov	a,r4
   2109 26                 8100 	add	a,@r0
   210A FC                 8101 	mov	r4,a
                           8102 ;	Peephole 236.g	used r5 instead of ar5
   210B ED                 8103 	mov	a,r5
   210C 08                 8104 	inc	r0
   210D 36                 8105 	addc	a,@r0
   210E FD                 8106 	mov	r5,a
                           8107 ;	Peephole 236.g	used r2 instead of ar2
   210F EA                 8108 	mov	a,r2
   2110 08                 8109 	inc	r0
   2111 36                 8110 	addc	a,@r0
   2112 FA                 8111 	mov	r2,a
                           8112 ;	Peephole 236.g	used r3 instead of ar3
   2113 EB                 8113 	mov	a,r3
   2114 08                 8114 	inc	r0
   2115 36                 8115 	addc	a,@r0
   2116 FB                 8116 	mov	r3,a
                           8117 ;	genPointerSet
                           8118 ;	genGenPointerSet
   2117 E5*00              8119 	mov	a,_bp
   2119 24 2B              8120 	add	a,#0x2b
   211B F8                 8121 	mov	r0,a
   211C 86 82              8122 	mov	dpl,@r0
   211E 08                 8123 	inc	r0
   211F 86 83              8124 	mov	dph,@r0
   2121 08                 8125 	inc	r0
   2122 86 F0              8126 	mov	b,@r0
   2124 EC                 8127 	mov	a,r4
   2125 12s00r00           8128 	lcall	__gptrput
   2128 A3                 8129 	inc	dptr
   2129 ED                 8130 	mov	a,r5
   212A 12s00r00           8131 	lcall	__gptrput
   212D A3                 8132 	inc	dptr
   212E EA                 8133 	mov	a,r2
   212F 12s00r00           8134 	lcall	__gptrput
   2132 A3                 8135 	inc	dptr
   2133 EB                 8136 	mov	a,r3
   2134 12s00r00           8137 	lcall	__gptrput
                    2137   8138 	C$tff.c$718$1$1 ==.
                           8139 ;	tff.c:718: fs->fs_type = fmt;									/* FAT sub-type */
                           8140 ;	genPlus
   2137 E5*00              8141 	mov	a,_bp
   2139 24 15              8142 	add	a,#0x15
   213B F8                 8143 	mov	r0,a
                           8144 ;     genPlusIncr
   213C 74 1C              8145 	mov	a,#0x1C
   213E 26                 8146 	add	a,@r0
   213F FA                 8147 	mov	r2,a
                           8148 ;	Peephole 181	changed mov to clr
   2140 E4                 8149 	clr	a
   2141 08                 8150 	inc	r0
   2142 36                 8151 	addc	a,@r0
   2143 FB                 8152 	mov	r3,a
   2144 08                 8153 	inc	r0
   2145 86 04              8154 	mov	ar4,@r0
                           8155 ;	genPointerSet
                           8156 ;	genGenPointerSet
   2147 8A 82              8157 	mov	dpl,r2
   2149 8B 83              8158 	mov	dph,r3
   214B 8C F0              8159 	mov	b,r4
   214D E5*00              8160 	mov	a,_bp
   214F 24 04              8161 	add	a,#0x04
   2151 F8                 8162 	mov	r0,a
   2152 E6                 8163 	mov	a,@r0
   2153 12s00r00           8164 	lcall	__gptrput
                    2156   8165 	C$tff.c$736$1$1 ==.
                           8166 ;	tff.c:736: fs->id = ++fsid;									/* File system mount ID */
                           8167 ;	genPlus
                           8168 ;     genPlusIncr
   2156 05*03              8169 	inc	_fsid
   2158 E4                 8170 	clr	a
   2159 B5*03 02           8171 	cjne	a,_fsid,00169$
   215C 05*04              8172 	inc	(_fsid + 1)
   215E                    8173 00169$:
                           8174 ;	genPointerSet
                           8175 ;	genGenPointerSet
   215E E5*00              8176 	mov	a,_bp
   2160 24 15              8177 	add	a,#0x15
   2162 F8                 8178 	mov	r0,a
   2163 86 82              8179 	mov	dpl,@r0
   2165 08                 8180 	inc	r0
   2166 86 83              8181 	mov	dph,@r0
   2168 08                 8182 	inc	r0
   2169 86 F0              8183 	mov	b,@r0
   216B E5*03              8184 	mov	a,_fsid
   216D 12s00r00           8185 	lcall	__gptrput
   2170 A3                 8186 	inc	dptr
   2171 E5*04              8187 	mov	a,(_fsid + 1)
   2173 12s00r00           8188 	lcall	__gptrput
                    2176   8189 	C$tff.c$737$1$1 ==.
                           8190 ;	tff.c:737: return FR_OK;
                           8191 ;	genRet
   2176 75 82 00           8192 	mov	dpl,#0x00
   2179                    8193 00132$:
   2179 85*00 81           8194 	mov	sp,_bp
   217C D0*00              8195 	pop	_bp
                    217E   8196 	C$tff.c$738$1$1 ==.
                    217E   8197 	XFtff$auto_mount$0$0 ==.
   217E 22                 8198 	ret
                           8199 ;------------------------------------------------------------
                           8200 ;Allocation info for local variables in function 'validate'
                           8201 ;------------------------------------------------------------
                           8202 ;id                        Allocated to stack - offset -4
                           8203 ;fs                        Allocated to registers r2 r3 r4 
                           8204 ;------------------------------------------------------------
                    217F   8205 	Ftff$validate$0$0 ==.
                    217F   8206 	C$tff.c$748$1$1 ==.
                           8207 ;	tff.c:748: FRESULT validate (		/* FR_OK(0): The id is valid, !=0: Not valid */
                           8208 ;	-----------------------------------------
                           8209 ;	 function validate
                           8210 ;	-----------------------------------------
   217F                    8211 _validate:
   217F C0*00              8212 	push	_bp
   2181 85 81*00           8213 	mov	_bp,sp
                           8214 ;	genReceive
   2184 AA 82              8215 	mov	r2,dpl
   2186 AB 83              8216 	mov	r3,dph
   2188 AC F0              8217 	mov	r4,b
                    218A   8218 	C$tff.c$753$1$1 ==.
                           8219 ;	tff.c:753: if (!fs || fs->id != id)
                           8220 ;	genIfx
   218A EA                 8221 	mov	a,r2
   218B 4B                 8222 	orl	a,r3
   218C 4C                 8223 	orl	a,r4
                           8224 ;	genIfxJump
                           8225 ;	Peephole 108.c	removed ljmp by inverse jump logic
   218D 60 1F              8226 	jz	00101$
                           8227 ;	Peephole 300	removed redundant label 00110$
                           8228 ;	genPointerGet
                           8229 ;	genGenPointerGet
   218F 8A 82              8230 	mov	dpl,r2
   2191 8B 83              8231 	mov	dph,r3
   2193 8C F0              8232 	mov	b,r4
   2195 12s00r00           8233 	lcall	__gptrget
   2198 FA                 8234 	mov	r2,a
   2199 A3                 8235 	inc	dptr
   219A 12s00r00           8236 	lcall	__gptrget
   219D FB                 8237 	mov	r3,a
                           8238 ;	genCmpEq
   219E E5*00              8239 	mov	a,_bp
   21A0 24 FC              8240 	add	a,#0xfffffffc
   21A2 F8                 8241 	mov	r0,a
                           8242 ;	gencjneshort
   21A3 E6                 8243 	mov	a,@r0
   21A4 B5 02 07           8244 	cjne	a,ar2,00111$
   21A7 08                 8245 	inc	r0
   21A8 E6                 8246 	mov	a,@r0
   21A9 B5 03 02           8247 	cjne	a,ar3,00111$
                           8248 ;	Peephole 112.b	changed ljmp to sjmp
   21AC 80 05              8249 	sjmp	00102$
   21AE                    8250 00111$:
   21AE                    8251 00101$:
                    21AE   8252 	C$tff.c$754$1$1 ==.
                           8253 ;	tff.c:754: return FR_INVALID_OBJECT;
                           8254 ;	genRet
   21AE 75 82 0C           8255 	mov	dpl,#0x0C
                           8256 ;	Peephole 112.b	changed ljmp to sjmp
   21B1 80 13              8257 	sjmp	00106$
   21B3                    8258 00102$:
                    21B3   8259 	C$tff.c$755$1$1 ==.
                           8260 ;	tff.c:755: if (disk_status(0) & STA_NOINIT)
                           8261 ;	genCall
   21B3 75 82 00           8262 	mov	dpl,#0x00
   21B6 12s00r00           8263 	lcall	_disk_status
   21B9 E5 82              8264 	mov	a,dpl
                           8265 ;	genAnd
                           8266 ;	genIfxJump
                           8267 ;	Peephole 108.d	removed ljmp by inverse jump logic
   21BB 30 E0 05           8268 	jnb	acc.0,00105$
                           8269 ;	Peephole 300	removed redundant label 00112$
                    21BE   8270 	C$tff.c$756$1$1 ==.
                           8271 ;	tff.c:756: return FR_NOT_READY;
                           8272 ;	genRet
   21BE 75 82 01           8273 	mov	dpl,#0x01
                           8274 ;	Peephole 112.b	changed ljmp to sjmp
   21C1 80 03              8275 	sjmp	00106$
   21C3                    8276 00105$:
                    21C3   8277 	C$tff.c$758$1$1 ==.
                           8278 ;	tff.c:758: return FR_OK;
                           8279 ;	genRet
   21C3 75 82 00           8280 	mov	dpl,#0x00
   21C6                    8281 00106$:
   21C6 D0*00              8282 	pop	_bp
                    21C8   8283 	C$tff.c$759$1$1 ==.
                    21C8   8284 	XFtff$validate$0$0 ==.
   21C8 22                 8285 	ret
                           8286 ;------------------------------------------------------------
                           8287 ;Allocation info for local variables in function 'f_mount'
                           8288 ;------------------------------------------------------------
                           8289 ;fs                        Allocated to stack - offset -5
                           8290 ;drv                       Allocated to registers r2 
                           8291 ;fsobj                     Allocated to registers r2 r3 r4 
                           8292 ;------------------------------------------------------------
                    21C9   8293 	G$f_mount$0$0 ==.
                    21C9   8294 	C$tff.c$773$1$1 ==.
                           8295 ;	tff.c:773: FRESULT f_mount (
                           8296 ;	-----------------------------------------
                           8297 ;	 function f_mount
                           8298 ;	-----------------------------------------
   21C9                    8299 _f_mount:
   21C9 C0*00              8300 	push	_bp
   21CB 85 81*00           8301 	mov	_bp,sp
                           8302 ;	genReceive
                    21CE   8303 	C$tff.c$781$1$1 ==.
                           8304 ;	tff.c:781: if (drv) return FR_INVALID_DRIVE;
                           8305 ;	genIfx
                           8306 ;	peephole 177.g	optimized mov sequence
   21CE E5 82              8307 	mov	a,dpl
   21D0 FA                 8308 	mov	r2,a
                           8309 ;	genIfxJump
                           8310 ;	Peephole 108.c	removed ljmp by inverse jump logic
   21D1 60 05              8311 	jz	00102$
                           8312 ;	Peephole 300	removed redundant label 00112$
                           8313 ;	genRet
   21D3 75 82 05           8314 	mov	dpl,#0x05
                           8315 ;	Peephole 112.b	changed ljmp to sjmp
   21D6 80 66              8316 	sjmp	00107$
   21D8                    8317 00102$:
                    21D8   8318 	C$tff.c$782$1$1 ==.
                           8319 ;	tff.c:782: fsobj = FatFs;
                           8320 ;	genAssign
   21D8 AA*00              8321 	mov	r2,_FatFs
   21DA AB*01              8322 	mov	r3,(_FatFs + 1)
   21DC AC*02              8323 	mov	r4,(_FatFs + 2)
                    21DE   8324 	C$tff.c$783$1$1 ==.
                           8325 ;	tff.c:783: FatFs = fs;
                           8326 ;	genAssign
   21DE E5*00              8327 	mov	a,_bp
   21E0 24 FB              8328 	add	a,#0xfffffffb
   21E2 F8                 8329 	mov	r0,a
   21E3 86 05              8330 	mov	ar5,@r0
   21E5 08                 8331 	inc	r0
   21E6 86 06              8332 	mov	ar6,@r0
   21E8 08                 8333 	inc	r0
   21E9 86 07              8334 	mov	ar7,@r0
                           8335 ;	genAssign
   21EB 8D*00              8336 	mov	_FatFs,r5
   21ED 8E*01              8337 	mov	(_FatFs + 1),r6
   21EF 8F*02              8338 	mov	(_FatFs + 2),r7
                    21F1   8339 	C$tff.c$784$1$1 ==.
                           8340 ;	tff.c:784: if (fsobj) memset(fsobj, 0, sizeof(FATFS));
                           8341 ;	genIfx
   21F1 EA                 8342 	mov	a,r2
   21F2 4B                 8343 	orl	a,r3
   21F3 4C                 8344 	orl	a,r4
                           8345 ;	genIfxJump
                           8346 ;	Peephole 108.c	removed ljmp by inverse jump logic
   21F4 60 26              8347 	jz	00104$
                           8348 ;	Peephole 300	removed redundant label 00113$
                           8349 ;	genIpush
   21F6 C0 05              8350 	push	ar5
   21F8 C0 06              8351 	push	ar6
   21FA C0 07              8352 	push	ar7
   21FC 74 20              8353 	mov	a,#0x20
   21FE C0 E0              8354 	push	acc
   2200 74 02              8355 	mov	a,#0x02
   2202 C0 E0              8356 	push	acc
                           8357 ;	genIpush
                           8358 ;	Peephole 181	changed mov to clr
   2204 E4                 8359 	clr	a
   2205 C0 E0              8360 	push	acc
                           8361 ;	genCall
   2207 8A 82              8362 	mov	dpl,r2
   2209 8B 83              8363 	mov	dph,r3
   220B 8C F0              8364 	mov	b,r4
   220D 12s00r00           8365 	lcall	_memset
   2210 15 81              8366 	dec	sp
   2212 15 81              8367 	dec	sp
   2214 15 81              8368 	dec	sp
   2216 D0 07              8369 	pop	ar7
   2218 D0 06              8370 	pop	ar6
   221A D0 05              8371 	pop	ar5
   221C                    8372 00104$:
                    221C   8373 	C$tff.c$785$1$1 ==.
                           8374 ;	tff.c:785: if (fs) memset(fs, 0, sizeof(FATFS));
                           8375 ;	genIfx
   221C ED                 8376 	mov	a,r5
   221D 4E                 8377 	orl	a,r6
   221E 4F                 8378 	orl	a,r7
                           8379 ;	genIfxJump
                           8380 ;	Peephole 108.c	removed ljmp by inverse jump logic
   221F 60 1A              8381 	jz	00106$
                           8382 ;	Peephole 300	removed redundant label 00114$
                           8383 ;	genAssign
                           8384 ;	genIpush
   2221 74 20              8385 	mov	a,#0x20
   2223 C0 E0              8386 	push	acc
   2225 74 02              8387 	mov	a,#0x02
   2227 C0 E0              8388 	push	acc
                           8389 ;	genIpush
                           8390 ;	Peephole 181	changed mov to clr
   2229 E4                 8391 	clr	a
   222A C0 E0              8392 	push	acc
                           8393 ;	genCall
   222C 8D 82              8394 	mov	dpl,r5
   222E 8E 83              8395 	mov	dph,r6
   2230 8F F0              8396 	mov	b,r7
   2232 12s00r00           8397 	lcall	_memset
   2235 15 81              8398 	dec	sp
   2237 15 81              8399 	dec	sp
   2239 15 81              8400 	dec	sp
   223B                    8401 00106$:
                    223B   8402 	C$tff.c$787$1$1 ==.
                           8403 ;	tff.c:787: return FR_OK;
                           8404 ;	genRet
   223B 75 82 00           8405 	mov	dpl,#0x00
   223E                    8406 00107$:
   223E D0*00              8407 	pop	_bp
                    2240   8408 	C$tff.c$788$1$1 ==.
                    2240   8409 	XG$f_mount$0$0 ==.
   2240 22                 8410 	ret
                           8411 ;------------------------------------------------------------
                           8412 ;Allocation info for local variables in function 'f_open'
                           8413 ;------------------------------------------------------------
                           8414 ;path                      Allocated to stack - offset -5
                           8415 ;mode                      Allocated to stack - offset -6
                           8416 ;fp                        Allocated to stack - offset 1
                           8417 ;res                       Allocated to registers r2 
                           8418 ;dir                       Allocated to stack - offset 4
                           8419 ;dirobj                    Allocated to stack - offset 7
                           8420 ;fn                        Allocated to stack - offset 26
                           8421 ;fs                        Allocated to stack - offset 38
                           8422 ;sloc0                     Allocated to stack - offset 41
                           8423 ;sloc1                     Allocated to stack - offset 44
                           8424 ;sloc2                     Allocated to stack - offset 47
                           8425 ;sloc3                     Allocated to stack - offset 49
                           8426 ;sloc4                     Allocated to stack - offset 52
                           8427 ;sloc5                     Allocated to stack - offset 56
                           8428 ;------------------------------------------------------------
                    2241   8429 	G$f_open$0$0 ==.
                    2241   8430 	C$tff.c$797$1$1 ==.
                           8431 ;	tff.c:797: FRESULT f_open (
                           8432 ;	-----------------------------------------
                           8433 ;	 function f_open
                           8434 ;	-----------------------------------------
   2241                    8435 _f_open:
   2241 C0*00              8436 	push	_bp
   2243 85 81*00           8437 	mov	_bp,sp
                           8438 ;     genReceive
   2246 C0 82              8439 	push	dpl
   2248 C0 83              8440 	push	dph
   224A C0 F0              8441 	push	b
   224C E5 81              8442 	mov	a,sp
   224E 24 3B              8443 	add	a,#0x3b
   2250 F5 81              8444 	mov	sp,a
                    2252   8445 	C$tff.c$807$1$1 ==.
                           8446 ;	tff.c:807: FATFS *fs = FatFs;
                           8447 ;	genAssign
   2252 E5*00              8448 	mov	a,_bp
   2254 24 26              8449 	add	a,#0x26
   2256 F8                 8450 	mov	r0,a
   2257 A6*00              8451 	mov	@r0,_FatFs
   2259 08                 8452 	inc	r0
   225A A6*01              8453 	mov	@r0,(_FatFs + 1)
   225C 08                 8454 	inc	r0
   225D A6*02              8455 	mov	@r0,(_FatFs + 2)
                    225F   8456 	C$tff.c$810$1$1 ==.
                           8457 ;	tff.c:810: fp->fs = NULL;
                           8458 ;	genPlus
   225F A8*00              8459 	mov	r0,_bp
   2261 08                 8460 	inc	r0
   2262 E5*00              8461 	mov	a,_bp
   2264 24 31              8462 	add	a,#0x31
   2266 F9                 8463 	mov	r1,a
                           8464 ;     genPlusIncr
   2267 74 04              8465 	mov	a,#0x04
   2269 26                 8466 	add	a,@r0
   226A F7                 8467 	mov	@r1,a
                           8468 ;	Peephole 181	changed mov to clr
   226B E4                 8469 	clr	a
   226C 08                 8470 	inc	r0
   226D 36                 8471 	addc	a,@r0
   226E 09                 8472 	inc	r1
   226F F7                 8473 	mov	@r1,a
   2270 08                 8474 	inc	r0
   2271 09                 8475 	inc	r1
   2272 E6                 8476 	mov	a,@r0
   2273 F7                 8477 	mov	@r1,a
                           8478 ;	genPointerSet
                           8479 ;	genGenPointerSet
   2274 E5*00              8480 	mov	a,_bp
   2276 24 31              8481 	add	a,#0x31
   2278 F8                 8482 	mov	r0,a
   2279 86 82              8483 	mov	dpl,@r0
   227B 08                 8484 	inc	r0
   227C 86 83              8485 	mov	dph,@r0
   227E 08                 8486 	inc	r0
   227F 86 F0              8487 	mov	b,@r0
                           8488 ;	Peephole 181	changed mov to clr
   2281 E4                 8489 	clr	a
   2282 12s00r00           8490 	lcall	__gptrput
   2285 A3                 8491 	inc	dptr
                           8492 ;	Peephole 181	changed mov to clr
   2286 E4                 8493 	clr	a
   2287 12s00r00           8494 	lcall	__gptrput
   228A A3                 8495 	inc	dptr
                           8496 ;	Peephole 181	changed mov to clr
   228B E4                 8497 	clr	a
   228C 12s00r00           8498 	lcall	__gptrput
                    228F   8499 	C$tff.c$815$1$1 ==.
                           8500 ;	tff.c:815: mode &= FA_READ;
                           8501 ;	genAnd
   228F E5*00              8502 	mov	a,_bp
   2291 24 FA              8503 	add	a,#0xfffffffa
   2293 F8                 8504 	mov	r0,a
   2294 E6                 8505 	mov	a,@r0
   2295 54 01              8506 	anl	a,#0x01
   2297 F6                 8507 	mov	@r0,a
                    2298   8508 	C$tff.c$816$1$1 ==.
                           8509 ;	tff.c:816: res = auto_mount(&path, 0);
                           8510 ;	genAddrOf
   2298 E5*00              8511 	mov	a,_bp
   229A 24 FB              8512 	add	a,#0xfb
   229C FA                 8513 	mov	r2,a
                           8514 ;	genCast
   229D 7B 00              8515 	mov	r3,#0x00
   229F 7C 40              8516 	mov	r4,#0x40
                           8517 ;	genIpush
                           8518 ;	Peephole 181	changed mov to clr
   22A1 E4                 8519 	clr	a
   22A2 C0 E0              8520 	push	acc
                           8521 ;	genCall
   22A4 8A 82              8522 	mov	dpl,r2
   22A6 8B 83              8523 	mov	dph,r3
   22A8 8C F0              8524 	mov	b,r4
   22AA 12s15rE4           8525 	lcall	_auto_mount
   22AD AA 82              8526 	mov	r2,dpl
   22AF 15 81              8527 	dec	sp
                           8528 ;	genAssign
                    22B1   8529 	C$tff.c$818$1$1 ==.
                           8530 ;	tff.c:818: if (res != FR_OK) return res;
                           8531 ;	genCmpEq
                           8532 ;	gencjneshort
   22B1 BA 00 02           8533 	cjne	r2,#0x00,00113$
                           8534 ;	Peephole 112.b	changed ljmp to sjmp
   22B4 80 05              8535 	sjmp	00102$
   22B6                    8536 00113$:
                           8537 ;	genRet
   22B6 8A 82              8538 	mov	dpl,r2
   22B8 02s25rFD           8539 	ljmp	00108$
   22BB                    8540 00102$:
                    22BB   8541 	C$tff.c$821$1$1 ==.
                           8542 ;	tff.c:821: res = trace_path(&dirobj, fn, path, &dir);	/* Trace the file path */
                           8543 ;	genIpush
                           8544 ;	genAddrOf
   22BB E5*00              8545 	mov	a,_bp
   22BD 24 04              8546 	add	a,#0x04
   22BF FB                 8547 	mov	r3,a
                           8548 ;	genCast
   22C0 E5*00              8549 	mov	a,_bp
   22C2 24 29              8550 	add	a,#0x29
   22C4 F8                 8551 	mov	r0,a
   22C5 A6 03              8552 	mov	@r0,ar3
   22C7 08                 8553 	inc	r0
   22C8 76 00              8554 	mov	@r0,#0x00
   22CA 08                 8555 	inc	r0
   22CB 76 40              8556 	mov	@r0,#0x40
                           8557 ;	genAddrOf
   22CD E5*00              8558 	mov	a,_bp
   22CF 24 1A              8559 	add	a,#0x1a
   22D1 FE                 8560 	mov	r6,a
                           8561 ;	genCast
   22D2 7A 00              8562 	mov	r2,#0x00
   22D4 7F 40              8563 	mov	r7,#0x40
                           8564 ;	genAddrOf
   22D6 E5*00              8565 	mov	a,_bp
   22D8 24 07              8566 	add	a,#0x07
   22DA FC                 8567 	mov	r4,a
                           8568 ;	genCast
   22DB 7D 00              8569 	mov	r5,#0x00
   22DD 7B 40              8570 	mov	r3,#0x40
                           8571 ;	genIpush
   22DF E5*00              8572 	mov	a,_bp
   22E1 24 29              8573 	add	a,#0x29
   22E3 F8                 8574 	mov	r0,a
   22E4 E6                 8575 	mov	a,@r0
   22E5 C0 E0              8576 	push	acc
   22E7 08                 8577 	inc	r0
   22E8 E6                 8578 	mov	a,@r0
   22E9 C0 E0              8579 	push	acc
   22EB 08                 8580 	inc	r0
   22EC E6                 8581 	mov	a,@r0
   22ED C0 E0              8582 	push	acc
                           8583 ;	genIpush
   22EF E5*00              8584 	mov	a,_bp
   22F1 24 FB              8585 	add	a,#0xfffffffb
   22F3 F8                 8586 	mov	r0,a
   22F4 E6                 8587 	mov	a,@r0
   22F5 C0 E0              8588 	push	acc
   22F7 08                 8589 	inc	r0
   22F8 E6                 8590 	mov	a,@r0
   22F9 C0 E0              8591 	push	acc
   22FB 08                 8592 	inc	r0
   22FC E6                 8593 	mov	a,@r0
   22FD C0 E0              8594 	push	acc
                           8595 ;	genIpush
   22FF C0 06              8596 	push	ar6
   2301 C0 02              8597 	push	ar2
   2303 C0 07              8598 	push	ar7
                           8599 ;	genCall
   2305 8C 82              8600 	mov	dpl,r4
   2307 8D 83              8601 	mov	dph,r5
   2309 8B F0              8602 	mov	b,r3
   230B 12s0ErB4           8603 	lcall	_trace_path
   230E AB 82              8604 	mov	r3,dpl
   2310 E5 81              8605 	mov	a,sp
   2312 24 F7              8606 	add	a,#0xf7
   2314 F5 81              8607 	mov	sp,a
                           8608 ;	genAssign
   2316 8B 02              8609 	mov	ar2,r3
                    2318   8610 	C$tff.c$868$1$1 ==.
                           8611 ;	tff.c:868: if (res != FR_OK) return res;		/* Trace failed */
                           8612 ;	genCmpEq
                           8613 ;	gencjne
                           8614 ;	gencjneshort
                           8615 ;	Peephole 241.d	optimized compare
   2318 E4                 8616 	clr	a
   2319 BA 00 01           8617 	cjne	r2,#0x00,00114$
   231C 04                 8618 	inc	a
   231D                    8619 00114$:
                           8620 ;	Peephole 300	removed redundant label 00115$
                           8621 ;	genIpop
                           8622 ;	genIfx
                           8623 ;	genIfxJump
                           8624 ;	Peephole 108.b	removed ljmp by inverse jump logic
   231D 70 05              8625 	jnz	00104$
                           8626 ;	Peephole 300	removed redundant label 00116$
                           8627 ;	genRet
   231F 8A 82              8628 	mov	dpl,r2
   2321 02s25rFD           8629 	ljmp	00108$
   2324                    8630 00104$:
                    2324   8631 	C$tff.c$869$1$1 ==.
                           8632 ;	tff.c:869: if (dir == NULL || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
                           8633 ;	genAssign
                           8634 ;	genCmpEq
   2324 E5*00              8635 	mov	a,_bp
   2326 24 04              8636 	add	a,#0x04
   2328 F8                 8637 	mov	r0,a
                           8638 ;	gencjneshort
   2329 B6 00 0A           8639 	cjne	@r0,#0x00,00117$
   232C 08                 8640 	inc	r0
   232D B6 00 06           8641 	cjne	@r0,#0x00,00117$
   2330 08                 8642 	inc	r0
   2331 B6 00 02           8643 	cjne	@r0,#0x00,00117$
                           8644 ;	Peephole 112.b	changed ljmp to sjmp
   2334 80 1E              8645 	sjmp	00105$
   2336                    8646 00117$:
                           8647 ;	genIpush
                           8648 ;	genPlus
   2336 E5*00              8649 	mov	a,_bp
   2338 24 04              8650 	add	a,#0x04
   233A F8                 8651 	mov	r0,a
                           8652 ;     genPlusIncr
   233B 74 0B              8653 	mov	a,#0x0B
   233D 26                 8654 	add	a,@r0
   233E FD                 8655 	mov	r5,a
                           8656 ;	Peephole 181	changed mov to clr
   233F E4                 8657 	clr	a
   2340 08                 8658 	inc	r0
   2341 36                 8659 	addc	a,@r0
   2342 FE                 8660 	mov	r6,a
   2343 08                 8661 	inc	r0
   2344 86 07              8662 	mov	ar7,@r0
                           8663 ;	genPointerGet
                           8664 ;	genGenPointerGet
   2346 8D 82              8665 	mov	dpl,r5
   2348 8E 83              8666 	mov	dph,r6
   234A 8F F0              8667 	mov	b,r7
   234C 12s00r00           8668 	lcall	__gptrget
                           8669 ;	genAnd
   234F FD                 8670 	mov	r5,a
                           8671 ;	Peephole 105	removed redundant mov
   2350 54 10              8672 	anl	a,#0x10
                           8673 ;	genIpop
                           8674 ;	genIfx
                           8675 ;	genIfxJump
                           8676 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2352 60 06              8677 	jz	00106$
                           8678 ;	Peephole 300	removed redundant label 00118$
   2354                    8679 00105$:
                    2354   8680 	C$tff.c$870$1$1 ==.
                           8681 ;	tff.c:870: return FR_NO_FILE;
                           8682 ;	genRet
   2354 75 82 02           8683 	mov	dpl,#0x02
   2357 02s25rFD           8684 	ljmp	00108$
   235A                    8685 00106$:
                    235A   8686 	C$tff.c$879$1$1 ==.
                           8687 ;	tff.c:879: fp->flag = mode;							/* File access mode */
                           8688 ;	genPlus
   235A A8*00              8689 	mov	r0,_bp
   235C 08                 8690 	inc	r0
                           8691 ;     genPlusIncr
   235D 74 02              8692 	mov	a,#0x02
   235F 26                 8693 	add	a,@r0
   2360 FA                 8694 	mov	r2,a
                           8695 ;	Peephole 181	changed mov to clr
   2361 E4                 8696 	clr	a
   2362 08                 8697 	inc	r0
   2363 36                 8698 	addc	a,@r0
   2364 FB                 8699 	mov	r3,a
   2365 08                 8700 	inc	r0
   2366 86 04              8701 	mov	ar4,@r0
                           8702 ;	genPointerSet
                           8703 ;	genGenPointerSet
   2368 8A 82              8704 	mov	dpl,r2
   236A 8B 83              8705 	mov	dph,r3
   236C 8C F0              8706 	mov	b,r4
   236E E5*00              8707 	mov	a,_bp
   2370 24 FA              8708 	add	a,#0xfffffffa
   2372 F8                 8709 	mov	r0,a
   2373 E6                 8710 	mov	a,@r0
   2374 12s00r00           8711 	lcall	__gptrput
                    2377   8712 	C$tff.c$880$1$1 ==.
                           8713 ;	tff.c:880: fp->org_clust =								/* File start cluster */
                           8714 ;	genPlus
   2377 A8*00              8715 	mov	r0,_bp
   2379 08                 8716 	inc	r0
   237A E5*00              8717 	mov	a,_bp
   237C 24 2C              8718 	add	a,#0x2c
   237E F9                 8719 	mov	r1,a
                           8720 ;     genPlusIncr
   237F 74 0F              8721 	mov	a,#0x0F
   2381 26                 8722 	add	a,@r0
   2382 F7                 8723 	mov	@r1,a
                           8724 ;	Peephole 181	changed mov to clr
   2383 E4                 8725 	clr	a
   2384 08                 8726 	inc	r0
   2385 36                 8727 	addc	a,@r0
   2386 09                 8728 	inc	r1
   2387 F7                 8729 	mov	@r1,a
   2388 08                 8730 	inc	r0
   2389 09                 8731 	inc	r1
   238A E6                 8732 	mov	a,@r0
   238B F7                 8733 	mov	@r1,a
                    238C   8734 	C$tff.c$882$1$1 ==.
                           8735 ;	tff.c:882: ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
                           8736 ;	genPlus
   238C E5*00              8737 	mov	a,_bp
   238E 24 04              8738 	add	a,#0x04
   2390 F8                 8739 	mov	r0,a
                           8740 ;     genPlusIncr
   2391 74 14              8741 	mov	a,#0x14
   2393 26                 8742 	add	a,@r0
   2394 FD                 8743 	mov	r5,a
                           8744 ;	Peephole 181	changed mov to clr
   2395 E4                 8745 	clr	a
   2396 08                 8746 	inc	r0
   2397 36                 8747 	addc	a,@r0
   2398 FE                 8748 	mov	r6,a
   2399 08                 8749 	inc	r0
   239A 86 07              8750 	mov	ar7,@r0
                           8751 ;	genPlus
                           8752 ;     genPlusIncr
   239C 74 01              8753 	mov	a,#0x01
                           8754 ;	Peephole 236.a	used r5 instead of ar5
   239E 2D                 8755 	add	a,r5
   239F FA                 8756 	mov	r2,a
                           8757 ;	Peephole 181	changed mov to clr
   23A0 E4                 8758 	clr	a
                           8759 ;	Peephole 236.b	used r6 instead of ar6
   23A1 3E                 8760 	addc	a,r6
   23A2 FB                 8761 	mov	r3,a
   23A3 8F 04              8762 	mov	ar4,r7
                           8763 ;	genPointerGet
                           8764 ;	genGenPointerGet
   23A5 8A 82              8765 	mov	dpl,r2
   23A7 8B 83              8766 	mov	dph,r3
   23A9 8C F0              8767 	mov	b,r4
   23AB 12s00r00           8768 	lcall	__gptrget
   23AE FA                 8769 	mov	r2,a
                           8770 ;	genCast
   23AF 7B 00              8771 	mov	r3,#0x00
                           8772 ;	genLeftShift
                           8773 ;	genLeftShiftLiteral
   23B1 E5*00              8774 	mov	a,_bp
   23B3 24 2F              8775 	add	a,#0x2f
                           8776 ;	genlshTwo
                           8777 ;	Peephole 185	changed order of increment (acc incremented also!)
   23B5 04                 8778 	inc	a
   23B6 F8                 8779 	mov	r0,a
   23B7 A6 02              8780 	mov	@r0,ar2
   23B9 18                 8781 	dec	r0
   23BA 76 00              8782 	mov	@r0,#0x00
                           8783 ;	genPointerGet
                           8784 ;	genGenPointerGet
   23BC 8D 82              8785 	mov	dpl,r5
   23BE 8E 83              8786 	mov	dph,r6
   23C0 8F F0              8787 	mov	b,r7
   23C2 12s00r00           8788 	lcall	__gptrget
   23C5 FC                 8789 	mov	r4,a
                           8790 ;	genCast
   23C6 7A 00              8791 	mov	r2,#0x00
                           8792 ;	genOr
   23C8 E5*00              8793 	mov	a,_bp
   23CA 24 2F              8794 	add	a,#0x2f
   23CC F8                 8795 	mov	r0,a
   23CD E6                 8796 	mov	a,@r0
   23CE 42 04              8797 	orl	ar4,a
   23D0 08                 8798 	inc	r0
   23D1 E6                 8799 	mov	a,@r0
   23D2 42 02              8800 	orl	ar2,a
                           8801 ;	genCast
                           8802 ;	genLeftShift
                           8803 ;	genLeftShiftLiteral
                           8804 ;	Peephole 3.c	changed mov to clr
   23D4 E4                 8805 	clr	a
   23D5 FB                 8806 	mov	r3,a
   23D6 FD                 8807 	mov	r5,a
   23D7 E5*00              8808 	mov	a,_bp
   23D9 24 34              8809 	add	a,#0x34
                           8810 ;	genlshFour
                           8811 ;	Peephole 185	changed order of increment (acc incremented also!)
   23DB 04                 8812 	inc	a
                           8813 ;	Peephole 185	changed order of increment (acc incremented also!)
   23DC 04                 8814 	inc	a
                           8815 ;	Peephole 185	changed order of increment (acc incremented also!)
   23DD 04                 8816 	inc	a
   23DE F8                 8817 	mov	r0,a
   23DF A6 02              8818 	mov	@r0,ar2
   23E1 18                 8819 	dec	r0
   23E2 A6 04              8820 	mov	@r0,ar4
   23E4 18                 8821 	dec	r0
   23E5 76 00              8822 	mov	@r0,#0x00
   23E7 18                 8823 	dec	r0
   23E8 76 00              8824 	mov	@r0,#0x00
                    23EA   8825 	C$tff.c$884$1$1 ==.
                           8826 ;	tff.c:884: LD_WORD(&dir[DIR_FstClusLO]);
                           8827 ;	genPlus
   23EA E5*00              8828 	mov	a,_bp
   23EC 24 04              8829 	add	a,#0x04
   23EE F8                 8830 	mov	r0,a
                           8831 ;     genPlusIncr
   23EF 74 1A              8832 	mov	a,#0x1A
   23F1 26                 8833 	add	a,@r0
   23F2 FE                 8834 	mov	r6,a
                           8835 ;	Peephole 181	changed mov to clr
   23F3 E4                 8836 	clr	a
   23F4 08                 8837 	inc	r0
   23F5 36                 8838 	addc	a,@r0
   23F6 FF                 8839 	mov	r7,a
   23F7 08                 8840 	inc	r0
   23F8 86 02              8841 	mov	ar2,@r0
                           8842 ;	genPlus
                           8843 ;     genPlusIncr
   23FA 74 01              8844 	mov	a,#0x01
                           8845 ;	Peephole 236.a	used r6 instead of ar6
   23FC 2E                 8846 	add	a,r6
   23FD FB                 8847 	mov	r3,a
                           8848 ;	Peephole 181	changed mov to clr
   23FE E4                 8849 	clr	a
                           8850 ;	Peephole 236.b	used r7 instead of ar7
   23FF 3F                 8851 	addc	a,r7
   2400 FC                 8852 	mov	r4,a
   2401 8A 05              8853 	mov	ar5,r2
                           8854 ;	genPointerGet
                           8855 ;	genGenPointerGet
   2403 8B 82              8856 	mov	dpl,r3
   2405 8C 83              8857 	mov	dph,r4
   2407 8D F0              8858 	mov	b,r5
   2409 12s00r00           8859 	lcall	__gptrget
   240C FB                 8860 	mov	r3,a
                           8861 ;	genCast
                           8862 ;	genLeftShift
                           8863 ;	genLeftShiftLiteral
                           8864 ;	genlshTwo
                           8865 ;	peephole 177.e	removed redundant move
   240D 8B 04              8866 	mov	ar4,r3
   240F 7B 00              8867 	mov	r3,#0x00
                           8868 ;	genPointerGet
                           8869 ;	genGenPointerGet
   2411 8E 82              8870 	mov	dpl,r6
   2413 8F 83              8871 	mov	dph,r7
   2415 8A F0              8872 	mov	b,r2
   2417 12s00r00           8873 	lcall	__gptrget
                           8874 ;	genCast
                           8875 ;	genOr
   241A FE                 8876 	mov	r6,a
   241B 7A 00              8877 	mov	r2,#0x00
                           8878 ;	Peephole 177.d	removed redundant move
   241D 42 03              8879 	orl	ar3,a
   241F EA                 8880 	mov	a,r2
   2420 42 04              8881 	orl	ar4,a
                           8882 ;	genCast
                           8883 ;	genOr
                           8884 ;	Peephole 3.c	changed mov to clr
   2422 E4                 8885 	clr	a
   2423 FA                 8886 	mov	r2,a
   2424 FD                 8887 	mov	r5,a
   2425 E5*00              8888 	mov	a,_bp
   2427 24 34              8889 	add	a,#0x34
   2429 F8                 8890 	mov	r0,a
   242A E6                 8891 	mov	a,@r0
   242B 42 03              8892 	orl	ar3,a
   242D 08                 8893 	inc	r0
   242E E6                 8894 	mov	a,@r0
   242F 42 04              8895 	orl	ar4,a
   2431 08                 8896 	inc	r0
   2432 E6                 8897 	mov	a,@r0
   2433 42 02              8898 	orl	ar2,a
   2435 08                 8899 	inc	r0
   2436 E6                 8900 	mov	a,@r0
   2437 42 05              8901 	orl	ar5,a
                           8902 ;	genPointerSet
                           8903 ;	genGenPointerSet
   2439 E5*00              8904 	mov	a,_bp
   243B 24 2C              8905 	add	a,#0x2c
   243D F8                 8906 	mov	r0,a
   243E 86 82              8907 	mov	dpl,@r0
   2440 08                 8908 	inc	r0
   2441 86 83              8909 	mov	dph,@r0
   2443 08                 8910 	inc	r0
   2444 86 F0              8911 	mov	b,@r0
   2446 EB                 8912 	mov	a,r3
   2447 12s00r00           8913 	lcall	__gptrput
   244A A3                 8914 	inc	dptr
   244B EC                 8915 	mov	a,r4
   244C 12s00r00           8916 	lcall	__gptrput
   244F A3                 8917 	inc	dptr
   2450 EA                 8918 	mov	a,r2
   2451 12s00r00           8919 	lcall	__gptrput
   2454 A3                 8920 	inc	dptr
   2455 ED                 8921 	mov	a,r5
   2456 12s00r00           8922 	lcall	__gptrput
                    2459   8923 	C$tff.c$885$1$1 ==.
                           8924 ;	tff.c:885: fp->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* File size */
                           8925 ;	genPlus
   2459 A8*00              8926 	mov	r0,_bp
   245B 08                 8927 	inc	r0
   245C E5*00              8928 	mov	a,_bp
   245E 24 34              8929 	add	a,#0x34
   2460 F9                 8930 	mov	r1,a
                           8931 ;     genPlusIncr
   2461 74 0B              8932 	mov	a,#0x0B
   2463 26                 8933 	add	a,@r0
   2464 F7                 8934 	mov	@r1,a
                           8935 ;	Peephole 181	changed mov to clr
   2465 E4                 8936 	clr	a
   2466 08                 8937 	inc	r0
   2467 36                 8938 	addc	a,@r0
   2468 09                 8939 	inc	r1
   2469 F7                 8940 	mov	@r1,a
   246A 08                 8941 	inc	r0
   246B 09                 8942 	inc	r1
   246C E6                 8943 	mov	a,@r0
   246D F7                 8944 	mov	@r1,a
                           8945 ;	genPlus
   246E E5*00              8946 	mov	a,_bp
   2470 24 04              8947 	add	a,#0x04
   2472 F8                 8948 	mov	r0,a
   2473 E5*00              8949 	mov	a,_bp
   2475 24 2C              8950 	add	a,#0x2c
   2477 F9                 8951 	mov	r1,a
                           8952 ;     genPlusIncr
   2478 74 1C              8953 	mov	a,#0x1C
   247A 26                 8954 	add	a,@r0
   247B F7                 8955 	mov	@r1,a
                           8956 ;	Peephole 181	changed mov to clr
   247C E4                 8957 	clr	a
   247D 08                 8958 	inc	r0
   247E 36                 8959 	addc	a,@r0
   247F 09                 8960 	inc	r1
   2480 F7                 8961 	mov	@r1,a
   2481 08                 8962 	inc	r0
   2482 09                 8963 	inc	r1
   2483 E6                 8964 	mov	a,@r0
   2484 F7                 8965 	mov	@r1,a
                           8966 ;	genPlus
   2485 E5*00              8967 	mov	a,_bp
   2487 24 2C              8968 	add	a,#0x2c
   2489 F8                 8969 	mov	r0,a
                           8970 ;     genPlusIncr
   248A 74 03              8971 	mov	a,#0x03
   248C 26                 8972 	add	a,@r0
   248D FA                 8973 	mov	r2,a
                           8974 ;	Peephole 181	changed mov to clr
   248E E4                 8975 	clr	a
   248F 08                 8976 	inc	r0
   2490 36                 8977 	addc	a,@r0
   2491 FB                 8978 	mov	r3,a
   2492 08                 8979 	inc	r0
   2493 86 04              8980 	mov	ar4,@r0
                           8981 ;	genPointerGet
                           8982 ;	genGenPointerGet
   2495 8A 82              8983 	mov	dpl,r2
   2497 8B 83              8984 	mov	dph,r3
   2499 8C F0              8985 	mov	b,r4
   249B 12s00r00           8986 	lcall	__gptrget
   249E FA                 8987 	mov	r2,a
                           8988 ;	genCast
                           8989 ;	genLeftShift
                           8990 ;	genLeftShiftLiteral
                           8991 ;	Peephole 3.c	changed mov to clr
                           8992 ;	Peephole 3.b	changed mov to clr
   249F E4                 8993 	clr	a
   24A0 FB                 8994 	mov	r3,a
   24A1 FC                 8995 	mov	r4,a
   24A2 FD                 8996 	mov	r5,a
   24A3 E5*00              8997 	mov	a,_bp
   24A5 24 38              8998 	add	a,#0x38
                           8999 ;	genlshFour
                           9000 ;	Peephole 185	changed order of increment (acc incremented also!)
   24A7 04                 9001 	inc	a
                           9002 ;	Peephole 185	changed order of increment (acc incremented also!)
   24A8 04                 9003 	inc	a
                           9004 ;	Peephole 185	changed order of increment (acc incremented also!)
   24A9 04                 9005 	inc	a
   24AA F8                 9006 	mov	r0,a
   24AB A6 02              9007 	mov	@r0,ar2
   24AD 18                 9008 	dec	r0
   24AE 18                 9009 	dec	r0
   24AF 18                 9010 	dec	r0
   24B0 76 00              9011 	mov	@r0,#0x00
   24B2 08                 9012 	inc	r0
   24B3 76 00              9013 	mov	@r0,#0x00
   24B5 08                 9014 	inc	r0
   24B6 76 00              9015 	mov	@r0,#0x00
                           9016 ;	genPlus
   24B8 E5*00              9017 	mov	a,_bp
   24BA 24 2C              9018 	add	a,#0x2c
   24BC F8                 9019 	mov	r0,a
                           9020 ;     genPlusIncr
   24BD 74 02              9021 	mov	a,#0x02
   24BF 26                 9022 	add	a,@r0
   24C0 FE                 9023 	mov	r6,a
                           9024 ;	Peephole 181	changed mov to clr
   24C1 E4                 9025 	clr	a
   24C2 08                 9026 	inc	r0
   24C3 36                 9027 	addc	a,@r0
   24C4 FF                 9028 	mov	r7,a
   24C5 08                 9029 	inc	r0
   24C6 86 02              9030 	mov	ar2,@r0
                           9031 ;	genPointerGet
                           9032 ;	genGenPointerGet
   24C8 8E 82              9033 	mov	dpl,r6
   24CA 8F 83              9034 	mov	dph,r7
   24CC 8A F0              9035 	mov	b,r2
   24CE 12s00r00           9036 	lcall	__gptrget
   24D1 FE                 9037 	mov	r6,a
                           9038 ;	genCast
   24D2 7A 00              9039 	mov	r2,#0x00
   24D4 7B 00              9040 	mov	r3,#0x00
                           9041 ;	genLeftShift
                           9042 ;	genLeftShiftLiteral
                           9043 ;	genlshFour
                           9044 ;	peephole 177.e	removed redundant move
   24D6 8A 04              9045 	mov	ar4,r2
   24D8 8E 03              9046 	mov	ar3,r6
                           9047 ;	genOr
                           9048 ;	Peephole 3.c	changed mov to clr
   24DA E4                 9049 	clr	a
   24DB FA                 9050 	mov	r2,a
   24DC FE                 9051 	mov	r6,a
   24DD E5*00              9052 	mov	a,_bp
   24DF 24 38              9053 	add	a,#0x38
   24E1 F8                 9054 	mov	r0,a
   24E2 EE                 9055 	mov	a,r6
   24E3 46                 9056 	orl	a,@r0
   24E4 F6                 9057 	mov	@r0,a
   24E5 EA                 9058 	mov	a,r2
   24E6 08                 9059 	inc	r0
   24E7 46                 9060 	orl	a,@r0
   24E8 F6                 9061 	mov	@r0,a
   24E9 EB                 9062 	mov	a,r3
   24EA 08                 9063 	inc	r0
   24EB 46                 9064 	orl	a,@r0
   24EC F6                 9065 	mov	@r0,a
   24ED EC                 9066 	mov	a,r4
   24EE 08                 9067 	inc	r0
   24EF 46                 9068 	orl	a,@r0
   24F0 F6                 9069 	mov	@r0,a
                           9070 ;	genPlus
   24F1 E5*00              9071 	mov	a,_bp
   24F3 24 2C              9072 	add	a,#0x2c
   24F5 F8                 9073 	mov	r0,a
                           9074 ;     genPlusIncr
   24F6 74 01              9075 	mov	a,#0x01
   24F8 26                 9076 	add	a,@r0
   24F9 FD                 9077 	mov	r5,a
                           9078 ;	Peephole 181	changed mov to clr
   24FA E4                 9079 	clr	a
   24FB 08                 9080 	inc	r0
   24FC 36                 9081 	addc	a,@r0
   24FD FF                 9082 	mov	r7,a
   24FE 08                 9083 	inc	r0
   24FF 86 02              9084 	mov	ar2,@r0
                           9085 ;	genPointerGet
                           9086 ;	genGenPointerGet
   2501 8D 82              9087 	mov	dpl,r5
   2503 8F 83              9088 	mov	dph,r7
   2505 8A F0              9089 	mov	b,r2
   2507 12s00r00           9090 	lcall	__gptrget
   250A FD                 9091 	mov	r5,a
                           9092 ;	genCast
                           9093 ;	genLeftShift
                           9094 ;	genLeftShiftLiteral
                           9095 ;	genlshTwo
                           9096 ;	peephole 177.e	removed redundant move
   250B 8D 02              9097 	mov	ar2,r5
                           9098 ;	genCast
                           9099 ;	genOr
                           9100 ;	Peephole 3.c	changed mov to clr
                           9101 ;	Peephole 3.b	changed mov to clr
   250D E4                 9102 	clr	a
   250E FD                 9103 	mov	r5,a
   250F FB                 9104 	mov	r3,a
   2510 FC                 9105 	mov	r4,a
   2511 E5*00              9106 	mov	a,_bp
   2513 24 38              9107 	add	a,#0x38
   2515 F8                 9108 	mov	r0,a
   2516 ED                 9109 	mov	a,r5
   2517 46                 9110 	orl	a,@r0
   2518 F6                 9111 	mov	@r0,a
   2519 EA                 9112 	mov	a,r2
   251A 08                 9113 	inc	r0
   251B 46                 9114 	orl	a,@r0
   251C F6                 9115 	mov	@r0,a
   251D EB                 9116 	mov	a,r3
   251E 08                 9117 	inc	r0
   251F 46                 9118 	orl	a,@r0
   2520 F6                 9119 	mov	@r0,a
   2521 EC                 9120 	mov	a,r4
   2522 08                 9121 	inc	r0
   2523 46                 9122 	orl	a,@r0
   2524 F6                 9123 	mov	@r0,a
                           9124 ;	genPointerGet
                           9125 ;	genGenPointerGet
   2525 E5*00              9126 	mov	a,_bp
   2527 24 2C              9127 	add	a,#0x2c
   2529 F8                 9128 	mov	r0,a
   252A 86 82              9129 	mov	dpl,@r0
   252C 08                 9130 	inc	r0
   252D 86 83              9131 	mov	dph,@r0
   252F 08                 9132 	inc	r0
   2530 86 F0              9133 	mov	b,@r0
   2532 12s00r00           9134 	lcall	__gptrget
   2535 FE                 9135 	mov	r6,a
                           9136 ;	genCast
                           9137 ;	genOr
                           9138 ;	Peephole 3.c	changed mov to clr
                           9139 ;	Peephole 3.b	changed mov to clr
   2536 E4                 9140 	clr	a
   2537 FF                 9141 	mov	r7,a
   2538 FA                 9142 	mov	r2,a
   2539 FB                 9143 	mov	r3,a
   253A E5*00              9144 	mov	a,_bp
   253C 24 38              9145 	add	a,#0x38
   253E F8                 9146 	mov	r0,a
   253F E6                 9147 	mov	a,@r0
   2540 42 06              9148 	orl	ar6,a
   2542 08                 9149 	inc	r0
   2543 E6                 9150 	mov	a,@r0
   2544 42 07              9151 	orl	ar7,a
   2546 08                 9152 	inc	r0
   2547 E6                 9153 	mov	a,@r0
   2548 42 02              9154 	orl	ar2,a
   254A 08                 9155 	inc	r0
   254B E6                 9156 	mov	a,@r0
   254C 42 03              9157 	orl	ar3,a
                           9158 ;	genPointerSet
                           9159 ;	genGenPointerSet
   254E E5*00              9160 	mov	a,_bp
   2550 24 34              9161 	add	a,#0x34
   2552 F8                 9162 	mov	r0,a
   2553 86 82              9163 	mov	dpl,@r0
   2555 08                 9164 	inc	r0
   2556 86 83              9165 	mov	dph,@r0
   2558 08                 9166 	inc	r0
   2559 86 F0              9167 	mov	b,@r0
   255B EE                 9168 	mov	a,r6
   255C 12s00r00           9169 	lcall	__gptrput
   255F A3                 9170 	inc	dptr
   2560 EF                 9171 	mov	a,r7
   2561 12s00r00           9172 	lcall	__gptrput
   2564 A3                 9173 	inc	dptr
   2565 EA                 9174 	mov	a,r2
   2566 12s00r00           9175 	lcall	__gptrput
   2569 A3                 9176 	inc	dptr
   256A EB                 9177 	mov	a,r3
   256B 12s00r00           9178 	lcall	__gptrput
                    256E   9179 	C$tff.c$886$1$1 ==.
                           9180 ;	tff.c:886: fp->fptr = 0;								/* File ptr */
                           9181 ;	genPlus
   256E A8*00              9182 	mov	r0,_bp
   2570 08                 9183 	inc	r0
                           9184 ;     genPlusIncr
   2571 74 07              9185 	mov	a,#0x07
   2573 26                 9186 	add	a,@r0
   2574 FA                 9187 	mov	r2,a
                           9188 ;	Peephole 181	changed mov to clr
   2575 E4                 9189 	clr	a
   2576 08                 9190 	inc	r0
   2577 36                 9191 	addc	a,@r0
   2578 FB                 9192 	mov	r3,a
   2579 08                 9193 	inc	r0
   257A 86 04              9194 	mov	ar4,@r0
                           9195 ;	genPointerSet
                           9196 ;	genGenPointerSet
   257C 8A 82              9197 	mov	dpl,r2
   257E 8B 83              9198 	mov	dph,r3
   2580 8C F0              9199 	mov	b,r4
                           9200 ;	Peephole 181	changed mov to clr
   2582 E4                 9201 	clr	a
   2583 12s00r00           9202 	lcall	__gptrput
   2586 A3                 9203 	inc	dptr
                           9204 ;	Peephole 181	changed mov to clr
   2587 E4                 9205 	clr	a
   2588 12s00r00           9206 	lcall	__gptrput
   258B A3                 9207 	inc	dptr
                           9208 ;	Peephole 181	changed mov to clr
   258C E4                 9209 	clr	a
   258D 12s00r00           9210 	lcall	__gptrput
   2590 A3                 9211 	inc	dptr
                           9212 ;	Peephole 181	changed mov to clr
   2591 E4                 9213 	clr	a
   2592 12s00r00           9214 	lcall	__gptrput
                    2595   9215 	C$tff.c$887$1$1 ==.
                           9216 ;	tff.c:887: fp->sect_clust = 1;							/* Sector counter */
                           9217 ;	genPlus
   2595 A8*00              9218 	mov	r0,_bp
   2597 08                 9219 	inc	r0
                           9220 ;     genPlusIncr
   2598 74 03              9221 	mov	a,#0x03
   259A 26                 9222 	add	a,@r0
   259B FA                 9223 	mov	r2,a
                           9224 ;	Peephole 181	changed mov to clr
   259C E4                 9225 	clr	a
   259D 08                 9226 	inc	r0
   259E 36                 9227 	addc	a,@r0
   259F FB                 9228 	mov	r3,a
   25A0 08                 9229 	inc	r0
   25A1 86 04              9230 	mov	ar4,@r0
                           9231 ;	genPointerSet
                           9232 ;	genGenPointerSet
   25A3 8A 82              9233 	mov	dpl,r2
   25A5 8B 83              9234 	mov	dph,r3
   25A7 8C F0              9235 	mov	b,r4
   25A9 74 01              9236 	mov	a,#0x01
   25AB 12s00r00           9237 	lcall	__gptrput
                    25AE   9238 	C$tff.c$888$1$1 ==.
                           9239 ;	tff.c:888: fp->fs = fs; fp->id = fs->id;				/* Owner file system object of the file */
                           9240 ;	genPointerSet
                           9241 ;	genGenPointerSet
   25AE E5*00              9242 	mov	a,_bp
   25B0 24 31              9243 	add	a,#0x31
   25B2 F8                 9244 	mov	r0,a
   25B3 86 82              9245 	mov	dpl,@r0
   25B5 08                 9246 	inc	r0
   25B6 86 83              9247 	mov	dph,@r0
   25B8 08                 9248 	inc	r0
   25B9 86 F0              9249 	mov	b,@r0
   25BB E5*00              9250 	mov	a,_bp
   25BD 24 26              9251 	add	a,#0x26
   25BF F9                 9252 	mov	r1,a
   25C0 E7                 9253 	mov	a,@r1
   25C1 12s00r00           9254 	lcall	__gptrput
   25C4 A3                 9255 	inc	dptr
   25C5 09                 9256 	inc	r1
   25C6 E7                 9257 	mov	a,@r1
   25C7 12s00r00           9258 	lcall	__gptrput
   25CA A3                 9259 	inc	dptr
   25CB 09                 9260 	inc	r1
   25CC E7                 9261 	mov	a,@r1
   25CD 12s00r00           9262 	lcall	__gptrput
                           9263 ;	genPointerGet
                           9264 ;	genGenPointerGet
   25D0 E5*00              9265 	mov	a,_bp
   25D2 24 26              9266 	add	a,#0x26
   25D4 F8                 9267 	mov	r0,a
   25D5 86 82              9268 	mov	dpl,@r0
   25D7 08                 9269 	inc	r0
   25D8 86 83              9270 	mov	dph,@r0
   25DA 08                 9271 	inc	r0
   25DB 86 F0              9272 	mov	b,@r0
   25DD 12s00r00           9273 	lcall	__gptrget
   25E0 FA                 9274 	mov	r2,a
   25E1 A3                 9275 	inc	dptr
   25E2 12s00r00           9276 	lcall	__gptrget
   25E5 FB                 9277 	mov	r3,a
                           9278 ;	genPointerSet
                           9279 ;	genGenPointerSet
   25E6 A8*00              9280 	mov	r0,_bp
   25E8 08                 9281 	inc	r0
   25E9 86 82              9282 	mov	dpl,@r0
   25EB 08                 9283 	inc	r0
   25EC 86 83              9284 	mov	dph,@r0
   25EE 08                 9285 	inc	r0
   25EF 86 F0              9286 	mov	b,@r0
   25F1 EA                 9287 	mov	a,r2
   25F2 12s00r00           9288 	lcall	__gptrput
   25F5 A3                 9289 	inc	dptr
   25F6 EB                 9290 	mov	a,r3
   25F7 12s00r00           9291 	lcall	__gptrput
                    25FA   9292 	C$tff.c$890$1$1 ==.
                           9293 ;	tff.c:890: return FR_OK;
                           9294 ;	genRet
   25FA 75 82 00           9295 	mov	dpl,#0x00
   25FD                    9296 00108$:
   25FD 85*00 81           9297 	mov	sp,_bp
   2600 D0*00              9298 	pop	_bp
                    2602   9299 	C$tff.c$891$1$1 ==.
                    2602   9300 	XG$f_open$0$0 ==.
   2602 22                 9301 	ret
                           9302 ;------------------------------------------------------------
                           9303 ;Allocation info for local variables in function 'f_read'
                           9304 ;------------------------------------------------------------
                           9305 ;buff                      Allocated to stack - offset -5
                           9306 ;btr                       Allocated to stack - offset -7
                           9307 ;br                        Allocated to stack - offset -10
                           9308 ;fp                        Allocated to stack - offset 1
                           9309 ;sect                      Allocated to stack - offset 4
                           9310 ;remain                    Allocated to stack - offset 8
                           9311 ;rcnt                      Allocated to stack - offset 12
                           9312 ;cc                        Allocated to registers r6 r7 
                           9313 ;clust                     Allocated to stack - offset 14
                           9314 ;rbuff                     Allocated to stack - offset 18
                           9315 ;res                       Allocated to registers r2 
                           9316 ;fs                        Allocated to stack - offset 21
                           9317 ;sloc0                     Allocated to stack - offset 27
                           9318 ;sloc1                     Allocated to stack - offset 24
                           9319 ;sloc2                     Allocated to stack - offset 27
                           9320 ;sloc3                     Allocated to stack - offset 30
                           9321 ;sloc4                     Allocated to stack - offset 34
                           9322 ;sloc5                     Allocated to stack - offset 37
                           9323 ;sloc6                     Allocated to stack - offset 40
                           9324 ;sloc7                     Allocated to stack - offset 43
                           9325 ;sloc8                     Allocated to stack - offset 46
                           9326 ;sloc9                     Allocated to stack - offset 50
                           9327 ;sloc10                    Allocated to stack - offset 53
                           9328 ;sloc11                    Allocated to stack - offset 56
                           9329 ;------------------------------------------------------------
                    2603   9330 	G$f_read$0$0 ==.
                    2603   9331 	C$tff.c$900$1$1 ==.
                           9332 ;	tff.c:900: FRESULT f_read (
                           9333 ;	-----------------------------------------
                           9334 ;	 function f_read
                           9335 ;	-----------------------------------------
   2603                    9336 _f_read:
   2603 C0*00              9337 	push	_bp
   2605 85 81*00           9338 	mov	_bp,sp
                           9339 ;     genReceive
   2608 C0 82              9340 	push	dpl
   260A C0 83              9341 	push	dph
   260C C0 F0              9342 	push	b
   260E E5 81              9343 	mov	a,sp
   2610 24 3A              9344 	add	a,#0x3a
   2612 F5 81              9345 	mov	sp,a
                    2614   9346 	C$tff.c$910$1$1 ==.
                           9347 ;	tff.c:910: BYTE *rbuff = buff;
                           9348 ;	genAssign
   2614 E5*00              9349 	mov	a,_bp
   2616 24 FB              9350 	add	a,#0xfffffffb
   2618 F8                 9351 	mov	r0,a
   2619 86 05              9352 	mov	ar5,@r0
   261B 08                 9353 	inc	r0
   261C 86 06              9354 	mov	ar6,@r0
   261E 08                 9355 	inc	r0
   261F 86 07              9356 	mov	ar7,@r0
                           9357 ;	genAssign
   2621 E5*00              9358 	mov	a,_bp
   2623 24 12              9359 	add	a,#0x12
   2625 F8                 9360 	mov	r0,a
   2626 A6 05              9361 	mov	@r0,ar5
   2628 08                 9362 	inc	r0
   2629 A6 06              9363 	mov	@r0,ar6
   262B 08                 9364 	inc	r0
   262C A6 07              9365 	mov	@r0,ar7
                    262E   9366 	C$tff.c$912$1$1 ==.
                           9367 ;	tff.c:912: FATFS *fs = fp->fs;
                           9368 ;	genPlus
   262E A8*00              9369 	mov	r0,_bp
   2630 08                 9370 	inc	r0
                           9371 ;     genPlusIncr
   2631 74 04              9372 	mov	a,#0x04
   2633 26                 9373 	add	a,@r0
   2634 FD                 9374 	mov	r5,a
                           9375 ;	Peephole 181	changed mov to clr
   2635 E4                 9376 	clr	a
   2636 08                 9377 	inc	r0
   2637 36                 9378 	addc	a,@r0
   2638 FE                 9379 	mov	r6,a
   2639 08                 9380 	inc	r0
   263A 86 07              9381 	mov	ar7,@r0
                           9382 ;	genPointerGet
                           9383 ;	genGenPointerGet
   263C 8D 82              9384 	mov	dpl,r5
   263E 8E 83              9385 	mov	dph,r6
   2640 8F F0              9386 	mov	b,r7
   2642 12s00r00           9387 	lcall	__gptrget
   2645 FD                 9388 	mov	r5,a
   2646 A3                 9389 	inc	dptr
   2647 12s00r00           9390 	lcall	__gptrget
   264A FE                 9391 	mov	r6,a
   264B A3                 9392 	inc	dptr
   264C 12s00r00           9393 	lcall	__gptrget
   264F FF                 9394 	mov	r7,a
                           9395 ;	genAssign
   2650 E5*00              9396 	mov	a,_bp
   2652 24 15              9397 	add	a,#0x15
   2654 F8                 9398 	mov	r0,a
   2655 A6 05              9399 	mov	@r0,ar5
   2657 08                 9400 	inc	r0
   2658 A6 06              9401 	mov	@r0,ar6
   265A 08                 9402 	inc	r0
   265B A6 07              9403 	mov	@r0,ar7
                    265D   9404 	C$tff.c$915$1$1 ==.
                           9405 ;	tff.c:915: *br = 0;
                           9406 ;	genAssign
   265D E5*00              9407 	mov	a,_bp
   265F 24 F6              9408 	add	a,#0xfffffff6
   2661 F8                 9409 	mov	r0,a
   2662 E5*00              9410 	mov	a,_bp
   2664 24 18              9411 	add	a,#0x18
   2666 F9                 9412 	mov	r1,a
   2667 E6                 9413 	mov	a,@r0
   2668 F7                 9414 	mov	@r1,a
   2669 08                 9415 	inc	r0
   266A 09                 9416 	inc	r1
   266B E6                 9417 	mov	a,@r0
   266C F7                 9418 	mov	@r1,a
   266D 08                 9419 	inc	r0
   266E 09                 9420 	inc	r1
   266F E6                 9421 	mov	a,@r0
   2670 F7                 9422 	mov	@r1,a
                           9423 ;	genPointerSet
                           9424 ;	genGenPointerSet
   2671 E5*00              9425 	mov	a,_bp
   2673 24 18              9426 	add	a,#0x18
   2675 F8                 9427 	mov	r0,a
   2676 86 82              9428 	mov	dpl,@r0
   2678 08                 9429 	inc	r0
   2679 86 83              9430 	mov	dph,@r0
   267B 08                 9431 	inc	r0
   267C 86 F0              9432 	mov	b,@r0
                           9433 ;	Peephole 181	changed mov to clr
   267E E4                 9434 	clr	a
   267F 12s00r00           9435 	lcall	__gptrput
   2682 A3                 9436 	inc	dptr
                           9437 ;	Peephole 181	changed mov to clr
   2683 E4                 9438 	clr	a
   2684 12s00r00           9439 	lcall	__gptrput
                    2687   9440 	C$tff.c$916$1$1 ==.
                           9441 ;	tff.c:916: res = validate(fs, fp->id);						/* Check validity of the object */
                           9442 ;	genPointerGet
                           9443 ;	genGenPointerGet
   2687 A8*00              9444 	mov	r0,_bp
   2689 08                 9445 	inc	r0
   268A 86 82              9446 	mov	dpl,@r0
   268C 08                 9447 	inc	r0
   268D 86 83              9448 	mov	dph,@r0
   268F 08                 9449 	inc	r0
   2690 86 F0              9450 	mov	b,@r0
   2692 12s00r00           9451 	lcall	__gptrget
   2695 FA                 9452 	mov	r2,a
   2696 A3                 9453 	inc	dptr
   2697 12s00r00           9454 	lcall	__gptrget
   269A FB                 9455 	mov	r3,a
                           9456 ;	genIpush
   269B C0 02              9457 	push	ar2
   269D C0 03              9458 	push	ar3
                           9459 ;	genCall
   269F E5*00              9460 	mov	a,_bp
   26A1 24 15              9461 	add	a,#0x15
   26A3 F8                 9462 	mov	r0,a
   26A4 86 82              9463 	mov	dpl,@r0
   26A6 08                 9464 	inc	r0
   26A7 86 83              9465 	mov	dph,@r0
   26A9 08                 9466 	inc	r0
   26AA 86 F0              9467 	mov	b,@r0
   26AC 12s21r7F           9468 	lcall	_validate
   26AF AA 82              9469 	mov	r2,dpl
   26B1 15 81              9470 	dec	sp
   26B3 15 81              9471 	dec	sp
                           9472 ;	genAssign
                    26B5   9473 	C$tff.c$917$1$1 ==.
                           9474 ;	tff.c:917: if (res != FR_OK) return res;
                           9475 ;	genCmpEq
                           9476 ;	gencjneshort
   26B5 BA 00 02           9477 	cjne	r2,#0x00,00152$
                           9478 ;	Peephole 112.b	changed ljmp to sjmp
   26B8 80 05              9479 	sjmp	00102$
   26BA                    9480 00152$:
                           9481 ;	genRet
   26BA 8A 82              9482 	mov	dpl,r2
   26BC 02s2Dr37           9483 	ljmp	00132$
   26BF                    9484 00102$:
                    26BF   9485 	C$tff.c$918$1$1 ==.
                           9486 ;	tff.c:918: if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
                           9487 ;	genPlus
   26BF A8*00              9488 	mov	r0,_bp
   26C1 08                 9489 	inc	r0
   26C2 E5*00              9490 	mov	a,_bp
   26C4 24 38              9491 	add	a,#0x38
   26C6 F9                 9492 	mov	r1,a
                           9493 ;     genPlusIncr
   26C7 74 02              9494 	mov	a,#0x02
   26C9 26                 9495 	add	a,@r0
   26CA F7                 9496 	mov	@r1,a
                           9497 ;	Peephole 181	changed mov to clr
   26CB E4                 9498 	clr	a
   26CC 08                 9499 	inc	r0
   26CD 36                 9500 	addc	a,@r0
   26CE 09                 9501 	inc	r1
   26CF F7                 9502 	mov	@r1,a
   26D0 08                 9503 	inc	r0
   26D1 09                 9504 	inc	r1
   26D2 E6                 9505 	mov	a,@r0
   26D3 F7                 9506 	mov	@r1,a
                           9507 ;	genPointerGet
                           9508 ;	genGenPointerGet
   26D4 E5*00              9509 	mov	a,_bp
   26D6 24 38              9510 	add	a,#0x38
   26D8 F8                 9511 	mov	r0,a
   26D9 86 82              9512 	mov	dpl,@r0
   26DB 08                 9513 	inc	r0
   26DC 86 83              9514 	mov	dph,@r0
   26DE 08                 9515 	inc	r0
   26DF 86 F0              9516 	mov	b,@r0
   26E1 12s00r00           9517 	lcall	__gptrget
                           9518 ;	genAnd
   26E4 FA                 9519 	mov	r2,a
                           9520 ;	Peephole 105	removed redundant mov
                           9521 ;	genIfxJump
                           9522 ;	Peephole 108.d	removed ljmp by inverse jump logic
   26E5 30 E7 06           9523 	jnb	acc.7,00104$
                           9524 ;	Peephole 300	removed redundant label 00153$
                           9525 ;	genRet
   26E8 75 82 08           9526 	mov	dpl,#0x08
   26EB 02s2Dr37           9527 	ljmp	00132$
   26EE                    9528 00104$:
                    26EE   9529 	C$tff.c$919$1$1 ==.
                           9530 ;	tff.c:919: if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
                           9531 ;	genAnd
   26EE EA                 9532 	mov	a,r2
                           9533 ;	genIfxJump
                           9534 ;	Peephole 108.e	removed ljmp by inverse jump logic
   26EF 20 E0 06           9535 	jb	acc.0,00106$
                           9536 ;	Peephole 300	removed redundant label 00154$
                           9537 ;	genRet
   26F2 75 82 06           9538 	mov	dpl,#0x06
   26F5 02s2Dr37           9539 	ljmp	00132$
   26F8                    9540 00106$:
                    26F8   9541 	C$tff.c$920$1$1 ==.
                           9542 ;	tff.c:920: remain = fp->fsize - fp->fptr;
                           9543 ;	genIpush
                           9544 ;	genPlus
   26F8 A8*00              9545 	mov	r0,_bp
   26FA 08                 9546 	inc	r0
                           9547 ;     genPlusIncr
   26FB 74 0B              9548 	mov	a,#0x0B
   26FD 26                 9549 	add	a,@r0
   26FE FA                 9550 	mov	r2,a
                           9551 ;	Peephole 181	changed mov to clr
   26FF E4                 9552 	clr	a
   2700 08                 9553 	inc	r0
   2701 36                 9554 	addc	a,@r0
   2702 FB                 9555 	mov	r3,a
   2703 08                 9556 	inc	r0
   2704 86 04              9557 	mov	ar4,@r0
                           9558 ;	genPointerGet
                           9559 ;	genGenPointerGet
   2706 8A 82              9560 	mov	dpl,r2
   2708 8B 83              9561 	mov	dph,r3
   270A 8C F0              9562 	mov	b,r4
   270C E5*00              9563 	mov	a,_bp
   270E 24 1E              9564 	add	a,#0x1e
   2710 F8                 9565 	mov	r0,a
   2711 12s00r00           9566 	lcall	__gptrget
   2714 F6                 9567 	mov	@r0,a
   2715 A3                 9568 	inc	dptr
   2716 12s00r00           9569 	lcall	__gptrget
   2719 08                 9570 	inc	r0
   271A F6                 9571 	mov	@r0,a
   271B A3                 9572 	inc	dptr
   271C 12s00r00           9573 	lcall	__gptrget
   271F 08                 9574 	inc	r0
   2720 F6                 9575 	mov	@r0,a
   2721 A3                 9576 	inc	dptr
   2722 12s00r00           9577 	lcall	__gptrget
   2725 08                 9578 	inc	r0
   2726 F6                 9579 	mov	@r0,a
                           9580 ;	genPlus
   2727 A8*00              9581 	mov	r0,_bp
   2729 08                 9582 	inc	r0
   272A E5*00              9583 	mov	a,_bp
   272C 24 1B              9584 	add	a,#0x1b
   272E F9                 9585 	mov	r1,a
                           9586 ;     genPlusIncr
   272F 74 07              9587 	mov	a,#0x07
   2731 26                 9588 	add	a,@r0
   2732 F7                 9589 	mov	@r1,a
                           9590 ;	Peephole 181	changed mov to clr
   2733 E4                 9591 	clr	a
   2734 08                 9592 	inc	r0
   2735 36                 9593 	addc	a,@r0
   2736 09                 9594 	inc	r1
   2737 F7                 9595 	mov	@r1,a
   2738 08                 9596 	inc	r0
   2739 09                 9597 	inc	r1
   273A E6                 9598 	mov	a,@r0
   273B F7                 9599 	mov	@r1,a
                           9600 ;	genPointerGet
                           9601 ;	genGenPointerGet
   273C E5*00              9602 	mov	a,_bp
   273E 24 1B              9603 	add	a,#0x1b
   2740 F8                 9604 	mov	r0,a
   2741 86 82              9605 	mov	dpl,@r0
   2743 08                 9606 	inc	r0
   2744 86 83              9607 	mov	dph,@r0
   2746 08                 9608 	inc	r0
   2747 86 F0              9609 	mov	b,@r0
   2749 12s00r00           9610 	lcall	__gptrget
   274C FE                 9611 	mov	r6,a
   274D A3                 9612 	inc	dptr
   274E 12s00r00           9613 	lcall	__gptrget
   2751 FF                 9614 	mov	r7,a
   2752 A3                 9615 	inc	dptr
   2753 12s00r00           9616 	lcall	__gptrget
   2756 FA                 9617 	mov	r2,a
   2757 A3                 9618 	inc	dptr
   2758 12s00r00           9619 	lcall	__gptrget
   275B FB                 9620 	mov	r3,a
                           9621 ;	genMinus
   275C E5*00              9622 	mov	a,_bp
   275E 24 1E              9623 	add	a,#0x1e
   2760 F8                 9624 	mov	r0,a
   2761 E6                 9625 	mov	a,@r0
   2762 C3                 9626 	clr	c
                           9627 ;	Peephole 236.l	used r6 instead of ar6
   2763 9E                 9628 	subb	a,r6
   2764 FE                 9629 	mov	r6,a
   2765 08                 9630 	inc	r0
   2766 E6                 9631 	mov	a,@r0
                           9632 ;	Peephole 236.l	used r7 instead of ar7
   2767 9F                 9633 	subb	a,r7
   2768 FF                 9634 	mov	r7,a
   2769 08                 9635 	inc	r0
   276A E6                 9636 	mov	a,@r0
                           9637 ;	Peephole 236.l	used r2 instead of ar2
   276B 9A                 9638 	subb	a,r2
   276C FA                 9639 	mov	r2,a
   276D 08                 9640 	inc	r0
   276E E6                 9641 	mov	a,@r0
                           9642 ;	Peephole 236.l	used r3 instead of ar3
   276F 9B                 9643 	subb	a,r3
   2770 FB                 9644 	mov	r3,a
                           9645 ;	genAssign
   2771 E5*00              9646 	mov	a,_bp
   2773 24 08              9647 	add	a,#0x08
   2775 F8                 9648 	mov	r0,a
   2776 A6 06              9649 	mov	@r0,ar6
   2778 08                 9650 	inc	r0
   2779 A6 07              9651 	mov	@r0,ar7
   277B 08                 9652 	inc	r0
   277C A6 02              9653 	mov	@r0,ar2
   277E 08                 9654 	inc	r0
   277F A6 03              9655 	mov	@r0,ar3
                    2781   9656 	C$tff.c$921$1$1 ==.
                           9657 ;	tff.c:921: if (btr > remain) btr = (WORD)remain;			/* Truncate read count by number of bytes left */
                           9658 ;	genCast
   2781 E5*00              9659 	mov	a,_bp
   2783 24 F9              9660 	add	a,#0xfffffff9
   2785 F8                 9661 	mov	r0,a
   2786 86 02              9662 	mov	ar2,@r0
   2788 08                 9663 	inc	r0
   2789 86 03              9664 	mov	ar3,@r0
                           9665 ;	genCmpGt
                           9666 ;	Peephole 3.c	changed mov to clr
   278B E4                 9667 	clr	a
   278C FC                 9668 	mov	r4,a
   278D FD                 9669 	mov	r5,a
   278E E5*00              9670 	mov	a,_bp
   2790 24 08              9671 	add	a,#0x08
   2792 F8                 9672 	mov	r0,a
                           9673 ;	genCmp
   2793 C3                 9674 	clr	c
   2794 E6                 9675 	mov	a,@r0
   2795 9A                 9676 	subb	a,r2
   2796 08                 9677 	inc	r0
   2797 E6                 9678 	mov	a,@r0
   2798 9B                 9679 	subb	a,r3
   2799 08                 9680 	inc	r0
   279A E6                 9681 	mov	a,@r0
   279B 9C                 9682 	subb	a,r4
   279C 08                 9683 	inc	r0
   279D E6                 9684 	mov	a,@r0
   279E 9D                 9685 	subb	a,r5
                           9686 ;	genIpop
                           9687 ;	genIfx
                           9688 ;	genIfxJump
                           9689 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           9690 ;	Peephole 128	jump optimization
   279F 50 10              9691 	jnc	00151$
                           9692 ;	Peephole 300	removed redundant label 00155$
                           9693 ;	genCast
   27A1 E5*00              9694 	mov	a,_bp
   27A3 24 08              9695 	add	a,#0x08
   27A5 F8                 9696 	mov	r0,a
   27A6 E5*00              9697 	mov	a,_bp
   27A8 24 F9              9698 	add	a,#0xfffffff9
   27AA F9                 9699 	mov	r1,a
   27AB E6                 9700 	mov	a,@r0
   27AC F7                 9701 	mov	@r1,a
   27AD 08                 9702 	inc	r0
   27AE 09                 9703 	inc	r1
   27AF E6                 9704 	mov	a,@r0
   27B0 F7                 9705 	mov	@r1,a
   27B1                    9706 00151$:
                           9707 ;	genPlus
   27B1 A8*00              9708 	mov	r0,_bp
   27B3 08                 9709 	inc	r0
   27B4 E5*00              9710 	mov	a,_bp
   27B6 24 35              9711 	add	a,#0x35
   27B8 F9                 9712 	mov	r1,a
                           9713 ;     genPlusIncr
   27B9 74 13              9714 	mov	a,#0x13
   27BB 26                 9715 	add	a,@r0
   27BC F7                 9716 	mov	@r1,a
                           9717 ;	Peephole 181	changed mov to clr
   27BD E4                 9718 	clr	a
   27BE 08                 9719 	inc	r0
   27BF 36                 9720 	addc	a,@r0
   27C0 09                 9721 	inc	r1
   27C1 F7                 9722 	mov	@r1,a
   27C2 08                 9723 	inc	r0
   27C3 09                 9724 	inc	r1
   27C4 E6                 9725 	mov	a,@r0
   27C5 F7                 9726 	mov	@r1,a
                           9727 ;	genPlus
   27C6 A8*00              9728 	mov	r0,_bp
   27C8 08                 9729 	inc	r0
   27C9 E5*00              9730 	mov	a,_bp
   27CB 24 1E              9731 	add	a,#0x1e
   27CD F9                 9732 	mov	r1,a
                           9733 ;     genPlusIncr
   27CE 74 0F              9734 	mov	a,#0x0F
   27D0 26                 9735 	add	a,@r0
   27D1 F7                 9736 	mov	@r1,a
                           9737 ;	Peephole 181	changed mov to clr
   27D2 E4                 9738 	clr	a
   27D3 08                 9739 	inc	r0
   27D4 36                 9740 	addc	a,@r0
   27D5 09                 9741 	inc	r1
   27D6 F7                 9742 	mov	@r1,a
   27D7 08                 9743 	inc	r0
   27D8 09                 9744 	inc	r1
   27D9 E6                 9745 	mov	a,@r0
   27DA F7                 9746 	mov	@r1,a
                           9747 ;	genPlus
   27DB E5*00              9748 	mov	a,_bp
   27DD 24 15              9749 	add	a,#0x15
   27DF F8                 9750 	mov	r0,a
   27E0 E5*00              9751 	mov	a,_bp
   27E2 24 22              9752 	add	a,#0x22
   27E4 F9                 9753 	mov	r1,a
                           9754 ;     genPlusIncr
   27E5 74 18              9755 	mov	a,#0x18
   27E7 26                 9756 	add	a,@r0
   27E8 F7                 9757 	mov	@r1,a
                           9758 ;	Peephole 181	changed mov to clr
   27E9 E4                 9759 	clr	a
   27EA 08                 9760 	inc	r0
   27EB 36                 9761 	addc	a,@r0
   27EC 09                 9762 	inc	r1
   27ED F7                 9763 	mov	@r1,a
   27EE 08                 9764 	inc	r0
   27EF 09                 9765 	inc	r1
   27F0 E6                 9766 	mov	a,@r0
   27F1 F7                 9767 	mov	@r1,a
                           9768 ;	genPlus
   27F2 E5*00              9769 	mov	a,_bp
   27F4 24 15              9770 	add	a,#0x15
   27F6 F8                 9771 	mov	r0,a
   27F7 E5*00              9772 	mov	a,_bp
   27F9 24 25              9773 	add	a,#0x25
   27FB F9                 9774 	mov	r1,a
                           9775 ;     genPlusIncr
   27FC 74 1D              9776 	mov	a,#0x1D
   27FE 26                 9777 	add	a,@r0
   27FF F7                 9778 	mov	@r1,a
                           9779 ;	Peephole 181	changed mov to clr
   2800 E4                 9780 	clr	a
   2801 08                 9781 	inc	r0
   2802 36                 9782 	addc	a,@r0
   2803 09                 9783 	inc	r1
   2804 F7                 9784 	mov	@r1,a
   2805 08                 9785 	inc	r0
   2806 09                 9786 	inc	r1
   2807 E6                 9787 	mov	a,@r0
   2808 F7                 9788 	mov	@r1,a
                           9789 ;	genPlus
   2809 A8*00              9790 	mov	r0,_bp
   280B 08                 9791 	inc	r0
   280C E5*00              9792 	mov	a,_bp
   280E 24 28              9793 	add	a,#0x28
   2810 F9                 9794 	mov	r1,a
                           9795 ;     genPlusIncr
   2811 74 17              9796 	mov	a,#0x17
   2813 26                 9797 	add	a,@r0
   2814 F7                 9798 	mov	@r1,a
                           9799 ;	Peephole 181	changed mov to clr
   2815 E4                 9800 	clr	a
   2816 08                 9801 	inc	r0
   2817 36                 9802 	addc	a,@r0
   2818 09                 9803 	inc	r1
   2819 F7                 9804 	mov	@r1,a
   281A 08                 9805 	inc	r0
   281B 09                 9806 	inc	r1
   281C E6                 9807 	mov	a,@r0
   281D F7                 9808 	mov	@r1,a
                           9809 ;	genPlus
   281E E5*00              9810 	mov	a,_bp
   2820 24 15              9811 	add	a,#0x15
   2822 F8                 9812 	mov	r0,a
   2823 E5*00              9813 	mov	a,_bp
   2825 24 2B              9814 	add	a,#0x2b
   2827 F9                 9815 	mov	r1,a
                           9816 ;     genPlusIncr
   2828 74 20              9817 	mov	a,#0x20
   282A 26                 9818 	add	a,@r0
   282B F7                 9819 	mov	@r1,a
                           9820 ;	Peephole 181	changed mov to clr
   282C E4                 9821 	clr	a
   282D 08                 9822 	inc	r0
   282E 36                 9823 	addc	a,@r0
   282F 09                 9824 	inc	r1
   2830 F7                 9825 	mov	@r1,a
   2831 08                 9826 	inc	r0
   2832 09                 9827 	inc	r1
   2833 E6                 9828 	mov	a,@r0
   2834 F7                 9829 	mov	@r1,a
   2835                    9830 00127$:
                    2835   9831 	C$tff.c$923$1$1 ==.
                           9832 ;	tff.c:923: for ( ;  btr;									/* Repeat until all data transferred */
                           9833 ;	genIfx
   2835 E5*00              9834 	mov	a,_bp
   2837 24 F9              9835 	add	a,#0xfffffff9
   2839 F8                 9836 	mov	r0,a
   283A E6                 9837 	mov	a,@r0
   283B 08                 9838 	inc	r0
   283C 46                 9839 	orl	a,@r0
                           9840 ;	genIfxJump
   283D 70 03              9841 	jnz	00156$
   283F 02s2Dr0A           9842 	ljmp	00130$
   2842                    9843 00156$:
                    2842   9844 	C$tff.c$925$2$2 ==.
                           9845 ;	tff.c:925: if ((fp->fptr % 512) == 0) {				/* On the sector boundary */
                           9846 ;	genPointerGet
                           9847 ;	genGenPointerGet
   2842 E5*00              9848 	mov	a,_bp
   2844 24 1B              9849 	add	a,#0x1b
   2846 F8                 9850 	mov	r0,a
   2847 86 82              9851 	mov	dpl,@r0
   2849 08                 9852 	inc	r0
   284A 86 83              9853 	mov	dph,@r0
   284C 08                 9854 	inc	r0
   284D 86 F0              9855 	mov	b,@r0
   284F 12s00r00           9856 	lcall	__gptrget
   2852 FB                 9857 	mov	r3,a
   2853 A3                 9858 	inc	dptr
   2854 12s00r00           9859 	lcall	__gptrget
   2857 FC                 9860 	mov	r4,a
   2858 A3                 9861 	inc	dptr
   2859 12s00r00           9862 	lcall	__gptrget
   285C FD                 9863 	mov	r5,a
   285D A3                 9864 	inc	dptr
   285E 12s00r00           9865 	lcall	__gptrget
   2861 FE                 9866 	mov	r6,a
                           9867 ;	genAnd
   2862 EB                 9868 	mov	a,r3
   2863 70 04              9869 	jnz	00157$
   2865 EC                 9870 	mov	a,r4
                           9871 ;	Peephole 160.f	removed sjmp by inverse jump logic
   2866 30 E0 03           9872 	jnb	acc.0,00158$
   2869                    9873 00157$:
   2869 02s2Br60           9874 	ljmp	00122$
   286C                    9875 00158$:
                    286C   9876 	C$tff.c$926$1$1 ==.
                           9877 ;	tff.c:926: if (--fp->sect_clust) {					/* Decrement left sector counter */
                           9878 ;	genIpush
                           9879 ;	genPlus
   286C A8*00              9880 	mov	r0,_bp
   286E 08                 9881 	inc	r0
   286F E5*00              9882 	mov	a,_bp
   2871 24 32              9883 	add	a,#0x32
   2873 F9                 9884 	mov	r1,a
                           9885 ;     genPlusIncr
   2874 74 03              9886 	mov	a,#0x03
   2876 26                 9887 	add	a,@r0
   2877 F7                 9888 	mov	@r1,a
                           9889 ;	Peephole 181	changed mov to clr
   2878 E4                 9890 	clr	a
   2879 08                 9891 	inc	r0
   287A 36                 9892 	addc	a,@r0
   287B 09                 9893 	inc	r1
   287C F7                 9894 	mov	@r1,a
   287D 08                 9895 	inc	r0
   287E 09                 9896 	inc	r1
   287F E6                 9897 	mov	a,@r0
   2880 F7                 9898 	mov	@r1,a
                           9899 ;	genPointerGet
                           9900 ;	genGenPointerGet
   2881 E5*00              9901 	mov	a,_bp
   2883 24 32              9902 	add	a,#0x32
   2885 F8                 9903 	mov	r0,a
   2886 86 82              9904 	mov	dpl,@r0
   2888 08                 9905 	inc	r0
   2889 86 83              9906 	mov	dph,@r0
   288B 08                 9907 	inc	r0
   288C 86 F0              9908 	mov	b,@r0
   288E 12s00r00           9909 	lcall	__gptrget
   2891 FA                 9910 	mov	r2,a
                           9911 ;	genMinus
                           9912 ;	genMinusDec
   2892 1A                 9913 	dec	r2
                           9914 ;	genPointerSet
                           9915 ;	genGenPointerSet
   2893 E5*00              9916 	mov	a,_bp
   2895 24 32              9917 	add	a,#0x32
   2897 F8                 9918 	mov	r0,a
   2898 86 82              9919 	mov	dpl,@r0
   289A 08                 9920 	inc	r0
   289B 86 83              9921 	mov	dph,@r0
   289D 08                 9922 	inc	r0
   289E 86 F0              9923 	mov	b,@r0
                           9924 ;	genIfx
   28A0 EA                 9925 	mov	a,r2
   28A1 12s00r00           9926 	lcall	__gptrput
                           9927 ;	Peephole 190	removed redundant mov
                           9928 ;	genIpop
                           9929 ;	genIfxJump
                           9930 ;	Peephole 108.c	removed ljmp by inverse jump logic
   28A4 60 38              9931 	jz	00113$
                           9932 ;	Peephole 300	removed redundant label 00159$
                    28A6   9933 	C$tff.c$927$1$1 ==.
                           9934 ;	tff.c:927: sect = fp->curr_sect + 1;			/* Get current sector */
                           9935 ;	genIpush
                           9936 ;	genPointerGet
                           9937 ;	genGenPointerGet
   28A6 E5*00              9938 	mov	a,_bp
   28A8 24 28              9939 	add	a,#0x28
   28AA F8                 9940 	mov	r0,a
   28AB 86 82              9941 	mov	dpl,@r0
   28AD 08                 9942 	inc	r0
   28AE 86 83              9943 	mov	dph,@r0
   28B0 08                 9944 	inc	r0
   28B1 86 F0              9945 	mov	b,@r0
   28B3 12s00r00           9946 	lcall	__gptrget
   28B6 FA                 9947 	mov	r2,a
   28B7 A3                 9948 	inc	dptr
   28B8 12s00r00           9949 	lcall	__gptrget
   28BB FB                 9950 	mov	r3,a
   28BC A3                 9951 	inc	dptr
   28BD 12s00r00           9952 	lcall	__gptrget
   28C0 FC                 9953 	mov	r4,a
   28C1 A3                 9954 	inc	dptr
   28C2 12s00r00           9955 	lcall	__gptrget
   28C5 FD                 9956 	mov	r5,a
                           9957 ;	genPlus
   28C6 E5*00              9958 	mov	a,_bp
   28C8 24 04              9959 	add	a,#0x04
   28CA F8                 9960 	mov	r0,a
                           9961 ;     genPlusIncr
   28CB 74 01              9962 	mov	a,#0x01
                           9963 ;	Peephole 236.a	used r2 instead of ar2
   28CD 2A                 9964 	add	a,r2
   28CE F6                 9965 	mov	@r0,a
                           9966 ;	Peephole 181	changed mov to clr
   28CF E4                 9967 	clr	a
                           9968 ;	Peephole 236.b	used r3 instead of ar3
   28D0 3B                 9969 	addc	a,r3
   28D1 08                 9970 	inc	r0
   28D2 F6                 9971 	mov	@r0,a
                           9972 ;	Peephole 181	changed mov to clr
   28D3 E4                 9973 	clr	a
                           9974 ;	Peephole 236.b	used r4 instead of ar4
   28D4 3C                 9975 	addc	a,r4
   28D5 08                 9976 	inc	r0
   28D6 F6                 9977 	mov	@r0,a
                           9978 ;	Peephole 181	changed mov to clr
   28D7 E4                 9979 	clr	a
                           9980 ;	Peephole 236.b	used r5 instead of ar5
   28D8 3D                 9981 	addc	a,r5
   28D9 08                 9982 	inc	r0
   28DA F6                 9983 	mov	@r0,a
                           9984 ;	genIpop
   28DB 02s2Ar0F           9985 	ljmp	00114$
   28DE                    9986 00113$:
                    28DE   9987 	C$tff.c$929$4$5 ==.
                           9988 ;	tff.c:929: clust = (fp->fptr == 0) ?
                           9989 ;	genNot
   28DE EB                 9990 	mov	a,r3
   28DF 4C                 9991 	orl	a,r4
   28E0 4D                 9992 	orl	a,r5
   28E1 4E                 9993 	orl	a,r6
   28E2 B4 01 00           9994 	cjne	a,#0x01,00160$
   28E5                    9995 00160$:
   28E5 E4                 9996 	clr	a
   28E6 33                 9997 	rlc	a
                           9998 ;	genIfx
   28E7 FD                 9999 	mov	r5,a
                          10000 ;	Peephole 105	removed redundant mov
                          10001 ;	genIfxJump
                          10002 ;	Peephole 108.c	removed ljmp by inverse jump logic
   28E8 60 22             10003 	jz	00134$
                          10004 ;	Peephole 300	removed redundant label 00161$
                    28EA  10005 	C$tff.c$930$4$5 ==.
                          10006 ;	tff.c:930: fp->org_clust : get_cluster(fp->curr_clust);
                          10007 ;	genPointerGet
                          10008 ;	genGenPointerGet
   28EA E5*00             10009 	mov	a,_bp
   28EC 24 1E             10010 	add	a,#0x1e
   28EE F8                10011 	mov	r0,a
   28EF 86 82             10012 	mov	dpl,@r0
   28F1 08                10013 	inc	r0
   28F2 86 83             10014 	mov	dph,@r0
   28F4 08                10015 	inc	r0
   28F5 86 F0             10016 	mov	b,@r0
   28F7 12s00r00          10017 	lcall	__gptrget
   28FA FD                10018 	mov	r5,a
   28FB A3                10019 	inc	dptr
   28FC 12s00r00          10020 	lcall	__gptrget
   28FF FE                10021 	mov	r6,a
   2900 A3                10022 	inc	dptr
   2901 12s00r00          10023 	lcall	__gptrget
   2904 FF                10024 	mov	r7,a
   2905 A3                10025 	inc	dptr
   2906 12s00r00          10026 	lcall	__gptrget
   2909 FA                10027 	mov	r2,a
                          10028 ;	Peephole 112.b	changed ljmp to sjmp
   290A 80 30             10029 	sjmp	00135$
   290C                   10030 00134$:
                          10031 ;	genPointerGet
                          10032 ;	genGenPointerGet
   290C E5*00             10033 	mov	a,_bp
   290E 24 35             10034 	add	a,#0x35
   2910 F8                10035 	mov	r0,a
   2911 86 82             10036 	mov	dpl,@r0
   2913 08                10037 	inc	r0
   2914 86 83             10038 	mov	dph,@r0
   2916 08                10039 	inc	r0
   2917 86 F0             10040 	mov	b,@r0
   2919 12s00r00          10041 	lcall	__gptrget
   291C FA                10042 	mov	r2,a
   291D A3                10043 	inc	dptr
   291E 12s00r00          10044 	lcall	__gptrget
   2921 FB                10045 	mov	r3,a
   2922 A3                10046 	inc	dptr
   2923 12s00r00          10047 	lcall	__gptrget
   2926 FC                10048 	mov	r4,a
   2927 A3                10049 	inc	dptr
   2928 12s00r00          10050 	lcall	__gptrget
                          10051 ;	genCall
   292B FD                10052 	mov	r5,a
   292C 8A 82             10053 	mov	dpl,r2
   292E 8B 83             10054 	mov	dph,r3
   2930 8C F0             10055 	mov	b,r4
                          10056 ;	Peephole 191	removed redundant mov
   2932 12s00rEA          10057 	lcall	_get_cluster
   2935 AD 82             10058 	mov	r5,dpl
   2937 AE 83             10059 	mov	r6,dph
   2939 AF F0             10060 	mov	r7,b
   293B FA                10061 	mov	r2,a
   293C                   10062 00135$:
                          10063 ;	genAssign
   293C E5*00             10064 	mov	a,_bp
   293E 24 0E             10065 	add	a,#0x0e
   2940 F8                10066 	mov	r0,a
   2941 A6 05             10067 	mov	@r0,ar5
   2943 08                10068 	inc	r0
   2944 A6 06             10069 	mov	@r0,ar6
   2946 08                10070 	inc	r0
   2947 A6 07             10071 	mov	@r0,ar7
   2949 08                10072 	inc	r0
   294A A6 02             10073 	mov	@r0,ar2
                    294C  10074 	C$tff.c$931$4$5 ==.
                          10075 ;	tff.c:931: if (clust < 2 || clust >= fs->max_clust)
                          10076 ;	genCmpLt
   294C E5*00             10077 	mov	a,_bp
   294E 24 0E             10078 	add	a,#0x0e
   2950 F8                10079 	mov	r0,a
                          10080 ;	genCmp
   2951 C3                10081 	clr	c
   2952 E6                10082 	mov	a,@r0
   2953 94 02             10083 	subb	a,#0x02
   2955 08                10084 	inc	r0
   2956 E6                10085 	mov	a,@r0
   2957 94 00             10086 	subb	a,#0x00
   2959 08                10087 	inc	r0
   295A E6                10088 	mov	a,@r0
   295B 94 00             10089 	subb	a,#0x00
   295D 08                10090 	inc	r0
   295E E6                10091 	mov	a,@r0
   295F 94 00             10092 	subb	a,#0x00
                          10093 ;	genIfxJump
   2961 50 03             10094 	jnc	00162$
   2963 02s2Dr0F          10095 	ljmp	00131$
   2966                   10096 00162$:
                          10097 ;	genPointerGet
                          10098 ;	genGenPointerGet
   2966 E5*00             10099 	mov	a,_bp
   2968 24 22             10100 	add	a,#0x22
   296A F8                10101 	mov	r0,a
   296B 86 82             10102 	mov	dpl,@r0
   296D 08                10103 	inc	r0
   296E 86 83             10104 	mov	dph,@r0
   2970 08                10105 	inc	r0
   2971 86 F0             10106 	mov	b,@r0
   2973 12s00r00          10107 	lcall	__gptrget
   2976 FE                10108 	mov	r6,a
   2977 A3                10109 	inc	dptr
   2978 12s00r00          10110 	lcall	__gptrget
   297B FF                10111 	mov	r7,a
   297C A3                10112 	inc	dptr
   297D 12s00r00          10113 	lcall	__gptrget
   2980 FA                10114 	mov	r2,a
   2981 A3                10115 	inc	dptr
   2982 12s00r00          10116 	lcall	__gptrget
   2985 FB                10117 	mov	r3,a
                          10118 ;	genCmpLt
   2986 E5*00             10119 	mov	a,_bp
   2988 24 0E             10120 	add	a,#0x0e
   298A F8                10121 	mov	r0,a
                          10122 ;	genCmp
   298B C3                10123 	clr	c
   298C E6                10124 	mov	a,@r0
   298D 9E                10125 	subb	a,r6
   298E 08                10126 	inc	r0
   298F E6                10127 	mov	a,@r0
   2990 9F                10128 	subb	a,r7
   2991 08                10129 	inc	r0
   2992 E6                10130 	mov	a,@r0
   2993 9A                10131 	subb	a,r2
   2994 08                10132 	inc	r0
   2995 E6                10133 	mov	a,@r0
   2996 9B                10134 	subb	a,r3
                          10135 ;	genIfxJump
   2997 40 03             10136 	jc	00163$
   2999 02s2Dr0F          10137 	ljmp	00131$
   299C                   10138 00163$:
                    299C  10139 	C$tff.c$933$4$5 ==.
                          10140 ;	tff.c:933: fp->curr_clust = clust;				/* Current cluster */
                          10141 ;	genPointerSet
                          10142 ;	genGenPointerSet
   299C E5*00             10143 	mov	a,_bp
   299E 24 35             10144 	add	a,#0x35
   29A0 F8                10145 	mov	r0,a
   29A1 86 82             10146 	mov	dpl,@r0
   29A3 08                10147 	inc	r0
   29A4 86 83             10148 	mov	dph,@r0
   29A6 08                10149 	inc	r0
   29A7 86 F0             10150 	mov	b,@r0
   29A9 E5*00             10151 	mov	a,_bp
   29AB 24 0E             10152 	add	a,#0x0e
   29AD F9                10153 	mov	r1,a
   29AE E7                10154 	mov	a,@r1
   29AF 12s00r00          10155 	lcall	__gptrput
   29B2 A3                10156 	inc	dptr
   29B3 09                10157 	inc	r1
   29B4 E7                10158 	mov	a,@r1
   29B5 12s00r00          10159 	lcall	__gptrput
   29B8 A3                10160 	inc	dptr
   29B9 09                10161 	inc	r1
   29BA E7                10162 	mov	a,@r1
   29BB 12s00r00          10163 	lcall	__gptrput
   29BE A3                10164 	inc	dptr
   29BF 09                10165 	inc	r1
   29C0 E7                10166 	mov	a,@r1
   29C1 12s00r00          10167 	lcall	__gptrput
                    29C4  10168 	C$tff.c$934$4$5 ==.
                          10169 ;	tff.c:934: sect = clust2sect(clust);			/* Get current sector */
                          10170 ;	genCall
   29C4 E5*00             10171 	mov	a,_bp
   29C6 24 0E             10172 	add	a,#0x0e
   29C8 F8                10173 	mov	r0,a
   29C9 86 82             10174 	mov	dpl,@r0
   29CB 08                10175 	inc	r0
   29CC 86 83             10176 	mov	dph,@r0
   29CE 08                10177 	inc	r0
   29CF 86 F0             10178 	mov	b,@r0
   29D1 08                10179 	inc	r0
   29D2 E6                10180 	mov	a,@r0
   29D3 12s04rFB          10181 	lcall	_clust2sect
   29D6 AA 82             10182 	mov	r2,dpl
   29D8 AB 83             10183 	mov	r3,dph
   29DA AC F0             10184 	mov	r4,b
   29DC FD                10185 	mov	r5,a
                          10186 ;	genAssign
   29DD E5*00             10187 	mov	a,_bp
   29DF 24 04             10188 	add	a,#0x04
   29E1 F8                10189 	mov	r0,a
   29E2 A6 02             10190 	mov	@r0,ar2
   29E4 08                10191 	inc	r0
   29E5 A6 03             10192 	mov	@r0,ar3
   29E7 08                10193 	inc	r0
   29E8 A6 04             10194 	mov	@r0,ar4
   29EA 08                10195 	inc	r0
   29EB A6 05             10196 	mov	@r0,ar5
                    29ED  10197 	C$tff.c$935$4$5 ==.
                          10198 ;	tff.c:935: fp->sect_clust = fs->sects_clust;	/* Re-initialize the left sector counter */
                          10199 ;	genPointerGet
                          10200 ;	genGenPointerGet
   29ED E5*00             10201 	mov	a,_bp
   29EF 24 25             10202 	add	a,#0x25
   29F1 F8                10203 	mov	r0,a
   29F2 86 82             10204 	mov	dpl,@r0
   29F4 08                10205 	inc	r0
   29F5 86 83             10206 	mov	dph,@r0
   29F7 08                10207 	inc	r0
   29F8 86 F0             10208 	mov	b,@r0
   29FA 12s00r00          10209 	lcall	__gptrget
   29FD FA                10210 	mov	r2,a
                          10211 ;	genPointerSet
                          10212 ;	genGenPointerSet
   29FE E5*00             10213 	mov	a,_bp
   2A00 24 32             10214 	add	a,#0x32
   2A02 F8                10215 	mov	r0,a
   2A03 86 82             10216 	mov	dpl,@r0
   2A05 08                10217 	inc	r0
   2A06 86 83             10218 	mov	dph,@r0
   2A08 08                10219 	inc	r0
   2A09 86 F0             10220 	mov	b,@r0
   2A0B EA                10221 	mov	a,r2
   2A0C 12s00r00          10222 	lcall	__gptrput
   2A0F                   10223 00114$:
                    2A0F  10224 	C$tff.c$937$3$3 ==.
                          10225 ;	tff.c:937: fp->curr_sect = sect;					/* Update current sector */
                          10226 ;	genPointerSet
                          10227 ;	genGenPointerSet
   2A0F E5*00             10228 	mov	a,_bp
   2A11 24 28             10229 	add	a,#0x28
   2A13 F8                10230 	mov	r0,a
   2A14 86 82             10231 	mov	dpl,@r0
   2A16 08                10232 	inc	r0
   2A17 86 83             10233 	mov	dph,@r0
   2A19 08                10234 	inc	r0
   2A1A 86 F0             10235 	mov	b,@r0
   2A1C E5*00             10236 	mov	a,_bp
   2A1E 24 04             10237 	add	a,#0x04
   2A20 F9                10238 	mov	r1,a
   2A21 E7                10239 	mov	a,@r1
   2A22 12s00r00          10240 	lcall	__gptrput
   2A25 A3                10241 	inc	dptr
   2A26 09                10242 	inc	r1
   2A27 E7                10243 	mov	a,@r1
   2A28 12s00r00          10244 	lcall	__gptrput
   2A2B A3                10245 	inc	dptr
   2A2C 09                10246 	inc	r1
   2A2D E7                10247 	mov	a,@r1
   2A2E 12s00r00          10248 	lcall	__gptrput
   2A31 A3                10249 	inc	dptr
   2A32 09                10250 	inc	r1
   2A33 E7                10251 	mov	a,@r1
   2A34 12s00r00          10252 	lcall	__gptrput
                    2A37  10253 	C$tff.c$938$3$3 ==.
                          10254 ;	tff.c:938: cc = btr / 512;							/* When left bytes >= 512, */
                          10255 ;	genRightShift
                          10256 ;	genRightShiftLiteral
   2A37 E5*00             10257 	mov	a,_bp
   2A39 24 F9             10258 	add	a,#0xfffffff9
                          10259 ;	genrshTwo
                          10260 ;	Peephole 185	changed order of increment (acc incremented also!)
   2A3B 04                10261 	inc	a
   2A3C F8                10262 	mov	r0,a
   2A3D E6                10263 	mov	a,@r0
   2A3E C3                10264 	clr	c
   2A3F 13                10265 	rrc	a
                    2A40  10266 	C$tff.c$939$3$3 ==.
                          10267 ;	tff.c:939: if (cc) {								/* Read maximum contiguous sectors directly */
                          10268 ;	genIfx
   2A40 FE                10269 	mov	r6,a
   2A41 7F 00             10270 	mov	r7,#0x00
                          10271 ;	Peephole 177.d	removed redundant move
   2A43 4F                10272 	orl	a,r7
                          10273 ;	genIfxJump
   2A44 70 03             10274 	jnz	00164$
   2A46 02s2Br60          10275 	ljmp	00122$
   2A49                   10276 00164$:
                    2A49  10277 	C$tff.c$940$4$6 ==.
                          10278 ;	tff.c:940: if (cc > fp->sect_clust) cc = fp->sect_clust;
                          10279 ;	genPointerGet
                          10280 ;	genGenPointerGet
   2A49 E5*00             10281 	mov	a,_bp
   2A4B 24 32             10282 	add	a,#0x32
   2A4D F8                10283 	mov	r0,a
   2A4E 86 82             10284 	mov	dpl,@r0
   2A50 08                10285 	inc	r0
   2A51 86 83             10286 	mov	dph,@r0
   2A53 08                10287 	inc	r0
   2A54 86 F0             10288 	mov	b,@r0
   2A56 12s00r00          10289 	lcall	__gptrget
   2A59 FC                10290 	mov	r4,a
                          10291 ;	genCast
   2A5A 7D 00             10292 	mov	r5,#0x00
                          10293 ;	genCmpGt
                          10294 ;	genCmp
   2A5C C3                10295 	clr	c
   2A5D EC                10296 	mov	a,r4
   2A5E 9E                10297 	subb	a,r6
   2A5F ED                10298 	mov	a,r5
   2A60 9F                10299 	subb	a,r7
                          10300 ;	genIfxJump
                          10301 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2A61 50 15             10302 	jnc	00116$
                          10303 ;	Peephole 300	removed redundant label 00165$
                          10304 ;	genPointerGet
                          10305 ;	genGenPointerGet
   2A63 E5*00             10306 	mov	a,_bp
   2A65 24 32             10307 	add	a,#0x32
   2A67 F8                10308 	mov	r0,a
   2A68 86 82             10309 	mov	dpl,@r0
   2A6A 08                10310 	inc	r0
   2A6B 86 83             10311 	mov	dph,@r0
   2A6D 08                10312 	inc	r0
   2A6E 86 F0             10313 	mov	b,@r0
   2A70 12s00r00          10314 	lcall	__gptrget
   2A73 FC                10315 	mov	r4,a
                          10316 ;	genCast
   2A74 8C 06             10317 	mov	ar6,r4
   2A76 7F 00             10318 	mov	r7,#0x00
   2A78                   10319 00116$:
                    2A78  10320 	C$tff.c$941$4$6 ==.
                          10321 ;	tff.c:941: if (disk_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
                          10322 ;	genCast
   2A78 8E 04             10323 	mov	ar4,r6
                          10324 ;	genIpush
   2A7A C0 04             10325 	push	ar4
   2A7C C0 06             10326 	push	ar6
   2A7E C0 07             10327 	push	ar7
   2A80 C0 04             10328 	push	ar4
                          10329 ;	genIpush
   2A82 E5*00             10330 	mov	a,_bp
   2A84 24 04             10331 	add	a,#0x04
   2A86 F8                10332 	mov	r0,a
   2A87 E6                10333 	mov	a,@r0
   2A88 C0 E0             10334 	push	acc
   2A8A 08                10335 	inc	r0
   2A8B E6                10336 	mov	a,@r0
   2A8C C0 E0             10337 	push	acc
   2A8E 08                10338 	inc	r0
   2A8F E6                10339 	mov	a,@r0
   2A90 C0 E0             10340 	push	acc
   2A92 08                10341 	inc	r0
   2A93 E6                10342 	mov	a,@r0
   2A94 C0 E0             10343 	push	acc
                          10344 ;	genIpush
   2A96 E5*00             10345 	mov	a,_bp
   2A98 24 12             10346 	add	a,#0x12
   2A9A F8                10347 	mov	r0,a
   2A9B E6                10348 	mov	a,@r0
   2A9C C0 E0             10349 	push	acc
   2A9E 08                10350 	inc	r0
   2A9F E6                10351 	mov	a,@r0
   2AA0 C0 E0             10352 	push	acc
   2AA2 08                10353 	inc	r0
   2AA3 E6                10354 	mov	a,@r0
   2AA4 C0 E0             10355 	push	acc
                          10356 ;	genCall
   2AA6 75 82 00          10357 	mov	dpl,#0x00
   2AA9 12s00r00          10358 	lcall	_disk_read
   2AAC AD 82             10359 	mov	r5,dpl
   2AAE E5 81             10360 	mov	a,sp
   2AB0 24 F8             10361 	add	a,#0xf8
   2AB2 F5 81             10362 	mov	sp,a
   2AB4 D0 07             10363 	pop	ar7
   2AB6 D0 06             10364 	pop	ar6
   2AB8 D0 04             10365 	pop	ar4
                          10366 ;	genCmpEq
                          10367 ;	gencjneshort
   2ABA BD 00 02          10368 	cjne	r5,#0x00,00166$
   2ABD 80 03             10369 	sjmp	00167$
   2ABF                   10370 00166$:
   2ABF 02s2Dr0F          10371 	ljmp	00131$
   2AC2                   10372 00167$:
                    2AC2  10373 	C$tff.c$943$4$6 ==.
                          10374 ;	tff.c:943: fp->sect_clust -= (BYTE)(cc - 1);
                          10375 ;	genPointerGet
                          10376 ;	genGenPointerGet
   2AC2 E5*00             10377 	mov	a,_bp
   2AC4 24 32             10378 	add	a,#0x32
   2AC6 F8                10379 	mov	r0,a
   2AC7 86 82             10380 	mov	dpl,@r0
   2AC9 08                10381 	inc	r0
   2ACA 86 83             10382 	mov	dph,@r0
   2ACC 08                10383 	inc	r0
   2ACD 86 F0             10384 	mov	b,@r0
   2ACF 12s00r00          10385 	lcall	__gptrget
   2AD2 FD                10386 	mov	r5,a
                          10387 ;	genMinus
                          10388 ;	genMinusDec
   2AD3 EC                10389 	mov	a,r4
   2AD4 14                10390 	dec	a
                          10391 ;	genMinus
   2AD5 D3                10392 	setb	c
                          10393 ;	Peephole 236.l	used r5 instead of ar5
   2AD6 9D                10394 	subb	a,r5
   2AD7 F4                10395 	cpl	a
   2AD8 FD                10396 	mov	r5,a
                          10397 ;	genPointerSet
                          10398 ;	genGenPointerSet
   2AD9 E5*00             10399 	mov	a,_bp
   2ADB 24 32             10400 	add	a,#0x32
   2ADD F8                10401 	mov	r0,a
   2ADE 86 82             10402 	mov	dpl,@r0
   2AE0 08                10403 	inc	r0
   2AE1 86 83             10404 	mov	dph,@r0
   2AE3 08                10405 	inc	r0
   2AE4 86 F0             10406 	mov	b,@r0
   2AE6 ED                10407 	mov	a,r5
   2AE7 12s00r00          10408 	lcall	__gptrput
                    2AEA  10409 	C$tff.c$944$4$6 ==.
                          10410 ;	tff.c:944: fp->curr_sect += cc - 1;
                          10411 ;	genPointerGet
                          10412 ;	genGenPointerGet
   2AEA E5*00             10413 	mov	a,_bp
   2AEC 24 28             10414 	add	a,#0x28
   2AEE F8                10415 	mov	r0,a
   2AEF 86 82             10416 	mov	dpl,@r0
   2AF1 08                10417 	inc	r0
   2AF2 86 83             10418 	mov	dph,@r0
   2AF4 08                10419 	inc	r0
   2AF5 86 F0             10420 	mov	b,@r0
   2AF7 E5*00             10421 	mov	a,_bp
   2AF9 24 2E             10422 	add	a,#0x2e
   2AFB F9                10423 	mov	r1,a
   2AFC 12s00r00          10424 	lcall	__gptrget
   2AFF F7                10425 	mov	@r1,a
   2B00 A3                10426 	inc	dptr
   2B01 12s00r00          10427 	lcall	__gptrget
   2B04 09                10428 	inc	r1
   2B05 F7                10429 	mov	@r1,a
   2B06 A3                10430 	inc	dptr
   2B07 12s00r00          10431 	lcall	__gptrget
   2B0A 09                10432 	inc	r1
   2B0B F7                10433 	mov	@r1,a
   2B0C A3                10434 	inc	dptr
   2B0D 12s00r00          10435 	lcall	__gptrget
   2B10 09                10436 	inc	r1
   2B11 F7                10437 	mov	@r1,a
                          10438 ;	genMinus
                          10439 ;	genMinusDec
   2B12 EE                10440 	mov	a,r6
   2B13 24 FF             10441 	add	a,#0xff
   2B15 FA                10442 	mov	r2,a
   2B16 EF                10443 	mov	a,r7
   2B17 34 FF             10444 	addc	a,#0xff
   2B19 FB                10445 	mov	r3,a
                          10446 ;	genCast
                          10447 ;	genPlus
                          10448 ;	Peephole 3.c	changed mov to clr
   2B1A E4                10449 	clr	a
   2B1B FC                10450 	mov	r4,a
   2B1C FD                10451 	mov	r5,a
   2B1D E5*00             10452 	mov	a,_bp
   2B1F 24 2E             10453 	add	a,#0x2e
   2B21 F8                10454 	mov	r0,a
                          10455 ;	Peephole 236.g	used r2 instead of ar2
   2B22 EA                10456 	mov	a,r2
   2B23 26                10457 	add	a,@r0
   2B24 FA                10458 	mov	r2,a
                          10459 ;	Peephole 236.g	used r3 instead of ar3
   2B25 EB                10460 	mov	a,r3
   2B26 08                10461 	inc	r0
   2B27 36                10462 	addc	a,@r0
   2B28 FB                10463 	mov	r3,a
                          10464 ;	Peephole 236.g	used r4 instead of ar4
   2B29 EC                10465 	mov	a,r4
   2B2A 08                10466 	inc	r0
   2B2B 36                10467 	addc	a,@r0
   2B2C FC                10468 	mov	r4,a
                          10469 ;	Peephole 236.g	used r5 instead of ar5
   2B2D ED                10470 	mov	a,r5
   2B2E 08                10471 	inc	r0
   2B2F 36                10472 	addc	a,@r0
   2B30 FD                10473 	mov	r5,a
                          10474 ;	genPointerSet
                          10475 ;	genGenPointerSet
   2B31 E5*00             10476 	mov	a,_bp
   2B33 24 28             10477 	add	a,#0x28
   2B35 F8                10478 	mov	r0,a
   2B36 86 82             10479 	mov	dpl,@r0
   2B38 08                10480 	inc	r0
   2B39 86 83             10481 	mov	dph,@r0
   2B3B 08                10482 	inc	r0
   2B3C 86 F0             10483 	mov	b,@r0
   2B3E EA                10484 	mov	a,r2
   2B3F 12s00r00          10485 	lcall	__gptrput
   2B42 A3                10486 	inc	dptr
   2B43 EB                10487 	mov	a,r3
   2B44 12s00r00          10488 	lcall	__gptrput
   2B47 A3                10489 	inc	dptr
   2B48 EC                10490 	mov	a,r4
   2B49 12s00r00          10491 	lcall	__gptrput
   2B4C A3                10492 	inc	dptr
   2B4D ED                10493 	mov	a,r5
   2B4E 12s00r00          10494 	lcall	__gptrput
                    2B51  10495 	C$tff.c$945$4$6 ==.
                          10496 ;	tff.c:945: rcnt = cc * 512;
                          10497 ;	genLeftShift
                          10498 ;	genLeftShiftLiteral
   2B51 E5*00             10499 	mov	a,_bp
   2B53 24 0C             10500 	add	a,#0x0c
   2B55 F8                10501 	mov	r0,a
                          10502 ;	genlshTwo
   2B56 EE                10503 	mov	a,r6
                          10504 ;	Peephole 254	optimized left shift
   2B57 2E                10505 	add	a,r6
   2B58 08                10506 	inc	r0
   2B59 F6                10507 	mov	@r0,a
   2B5A 18                10508 	dec	r0
   2B5B 76 00             10509 	mov	@r0,#0x00
                    2B5D  10510 	C$tff.c$946$4$6 ==.
                          10511 ;	tff.c:946: continue;
   2B5D 02s2Cr41          10512 	ljmp	00129$
   2B60                   10513 00122$:
                    2B60  10514 	C$tff.c$949$2$2 ==.
                          10515 ;	tff.c:949: if (!move_window(fp->curr_sect)) goto fr_error;	/* Move sector window */
                          10516 ;	genPointerGet
                          10517 ;	genGenPointerGet
   2B60 E5*00             10518 	mov	a,_bp
   2B62 24 28             10519 	add	a,#0x28
   2B64 F8                10520 	mov	r0,a
   2B65 86 82             10521 	mov	dpl,@r0
   2B67 08                10522 	inc	r0
   2B68 86 83             10523 	mov	dph,@r0
   2B6A 08                10524 	inc	r0
   2B6B 86 F0             10525 	mov	b,@r0
   2B6D 12s00r00          10526 	lcall	__gptrget
   2B70 FC                10527 	mov	r4,a
   2B71 A3                10528 	inc	dptr
   2B72 12s00r00          10529 	lcall	__gptrget
   2B75 FD                10530 	mov	r5,a
   2B76 A3                10531 	inc	dptr
   2B77 12s00r00          10532 	lcall	__gptrget
   2B7A FE                10533 	mov	r6,a
   2B7B A3                10534 	inc	dptr
   2B7C 12s00r00          10535 	lcall	__gptrget
                          10536 ;	genCall
   2B7F FF                10537 	mov	r7,a
   2B80 8C 82             10538 	mov	dpl,r4
   2B82 8D 83             10539 	mov	dph,r5
   2B84 8E F0             10540 	mov	b,r6
                          10541 ;	Peephole 191	removed redundant mov
   2B86 12s00r00          10542 	lcall	_move_window
   2B89 E5 82             10543 	mov	a,dpl
                          10544 ;	genIfx
                          10545 ;	genIfxJump
   2B8B 70 03             10546 	jnz	00168$
   2B8D 02s2Dr0F          10547 	ljmp	00131$
   2B90                   10548 00168$:
                    2B90  10549 	C$tff.c$950$2$2 ==.
                          10550 ;	tff.c:950: rcnt = 512 - (WORD)(fp->fptr % 512);			/* Copy fractional bytes from sector window */
                          10551 ;	genPointerGet
                          10552 ;	genGenPointerGet
   2B90 E5*00             10553 	mov	a,_bp
   2B92 24 1B             10554 	add	a,#0x1b
   2B94 F8                10555 	mov	r0,a
   2B95 86 82             10556 	mov	dpl,@r0
   2B97 08                10557 	inc	r0
   2B98 86 83             10558 	mov	dph,@r0
   2B9A 08                10559 	inc	r0
   2B9B 86 F0             10560 	mov	b,@r0
   2B9D 12s00r00          10561 	lcall	__gptrget
   2BA0 FC                10562 	mov	r4,a
   2BA1 A3                10563 	inc	dptr
   2BA2 12s00r00          10564 	lcall	__gptrget
   2BA5 FD                10565 	mov	r5,a
   2BA6 A3                10566 	inc	dptr
   2BA7 12s00r00          10567 	lcall	__gptrget
   2BAA FE                10568 	mov	r6,a
   2BAB A3                10569 	inc	dptr
   2BAC 12s00r00          10570 	lcall	__gptrget
   2BAF FF                10571 	mov	r7,a
                          10572 ;	genAnd
   2BB0 53 05 01          10573 	anl	ar5,#0x01
                          10574 ;	genCast
                          10575 ;	genMinus
                          10576 ;	Peephole 3.c	changed mov to clr
   2BB3 E4                10577 	clr	a
   2BB4 FE                10578 	mov	r6,a
   2BB5 FF                10579 	mov	r7,a
   2BB6 E5*00             10580 	mov	a,_bp
   2BB8 24 0C             10581 	add	a,#0x0c
   2BBA F8                10582 	mov	r0,a
                          10583 ;	Peephole 181	changed mov to clr
   2BBB E4                10584 	clr	a
   2BBC C3                10585 	clr	c
                          10586 ;	Peephole 236.l	used r4 instead of ar4
   2BBD 9C                10587 	subb	a,r4
   2BBE F6                10588 	mov	@r0,a
   2BBF 74 02             10589 	mov	a,#0x02
                          10590 ;	Peephole 236.l	used r5 instead of ar5
   2BC1 9D                10591 	subb	a,r5
   2BC2 08                10592 	inc	r0
   2BC3 F6                10593 	mov	@r0,a
                    2BC4  10594 	C$tff.c$951$2$2 ==.
                          10595 ;	tff.c:951: if (rcnt > btr) rcnt = btr;
                          10596 ;	genCmpGt
   2BC4 E5*00             10597 	mov	a,_bp
   2BC6 24 0C             10598 	add	a,#0x0c
   2BC8 F8                10599 	mov	r0,a
   2BC9 E5*00             10600 	mov	a,_bp
   2BCB 24 F9             10601 	add	a,#0xfffffff9
   2BCD F9                10602 	mov	r1,a
                          10603 ;	genCmp
   2BCE C3                10604 	clr	c
   2BCF E7                10605 	mov	a,@r1
   2BD0 96                10606 	subb	a,@r0
   2BD1 09                10607 	inc	r1
   2BD2 E7                10608 	mov	a,@r1
   2BD3 08                10609 	inc	r0
   2BD4 96                10610 	subb	a,@r0
                          10611 ;	genIfxJump
                          10612 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2BD5 50 10             10613 	jnc	00126$
                          10614 ;	Peephole 300	removed redundant label 00169$
                          10615 ;	genAssign
   2BD7 E5*00             10616 	mov	a,_bp
   2BD9 24 F9             10617 	add	a,#0xfffffff9
   2BDB F8                10618 	mov	r0,a
   2BDC E5*00             10619 	mov	a,_bp
   2BDE 24 0C             10620 	add	a,#0x0c
   2BE0 F9                10621 	mov	r1,a
   2BE1 E6                10622 	mov	a,@r0
   2BE2 F7                10623 	mov	@r1,a
   2BE3 08                10624 	inc	r0
   2BE4 09                10625 	inc	r1
   2BE5 E6                10626 	mov	a,@r0
   2BE6 F7                10627 	mov	@r1,a
   2BE7                   10628 00126$:
                    2BE7  10629 	C$tff.c$952$2$2 ==.
                          10630 ;	tff.c:952: memcpy(rbuff, &fs->win[(WORD)fp->fptr % 512], rcnt);
                          10631 ;	genPointerGet
                          10632 ;	genGenPointerGet
   2BE7 E5*00             10633 	mov	a,_bp
   2BE9 24 1B             10634 	add	a,#0x1b
   2BEB F8                10635 	mov	r0,a
   2BEC 86 82             10636 	mov	dpl,@r0
   2BEE 08                10637 	inc	r0
   2BEF 86 83             10638 	mov	dph,@r0
   2BF1 08                10639 	inc	r0
   2BF2 86 F0             10640 	mov	b,@r0
   2BF4 12s00r00          10641 	lcall	__gptrget
   2BF7 FC                10642 	mov	r4,a
   2BF8 A3                10643 	inc	dptr
   2BF9 12s00r00          10644 	lcall	__gptrget
   2BFC FD                10645 	mov	r5,a
   2BFD A3                10646 	inc	dptr
   2BFE 12s00r00          10647 	lcall	__gptrget
   2C01 FE                10648 	mov	r6,a
   2C02 A3                10649 	inc	dptr
   2C03 12s00r00          10650 	lcall	__gptrget
   2C06 FF                10651 	mov	r7,a
                          10652 ;	genCast
                          10653 ;	genAnd
   2C07 53 05 01          10654 	anl	ar5,#0x01
                          10655 ;	genPlus
   2C0A E5*00             10656 	mov	a,_bp
   2C0C 24 2B             10657 	add	a,#0x2b
   2C0E F8                10658 	mov	r0,a
                          10659 ;	Peephole 236.g	used r4 instead of ar4
   2C0F EC                10660 	mov	a,r4
   2C10 26                10661 	add	a,@r0
   2C11 FC                10662 	mov	r4,a
                          10663 ;	Peephole 236.g	used r5 instead of ar5
   2C12 ED                10664 	mov	a,r5
   2C13 08                10665 	inc	r0
   2C14 36                10666 	addc	a,@r0
   2C15 FD                10667 	mov	r5,a
   2C16 08                10668 	inc	r0
   2C17 86 06             10669 	mov	ar6,@r0
                          10670 ;	genIpush
   2C19 E5*00             10671 	mov	a,_bp
   2C1B 24 0C             10672 	add	a,#0x0c
   2C1D F8                10673 	mov	r0,a
   2C1E E6                10674 	mov	a,@r0
   2C1F C0 E0             10675 	push	acc
   2C21 08                10676 	inc	r0
   2C22 E6                10677 	mov	a,@r0
   2C23 C0 E0             10678 	push	acc
                          10679 ;	genIpush
   2C25 C0 04             10680 	push	ar4
   2C27 C0 05             10681 	push	ar5
   2C29 C0 06             10682 	push	ar6
                          10683 ;	genCall
   2C2B E5*00             10684 	mov	a,_bp
   2C2D 24 12             10685 	add	a,#0x12
   2C2F F8                10686 	mov	r0,a
   2C30 86 82             10687 	mov	dpl,@r0
   2C32 08                10688 	inc	r0
   2C33 86 83             10689 	mov	dph,@r0
   2C35 08                10690 	inc	r0
   2C36 86 F0             10691 	mov	b,@r0
   2C38 12s00r00          10692 	lcall	_memcpy
   2C3B E5 81             10693 	mov	a,sp
   2C3D 24 FB             10694 	add	a,#0xfb
   2C3F F5 81             10695 	mov	sp,a
   2C41                   10696 00129$:
                    2C41  10697 	C$tff.c$924$1$1 ==.
                          10698 ;	tff.c:924: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
                          10699 ;	genPlus
   2C41 E5*00             10700 	mov	a,_bp
   2C43 24 12             10701 	add	a,#0x12
   2C45 F8                10702 	mov	r0,a
   2C46 E5*00             10703 	mov	a,_bp
   2C48 24 0C             10704 	add	a,#0x0c
   2C4A F9                10705 	mov	r1,a
   2C4B E7                10706 	mov	a,@r1
   2C4C 26                10707 	add	a,@r0
   2C4D F6                10708 	mov	@r0,a
   2C4E 09                10709 	inc	r1
   2C4F E7                10710 	mov	a,@r1
   2C50 08                10711 	inc	r0
   2C51 36                10712 	addc	a,@r0
   2C52 F6                10713 	mov	@r0,a
                          10714 ;	genPointerGet
                          10715 ;	genGenPointerGet
   2C53 E5*00             10716 	mov	a,_bp
   2C55 24 1B             10717 	add	a,#0x1b
   2C57 F8                10718 	mov	r0,a
   2C58 86 82             10719 	mov	dpl,@r0
   2C5A 08                10720 	inc	r0
   2C5B 86 83             10721 	mov	dph,@r0
   2C5D 08                10722 	inc	r0
   2C5E 86 F0             10723 	mov	b,@r0
   2C60 E5*00             10724 	mov	a,_bp
   2C62 24 2E             10725 	add	a,#0x2e
   2C64 F9                10726 	mov	r1,a
   2C65 12s00r00          10727 	lcall	__gptrget
   2C68 F7                10728 	mov	@r1,a
   2C69 A3                10729 	inc	dptr
   2C6A 12s00r00          10730 	lcall	__gptrget
   2C6D 09                10731 	inc	r1
   2C6E F7                10732 	mov	@r1,a
   2C6F A3                10733 	inc	dptr
   2C70 12s00r00          10734 	lcall	__gptrget
   2C73 09                10735 	inc	r1
   2C74 F7                10736 	mov	@r1,a
   2C75 A3                10737 	inc	dptr
   2C76 12s00r00          10738 	lcall	__gptrget
   2C79 09                10739 	inc	r1
   2C7A F7                10740 	mov	@r1,a
                          10741 ;	genCast
   2C7B E5*00             10742 	mov	a,_bp
   2C7D 24 0C             10743 	add	a,#0x0c
   2C7F F8                10744 	mov	r0,a
   2C80 86 02             10745 	mov	ar2,@r0
   2C82 08                10746 	inc	r0
   2C83 86 03             10747 	mov	ar3,@r0
                          10748 ;	genPlus
                          10749 ;	Peephole 3.c	changed mov to clr
   2C85 E4                10750 	clr	a
   2C86 FC                10751 	mov	r4,a
   2C87 FD                10752 	mov	r5,a
   2C88 E5*00             10753 	mov	a,_bp
   2C8A 24 2E             10754 	add	a,#0x2e
   2C8C F8                10755 	mov	r0,a
                          10756 ;	Peephole 236.g	used r2 instead of ar2
   2C8D EA                10757 	mov	a,r2
   2C8E 26                10758 	add	a,@r0
   2C8F FA                10759 	mov	r2,a
                          10760 ;	Peephole 236.g	used r3 instead of ar3
   2C90 EB                10761 	mov	a,r3
   2C91 08                10762 	inc	r0
   2C92 36                10763 	addc	a,@r0
   2C93 FB                10764 	mov	r3,a
                          10765 ;	Peephole 236.g	used r4 instead of ar4
   2C94 EC                10766 	mov	a,r4
   2C95 08                10767 	inc	r0
   2C96 36                10768 	addc	a,@r0
   2C97 FC                10769 	mov	r4,a
                          10770 ;	Peephole 236.g	used r5 instead of ar5
   2C98 ED                10771 	mov	a,r5
   2C99 08                10772 	inc	r0
   2C9A 36                10773 	addc	a,@r0
   2C9B FD                10774 	mov	r5,a
                          10775 ;	genPointerSet
                          10776 ;	genGenPointerSet
   2C9C E5*00             10777 	mov	a,_bp
   2C9E 24 1B             10778 	add	a,#0x1b
   2CA0 F8                10779 	mov	r0,a
   2CA1 86 82             10780 	mov	dpl,@r0
   2CA3 08                10781 	inc	r0
   2CA4 86 83             10782 	mov	dph,@r0
   2CA6 08                10783 	inc	r0
   2CA7 86 F0             10784 	mov	b,@r0
   2CA9 EA                10785 	mov	a,r2
   2CAA 12s00r00          10786 	lcall	__gptrput
   2CAD A3                10787 	inc	dptr
   2CAE EB                10788 	mov	a,r3
   2CAF 12s00r00          10789 	lcall	__gptrput
   2CB2 A3                10790 	inc	dptr
   2CB3 EC                10791 	mov	a,r4
   2CB4 12s00r00          10792 	lcall	__gptrput
   2CB7 A3                10793 	inc	dptr
   2CB8 ED                10794 	mov	a,r5
   2CB9 12s00r00          10795 	lcall	__gptrput
                          10796 ;	genPointerGet
                          10797 ;	genGenPointerGet
   2CBC E5*00             10798 	mov	a,_bp
   2CBE 24 18             10799 	add	a,#0x18
   2CC0 F8                10800 	mov	r0,a
   2CC1 86 82             10801 	mov	dpl,@r0
   2CC3 08                10802 	inc	r0
   2CC4 86 83             10803 	mov	dph,@r0
   2CC6 08                10804 	inc	r0
   2CC7 86 F0             10805 	mov	b,@r0
   2CC9 12s00r00          10806 	lcall	__gptrget
   2CCC FA                10807 	mov	r2,a
   2CCD A3                10808 	inc	dptr
   2CCE 12s00r00          10809 	lcall	__gptrget
   2CD1 FB                10810 	mov	r3,a
                          10811 ;	genPlus
   2CD2 E5*00             10812 	mov	a,_bp
   2CD4 24 0C             10813 	add	a,#0x0c
   2CD6 F8                10814 	mov	r0,a
   2CD7 E6                10815 	mov	a,@r0
                          10816 ;	Peephole 236.a	used r2 instead of ar2
   2CD8 2A                10817 	add	a,r2
   2CD9 FA                10818 	mov	r2,a
   2CDA 08                10819 	inc	r0
   2CDB E6                10820 	mov	a,@r0
                          10821 ;	Peephole 236.b	used r3 instead of ar3
   2CDC 3B                10822 	addc	a,r3
   2CDD FB                10823 	mov	r3,a
                          10824 ;	genPointerSet
                          10825 ;	genGenPointerSet
   2CDE E5*00             10826 	mov	a,_bp
   2CE0 24 18             10827 	add	a,#0x18
   2CE2 F8                10828 	mov	r0,a
   2CE3 86 82             10829 	mov	dpl,@r0
   2CE5 08                10830 	inc	r0
   2CE6 86 83             10831 	mov	dph,@r0
   2CE8 08                10832 	inc	r0
   2CE9 86 F0             10833 	mov	b,@r0
   2CEB EA                10834 	mov	a,r2
   2CEC 12s00r00          10835 	lcall	__gptrput
   2CEF A3                10836 	inc	dptr
   2CF0 EB                10837 	mov	a,r3
   2CF1 12s00r00          10838 	lcall	__gptrput
                          10839 ;	genMinus
   2CF4 E5*00             10840 	mov	a,_bp
   2CF6 24 F9             10841 	add	a,#0xfffffff9
   2CF8 F8                10842 	mov	r0,a
   2CF9 E5*00             10843 	mov	a,_bp
   2CFB 24 0C             10844 	add	a,#0x0c
   2CFD F9                10845 	mov	r1,a
   2CFE E6                10846 	mov	a,@r0
   2CFF C3                10847 	clr	c
   2D00 97                10848 	subb	a,@r1
   2D01 F6                10849 	mov	@r0,a
   2D02 08                10850 	inc	r0
   2D03 E6                10851 	mov	a,@r0
   2D04 09                10852 	inc	r1
   2D05 97                10853 	subb	a,@r1
   2D06 F6                10854 	mov	@r0,a
   2D07 02s28r35          10855 	ljmp	00127$
   2D0A                   10856 00130$:
                    2D0A  10857 	C$tff.c$955$1$1 ==.
                          10858 ;	tff.c:955: return FR_OK;
                          10859 ;	genRet
   2D0A 75 82 00          10860 	mov	dpl,#0x00
                    2D0D  10861 	C$tff.c$957$1$1 ==.
                          10862 ;	tff.c:957: fr_error:	/* Abort this function due to an unrecoverable error */
                          10863 ;	Peephole 112.b	changed ljmp to sjmp
   2D0D 80 28             10864 	sjmp	00132$
   2D0F                   10865 00131$:
                    2D0F  10866 	C$tff.c$958$1$1 ==.
                          10867 ;	tff.c:958: fp->flag |= FA__ERROR;
                          10868 ;	genPointerGet
                          10869 ;	genGenPointerGet
   2D0F E5*00             10870 	mov	a,_bp
   2D11 24 38             10871 	add	a,#0x38
   2D13 F8                10872 	mov	r0,a
   2D14 86 82             10873 	mov	dpl,@r0
   2D16 08                10874 	inc	r0
   2D17 86 83             10875 	mov	dph,@r0
   2D19 08                10876 	inc	r0
   2D1A 86 F0             10877 	mov	b,@r0
   2D1C 12s00r00          10878 	lcall	__gptrget
   2D1F FA                10879 	mov	r2,a
                          10880 ;	genOr
   2D20 43 02 80          10881 	orl	ar2,#0x80
                          10882 ;	genPointerSet
                          10883 ;	genGenPointerSet
   2D23 E5*00             10884 	mov	a,_bp
   2D25 24 38             10885 	add	a,#0x38
   2D27 F8                10886 	mov	r0,a
   2D28 86 82             10887 	mov	dpl,@r0
   2D2A 08                10888 	inc	r0
   2D2B 86 83             10889 	mov	dph,@r0
   2D2D 08                10890 	inc	r0
   2D2E 86 F0             10891 	mov	b,@r0
   2D30 EA                10892 	mov	a,r2
   2D31 12s00r00          10893 	lcall	__gptrput
                    2D34  10894 	C$tff.c$959$1$1 ==.
                          10895 ;	tff.c:959: return FR_RW_ERROR;
                          10896 ;	genRet
   2D34 75 82 08          10897 	mov	dpl,#0x08
   2D37                   10898 00132$:
   2D37 85*00 81          10899 	mov	sp,_bp
   2D3A D0*00             10900 	pop	_bp
                    2D3C  10901 	C$tff.c$960$1$1 ==.
                    2D3C  10902 	XG$f_read$0$0 ==.
   2D3C 22                10903 	ret
                          10904 ;------------------------------------------------------------
                          10905 ;Allocation info for local variables in function 'f_close'
                          10906 ;------------------------------------------------------------
                          10907 ;fp                        Allocated to registers r2 r3 r4 
                          10908 ;res                       Allocated to registers r5 
                          10909 ;sloc0                     Allocated to stack - offset 1
                          10910 ;------------------------------------------------------------
                    2D3D  10911 	G$f_close$0$0 ==.
                    2D3D  10912 	C$tff.c$1092$1$1 ==.
                          10913 ;	tff.c:1092: FRESULT f_close (
                          10914 ;	-----------------------------------------
                          10915 ;	 function f_close
                          10916 ;	-----------------------------------------
   2D3D                   10917 _f_close:
   2D3D C0*00             10918 	push	_bp
   2D3F 85 81*00          10919 	mov	_bp,sp
   2D42 05 81             10920 	inc	sp
   2D44 05 81             10921 	inc	sp
                          10922 ;	genReceive
                    2D46  10923 	C$tff.c$1102$1$1 ==.
                          10924 ;	tff.c:1102: res = validate(fp->fs, fp->id);
                          10925 ;	genPointerGet
                          10926 ;	genGenPointerGet
   2D46 AA 82             10927 	mov	r2,dpl
   2D48 AB 83             10928 	mov	r3,dph
   2D4A AC F0             10929 	mov	r4,b
                          10930 ;	Peephole 238.d	removed 3 redundant moves
   2D4C A8*00             10931 	mov	r0,_bp
   2D4E 08                10932 	inc	r0
   2D4F 12s00r00          10933 	lcall	__gptrget
   2D52 F6                10934 	mov	@r0,a
   2D53 A3                10935 	inc	dptr
   2D54 12s00r00          10936 	lcall	__gptrget
   2D57 08                10937 	inc	r0
   2D58 F6                10938 	mov	@r0,a
                          10939 ;	genPlus
                          10940 ;     genPlusIncr
   2D59 74 04             10941 	mov	a,#0x04
                          10942 ;	Peephole 236.a	used r2 instead of ar2
   2D5B 2A                10943 	add	a,r2
   2D5C FA                10944 	mov	r2,a
                          10945 ;	Peephole 181	changed mov to clr
   2D5D E4                10946 	clr	a
                          10947 ;	Peephole 236.b	used r3 instead of ar3
   2D5E 3B                10948 	addc	a,r3
   2D5F FB                10949 	mov	r3,a
                          10950 ;	genPointerGet
                          10951 ;	genGenPointerGet
   2D60 8A 82             10952 	mov	dpl,r2
   2D62 8B 83             10953 	mov	dph,r3
   2D64 8C F0             10954 	mov	b,r4
   2D66 12s00r00          10955 	lcall	__gptrget
   2D69 FF                10956 	mov	r7,a
   2D6A A3                10957 	inc	dptr
   2D6B 12s00r00          10958 	lcall	__gptrget
   2D6E FD                10959 	mov	r5,a
   2D6F A3                10960 	inc	dptr
   2D70 12s00r00          10961 	lcall	__gptrget
   2D73 FE                10962 	mov	r6,a
                          10963 ;	genIpush
   2D74 C0 02             10964 	push	ar2
   2D76 C0 03             10965 	push	ar3
   2D78 C0 04             10966 	push	ar4
   2D7A A8*00             10967 	mov	r0,_bp
   2D7C 08                10968 	inc	r0
   2D7D E6                10969 	mov	a,@r0
   2D7E C0 E0             10970 	push	acc
   2D80 08                10971 	inc	r0
   2D81 E6                10972 	mov	a,@r0
   2D82 C0 E0             10973 	push	acc
                          10974 ;	genCall
   2D84 8F 82             10975 	mov	dpl,r7
   2D86 8D 83             10976 	mov	dph,r5
   2D88 8E F0             10977 	mov	b,r6
   2D8A 12s21r7F          10978 	lcall	_validate
   2D8D AD 82             10979 	mov	r5,dpl
   2D8F 15 81             10980 	dec	sp
   2D91 15 81             10981 	dec	sp
   2D93 D0 04             10982 	pop	ar4
   2D95 D0 03             10983 	pop	ar3
   2D97 D0 02             10984 	pop	ar2
                          10985 ;	genAssign
                    2D99  10986 	C$tff.c$1104$1$1 ==.
                          10987 ;	tff.c:1104: if (res == FR_OK)
                          10988 ;	genIfx
   2D99 ED                10989 	mov	a,r5
                          10990 ;	genIfxJump
                          10991 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2D9A 70 14             10992 	jnz	00102$
                          10993 ;	Peephole 300	removed redundant label 00106$
                    2D9C  10994 	C$tff.c$1105$1$1 ==.
                          10995 ;	tff.c:1105: fp->fs = NULL;
                          10996 ;	genPointerSet
                          10997 ;	genGenPointerSet
   2D9C 8A 82             10998 	mov	dpl,r2
   2D9E 8B 83             10999 	mov	dph,r3
   2DA0 8C F0             11000 	mov	b,r4
                          11001 ;	Peephole 181	changed mov to clr
   2DA2 E4                11002 	clr	a
   2DA3 12s00r00          11003 	lcall	__gptrput
   2DA6 A3                11004 	inc	dptr
                          11005 ;	Peephole 181	changed mov to clr
   2DA7 E4                11006 	clr	a
   2DA8 12s00r00          11007 	lcall	__gptrput
   2DAB A3                11008 	inc	dptr
                          11009 ;	Peephole 181	changed mov to clr
   2DAC E4                11010 	clr	a
   2DAD 12s00r00          11011 	lcall	__gptrput
   2DB0                   11012 00102$:
                    2DB0  11013 	C$tff.c$1107$1$1 ==.
                          11014 ;	tff.c:1107: return res;
                          11015 ;	genRet
   2DB0 8D 82             11016 	mov	dpl,r5
                          11017 ;	Peephole 300	removed redundant label 00103$
   2DB2 85*00 81          11018 	mov	sp,_bp
   2DB5 D0*00             11019 	pop	_bp
                    2DB7  11020 	C$tff.c$1108$1$1 ==.
                    2DB7  11021 	XG$f_close$0$0 ==.
   2DB7 22                11022 	ret
                          11023 ;------------------------------------------------------------
                          11024 ;Allocation info for local variables in function 'f_lseek'
                          11025 ;------------------------------------------------------------
                          11026 ;ofs                       Allocated to stack - offset -6
                          11027 ;fp                        Allocated to stack - offset 1
                          11028 ;clust                     Allocated to stack - offset 4
                          11029 ;csize                     Allocated to stack - offset 8
                          11030 ;csect                     Allocated to registers r6 
                          11031 ;res                       Allocated to registers r5 
                          11032 ;fs                        Allocated to stack - offset 12
                          11033 ;sloc0                     Allocated to stack - offset 15
                          11034 ;sloc1                     Allocated to stack - offset 19
                          11035 ;sloc2                     Allocated to stack - offset 22
                          11036 ;sloc3                     Allocated to stack - offset 25
                          11037 ;sloc4                     Allocated to stack - offset 28
                          11038 ;sloc5                     Allocated to stack - offset 31
                          11039 ;------------------------------------------------------------
                    2DB8  11040 	G$f_lseek$0$0 ==.
                    2DB8  11041 	C$tff.c$1118$1$1 ==.
                          11042 ;	tff.c:1118: FRESULT f_lseek (
                          11043 ;	-----------------------------------------
                          11044 ;	 function f_lseek
                          11045 ;	-----------------------------------------
   2DB8                   11046 _f_lseek:
   2DB8 C0*00             11047 	push	_bp
   2DBA 85 81*00          11048 	mov	_bp,sp
                          11049 ;     genReceive
   2DBD C0 82             11050 	push	dpl
   2DBF C0 83             11051 	push	dph
   2DC1 C0 F0             11052 	push	b
   2DC3 E5 81             11053 	mov	a,sp
   2DC5 24 22             11054 	add	a,#0x22
   2DC7 F5 81             11055 	mov	sp,a
                    2DC9  11056 	C$tff.c$1127$1$1 ==.
                          11057 ;	tff.c:1127: FATFS *fs = fp->fs;
                          11058 ;	genPlus
   2DC9 A8*00             11059 	mov	r0,_bp
   2DCB 08                11060 	inc	r0
                          11061 ;     genPlusIncr
   2DCC 74 04             11062 	mov	a,#0x04
   2DCE 26                11063 	add	a,@r0
   2DCF FD                11064 	mov	r5,a
                          11065 ;	Peephole 181	changed mov to clr
   2DD0 E4                11066 	clr	a
   2DD1 08                11067 	inc	r0
   2DD2 36                11068 	addc	a,@r0
   2DD3 FE                11069 	mov	r6,a
   2DD4 08                11070 	inc	r0
   2DD5 86 07             11071 	mov	ar7,@r0
                          11072 ;	genPointerGet
                          11073 ;	genGenPointerGet
   2DD7 8D 82             11074 	mov	dpl,r5
   2DD9 8E 83             11075 	mov	dph,r6
   2DDB 8F F0             11076 	mov	b,r7
   2DDD 12s00r00          11077 	lcall	__gptrget
   2DE0 FD                11078 	mov	r5,a
   2DE1 A3                11079 	inc	dptr
   2DE2 12s00r00          11080 	lcall	__gptrget
   2DE5 FE                11081 	mov	r6,a
   2DE6 A3                11082 	inc	dptr
   2DE7 12s00r00          11083 	lcall	__gptrget
   2DEA FF                11084 	mov	r7,a
                          11085 ;	genAssign
   2DEB E5*00             11086 	mov	a,_bp
   2DED 24 0C             11087 	add	a,#0x0c
   2DEF F8                11088 	mov	r0,a
   2DF0 A6 05             11089 	mov	@r0,ar5
   2DF2 08                11090 	inc	r0
   2DF3 A6 06             11091 	mov	@r0,ar6
   2DF5 08                11092 	inc	r0
   2DF6 A6 07             11093 	mov	@r0,ar7
                    2DF8  11094 	C$tff.c$1130$1$1 ==.
                          11095 ;	tff.c:1130: res = validate(fs, fp->id);			/* Check validity of the object */
                          11096 ;	genPointerGet
                          11097 ;	genGenPointerGet
   2DF8 A8*00             11098 	mov	r0,_bp
   2DFA 08                11099 	inc	r0
   2DFB 86 82             11100 	mov	dpl,@r0
   2DFD 08                11101 	inc	r0
   2DFE 86 83             11102 	mov	dph,@r0
   2E00 08                11103 	inc	r0
   2E01 86 F0             11104 	mov	b,@r0
   2E03 12s00r00          11105 	lcall	__gptrget
   2E06 FD                11106 	mov	r5,a
   2E07 A3                11107 	inc	dptr
   2E08 12s00r00          11108 	lcall	__gptrget
   2E0B FE                11109 	mov	r6,a
                          11110 ;	genIpush
   2E0C C0 05             11111 	push	ar5
   2E0E C0 06             11112 	push	ar6
                          11113 ;	genCall
   2E10 E5*00             11114 	mov	a,_bp
   2E12 24 0C             11115 	add	a,#0x0c
   2E14 F8                11116 	mov	r0,a
   2E15 86 82             11117 	mov	dpl,@r0
   2E17 08                11118 	inc	r0
   2E18 86 83             11119 	mov	dph,@r0
   2E1A 08                11120 	inc	r0
   2E1B 86 F0             11121 	mov	b,@r0
   2E1D 12s21r7F          11122 	lcall	_validate
   2E20 AD 82             11123 	mov	r5,dpl
   2E22 15 81             11124 	dec	sp
   2E24 15 81             11125 	dec	sp
                          11126 ;	genAssign
                    2E26  11127 	C$tff.c$1131$1$1 ==.
                          11128 ;	tff.c:1131: if (res != FR_OK) return res;
                          11129 ;	genCmpEq
                          11130 ;	gencjneshort
   2E26 BD 00 02          11131 	cjne	r5,#0x00,00134$
                          11132 ;	Peephole 112.b	changed ljmp to sjmp
   2E29 80 05             11133 	sjmp	00102$
   2E2B                   11134 00134$:
                          11135 ;	genRet
   2E2B 8D 82             11136 	mov	dpl,r5
   2E2D 02s32r58          11137 	ljmp	00122$
   2E30                   11138 00102$:
                    2E30  11139 	C$tff.c$1133$1$1 ==.
                          11140 ;	tff.c:1133: if (fp->flag & FA__ERROR) return FR_RW_ERROR;
                          11141 ;	genPlus
   2E30 A8*00             11142 	mov	r0,_bp
   2E32 08                11143 	inc	r0
   2E33 E5*00             11144 	mov	a,_bp
   2E35 24 19             11145 	add	a,#0x19
   2E37 F9                11146 	mov	r1,a
                          11147 ;     genPlusIncr
   2E38 74 02             11148 	mov	a,#0x02
   2E3A 26                11149 	add	a,@r0
   2E3B F7                11150 	mov	@r1,a
                          11151 ;	Peephole 181	changed mov to clr
   2E3C E4                11152 	clr	a
   2E3D 08                11153 	inc	r0
   2E3E 36                11154 	addc	a,@r0
   2E3F 09                11155 	inc	r1
   2E40 F7                11156 	mov	@r1,a
   2E41 08                11157 	inc	r0
   2E42 09                11158 	inc	r1
   2E43 E6                11159 	mov	a,@r0
   2E44 F7                11160 	mov	@r1,a
                          11161 ;	genIpush
                          11162 ;	genPointerGet
                          11163 ;	genGenPointerGet
   2E45 E5*00             11164 	mov	a,_bp
   2E47 24 19             11165 	add	a,#0x19
   2E49 F8                11166 	mov	r0,a
   2E4A 86 82             11167 	mov	dpl,@r0
   2E4C 08                11168 	inc	r0
   2E4D 86 83             11169 	mov	dph,@r0
   2E4F 08                11170 	inc	r0
   2E50 86 F0             11171 	mov	b,@r0
   2E52 12s00r00          11172 	lcall	__gptrget
                          11173 ;	genAnd
   2E55 FA                11174 	mov	r2,a
                          11175 ;	Peephole 105	removed redundant mov
   2E56 54 80             11176 	anl	a,#0x80
                          11177 ;	genIpop
                          11178 ;	genIfx
                          11179 ;	genIfxJump
                          11180 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2E58 60 06             11181 	jz	00104$
                          11182 ;	Peephole 300	removed redundant label 00135$
                          11183 ;	genRet
   2E5A 75 82 08          11184 	mov	dpl,#0x08
   2E5D 02s32r58          11185 	ljmp	00122$
   2E60                   11186 00104$:
                    2E60  11187 	C$tff.c$1137$1$1 ==.
                          11188 ;	tff.c:1137: if (ofs > fp->fsize)
                          11189 ;	genIpush
                          11190 ;	genPlus
   2E60 A8*00             11191 	mov	r0,_bp
   2E62 08                11192 	inc	r0
                          11193 ;     genPlusIncr
   2E63 74 0B             11194 	mov	a,#0x0B
   2E65 26                11195 	add	a,@r0
   2E66 FD                11196 	mov	r5,a
                          11197 ;	Peephole 181	changed mov to clr
   2E67 E4                11198 	clr	a
   2E68 08                11199 	inc	r0
   2E69 36                11200 	addc	a,@r0
   2E6A FE                11201 	mov	r6,a
   2E6B 08                11202 	inc	r0
   2E6C 86 07             11203 	mov	ar7,@r0
                          11204 ;	genPointerGet
                          11205 ;	genGenPointerGet
   2E6E 8D 82             11206 	mov	dpl,r5
   2E70 8E 83             11207 	mov	dph,r6
   2E72 8F F0             11208 	mov	b,r7
   2E74 12s00r00          11209 	lcall	__gptrget
   2E77 FA                11210 	mov	r2,a
   2E78 A3                11211 	inc	dptr
   2E79 12s00r00          11212 	lcall	__gptrget
   2E7C FB                11213 	mov	r3,a
   2E7D A3                11214 	inc	dptr
   2E7E 12s00r00          11215 	lcall	__gptrget
   2E81 FC                11216 	mov	r4,a
   2E82 A3                11217 	inc	dptr
   2E83 12s00r00          11218 	lcall	__gptrget
   2E86 FD                11219 	mov	r5,a
                          11220 ;	genCmpGt
   2E87 E5*00             11221 	mov	a,_bp
   2E89 24 FA             11222 	add	a,#0xfffffffa
   2E8B F8                11223 	mov	r0,a
                          11224 ;	genCmp
   2E8C C3                11225 	clr	c
   2E8D EA                11226 	mov	a,r2
   2E8E 96                11227 	subb	a,@r0
   2E8F EB                11228 	mov	a,r3
   2E90 08                11229 	inc	r0
   2E91 96                11230 	subb	a,@r0
   2E92 EC                11231 	mov	a,r4
   2E93 08                11232 	inc	r0
   2E94 96                11233 	subb	a,@r0
   2E95 ED                11234 	mov	a,r5
   2E96 08                11235 	inc	r0
   2E97 96                11236 	subb	a,@r0
                          11237 ;	genIpop
                          11238 ;	genIfx
                          11239 ;	genIfxJump
                          11240 ;	Peephole 108.c	removed ljmp by inverse jump logic
                          11241 ;	Peephole 128	jump optimization
   2E98 50 10             11242 	jnc	00106$
                          11243 ;	Peephole 300	removed redundant label 00136$
                    2E9A  11244 	C$tff.c$1139$1$1 ==.
                          11245 ;	tff.c:1139: ofs = fp->fsize;
                          11246 ;	genAssign
   2E9A E5*00             11247 	mov	a,_bp
   2E9C 24 FA             11248 	add	a,#0xfffffffa
   2E9E F8                11249 	mov	r0,a
   2E9F A6 02             11250 	mov	@r0,ar2
   2EA1 08                11251 	inc	r0
   2EA2 A6 03             11252 	mov	@r0,ar3
   2EA4 08                11253 	inc	r0
   2EA5 A6 04             11254 	mov	@r0,ar4
   2EA7 08                11255 	inc	r0
   2EA8 A6 05             11256 	mov	@r0,ar5
   2EAA                   11257 00106$:
                    2EAA  11258 	C$tff.c$1140$1$1 ==.
                          11259 ;	tff.c:1140: fp->fptr = 0; fp->sect_clust = 1;		/* Set file R/W pointer to top of the file */
                          11260 ;	genPlus
   2EAA A8*00             11261 	mov	r0,_bp
   2EAC 08                11262 	inc	r0
   2EAD E5*00             11263 	mov	a,_bp
   2EAF 24 0F             11264 	add	a,#0x0f
   2EB1 F9                11265 	mov	r1,a
                          11266 ;     genPlusIncr
   2EB2 74 07             11267 	mov	a,#0x07
   2EB4 26                11268 	add	a,@r0
   2EB5 F7                11269 	mov	@r1,a
                          11270 ;	Peephole 181	changed mov to clr
   2EB6 E4                11271 	clr	a
   2EB7 08                11272 	inc	r0
   2EB8 36                11273 	addc	a,@r0
   2EB9 09                11274 	inc	r1
   2EBA F7                11275 	mov	@r1,a
   2EBB 08                11276 	inc	r0
   2EBC 09                11277 	inc	r1
   2EBD E6                11278 	mov	a,@r0
   2EBE F7                11279 	mov	@r1,a
                          11280 ;	genPointerSet
                          11281 ;	genGenPointerSet
   2EBF E5*00             11282 	mov	a,_bp
   2EC1 24 0F             11283 	add	a,#0x0f
   2EC3 F8                11284 	mov	r0,a
   2EC4 86 82             11285 	mov	dpl,@r0
   2EC6 08                11286 	inc	r0
   2EC7 86 83             11287 	mov	dph,@r0
   2EC9 08                11288 	inc	r0
   2ECA 86 F0             11289 	mov	b,@r0
                          11290 ;	Peephole 181	changed mov to clr
   2ECC E4                11291 	clr	a
   2ECD 12s00r00          11292 	lcall	__gptrput
   2ED0 A3                11293 	inc	dptr
                          11294 ;	Peephole 181	changed mov to clr
   2ED1 E4                11295 	clr	a
   2ED2 12s00r00          11296 	lcall	__gptrput
   2ED5 A3                11297 	inc	dptr
                          11298 ;	Peephole 181	changed mov to clr
   2ED6 E4                11299 	clr	a
   2ED7 12s00r00          11300 	lcall	__gptrput
   2EDA A3                11301 	inc	dptr
                          11302 ;	Peephole 181	changed mov to clr
   2EDB E4                11303 	clr	a
   2EDC 12s00r00          11304 	lcall	__gptrput
                          11305 ;	genPlus
   2EDF A8*00             11306 	mov	r0,_bp
   2EE1 08                11307 	inc	r0
   2EE2 E5*00             11308 	mov	a,_bp
   2EE4 24 13             11309 	add	a,#0x13
   2EE6 F9                11310 	mov	r1,a
                          11311 ;     genPlusIncr
   2EE7 74 03             11312 	mov	a,#0x03
   2EE9 26                11313 	add	a,@r0
   2EEA F7                11314 	mov	@r1,a
                          11315 ;	Peephole 181	changed mov to clr
   2EEB E4                11316 	clr	a
   2EEC 08                11317 	inc	r0
   2EED 36                11318 	addc	a,@r0
   2EEE 09                11319 	inc	r1
   2EEF F7                11320 	mov	@r1,a
   2EF0 08                11321 	inc	r0
   2EF1 09                11322 	inc	r1
   2EF2 E6                11323 	mov	a,@r0
   2EF3 F7                11324 	mov	@r1,a
                          11325 ;	genPointerSet
                          11326 ;	genGenPointerSet
   2EF4 E5*00             11327 	mov	a,_bp
   2EF6 24 13             11328 	add	a,#0x13
   2EF8 F8                11329 	mov	r0,a
   2EF9 86 82             11330 	mov	dpl,@r0
   2EFB 08                11331 	inc	r0
   2EFC 86 83             11332 	mov	dph,@r0
   2EFE 08                11333 	inc	r0
   2EFF 86 F0             11334 	mov	b,@r0
   2F01 74 01             11335 	mov	a,#0x01
   2F03 12s00r00          11336 	lcall	__gptrput
                    2F06  11337 	C$tff.c$1143$1$1 ==.
                          11338 ;	tff.c:1143: if (ofs) {
                          11339 ;	genIfx
   2F06 E5*00             11340 	mov	a,_bp
   2F08 24 FA             11341 	add	a,#0xfffffffa
   2F0A F8                11342 	mov	r0,a
   2F0B E6                11343 	mov	a,@r0
   2F0C 08                11344 	inc	r0
   2F0D 46                11345 	orl	a,@r0
   2F0E 08                11346 	inc	r0
   2F0F 46                11347 	orl	a,@r0
   2F10 08                11348 	inc	r0
   2F11 46                11349 	orl	a,@r0
                          11350 ;	genIfxJump
   2F12 70 03             11351 	jnz	00137$
   2F14 02s32r2B          11352 	ljmp	00120$
   2F17                   11353 00137$:
                    2F17  11354 	C$tff.c$1144$1$1 ==.
                          11355 ;	tff.c:1144: clust = fp->org_clust;	/* Get start cluster */
                          11356 ;	genIpush
                          11357 ;	genPlus
   2F17 A8*00             11358 	mov	r0,_bp
   2F19 08                11359 	inc	r0
                          11360 ;     genPlusIncr
   2F1A 74 0F             11361 	mov	a,#0x0F
   2F1C 26                11362 	add	a,@r0
   2F1D FD                11363 	mov	r5,a
                          11364 ;	Peephole 181	changed mov to clr
   2F1E E4                11365 	clr	a
   2F1F 08                11366 	inc	r0
   2F20 36                11367 	addc	a,@r0
   2F21 FE                11368 	mov	r6,a
   2F22 08                11369 	inc	r0
   2F23 86 07             11370 	mov	ar7,@r0
                          11371 ;	genPointerGet
                          11372 ;	genGenPointerGet
   2F25 8D 82             11373 	mov	dpl,r5
   2F27 8E 83             11374 	mov	dph,r6
   2F29 8F F0             11375 	mov	b,r7
   2F2B 12s00r00          11376 	lcall	__gptrget
   2F2E FA                11377 	mov	r2,a
   2F2F A3                11378 	inc	dptr
   2F30 12s00r00          11379 	lcall	__gptrget
   2F33 FB                11380 	mov	r3,a
   2F34 A3                11381 	inc	dptr
   2F35 12s00r00          11382 	lcall	__gptrget
   2F38 FC                11383 	mov	r4,a
   2F39 A3                11384 	inc	dptr
   2F3A 12s00r00          11385 	lcall	__gptrget
   2F3D FD                11386 	mov	r5,a
                          11387 ;	genAssign
   2F3E E5*00             11388 	mov	a,_bp
   2F40 24 04             11389 	add	a,#0x04
   2F42 F8                11390 	mov	r0,a
   2F43 A6 02             11391 	mov	@r0,ar2
   2F45 08                11392 	inc	r0
   2F46 A6 03             11393 	mov	@r0,ar3
   2F48 08                11394 	inc	r0
   2F49 A6 04             11395 	mov	@r0,ar4
   2F4B 08                11396 	inc	r0
   2F4C A6 05             11397 	mov	@r0,ar5
                    2F4E  11398 	C$tff.c$1152$1$1 ==.
                          11399 ;	tff.c:1152: if (clust) {			/* If the file has a cluster chain, it can be followed */
                          11400 ;	genIpop
                          11401 ;	genIfx
   2F4E E5*00             11402 	mov	a,_bp
   2F50 24 04             11403 	add	a,#0x04
   2F52 F8                11404 	mov	r0,a
   2F53 E6                11405 	mov	a,@r0
   2F54 08                11406 	inc	r0
   2F55 46                11407 	orl	a,@r0
   2F56 08                11408 	inc	r0
   2F57 46                11409 	orl	a,@r0
   2F58 08                11410 	inc	r0
   2F59 46                11411 	orl	a,@r0
                          11412 ;	genIfxJump
   2F5A 70 03             11413 	jnz	00138$
   2F5C 02s32r2B          11414 	ljmp	00120$
   2F5F                   11415 00138$:
                    2F5F  11416 	C$tff.c$1153$1$1 ==.
                          11417 ;	tff.c:1153: csize = (DWORD)fs->sects_clust * 512;		/* Cluster size in unit of byte */
                          11418 ;	genIpush
                          11419 ;	genPlus
   2F5F E5*00             11420 	mov	a,_bp
   2F61 24 0C             11421 	add	a,#0x0c
   2F63 F8                11422 	mov	r0,a
   2F64 E5*00             11423 	mov	a,_bp
   2F66 24 16             11424 	add	a,#0x16
   2F68 F9                11425 	mov	r1,a
                          11426 ;     genPlusIncr
   2F69 74 1D             11427 	mov	a,#0x1D
   2F6B 26                11428 	add	a,@r0
   2F6C F7                11429 	mov	@r1,a
                          11430 ;	Peephole 181	changed mov to clr
   2F6D E4                11431 	clr	a
   2F6E 08                11432 	inc	r0
   2F6F 36                11433 	addc	a,@r0
   2F70 09                11434 	inc	r1
   2F71 F7                11435 	mov	@r1,a
   2F72 08                11436 	inc	r0
   2F73 09                11437 	inc	r1
   2F74 E6                11438 	mov	a,@r0
   2F75 F7                11439 	mov	@r1,a
                          11440 ;	genPointerGet
                          11441 ;	genGenPointerGet
   2F76 E5*00             11442 	mov	a,_bp
   2F78 24 16             11443 	add	a,#0x16
   2F7A F8                11444 	mov	r0,a
   2F7B 86 82             11445 	mov	dpl,@r0
   2F7D 08                11446 	inc	r0
   2F7E 86 83             11447 	mov	dph,@r0
   2F80 08                11448 	inc	r0
   2F81 86 F0             11449 	mov	b,@r0
   2F83 12s00r00          11450 	lcall	__gptrget
   2F86 FD                11451 	mov	r5,a
                          11452 ;	genCast
                          11453 ;	genLeftShift
                          11454 ;	genLeftShiftLiteral
                          11455 ;	Peephole 3.c	changed mov to clr
                          11456 ;	Peephole 3.b	changed mov to clr
   2F87 E4                11457 	clr	a
   2F88 FE                11458 	mov	r6,a
   2F89 FF                11459 	mov	r7,a
   2F8A FA                11460 	mov	r2,a
   2F8B E5*00             11461 	mov	a,_bp
   2F8D 24 08             11462 	add	a,#0x08
   2F8F F8                11463 	mov	r0,a
                          11464 ;	genlshFour
   2F90 ED                11465 	mov	a,r5
                          11466 ;	Peephole 254	optimized left shift
   2F91 2D                11467 	add	a,r5
   2F92 08                11468 	inc	r0
   2F93 F6                11469 	mov	@r0,a
   2F94 EE                11470 	mov	a,r6
   2F95 33                11471 	rlc	a
   2F96 08                11472 	inc	r0
   2F97 F6                11473 	mov	@r0,a
   2F98 EF                11474 	mov	a,r7
   2F99 33                11475 	rlc	a
   2F9A 08                11476 	inc	r0
   2F9B F6                11477 	mov	@r0,a
   2F9C 18                11478 	dec	r0
   2F9D 18                11479 	dec	r0
   2F9E 18                11480 	dec	r0
   2F9F 76 00             11481 	mov	@r0,#0x00
                    2FA1  11482 	C$tff.c$1187$1$1 ==.
                          11483 ;	tff.c:1187: return FR_RW_ERROR;
                          11484 ;	genIpop
                    2FA1  11485 	C$tff.c$1153$4$4 ==.
                          11486 ;	tff.c:1153: csize = (DWORD)fs->sects_clust * 512;		/* Cluster size in unit of byte */
                          11487 ;	genPlus
   2FA1 E5*00             11488 	mov	a,_bp
   2FA3 24 0C             11489 	add	a,#0x0c
   2FA5 F8                11490 	mov	r0,a
   2FA6 E5*00             11491 	mov	a,_bp
   2FA8 24 1C             11492 	add	a,#0x1c
   2FAA F9                11493 	mov	r1,a
                          11494 ;     genPlusIncr
   2FAB 74 18             11495 	mov	a,#0x18
   2FAD 26                11496 	add	a,@r0
   2FAE F7                11497 	mov	@r1,a
                          11498 ;	Peephole 181	changed mov to clr
   2FAF E4                11499 	clr	a
   2FB0 08                11500 	inc	r0
   2FB1 36                11501 	addc	a,@r0
   2FB2 09                11502 	inc	r1
   2FB3 F7                11503 	mov	@r1,a
   2FB4 08                11504 	inc	r0
   2FB5 09                11505 	inc	r1
   2FB6 E6                11506 	mov	a,@r0
   2FB7 F7                11507 	mov	@r1,a
   2FB8                   11508 00115$:
                    2FB8  11509 	C$tff.c$1155$1$1 ==.
                          11510 ;	tff.c:1155: fp->curr_clust = clust;					/* Update current cluster */
                          11511 ;	genIpush
                          11512 ;	genPlus
   2FB8 A8*00             11513 	mov	r0,_bp
   2FBA 08                11514 	inc	r0
                          11515 ;     genPlusIncr
   2FBB 74 13             11516 	mov	a,#0x13
   2FBD 26                11517 	add	a,@r0
   2FBE FA                11518 	mov	r2,a
                          11519 ;	Peephole 181	changed mov to clr
   2FBF E4                11520 	clr	a
   2FC0 08                11521 	inc	r0
   2FC1 36                11522 	addc	a,@r0
   2FC2 FB                11523 	mov	r3,a
   2FC3 08                11524 	inc	r0
   2FC4 86 04             11525 	mov	ar4,@r0
                          11526 ;	genPointerSet
                          11527 ;	genGenPointerSet
   2FC6 8A 82             11528 	mov	dpl,r2
   2FC8 8B 83             11529 	mov	dph,r3
   2FCA 8C F0             11530 	mov	b,r4
   2FCC E5*00             11531 	mov	a,_bp
   2FCE 24 04             11532 	add	a,#0x04
   2FD0 F8                11533 	mov	r0,a
   2FD1 E6                11534 	mov	a,@r0
   2FD2 12s00r00          11535 	lcall	__gptrput
   2FD5 A3                11536 	inc	dptr
   2FD6 08                11537 	inc	r0
   2FD7 E6                11538 	mov	a,@r0
   2FD8 12s00r00          11539 	lcall	__gptrput
   2FDB A3                11540 	inc	dptr
   2FDC 08                11541 	inc	r0
   2FDD E6                11542 	mov	a,@r0
   2FDE 12s00r00          11543 	lcall	__gptrput
   2FE1 A3                11544 	inc	dptr
   2FE2 08                11545 	inc	r0
   2FE3 E6                11546 	mov	a,@r0
   2FE4 12s00r00          11547 	lcall	__gptrput
                    2FE7  11548 	C$tff.c$1156$4$4 ==.
                          11549 ;	tff.c:1156: if (ofs <= csize) break;
                          11550 ;	genCmpGt
   2FE7 E5*00             11551 	mov	a,_bp
   2FE9 24 FA             11552 	add	a,#0xfffffffa
   2FEB F8                11553 	mov	r0,a
   2FEC E5*00             11554 	mov	a,_bp
   2FEE 24 08             11555 	add	a,#0x08
   2FF0 F9                11556 	mov	r1,a
                          11557 ;	genCmp
   2FF1 C3                11558 	clr	c
   2FF2 E7                11559 	mov	a,@r1
   2FF3 96                11560 	subb	a,@r0
   2FF4 09                11561 	inc	r1
   2FF5 E7                11562 	mov	a,@r1
   2FF6 08                11563 	inc	r0
   2FF7 96                11564 	subb	a,@r0
   2FF8 09                11565 	inc	r1
   2FF9 E7                11566 	mov	a,@r1
   2FFA 08                11567 	inc	r0
   2FFB 96                11568 	subb	a,@r0
   2FFC 09                11569 	inc	r1
   2FFD E7                11570 	mov	a,@r1
   2FFE 08                11571 	inc	r0
   2FFF 96                11572 	subb	a,@r0
                          11573 ;	genIpop
                          11574 ;	genIfx
                          11575 ;	genIfxJump
                          11576 ;	Peephole 129.a	jump optimization
   3000 40 03             11577 	jc	00139$
   3002 02s31r18          11578 	ljmp	00116$
   3005                   11579 00139$:
                    3005  11580 	C$tff.c$1162$1$1 ==.
                          11581 ;	tff.c:1162: clust = get_cluster(clust);			/* Only follow cluster chain if not in write mode */
                          11582 ;	genIpush
                          11583 ;	genCall
   3005 E5*00             11584 	mov	a,_bp
   3007 24 04             11585 	add	a,#0x04
   3009 F8                11586 	mov	r0,a
   300A 86 82             11587 	mov	dpl,@r0
   300C 08                11588 	inc	r0
   300D 86 83             11589 	mov	dph,@r0
   300F 08                11590 	inc	r0
   3010 86 F0             11591 	mov	b,@r0
   3012 08                11592 	inc	r0
   3013 E6                11593 	mov	a,@r0
   3014 12s00rEA          11594 	lcall	_get_cluster
   3017 AA 82             11595 	mov	r2,dpl
   3019 AB 83             11596 	mov	r3,dph
   301B AC F0             11597 	mov	r4,b
   301D FD                11598 	mov	r5,a
                          11599 ;	genAssign
   301E E5*00             11600 	mov	a,_bp
   3020 24 04             11601 	add	a,#0x04
   3022 F8                11602 	mov	r0,a
   3023 A6 02             11603 	mov	@r0,ar2
   3025 08                11604 	inc	r0
   3026 A6 03             11605 	mov	@r0,ar3
   3028 08                11606 	inc	r0
   3029 A6 04             11607 	mov	@r0,ar4
   302B 08                11608 	inc	r0
   302C A6 05             11609 	mov	@r0,ar5
                    302E  11610 	C$tff.c$1163$1$1 ==.
                          11611 ;	tff.c:1163: if (clust == 0) {						/* Stop if could not follow the cluster chain */
                          11612 ;	genIpop
                          11613 ;	genIfx
   302E E5*00             11614 	mov	a,_bp
   3030 24 04             11615 	add	a,#0x04
   3032 F8                11616 	mov	r0,a
   3033 E6                11617 	mov	a,@r0
   3034 08                11618 	inc	r0
   3035 46                11619 	orl	a,@r0
   3036 08                11620 	inc	r0
   3037 46                11621 	orl	a,@r0
   3038 08                11622 	inc	r0
   3039 46                11623 	orl	a,@r0
                          11624 ;	genIfxJump
                          11625 ;	Peephole 108.b	removed ljmp by inverse jump logic
   303A 70 1B             11626 	jnz	00110$
                          11627 ;	Peephole 300	removed redundant label 00140$
                    303C  11628 	C$tff.c$1164$5$5 ==.
                          11629 ;	tff.c:1164: ofs = csize; break;
                          11630 ;	genAssign
   303C E5*00             11631 	mov	a,_bp
   303E 24 08             11632 	add	a,#0x08
   3040 F8                11633 	mov	r0,a
   3041 E5*00             11634 	mov	a,_bp
   3043 24 FA             11635 	add	a,#0xfffffffa
   3045 F9                11636 	mov	r1,a
   3046 E6                11637 	mov	a,@r0
   3047 F7                11638 	mov	@r1,a
   3048 08                11639 	inc	r0
   3049 09                11640 	inc	r1
   304A E6                11641 	mov	a,@r0
   304B F7                11642 	mov	@r1,a
   304C 08                11643 	inc	r0
   304D 09                11644 	inc	r1
   304E E6                11645 	mov	a,@r0
   304F F7                11646 	mov	@r1,a
   3050 08                11647 	inc	r0
   3051 09                11648 	inc	r1
   3052 E6                11649 	mov	a,@r0
   3053 F7                11650 	mov	@r1,a
   3054 02s31r18          11651 	ljmp	00116$
   3057                   11652 00110$:
                    3057  11653 	C$tff.c$1166$4$4 ==.
                          11654 ;	tff.c:1166: if (clust == 1 || clust >= fs->max_clust) goto fk_error;
                          11655 ;	genCmpEq
   3057 E5*00             11656 	mov	a,_bp
   3059 24 04             11657 	add	a,#0x04
   305B F8                11658 	mov	r0,a
                          11659 ;	gencjneshort
   305C B6 01 0F          11660 	cjne	@r0,#0x01,00141$
   305F 08                11661 	inc	r0
   3060 B6 00 0B          11662 	cjne	@r0,#0x00,00141$
   3063 08                11663 	inc	r0
   3064 B6 00 07          11664 	cjne	@r0,#0x00,00141$
   3067 08                11665 	inc	r0
   3068 B6 00 03          11666 	cjne	@r0,#0x00,00141$
   306B 02s32r30          11667 	ljmp	00121$
   306E                   11668 00141$:
                          11669 ;	genPointerGet
                          11670 ;	genGenPointerGet
   306E E5*00             11671 	mov	a,_bp
   3070 24 1C             11672 	add	a,#0x1c
   3072 F8                11673 	mov	r0,a
   3073 86 82             11674 	mov	dpl,@r0
   3075 08                11675 	inc	r0
   3076 86 83             11676 	mov	dph,@r0
   3078 08                11677 	inc	r0
   3079 86 F0             11678 	mov	b,@r0
   307B 12s00r00          11679 	lcall	__gptrget
   307E FD                11680 	mov	r5,a
   307F A3                11681 	inc	dptr
   3080 12s00r00          11682 	lcall	__gptrget
   3083 FE                11683 	mov	r6,a
   3084 A3                11684 	inc	dptr
   3085 12s00r00          11685 	lcall	__gptrget
   3088 FF                11686 	mov	r7,a
   3089 A3                11687 	inc	dptr
   308A 12s00r00          11688 	lcall	__gptrget
   308D FA                11689 	mov	r2,a
                          11690 ;	genCmpLt
   308E E5*00             11691 	mov	a,_bp
   3090 24 04             11692 	add	a,#0x04
   3092 F8                11693 	mov	r0,a
                          11694 ;	genCmp
   3093 C3                11695 	clr	c
   3094 E6                11696 	mov	a,@r0
   3095 9D                11697 	subb	a,r5
   3096 08                11698 	inc	r0
   3097 E6                11699 	mov	a,@r0
   3098 9E                11700 	subb	a,r6
   3099 08                11701 	inc	r0
   309A E6                11702 	mov	a,@r0
   309B 9F                11703 	subb	a,r7
   309C 08                11704 	inc	r0
   309D E6                11705 	mov	a,@r0
   309E 9A                11706 	subb	a,r2
                          11707 ;	genIfxJump
   309F 40 03             11708 	jc	00142$
   30A1 02s32r30          11709 	ljmp	00121$
   30A4                   11710 00142$:
                    30A4  11711 	C$tff.c$1167$4$4 ==.
                          11712 ;	tff.c:1167: fp->fptr += csize;						/* Update R/W pointer */
                          11713 ;	genPointerGet
                          11714 ;	genGenPointerGet
   30A4 E5*00             11715 	mov	a,_bp
   30A6 24 0F             11716 	add	a,#0x0f
   30A8 F8                11717 	mov	r0,a
   30A9 86 82             11718 	mov	dpl,@r0
   30AB 08                11719 	inc	r0
   30AC 86 83             11720 	mov	dph,@r0
   30AE 08                11721 	inc	r0
   30AF 86 F0             11722 	mov	b,@r0
   30B1 12s00r00          11723 	lcall	__gptrget
   30B4 FA                11724 	mov	r2,a
   30B5 A3                11725 	inc	dptr
   30B6 12s00r00          11726 	lcall	__gptrget
   30B9 FB                11727 	mov	r3,a
   30BA A3                11728 	inc	dptr
   30BB 12s00r00          11729 	lcall	__gptrget
   30BE FC                11730 	mov	r4,a
   30BF A3                11731 	inc	dptr
   30C0 12s00r00          11732 	lcall	__gptrget
   30C3 FD                11733 	mov	r5,a
                          11734 ;	genPlus
   30C4 E5*00             11735 	mov	a,_bp
   30C6 24 08             11736 	add	a,#0x08
   30C8 F8                11737 	mov	r0,a
   30C9 E6                11738 	mov	a,@r0
                          11739 ;	Peephole 236.a	used r2 instead of ar2
   30CA 2A                11740 	add	a,r2
   30CB FA                11741 	mov	r2,a
   30CC 08                11742 	inc	r0
   30CD E6                11743 	mov	a,@r0
                          11744 ;	Peephole 236.b	used r3 instead of ar3
   30CE 3B                11745 	addc	a,r3
   30CF FB                11746 	mov	r3,a
   30D0 08                11747 	inc	r0
   30D1 E6                11748 	mov	a,@r0
                          11749 ;	Peephole 236.b	used r4 instead of ar4
   30D2 3C                11750 	addc	a,r4
   30D3 FC                11751 	mov	r4,a
   30D4 08                11752 	inc	r0
   30D5 E6                11753 	mov	a,@r0
                          11754 ;	Peephole 236.b	used r5 instead of ar5
   30D6 3D                11755 	addc	a,r5
   30D7 FD                11756 	mov	r5,a
                          11757 ;	genPointerSet
                          11758 ;	genGenPointerSet
   30D8 E5*00             11759 	mov	a,_bp
   30DA 24 0F             11760 	add	a,#0x0f
   30DC F8                11761 	mov	r0,a
   30DD 86 82             11762 	mov	dpl,@r0
   30DF 08                11763 	inc	r0
   30E0 86 83             11764 	mov	dph,@r0
   30E2 08                11765 	inc	r0
   30E3 86 F0             11766 	mov	b,@r0
   30E5 EA                11767 	mov	a,r2
   30E6 12s00r00          11768 	lcall	__gptrput
   30E9 A3                11769 	inc	dptr
   30EA EB                11770 	mov	a,r3
   30EB 12s00r00          11771 	lcall	__gptrput
   30EE A3                11772 	inc	dptr
   30EF EC                11773 	mov	a,r4
   30F0 12s00r00          11774 	lcall	__gptrput
   30F3 A3                11775 	inc	dptr
   30F4 ED                11776 	mov	a,r5
   30F5 12s00r00          11777 	lcall	__gptrput
                    30F8  11778 	C$tff.c$1168$4$4 ==.
                          11779 ;	tff.c:1168: ofs -= csize;
                          11780 ;	genMinus
   30F8 E5*00             11781 	mov	a,_bp
   30FA 24 FA             11782 	add	a,#0xfffffffa
   30FC F8                11783 	mov	r0,a
   30FD E5*00             11784 	mov	a,_bp
   30FF 24 08             11785 	add	a,#0x08
   3101 F9                11786 	mov	r1,a
   3102 E6                11787 	mov	a,@r0
   3103 C3                11788 	clr	c
   3104 97                11789 	subb	a,@r1
   3105 F6                11790 	mov	@r0,a
   3106 08                11791 	inc	r0
   3107 E6                11792 	mov	a,@r0
   3108 09                11793 	inc	r1
   3109 97                11794 	subb	a,@r1
   310A F6                11795 	mov	@r0,a
   310B 08                11796 	inc	r0
   310C E6                11797 	mov	a,@r0
   310D 09                11798 	inc	r1
   310E 97                11799 	subb	a,@r1
   310F F6                11800 	mov	@r0,a
   3110 08                11801 	inc	r0
   3111 E6                11802 	mov	a,@r0
   3112 09                11803 	inc	r1
   3113 97                11804 	subb	a,@r1
   3114 F6                11805 	mov	@r0,a
   3115 02s2FrB8          11806 	ljmp	00115$
   3118                   11807 00116$:
                    3118  11808 	C$tff.c$1170$3$3 ==.
                          11809 ;	tff.c:1170: csect = (BYTE)((ofs - 1) / 512);			/* Sector offset in the cluster */
                          11810 ;	genMinus
   3118 E5*00             11811 	mov	a,_bp
   311A 24 FA             11812 	add	a,#0xfffffffa
   311C F8                11813 	mov	r0,a
                          11814 ;	genMinusDec
   311D E6                11815 	mov	a,@r0
   311E 24 FF             11816 	add	a,#0xff
   3120 FA                11817 	mov	r2,a
   3121 08                11818 	inc	r0
   3122 E6                11819 	mov	a,@r0
   3123 34 FF             11820 	addc	a,#0xff
   3125 FB                11821 	mov	r3,a
   3126 08                11822 	inc	r0
   3127 E6                11823 	mov	a,@r0
   3128 34 FF             11824 	addc	a,#0xff
   312A FC                11825 	mov	r4,a
   312B 08                11826 	inc	r0
   312C E6                11827 	mov	a,@r0
   312D 34 FF             11828 	addc	a,#0xff
                          11829 ;	genRightShift
                          11830 ;	genRightShiftLiteral
                          11831 ;	genrshFour
                          11832 ;	Peephole 105	removed redundant mov
                          11833 ;	Peephole 177.c	removed redundant move
   312F 7D 00             11834 	mov	r5,#0x00
   3131 C3                11835 	clr	c
   3132 13                11836 	rrc	a
   3133 CC                11837 	xch	a,r4
   3134 13                11838 	rrc	a
   3135 CB                11839 	xch	a,r3
   3136 13                11840 	rrc	a
   3137 FA                11841 	mov	r2,a
                          11842 ;	genCast
   3138 8A 06             11843 	mov	ar6,r2
                    313A  11844 	C$tff.c$1171$3$3 ==.
                          11845 ;	tff.c:1171: fp->curr_sect = clust2sect(clust) + csect;	/* Current sector */
                          11846 ;	genPlus
   313A A8*00             11847 	mov	r0,_bp
   313C 08                11848 	inc	r0
   313D E5*00             11849 	mov	a,_bp
   313F 24 1C             11850 	add	a,#0x1c
   3141 F9                11851 	mov	r1,a
                          11852 ;     genPlusIncr
   3142 74 17             11853 	mov	a,#0x17
   3144 26                11854 	add	a,@r0
   3145 F7                11855 	mov	@r1,a
                          11856 ;	Peephole 181	changed mov to clr
   3146 E4                11857 	clr	a
   3147 08                11858 	inc	r0
   3148 36                11859 	addc	a,@r0
   3149 09                11860 	inc	r1
   314A F7                11861 	mov	@r1,a
   314B 08                11862 	inc	r0
   314C 09                11863 	inc	r1
   314D E6                11864 	mov	a,@r0
   314E F7                11865 	mov	@r1,a
                          11866 ;	genCall
   314F E5*00             11867 	mov	a,_bp
   3151 24 04             11868 	add	a,#0x04
   3153 F8                11869 	mov	r0,a
   3154 86 82             11870 	mov	dpl,@r0
   3156 08                11871 	inc	r0
   3157 86 83             11872 	mov	dph,@r0
   3159 08                11873 	inc	r0
   315A 86 F0             11874 	mov	b,@r0
   315C 08                11875 	inc	r0
   315D E6                11876 	mov	a,@r0
   315E C0 06             11877 	push	ar6
   3160 12s04rFB          11878 	lcall	_clust2sect
   3163 C0 E0             11879 	push	acc
   3165 E5*00             11880 	mov	a,_bp
   3167 24 1F             11881 	add	a,#0x1f
   3169 F8                11882 	mov	r0,a
   316A D0 E0             11883 	pop	acc
   316C A6 82             11884 	mov	@r0,dpl
   316E 08                11885 	inc	r0
   316F A6 83             11886 	mov	@r0,dph
   3171 08                11887 	inc	r0
   3172 A6 F0             11888 	mov	@r0,b
   3174 08                11889 	inc	r0
   3175 F6                11890 	mov	@r0,a
   3176 D0 06             11891 	pop	ar6
                          11892 ;	genCast
   3178 8E 04             11893 	mov	ar4,r6
                          11894 ;	genPlus
                          11895 ;	Peephole 3.c	changed mov to clr
                          11896 ;	Peephole 3.b	changed mov to clr
   317A E4                11897 	clr	a
   317B FD                11898 	mov	r5,a
   317C FA                11899 	mov	r2,a
   317D FB                11900 	mov	r3,a
   317E E5*00             11901 	mov	a,_bp
   3180 24 1F             11902 	add	a,#0x1f
   3182 F8                11903 	mov	r0,a
                          11904 ;	Peephole 236.g	used r4 instead of ar4
   3183 EC                11905 	mov	a,r4
   3184 26                11906 	add	a,@r0
   3185 FC                11907 	mov	r4,a
                          11908 ;	Peephole 236.g	used r5 instead of ar5
   3186 ED                11909 	mov	a,r5
   3187 08                11910 	inc	r0
   3188 36                11911 	addc	a,@r0
   3189 FD                11912 	mov	r5,a
                          11913 ;	Peephole 236.g	used r2 instead of ar2
   318A EA                11914 	mov	a,r2
   318B 08                11915 	inc	r0
   318C 36                11916 	addc	a,@r0
   318D FA                11917 	mov	r2,a
                          11918 ;	Peephole 236.g	used r3 instead of ar3
   318E EB                11919 	mov	a,r3
   318F 08                11920 	inc	r0
   3190 36                11921 	addc	a,@r0
   3191 FB                11922 	mov	r3,a
                          11923 ;	genPointerSet
                          11924 ;	genGenPointerSet
   3192 E5*00             11925 	mov	a,_bp
   3194 24 1C             11926 	add	a,#0x1c
   3196 F8                11927 	mov	r0,a
   3197 86 82             11928 	mov	dpl,@r0
   3199 08                11929 	inc	r0
   319A 86 83             11930 	mov	dph,@r0
   319C 08                11931 	inc	r0
   319D 86 F0             11932 	mov	b,@r0
   319F EC                11933 	mov	a,r4
   31A0 12s00r00          11934 	lcall	__gptrput
   31A3 A3                11935 	inc	dptr
   31A4 ED                11936 	mov	a,r5
   31A5 12s00r00          11937 	lcall	__gptrput
   31A8 A3                11938 	inc	dptr
   31A9 EA                11939 	mov	a,r2
   31AA 12s00r00          11940 	lcall	__gptrput
   31AD A3                11941 	inc	dptr
   31AE EB                11942 	mov	a,r3
   31AF 12s00r00          11943 	lcall	__gptrput
                    31B2  11944 	C$tff.c$1172$3$3 ==.
                          11945 ;	tff.c:1172: fp->sect_clust = fs->sects_clust - csect;	/* Left sector counter in the cluster */
                          11946 ;	genPointerGet
                          11947 ;	genGenPointerGet
   31B2 E5*00             11948 	mov	a,_bp
   31B4 24 16             11949 	add	a,#0x16
   31B6 F8                11950 	mov	r0,a
   31B7 86 82             11951 	mov	dpl,@r0
   31B9 08                11952 	inc	r0
   31BA 86 83             11953 	mov	dph,@r0
   31BC 08                11954 	inc	r0
   31BD 86 F0             11955 	mov	b,@r0
   31BF 12s00r00          11956 	lcall	__gptrget
                          11957 ;	genMinus
   31C2 FA                11958 	mov	r2,a
                          11959 ;	Peephole 105	removed redundant mov
   31C3 C3                11960 	clr	c
                          11961 ;	Peephole 236.l	used r6 instead of ar6
   31C4 9E                11962 	subb	a,r6
   31C5 FA                11963 	mov	r2,a
                          11964 ;	genPointerSet
                          11965 ;	genGenPointerSet
   31C6 E5*00             11966 	mov	a,_bp
   31C8 24 13             11967 	add	a,#0x13
   31CA F8                11968 	mov	r0,a
   31CB 86 82             11969 	mov	dpl,@r0
   31CD 08                11970 	inc	r0
   31CE 86 83             11971 	mov	dph,@r0
   31D0 08                11972 	inc	r0
   31D1 86 F0             11973 	mov	b,@r0
   31D3 EA                11974 	mov	a,r2
   31D4 12s00r00          11975 	lcall	__gptrput
                    31D7  11976 	C$tff.c$1173$3$3 ==.
                          11977 ;	tff.c:1173: fp->fptr += ofs;							/* Update file R/W pointer */
                          11978 ;	genPointerGet
                          11979 ;	genGenPointerGet
   31D7 E5*00             11980 	mov	a,_bp
   31D9 24 0F             11981 	add	a,#0x0f
   31DB F8                11982 	mov	r0,a
   31DC 86 82             11983 	mov	dpl,@r0
   31DE 08                11984 	inc	r0
   31DF 86 83             11985 	mov	dph,@r0
   31E1 08                11986 	inc	r0
   31E2 86 F0             11987 	mov	b,@r0
   31E4 12s00r00          11988 	lcall	__gptrget
   31E7 FA                11989 	mov	r2,a
   31E8 A3                11990 	inc	dptr
   31E9 12s00r00          11991 	lcall	__gptrget
   31EC FB                11992 	mov	r3,a
   31ED A3                11993 	inc	dptr
   31EE 12s00r00          11994 	lcall	__gptrget
   31F1 FC                11995 	mov	r4,a
   31F2 A3                11996 	inc	dptr
   31F3 12s00r00          11997 	lcall	__gptrget
   31F6 FD                11998 	mov	r5,a
                          11999 ;	genPlus
   31F7 E5*00             12000 	mov	a,_bp
   31F9 24 FA             12001 	add	a,#0xfffffffa
   31FB F8                12002 	mov	r0,a
   31FC E6                12003 	mov	a,@r0
                          12004 ;	Peephole 236.a	used r2 instead of ar2
   31FD 2A                12005 	add	a,r2
   31FE FA                12006 	mov	r2,a
   31FF 08                12007 	inc	r0
   3200 E6                12008 	mov	a,@r0
                          12009 ;	Peephole 236.b	used r3 instead of ar3
   3201 3B                12010 	addc	a,r3
   3202 FB                12011 	mov	r3,a
   3203 08                12012 	inc	r0
   3204 E6                12013 	mov	a,@r0
                          12014 ;	Peephole 236.b	used r4 instead of ar4
   3205 3C                12015 	addc	a,r4
   3206 FC                12016 	mov	r4,a
   3207 08                12017 	inc	r0
   3208 E6                12018 	mov	a,@r0
                          12019 ;	Peephole 236.b	used r5 instead of ar5
   3209 3D                12020 	addc	a,r5
   320A FD                12021 	mov	r5,a
                          12022 ;	genPointerSet
                          12023 ;	genGenPointerSet
   320B E5*00             12024 	mov	a,_bp
   320D 24 0F             12025 	add	a,#0x0f
   320F F8                12026 	mov	r0,a
   3210 86 82             12027 	mov	dpl,@r0
   3212 08                12028 	inc	r0
   3213 86 83             12029 	mov	dph,@r0
   3215 08                12030 	inc	r0
   3216 86 F0             12031 	mov	b,@r0
   3218 EA                12032 	mov	a,r2
   3219 12s00r00          12033 	lcall	__gptrput
   321C A3                12034 	inc	dptr
   321D EB                12035 	mov	a,r3
   321E 12s00r00          12036 	lcall	__gptrput
   3221 A3                12037 	inc	dptr
   3222 EC                12038 	mov	a,r4
   3223 12s00r00          12039 	lcall	__gptrput
   3226 A3                12040 	inc	dptr
   3227 ED                12041 	mov	a,r5
   3228 12s00r00          12042 	lcall	__gptrput
   322B                   12043 00120$:
                    322B  12044 	C$tff.c$1183$1$1 ==.
                          12045 ;	tff.c:1183: return FR_OK;
                          12046 ;	genRet
   322B 75 82 00          12047 	mov	dpl,#0x00
                    322E  12048 	C$tff.c$1185$1$1 ==.
                          12049 ;	tff.c:1185: fk_error:	/* Abort this function due to an unrecoverable error */
                          12050 ;	Peephole 112.b	changed ljmp to sjmp
   322E 80 28             12051 	sjmp	00122$
   3230                   12052 00121$:
                    3230  12053 	C$tff.c$1186$1$1 ==.
                          12054 ;	tff.c:1186: fp->flag |= FA__ERROR;
                          12055 ;	genPointerGet
                          12056 ;	genGenPointerGet
   3230 E5*00             12057 	mov	a,_bp
   3232 24 19             12058 	add	a,#0x19
   3234 F8                12059 	mov	r0,a
   3235 86 82             12060 	mov	dpl,@r0
   3237 08                12061 	inc	r0
   3238 86 83             12062 	mov	dph,@r0
   323A 08                12063 	inc	r0
   323B 86 F0             12064 	mov	b,@r0
   323D 12s00r00          12065 	lcall	__gptrget
   3240 FA                12066 	mov	r2,a
                          12067 ;	genOr
   3241 43 02 80          12068 	orl	ar2,#0x80
                          12069 ;	genPointerSet
                          12070 ;	genGenPointerSet
   3244 E5*00             12071 	mov	a,_bp
   3246 24 19             12072 	add	a,#0x19
   3248 F8                12073 	mov	r0,a
   3249 86 82             12074 	mov	dpl,@r0
   324B 08                12075 	inc	r0
   324C 86 83             12076 	mov	dph,@r0
   324E 08                12077 	inc	r0
   324F 86 F0             12078 	mov	b,@r0
   3251 EA                12079 	mov	a,r2
   3252 12s00r00          12080 	lcall	__gptrput
                    3255  12081 	C$tff.c$1187$1$1 ==.
                          12082 ;	tff.c:1187: return FR_RW_ERROR;
                          12083 ;	genRet
   3255 75 82 08          12084 	mov	dpl,#0x08
   3258                   12085 00122$:
   3258 85*00 81          12086 	mov	sp,_bp
   325B D0*00             12087 	pop	_bp
                    325D  12088 	C$tff.c$1188$1$1 ==.
                    325D  12089 	XG$f_lseek$0$0 ==.
   325D 22                12090 	ret
                          12091 ;------------------------------------------------------------
                          12092 ;Allocation info for local variables in function 'f_opendir'
                          12093 ;------------------------------------------------------------
                          12094 ;path                      Allocated to stack - offset -5
                          12095 ;dirobj                    Allocated to stack - offset 1
                          12096 ;dir                       Allocated to stack - offset 4
                          12097 ;fn                        Allocated to stack - offset 7
                          12098 ;res                       Allocated to registers r5 
                          12099 ;fs                        Allocated to stack - offset 19
                          12100 ;sloc0                     Allocated to stack - offset 22
                          12101 ;sloc1                     Allocated to stack - offset 25
                          12102 ;------------------------------------------------------------
                    325E  12103 	G$f_opendir$0$0 ==.
                    325E  12104 	C$tff.c$1198$1$1 ==.
                          12105 ;	tff.c:1198: FRESULT f_opendir (
                          12106 ;	-----------------------------------------
                          12107 ;	 function f_opendir
                          12108 ;	-----------------------------------------
   325E                   12109 _f_opendir:
   325E C0*00             12110 	push	_bp
   3260 85 81*00          12111 	mov	_bp,sp
                          12112 ;     genReceive
   3263 C0 82             12113 	push	dpl
   3265 C0 83             12114 	push	dph
   3267 C0 F0             12115 	push	b
   3269 E5 81             12116 	mov	a,sp
   326B 24 1C             12117 	add	a,#0x1c
   326D F5 81             12118 	mov	sp,a
                    326F  12119 	C$tff.c$1206$1$1 ==.
                          12120 ;	tff.c:1206: FATFS *fs = FatFs;
                          12121 ;	genAssign
   326F E5*00             12122 	mov	a,_bp
   3271 24 13             12123 	add	a,#0x13
   3273 F8                12124 	mov	r0,a
   3274 A6*00             12125 	mov	@r0,_FatFs
   3276 08                12126 	inc	r0
   3277 A6*01             12127 	mov	@r0,(_FatFs + 1)
   3279 08                12128 	inc	r0
   327A A6*02             12129 	mov	@r0,(_FatFs + 2)
                    327C  12130 	C$tff.c$1209$1$1 ==.
                          12131 ;	tff.c:1209: res = auto_mount(&path, 0);
                          12132 ;	genAddrOf
   327C E5*00             12133 	mov	a,_bp
   327E 24 FB             12134 	add	a,#0xfb
   3280 FD                12135 	mov	r5,a
                          12136 ;	genCast
   3281 7E 00             12137 	mov	r6,#0x00
   3283 7F 40             12138 	mov	r7,#0x40
                          12139 ;	genIpush
                          12140 ;	Peephole 181	changed mov to clr
   3285 E4                12141 	clr	a
   3286 C0 E0             12142 	push	acc
                          12143 ;	genCall
   3288 8D 82             12144 	mov	dpl,r5
   328A 8E 83             12145 	mov	dph,r6
   328C 8F F0             12146 	mov	b,r7
   328E 12s15rE4          12147 	lcall	_auto_mount
   3291 AD 82             12148 	mov	r5,dpl
   3293 15 81             12149 	dec	sp
                          12150 ;	genAssign
                    3295  12151 	C$tff.c$1210$1$1 ==.
                          12152 ;	tff.c:1210: if (res != FR_OK) return res;
                          12153 ;	genCmpEq
                          12154 ;	gencjneshort
   3295 BD 00 02          12155 	cjne	r5,#0x00,00116$
                          12156 ;	Peephole 112.b	changed ljmp to sjmp
   3298 80 05             12157 	sjmp	00102$
   329A                   12158 00116$:
                          12159 ;	genRet
   329A 8D 82             12160 	mov	dpl,r5
   329C 02s34r8D          12161 	ljmp	00110$
   329F                   12162 00102$:
                    329F  12163 	C$tff.c$1212$1$1 ==.
                          12164 ;	tff.c:1212: res = trace_path(dirobj, fn, path, &dir);	/* Trace the directory path */
                          12165 ;	genAddrOf
   329F E5*00             12166 	mov	a,_bp
   32A1 24 04             12167 	add	a,#0x04
   32A3 FE                12168 	mov	r6,a
                          12169 ;	genCast
   32A4 7D 00             12170 	mov	r5,#0x00
   32A6 7F 40             12171 	mov	r7,#0x40
                          12172 ;	genAddrOf
   32A8 E5*00             12173 	mov	a,_bp
   32AA 24 07             12174 	add	a,#0x07
   32AC FB                12175 	mov	r3,a
                          12176 ;	genCast
   32AD 7C 00             12177 	mov	r4,#0x00
   32AF 7A 40             12178 	mov	r2,#0x40
                          12179 ;	genIpush
   32B1 C0 06             12180 	push	ar6
   32B3 C0 05             12181 	push	ar5
   32B5 C0 07             12182 	push	ar7
                          12183 ;	genIpush
   32B7 E5*00             12184 	mov	a,_bp
   32B9 24 FB             12185 	add	a,#0xfffffffb
   32BB F8                12186 	mov	r0,a
   32BC E6                12187 	mov	a,@r0
   32BD C0 E0             12188 	push	acc
   32BF 08                12189 	inc	r0
   32C0 E6                12190 	mov	a,@r0
   32C1 C0 E0             12191 	push	acc
   32C3 08                12192 	inc	r0
   32C4 E6                12193 	mov	a,@r0
   32C5 C0 E0             12194 	push	acc
                          12195 ;	genIpush
   32C7 C0 03             12196 	push	ar3
   32C9 C0 04             12197 	push	ar4
   32CB C0 02             12198 	push	ar2
                          12199 ;	genCall
   32CD A8*00             12200 	mov	r0,_bp
   32CF 08                12201 	inc	r0
   32D0 86 82             12202 	mov	dpl,@r0
   32D2 08                12203 	inc	r0
   32D3 86 83             12204 	mov	dph,@r0
   32D5 08                12205 	inc	r0
   32D6 86 F0             12206 	mov	b,@r0
   32D8 12s0ErB4          12207 	lcall	_trace_path
   32DB AA 82             12208 	mov	r2,dpl
   32DD E5 81             12209 	mov	a,sp
   32DF 24 F7             12210 	add	a,#0xf7
   32E1 F5 81             12211 	mov	sp,a
                          12212 ;	genAssign
   32E3 8A 05             12213 	mov	ar5,r2
                    32E5  12214 	C$tff.c$1213$1$1 ==.
                          12215 ;	tff.c:1213: if (res == FR_OK) {							/* Trace completed */
                          12216 ;	genIfx
   32E5 ED                12217 	mov	a,r5
                          12218 ;	genIfxJump
   32E6 60 03             12219 	jz	00117$
   32E8 02s34r8B          12220 	ljmp	00109$
   32EB                   12221 00117$:
                    32EB  12222 	C$tff.c$1214$2$2 ==.
                          12223 ;	tff.c:1214: if (dir != NULL) {						/* It is not the root dir */
                          12224 ;	genAssign
                          12225 ;	genCmpEq
   32EB E5*00             12226 	mov	a,_bp
   32ED 24 04             12227 	add	a,#0x04
   32EF F8                12228 	mov	r0,a
                          12229 ;	gencjneshort
   32F0 B6 00 0B          12230 	cjne	@r0,#0x00,00118$
   32F3 08                12231 	inc	r0
   32F4 B6 00 07          12232 	cjne	@r0,#0x00,00118$
   32F7 08                12233 	inc	r0
   32F8 B6 00 03          12234 	cjne	@r0,#0x00,00118$
   32FB 02s34r61          12235 	ljmp	00107$
   32FE                   12236 00118$:
                    32FE  12237 	C$tff.c$1215$1$1 ==.
                          12238 ;	tff.c:1215: if (dir[DIR_Attr] & AM_DIR) {		/* The entry is a directory */
                          12239 ;	genIpush
   32FE C0 05             12240 	push	ar5
                          12241 ;	genPlus
   3300 E5*00             12242 	mov	a,_bp
   3302 24 04             12243 	add	a,#0x04
   3304 F8                12244 	mov	r0,a
                          12245 ;     genPlusIncr
   3305 74 0B             12246 	mov	a,#0x0B
   3307 26                12247 	add	a,@r0
   3308 FE                12248 	mov	r6,a
                          12249 ;	Peephole 181	changed mov to clr
   3309 E4                12250 	clr	a
   330A 08                12251 	inc	r0
   330B 36                12252 	addc	a,@r0
   330C FF                12253 	mov	r7,a
   330D 08                12254 	inc	r0
   330E 86 05             12255 	mov	ar5,@r0
                          12256 ;	genPointerGet
                          12257 ;	genGenPointerGet
   3310 8E 82             12258 	mov	dpl,r6
   3312 8F 83             12259 	mov	dph,r7
   3314 8D F0             12260 	mov	b,r5
   3316 12s00r00          12261 	lcall	__gptrget
                          12262 ;	genAnd
   3319 FE                12263 	mov	r6,a
                          12264 ;	Peephole 105	removed redundant mov
   331A 54 10             12265 	anl	a,#0x10
                          12266 ;	genIpop
   331C D0 05             12267 	pop	ar5
                          12268 ;	genIfx
                          12269 ;	genIfxJump
   331E 70 03             12270 	jnz	00119$
   3320 02s34r5F          12271 	ljmp	00104$
   3323                   12272 00119$:
                    3323  12273 	C$tff.c$1216$1$1 ==.
                          12274 ;	tff.c:1216: dirobj->clust =
                          12275 ;	genIpush
   3323 C0 05             12276 	push	ar5
                          12277 ;	genPlus
   3325 A8*00             12278 	mov	r0,_bp
   3327 08                12279 	inc	r0
   3328 E5*00             12280 	mov	a,_bp
   332A 24 16             12281 	add	a,#0x16
   332C F9                12282 	mov	r1,a
                          12283 ;     genPlusIncr
   332D 74 0B             12284 	mov	a,#0x0B
   332F 26                12285 	add	a,@r0
   3330 F7                12286 	mov	@r1,a
                          12287 ;	Peephole 181	changed mov to clr
   3331 E4                12288 	clr	a
   3332 08                12289 	inc	r0
   3333 36                12290 	addc	a,@r0
   3334 09                12291 	inc	r1
   3335 F7                12292 	mov	@r1,a
   3336 08                12293 	inc	r0
   3337 09                12294 	inc	r1
   3338 E6                12295 	mov	a,@r0
   3339 F7                12296 	mov	@r1,a
                    333A  12297 	C$tff.c$1218$4$4 ==.
                          12298 ;	tff.c:1218: ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
                          12299 ;	genPlus
   333A E5*00             12300 	mov	a,_bp
   333C 24 04             12301 	add	a,#0x04
   333E F8                12302 	mov	r0,a
                          12303 ;     genPlusIncr
   333F 74 14             12304 	mov	a,#0x14
   3341 26                12305 	add	a,@r0
   3342 FA                12306 	mov	r2,a
                          12307 ;	Peephole 181	changed mov to clr
   3343 E4                12308 	clr	a
   3344 08                12309 	inc	r0
   3345 36                12310 	addc	a,@r0
   3346 FB                12311 	mov	r3,a
   3347 08                12312 	inc	r0
   3348 86 04             12313 	mov	ar4,@r0
                          12314 ;	genPlus
                          12315 ;     genPlusIncr
   334A 74 01             12316 	mov	a,#0x01
                          12317 ;	Peephole 236.a	used r2 instead of ar2
   334C 2A                12318 	add	a,r2
   334D FD                12319 	mov	r5,a
                          12320 ;	Peephole 181	changed mov to clr
   334E E4                12321 	clr	a
                          12322 ;	Peephole 236.b	used r3 instead of ar3
   334F 3B                12323 	addc	a,r3
   3350 FE                12324 	mov	r6,a
   3351 8C 07             12325 	mov	ar7,r4
                          12326 ;	genPointerGet
                          12327 ;	genGenPointerGet
   3353 8D 82             12328 	mov	dpl,r5
   3355 8E 83             12329 	mov	dph,r6
   3357 8F F0             12330 	mov	b,r7
   3359 12s00r00          12331 	lcall	__gptrget
   335C FD                12332 	mov	r5,a
                          12333 ;	genCast
                          12334 ;	genLeftShift
                          12335 ;	genLeftShiftLiteral
                          12336 ;	genlshTwo
                          12337 ;	peephole 177.e	removed redundant move
   335D 8D 06             12338 	mov	ar6,r5
   335F 7D 00             12339 	mov	r5,#0x00
                          12340 ;	genPointerGet
                          12341 ;	genGenPointerGet
   3361 8A 82             12342 	mov	dpl,r2
   3363 8B 83             12343 	mov	dph,r3
   3365 8C F0             12344 	mov	b,r4
   3367 12s00r00          12345 	lcall	__gptrget
                          12346 ;	genCast
                          12347 ;	genOr
   336A FA                12348 	mov	r2,a
   336B 7B 00             12349 	mov	r3,#0x00
                          12350 ;	Peephole 177.d	removed redundant move
   336D 42 05             12351 	orl	ar5,a
   336F EB                12352 	mov	a,r3
   3370 42 06             12353 	orl	ar6,a
                          12354 ;	genCast
                          12355 ;	genLeftShift
                          12356 ;	genLeftShiftLiteral
                          12357 ;	Peephole 3.c	changed mov to clr
   3372 E4                12358 	clr	a
   3373 FA                12359 	mov	r2,a
   3374 FB                12360 	mov	r3,a
   3375 E5*00             12361 	mov	a,_bp
   3377 24 19             12362 	add	a,#0x19
                          12363 ;	genlshFour
                          12364 ;	Peephole 185	changed order of increment (acc incremented also!)
   3379 04                12365 	inc	a
                          12366 ;	Peephole 185	changed order of increment (acc incremented also!)
   337A 04                12367 	inc	a
                          12368 ;	Peephole 185	changed order of increment (acc incremented also!)
   337B 04                12369 	inc	a
   337C F8                12370 	mov	r0,a
   337D A6 06             12371 	mov	@r0,ar6
   337F 18                12372 	dec	r0
   3380 A6 05             12373 	mov	@r0,ar5
   3382 18                12374 	dec	r0
   3383 76 00             12375 	mov	@r0,#0x00
   3385 18                12376 	dec	r0
   3386 76 00             12377 	mov	@r0,#0x00
                    3388  12378 	C$tff.c$1220$4$4 ==.
                          12379 ;	tff.c:1220: LD_WORD(&dir[DIR_FstClusLO]);
                          12380 ;	genPlus
   3388 E5*00             12381 	mov	a,_bp
   338A 24 04             12382 	add	a,#0x04
   338C F8                12383 	mov	r0,a
                          12384 ;     genPlusIncr
   338D 74 1A             12385 	mov	a,#0x1A
   338F 26                12386 	add	a,@r0
   3390 FC                12387 	mov	r4,a
                          12388 ;	Peephole 181	changed mov to clr
   3391 E4                12389 	clr	a
   3392 08                12390 	inc	r0
   3393 36                12391 	addc	a,@r0
   3394 FF                12392 	mov	r7,a
   3395 08                12393 	inc	r0
   3396 86 02             12394 	mov	ar2,@r0
                          12395 ;	genPlus
                          12396 ;     genPlusIncr
   3398 74 01             12397 	mov	a,#0x01
                          12398 ;	Peephole 236.a	used r4 instead of ar4
   339A 2C                12399 	add	a,r4
   339B FB                12400 	mov	r3,a
                          12401 ;	Peephole 181	changed mov to clr
   339C E4                12402 	clr	a
                          12403 ;	Peephole 236.b	used r7 instead of ar7
   339D 3F                12404 	addc	a,r7
   339E FD                12405 	mov	r5,a
   339F 8A 06             12406 	mov	ar6,r2
                          12407 ;	genPointerGet
                          12408 ;	genGenPointerGet
   33A1 8B 82             12409 	mov	dpl,r3
   33A3 8D 83             12410 	mov	dph,r5
   33A5 8E F0             12411 	mov	b,r6
   33A7 12s00r00          12412 	lcall	__gptrget
   33AA FB                12413 	mov	r3,a
                          12414 ;	genCast
                          12415 ;	genLeftShift
                          12416 ;	genLeftShiftLiteral
                          12417 ;	genlshTwo
                          12418 ;	peephole 177.e	removed redundant move
   33AB 8B 05             12419 	mov	ar5,r3
   33AD 7B 00             12420 	mov	r3,#0x00
                          12421 ;	genPointerGet
                          12422 ;	genGenPointerGet
   33AF 8C 82             12423 	mov	dpl,r4
   33B1 8F 83             12424 	mov	dph,r7
   33B3 8A F0             12425 	mov	b,r2
   33B5 12s00r00          12426 	lcall	__gptrget
                          12427 ;	genCast
                          12428 ;	genOr
   33B8 FC                12429 	mov	r4,a
   33B9 7A 00             12430 	mov	r2,#0x00
                          12431 ;	Peephole 177.d	removed redundant move
   33BB 42 03             12432 	orl	ar3,a
   33BD EA                12433 	mov	a,r2
   33BE 42 05             12434 	orl	ar5,a
                          12435 ;	genCast
                          12436 ;	genOr
                          12437 ;	Peephole 3.c	changed mov to clr
   33C0 E4                12438 	clr	a
   33C1 FA                12439 	mov	r2,a
   33C2 FC                12440 	mov	r4,a
   33C3 E5*00             12441 	mov	a,_bp
   33C5 24 19             12442 	add	a,#0x19
   33C7 F8                12443 	mov	r0,a
   33C8 EB                12444 	mov	a,r3
   33C9 46                12445 	orl	a,@r0
   33CA FB                12446 	mov	r3,a
   33CB ED                12447 	mov	a,r5
   33CC 08                12448 	inc	r0
   33CD 46                12449 	orl	a,@r0
   33CE FE                12450 	mov	r6,a
   33CF EA                12451 	mov	a,r2
   33D0 08                12452 	inc	r0
   33D1 46                12453 	orl	a,@r0
   33D2 FA                12454 	mov	r2,a
   33D3 EC                12455 	mov	a,r4
   33D4 08                12456 	inc	r0
   33D5 46                12457 	orl	a,@r0
   33D6 FC                12458 	mov	r4,a
                          12459 ;	genPointerSet
                          12460 ;	genGenPointerSet
   33D7 E5*00             12461 	mov	a,_bp
   33D9 24 16             12462 	add	a,#0x16
   33DB F8                12463 	mov	r0,a
   33DC 86 82             12464 	mov	dpl,@r0
   33DE 08                12465 	inc	r0
   33DF 86 83             12466 	mov	dph,@r0
   33E1 08                12467 	inc	r0
   33E2 86 F0             12468 	mov	b,@r0
   33E4 EB                12469 	mov	a,r3
   33E5 12s00r00          12470 	lcall	__gptrput
   33E8 A3                12471 	inc	dptr
   33E9 EE                12472 	mov	a,r6
   33EA 12s00r00          12473 	lcall	__gptrput
   33ED A3                12474 	inc	dptr
   33EE EA                12475 	mov	a,r2
   33EF 12s00r00          12476 	lcall	__gptrput
   33F2 A3                12477 	inc	dptr
   33F3 EC                12478 	mov	a,r4
   33F4 12s00r00          12479 	lcall	__gptrput
                    33F7  12480 	C$tff.c$1221$4$4 ==.
                          12481 ;	tff.c:1221: dirobj->sect = clust2sect(dirobj->clust);
                          12482 ;	genPlus
   33F7 A8*00             12483 	mov	r0,_bp
   33F9 08                12484 	inc	r0
   33FA E5*00             12485 	mov	a,_bp
   33FC 24 16             12486 	add	a,#0x16
   33FE F9                12487 	mov	r1,a
                          12488 ;     genPlusIncr
   33FF 74 0F             12489 	mov	a,#0x0F
   3401 26                12490 	add	a,@r0
   3402 F7                12491 	mov	@r1,a
                          12492 ;	Peephole 181	changed mov to clr
   3403 E4                12493 	clr	a
   3404 08                12494 	inc	r0
   3405 36                12495 	addc	a,@r0
   3406 09                12496 	inc	r1
   3407 F7                12497 	mov	@r1,a
   3408 08                12498 	inc	r0
   3409 09                12499 	inc	r1
   340A E6                12500 	mov	a,@r0
   340B F7                12501 	mov	@r1,a
                          12502 ;	genCall
   340C 8B 82             12503 	mov	dpl,r3
   340E 8E 83             12504 	mov	dph,r6
   3410 8A F0             12505 	mov	b,r2
   3412 EC                12506 	mov	a,r4
   3413 12s04rFB          12507 	lcall	_clust2sect
   3416 AB 82             12508 	mov	r3,dpl
   3418 AC 83             12509 	mov	r4,dph
   341A AD F0             12510 	mov	r5,b
   341C FA                12511 	mov	r2,a
                          12512 ;	genPointerSet
                          12513 ;	genGenPointerSet
   341D E5*00             12514 	mov	a,_bp
   341F 24 16             12515 	add	a,#0x16
   3421 F8                12516 	mov	r0,a
   3422 86 82             12517 	mov	dpl,@r0
   3424 08                12518 	inc	r0
   3425 86 83             12519 	mov	dph,@r0
   3427 08                12520 	inc	r0
   3428 86 F0             12521 	mov	b,@r0
   342A EB                12522 	mov	a,r3
   342B 12s00r00          12523 	lcall	__gptrput
   342E A3                12524 	inc	dptr
   342F EC                12525 	mov	a,r4
   3430 12s00r00          12526 	lcall	__gptrput
   3433 A3                12527 	inc	dptr
   3434 ED                12528 	mov	a,r5
   3435 12s00r00          12529 	lcall	__gptrput
   3438 A3                12530 	inc	dptr
   3439 EA                12531 	mov	a,r2
   343A 12s00r00          12532 	lcall	__gptrput
                    343D  12533 	C$tff.c$1222$4$4 ==.
                          12534 ;	tff.c:1222: dirobj->index = 2;
                          12535 ;	genPlus
   343D A8*00             12536 	mov	r0,_bp
   343F 08                12537 	inc	r0
                          12538 ;     genPlusIncr
   3440 74 02             12539 	mov	a,#0x02
   3442 26                12540 	add	a,@r0
   3443 FA                12541 	mov	r2,a
                          12542 ;	Peephole 181	changed mov to clr
   3444 E4                12543 	clr	a
   3445 08                12544 	inc	r0
   3446 36                12545 	addc	a,@r0
   3447 FB                12546 	mov	r3,a
   3448 08                12547 	inc	r0
   3449 86 04             12548 	mov	ar4,@r0
                          12549 ;	genPointerSet
                          12550 ;	genGenPointerSet
   344B 8A 82             12551 	mov	dpl,r2
   344D 8B 83             12552 	mov	dph,r3
   344F 8C F0             12553 	mov	b,r4
   3451 74 02             12554 	mov	a,#0x02
   3453 12s00r00          12555 	lcall	__gptrput
   3456 A3                12556 	inc	dptr
                          12557 ;	Peephole 181	changed mov to clr
   3457 E4                12558 	clr	a
   3458 12s00r00          12559 	lcall	__gptrput
                          12560 ;	genIpop
   345B D0 05             12561 	pop	ar5
                          12562 ;	Peephole 112.b	changed ljmp to sjmp
   345D 80 02             12563 	sjmp	00107$
   345F                   12564 00104$:
                    345F  12565 	C$tff.c$1224$4$5 ==.
                          12566 ;	tff.c:1224: res = FR_NO_FILE;
                          12567 ;	genAssign
   345F 7D 02             12568 	mov	r5,#0x02
   3461                   12569 00107$:
                    3461  12570 	C$tff.c$1227$2$2 ==.
                          12571 ;	tff.c:1227: dirobj->id = fs->id;
                          12572 ;	genPointerGet
                          12573 ;	genGenPointerGet
   3461 E5*00             12574 	mov	a,_bp
   3463 24 13             12575 	add	a,#0x13
   3465 F8                12576 	mov	r0,a
   3466 86 82             12577 	mov	dpl,@r0
   3468 08                12578 	inc	r0
   3469 86 83             12579 	mov	dph,@r0
   346B 08                12580 	inc	r0
   346C 86 F0             12581 	mov	b,@r0
   346E 12s00r00          12582 	lcall	__gptrget
   3471 FA                12583 	mov	r2,a
   3472 A3                12584 	inc	dptr
   3473 12s00r00          12585 	lcall	__gptrget
   3476 FB                12586 	mov	r3,a
                          12587 ;	genPointerSet
                          12588 ;	genGenPointerSet
   3477 A8*00             12589 	mov	r0,_bp
   3479 08                12590 	inc	r0
   347A 86 82             12591 	mov	dpl,@r0
   347C 08                12592 	inc	r0
   347D 86 83             12593 	mov	dph,@r0
   347F 08                12594 	inc	r0
   3480 86 F0             12595 	mov	b,@r0
   3482 EA                12596 	mov	a,r2
   3483 12s00r00          12597 	lcall	__gptrput
   3486 A3                12598 	inc	dptr
   3487 EB                12599 	mov	a,r3
   3488 12s00r00          12600 	lcall	__gptrput
   348B                   12601 00109$:
                    348B  12602 	C$tff.c$1229$1$1 ==.
                          12603 ;	tff.c:1229: return res;
                          12604 ;	genRet
   348B 8D 82             12605 	mov	dpl,r5
   348D                   12606 00110$:
   348D 85*00 81          12607 	mov	sp,_bp
   3490 D0*00             12608 	pop	_bp
                    3492  12609 	C$tff.c$1230$1$1 ==.
                    3492  12610 	XG$f_opendir$0$0 ==.
   3492 22                12611 	ret
                          12612 ;------------------------------------------------------------
                          12613 ;Allocation info for local variables in function 'f_readdir'
                          12614 ;------------------------------------------------------------
                          12615 ;finfo                     Allocated to stack - offset -5
                          12616 ;dirobj                    Allocated to stack - offset 1
                          12617 ;dir                       Allocated to registers r2 r3 r4 
                          12618 ;c                         Allocated to stack - offset 4
                          12619 ;res                       Allocated to registers r5 
                          12620 ;fs                        Allocated to stack - offset 5
                          12621 ;sloc0                     Allocated to stack - offset 8
                          12622 ;sloc1                     Allocated to stack - offset 11
                          12623 ;sloc2                     Allocated to stack - offset 14
                          12624 ;sloc3                     Allocated to stack - offset 17
                          12625 ;sloc4                     Allocated to stack - offset 20
                          12626 ;------------------------------------------------------------
                    3493  12627 	G$f_readdir$0$0 ==.
                    3493  12628 	C$tff.c$1239$1$1 ==.
                          12629 ;	tff.c:1239: FRESULT f_readdir (
                          12630 ;	-----------------------------------------
                          12631 ;	 function f_readdir
                          12632 ;	-----------------------------------------
   3493                   12633 _f_readdir:
   3493 C0*00             12634 	push	_bp
   3495 85 81*00          12635 	mov	_bp,sp
                          12636 ;     genReceive
   3498 C0 82             12637 	push	dpl
   349A C0 83             12638 	push	dph
   349C C0 F0             12639 	push	b
   349E E5 81             12640 	mov	a,sp
   34A0 24 17             12641 	add	a,#0x17
   34A2 F5 81             12642 	mov	sp,a
                    34A4  12643 	C$tff.c$1246$1$1 ==.
                          12644 ;	tff.c:1246: FATFS *fs = dirobj->fs;
                          12645 ;	genPlus
   34A4 A8*00             12646 	mov	r0,_bp
   34A6 08                12647 	inc	r0
                          12648 ;     genPlusIncr
   34A7 74 04             12649 	mov	a,#0x04
   34A9 26                12650 	add	a,@r0
   34AA FD                12651 	mov	r5,a
                          12652 ;	Peephole 181	changed mov to clr
   34AB E4                12653 	clr	a
   34AC 08                12654 	inc	r0
   34AD 36                12655 	addc	a,@r0
   34AE FE                12656 	mov	r6,a
   34AF 08                12657 	inc	r0
   34B0 86 07             12658 	mov	ar7,@r0
                          12659 ;	genPointerGet
                          12660 ;	genGenPointerGet
   34B2 8D 82             12661 	mov	dpl,r5
   34B4 8E 83             12662 	mov	dph,r6
   34B6 8F F0             12663 	mov	b,r7
   34B8 12s00r00          12664 	lcall	__gptrget
   34BB FD                12665 	mov	r5,a
   34BC A3                12666 	inc	dptr
   34BD 12s00r00          12667 	lcall	__gptrget
   34C0 FE                12668 	mov	r6,a
   34C1 A3                12669 	inc	dptr
   34C2 12s00r00          12670 	lcall	__gptrget
   34C5 FF                12671 	mov	r7,a
                          12672 ;	genAssign
   34C6 E5*00             12673 	mov	a,_bp
   34C8 24 05             12674 	add	a,#0x05
   34CA F8                12675 	mov	r0,a
   34CB A6 05             12676 	mov	@r0,ar5
   34CD 08                12677 	inc	r0
   34CE A6 06             12678 	mov	@r0,ar6
   34D0 08                12679 	inc	r0
   34D1 A6 07             12680 	mov	@r0,ar7
                    34D3  12681 	C$tff.c$1249$1$1 ==.
                          12682 ;	tff.c:1249: res = validate(fs, dirobj->id);			/* Check validity of the object */
                          12683 ;	genPointerGet
                          12684 ;	genGenPointerGet
   34D3 A8*00             12685 	mov	r0,_bp
   34D5 08                12686 	inc	r0
   34D6 86 82             12687 	mov	dpl,@r0
   34D8 08                12688 	inc	r0
   34D9 86 83             12689 	mov	dph,@r0
   34DB 08                12690 	inc	r0
   34DC 86 F0             12691 	mov	b,@r0
   34DE 12s00r00          12692 	lcall	__gptrget
   34E1 FD                12693 	mov	r5,a
   34E2 A3                12694 	inc	dptr
   34E3 12s00r00          12695 	lcall	__gptrget
   34E6 FE                12696 	mov	r6,a
                          12697 ;	genIpush
   34E7 C0 05             12698 	push	ar5
   34E9 C0 06             12699 	push	ar6
                          12700 ;	genCall
   34EB E5*00             12701 	mov	a,_bp
   34ED 24 05             12702 	add	a,#0x05
   34EF F8                12703 	mov	r0,a
   34F0 86 82             12704 	mov	dpl,@r0
   34F2 08                12705 	inc	r0
   34F3 86 83             12706 	mov	dph,@r0
   34F5 08                12707 	inc	r0
   34F6 86 F0             12708 	mov	b,@r0
   34F8 12s21r7F          12709 	lcall	_validate
   34FB AD 82             12710 	mov	r5,dpl
   34FD 15 81             12711 	dec	sp
   34FF 15 81             12712 	dec	sp
                          12713 ;	genAssign
                    3501  12714 	C$tff.c$1250$1$1 ==.
                          12715 ;	tff.c:1250: if (res != FR_OK) return res;
                          12716 ;	genCmpEq
                          12717 ;	gencjneshort
   3501 BD 00 02          12718 	cjne	r5,#0x00,00127$
                          12719 ;	Peephole 112.b	changed ljmp to sjmp
   3504 80 05             12720 	sjmp	00102$
   3506                   12721 00127$:
                          12722 ;	genRet
   3506 8D 82             12723 	mov	dpl,r5
   3508 02s36rF5          12724 	ljmp	00117$
   350B                   12725 00102$:
                    350B  12726 	C$tff.c$1252$1$1 ==.
                          12727 ;	tff.c:1252: finfo->fname[0] = 0;
                          12728 ;	genIpush
                          12729 ;	genAssign
   350B E5*00             12730 	mov	a,_bp
   350D 24 FB             12731 	add	a,#0xfffffffb
   350F F8                12732 	mov	r0,a
   3510 86 05             12733 	mov	ar5,@r0
   3512 08                12734 	inc	r0
   3513 86 06             12735 	mov	ar6,@r0
   3515 08                12736 	inc	r0
   3516 86 07             12737 	mov	ar7,@r0
                          12738 ;	genPlus
                          12739 ;     genPlusIncr
   3518 74 09             12740 	mov	a,#0x09
                          12741 ;	Peephole 236.a	used r5 instead of ar5
   351A 2D                12742 	add	a,r5
   351B FA                12743 	mov	r2,a
                          12744 ;	Peephole 181	changed mov to clr
   351C E4                12745 	clr	a
                          12746 ;	Peephole 236.b	used r6 instead of ar6
   351D 3E                12747 	addc	a,r6
   351E FB                12748 	mov	r3,a
   351F 8F 04             12749 	mov	ar4,r7
                          12750 ;	genCast
                          12751 ;	genPointerSet
                          12752 ;	genGenPointerSet
   3521 8A 82             12753 	mov	dpl,r2
   3523 8B 83             12754 	mov	dph,r3
   3525 8C F0             12755 	mov	b,r4
                          12756 ;	Peephole 181	changed mov to clr
   3527 E4                12757 	clr	a
   3528 12s00r00          12758 	lcall	__gptrput
                    352B  12759 	C$tff.c$1265$1$1 ==.
                          12760 ;	tff.c:1265: return FR_OK;
                          12761 ;	genIpop
                    352B  12762 	C$tff.c$1253$2$2 ==.
                          12763 ;	tff.c:1253: while (dirobj->sect) {
                          12764 ;	genPlus
   352B E5*00             12765 	mov	a,_bp
   352D 24 05             12766 	add	a,#0x05
   352F F8                12767 	mov	r0,a
   3530 E5*00             12768 	mov	a,_bp
   3532 24 08             12769 	add	a,#0x08
   3534 F9                12770 	mov	r1,a
                          12771 ;     genPlusIncr
   3535 74 20             12772 	mov	a,#0x20
   3537 26                12773 	add	a,@r0
   3538 F7                12774 	mov	@r1,a
                          12775 ;	Peephole 181	changed mov to clr
   3539 E4                12776 	clr	a
   353A 08                12777 	inc	r0
   353B 36                12778 	addc	a,@r0
   353C 09                12779 	inc	r1
   353D F7                12780 	mov	@r1,a
   353E 08                12781 	inc	r0
   353F 09                12782 	inc	r1
   3540 E6                12783 	mov	a,@r0
   3541 F7                12784 	mov	@r1,a
                          12785 ;	genPlus
   3542 A8*00             12786 	mov	r0,_bp
   3544 08                12787 	inc	r0
   3545 E5*00             12788 	mov	a,_bp
   3547 24 0B             12789 	add	a,#0x0b
   3549 F9                12790 	mov	r1,a
                          12791 ;     genPlusIncr
   354A 74 02             12792 	mov	a,#0x02
   354C 26                12793 	add	a,@r0
   354D F7                12794 	mov	@r1,a
                          12795 ;	Peephole 181	changed mov to clr
   354E E4                12796 	clr	a
   354F 08                12797 	inc	r0
   3550 36                12798 	addc	a,@r0
   3551 09                12799 	inc	r1
   3552 F7                12800 	mov	@r1,a
   3553 08                12801 	inc	r0
   3554 09                12802 	inc	r1
   3555 E6                12803 	mov	a,@r0
   3556 F7                12804 	mov	@r1,a
                          12805 ;	genPlus
   3557 E5*00             12806 	mov	a,_bp
   3559 24 0E             12807 	add	a,#0x0e
   355B F8                12808 	mov	r0,a
                          12809 ;     genPlusIncr
   355C 74 09             12810 	mov	a,#0x09
                          12811 ;	Peephole 236.a	used r5 instead of ar5
   355E 2D                12812 	add	a,r5
   355F F6                12813 	mov	@r0,a
                          12814 ;	Peephole 181	changed mov to clr
   3560 E4                12815 	clr	a
                          12816 ;	Peephole 236.b	used r6 instead of ar6
   3561 3E                12817 	addc	a,r6
   3562 08                12818 	inc	r0
   3563 F6                12819 	mov	@r0,a
   3564 08                12820 	inc	r0
   3565 A6 07             12821 	mov	@r0,ar7
                          12822 ;	genPlus
   3567 A8*00             12823 	mov	r0,_bp
   3569 08                12824 	inc	r0
   356A E5*00             12825 	mov	a,_bp
   356C 24 11             12826 	add	a,#0x11
   356E F9                12827 	mov	r1,a
                          12828 ;     genPlusIncr
   356F 74 0F             12829 	mov	a,#0x0F
   3571 26                12830 	add	a,@r0
   3572 F7                12831 	mov	@r1,a
                          12832 ;	Peephole 181	changed mov to clr
   3573 E4                12833 	clr	a
   3574 08                12834 	inc	r0
   3575 36                12835 	addc	a,@r0
   3576 09                12836 	inc	r1
   3577 F7                12837 	mov	@r1,a
   3578 08                12838 	inc	r0
   3579 09                12839 	inc	r1
   357A E6                12840 	mov	a,@r0
   357B F7                12841 	mov	@r1,a
   357C                   12842 00114$:
                          12843 ;	genPointerGet
                          12844 ;	genGenPointerGet
   357C E5*00             12845 	mov	a,_bp
   357E 24 11             12846 	add	a,#0x11
   3580 F8                12847 	mov	r0,a
   3581 86 82             12848 	mov	dpl,@r0
   3583 08                12849 	inc	r0
   3584 86 83             12850 	mov	dph,@r0
   3586 08                12851 	inc	r0
   3587 86 F0             12852 	mov	b,@r0
   3589 E5*00             12853 	mov	a,_bp
   358B 24 14             12854 	add	a,#0x14
   358D F9                12855 	mov	r1,a
   358E 12s00r00          12856 	lcall	__gptrget
   3591 F7                12857 	mov	@r1,a
   3592 A3                12858 	inc	dptr
   3593 12s00r00          12859 	lcall	__gptrget
   3596 09                12860 	inc	r1
   3597 F7                12861 	mov	@r1,a
   3598 A3                12862 	inc	dptr
   3599 12s00r00          12863 	lcall	__gptrget
   359C 09                12864 	inc	r1
   359D F7                12865 	mov	@r1,a
   359E A3                12866 	inc	dptr
   359F 12s00r00          12867 	lcall	__gptrget
   35A2 09                12868 	inc	r1
   35A3 F7                12869 	mov	@r1,a
                          12870 ;	genIfx
   35A4 E5*00             12871 	mov	a,_bp
   35A6 24 14             12872 	add	a,#0x14
   35A8 F8                12873 	mov	r0,a
   35A9 E6                12874 	mov	a,@r0
   35AA 08                12875 	inc	r0
   35AB 46                12876 	orl	a,@r0
   35AC 08                12877 	inc	r0
   35AD 46                12878 	orl	a,@r0
   35AE 08                12879 	inc	r0
   35AF 46                12880 	orl	a,@r0
                          12881 ;	genIfxJump
   35B0 70 03             12882 	jnz	00128$
   35B2 02s36rF2          12883 	ljmp	00116$
   35B5                   12884 00128$:
                    35B5  12885 	C$tff.c$1254$2$2 ==.
                          12886 ;	tff.c:1254: if (!move_window(dirobj->sect))
                          12887 ;	genCall
   35B5 E5*00             12888 	mov	a,_bp
   35B7 24 14             12889 	add	a,#0x14
   35B9 F8                12890 	mov	r0,a
   35BA 86 82             12891 	mov	dpl,@r0
   35BC 08                12892 	inc	r0
   35BD 86 83             12893 	mov	dph,@r0
   35BF 08                12894 	inc	r0
   35C0 86 F0             12895 	mov	b,@r0
   35C2 08                12896 	inc	r0
   35C3 E6                12897 	mov	a,@r0
   35C4 C0 05             12898 	push	ar5
   35C6 C0 06             12899 	push	ar6
   35C8 C0 07             12900 	push	ar7
   35CA 12s00r00          12901 	lcall	_move_window
   35CD E5 82             12902 	mov	a,dpl
   35CF D0 07             12903 	pop	ar7
   35D1 D0 06             12904 	pop	ar6
   35D3 D0 05             12905 	pop	ar5
                          12906 ;	genIfx
                          12907 ;	genIfxJump
                          12908 ;	Peephole 108.b	removed ljmp by inverse jump logic
   35D5 70 06             12909 	jnz	00104$
                          12910 ;	Peephole 300	removed redundant label 00129$
                    35D7  12911 	C$tff.c$1255$2$2 ==.
                          12912 ;	tff.c:1255: return FR_RW_ERROR;
                          12913 ;	genRet
   35D7 75 82 08          12914 	mov	dpl,#0x08
   35DA 02s36rF5          12915 	ljmp	00117$
   35DD                   12916 00104$:
                    35DD  12917 	C$tff.c$1256$1$1 ==.
                          12918 ;	tff.c:1256: dir = &fs->win[(dirobj->index & 15) * 32];		/* pointer to the directory entry */
                          12919 ;	genIpush
   35DD C0 05             12920 	push	ar5
   35DF C0 06             12921 	push	ar6
   35E1 C0 07             12922 	push	ar7
                          12923 ;	genPointerGet
                          12924 ;	genGenPointerGet
   35E3 E5*00             12925 	mov	a,_bp
   35E5 24 0B             12926 	add	a,#0x0b
   35E7 F8                12927 	mov	r0,a
   35E8 86 82             12928 	mov	dpl,@r0
   35EA 08                12929 	inc	r0
   35EB 86 83             12930 	mov	dph,@r0
   35ED 08                12931 	inc	r0
   35EE 86 F0             12932 	mov	b,@r0
   35F0 12s00r00          12933 	lcall	__gptrget
   35F3 FD                12934 	mov	r5,a
   35F4 A3                12935 	inc	dptr
   35F5 12s00r00          12936 	lcall	__gptrget
   35F8 FE                12937 	mov	r6,a
                          12938 ;	genAnd
   35F9 53 05 0F          12939 	anl	ar5,#0x0F
                          12940 ;	genLeftShift
                          12941 ;	genLeftShiftLiteral
                          12942 ;	genlshTwo
                          12943 ;	peephole 177.g	optimized mov sequence
                          12944 ;	Peephole 181	changed mov to clr
   35FC E4                12945 	clr	a
   35FD FE                12946 	mov	r6,a
   35FE C4                12947 	swap	a
   35FF 23                12948 	rl	a
   3600 54 E0             12949 	anl	a,#0xe0
   3602 CD                12950 	xch	a,r5
   3603 C4                12951 	swap	a
   3604 23                12952 	rl	a
   3605 CD                12953 	xch	a,r5
   3606 6D                12954 	xrl	a,r5
   3607 CD                12955 	xch	a,r5
   3608 54 E0             12956 	anl	a,#0xe0
   360A CD                12957 	xch	a,r5
   360B 6D                12958 	xrl	a,r5
   360C FE                12959 	mov	r6,a
                          12960 ;	genPlus
   360D E5*00             12961 	mov	a,_bp
   360F 24 08             12962 	add	a,#0x08
   3611 F8                12963 	mov	r0,a
                          12964 ;	Peephole 236.g	used r5 instead of ar5
   3612 ED                12965 	mov	a,r5
   3613 26                12966 	add	a,@r0
   3614 FD                12967 	mov	r5,a
                          12968 ;	Peephole 236.g	used r6 instead of ar6
   3615 EE                12969 	mov	a,r6
   3616 08                12970 	inc	r0
   3617 36                12971 	addc	a,@r0
   3618 FE                12972 	mov	r6,a
   3619 08                12973 	inc	r0
   361A 86 07             12974 	mov	ar7,@r0
                          12975 ;	genAssign
   361C 8D 02             12976 	mov	ar2,r5
   361E 8E 03             12977 	mov	ar3,r6
   3620 8F 04             12978 	mov	ar4,r7
                    3622  12979 	C$tff.c$1257$2$2 ==.
                          12980 ;	tff.c:1257: c = dir[DIR_Name];
                          12981 ;	genPointerGet
                          12982 ;	genGenPointerGet
   3622 8A 82             12983 	mov	dpl,r2
   3624 8B 83             12984 	mov	dph,r3
   3626 8C F0             12985 	mov	b,r4
   3628 12s00r00          12986 	lcall	__gptrget
   362B FD                12987 	mov	r5,a
                          12988 ;	genAssign
   362C E5*00             12989 	mov	a,_bp
   362E 24 04             12990 	add	a,#0x04
   3630 F8                12991 	mov	r0,a
   3631 A6 05             12992 	mov	@r0,ar5
                    3633  12993 	C$tff.c$1258$1$1 ==.
                          12994 ;	tff.c:1258: if (c == 0) break;								/* Has it reached to end of dir? */
                          12995 ;	genIpop
   3633 D0 07             12996 	pop	ar7
   3635 D0 06             12997 	pop	ar6
   3637 D0 05             12998 	pop	ar5
                          12999 ;	genIfx
   3639 E5*00             13000 	mov	a,_bp
   363B 24 04             13001 	add	a,#0x04
   363D F8                13002 	mov	r0,a
   363E E6                13003 	mov	a,@r0
                          13004 ;	genIfxJump
   363F 70 03             13005 	jnz	00130$
   3641 02s36rF2          13006 	ljmp	00116$
   3644                   13007 00130$:
                    3644  13008 	C$tff.c$1259$2$2 ==.
                          13009 ;	tff.c:1259: if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))		/* Is it a valid entry? */
                          13010 ;	genCmpEq
   3644 E5*00             13011 	mov	a,_bp
   3646 24 04             13012 	add	a,#0x04
   3648 F8                13013 	mov	r0,a
                          13014 ;	gencjneshort
   3649 B6 E5 02          13015 	cjne	@r0,#0xE5,00131$
                          13016 ;	Peephole 112.b	changed ljmp to sjmp
   364C 80 44             13017 	sjmp	00108$
   364E                   13018 00131$:
                          13019 ;	genIpush
   364E C0 05             13020 	push	ar5
   3650 C0 06             13021 	push	ar6
   3652 C0 07             13022 	push	ar7
                          13023 ;	genPlus
                          13024 ;     genPlusIncr
   3654 74 0B             13025 	mov	a,#0x0B
                          13026 ;	Peephole 236.a	used r2 instead of ar2
   3656 2A                13027 	add	a,r2
   3657 FD                13028 	mov	r5,a
                          13029 ;	Peephole 181	changed mov to clr
   3658 E4                13030 	clr	a
                          13031 ;	Peephole 236.b	used r3 instead of ar3
   3659 3B                13032 	addc	a,r3
   365A FE                13033 	mov	r6,a
   365B 8C 07             13034 	mov	ar7,r4
                          13035 ;	genPointerGet
                          13036 ;	genGenPointerGet
   365D 8D 82             13037 	mov	dpl,r5
   365F 8E 83             13038 	mov	dph,r6
   3661 8F F0             13039 	mov	b,r7
   3663 12s00r00          13040 	lcall	__gptrget
                          13041 ;	genAnd
   3666 FD                13042 	mov	r5,a
                          13043 ;	Peephole 105	removed redundant mov
   3667 54 08             13044 	anl	a,#0x08
                          13045 ;	genIpop
   3669 D0 07             13046 	pop	ar7
   366B D0 06             13047 	pop	ar6
   366D D0 05             13048 	pop	ar5
                          13049 ;	genIfx
                          13050 ;	genIfxJump
                          13051 ;	Peephole 108.b	removed ljmp by inverse jump logic
   366F 70 21             13052 	jnz	00108$
                          13053 ;	Peephole 300	removed redundant label 00132$
                    3671  13054 	C$tff.c$1260$2$2 ==.
                          13055 ;	tff.c:1260: get_fileinfo(finfo, dir);
                          13056 ;	genIpush
   3671 C0 05             13057 	push	ar5
   3673 C0 06             13058 	push	ar6
   3675 C0 07             13059 	push	ar7
   3677 C0 02             13060 	push	ar2
   3679 C0 03             13061 	push	ar3
   367B C0 04             13062 	push	ar4
                          13063 ;	genCall
   367D 8D 82             13064 	mov	dpl,r5
   367F 8E 83             13065 	mov	dph,r6
   3681 8F F0             13066 	mov	b,r7
   3683 12s08rAF          13067 	lcall	_get_fileinfo
   3686 15 81             13068 	dec	sp
   3688 15 81             13069 	dec	sp
   368A 15 81             13070 	dec	sp
   368C D0 07             13071 	pop	ar7
   368E D0 06             13072 	pop	ar6
   3690 D0 05             13073 	pop	ar5
   3692                   13074 00108$:
                    3692  13075 	C$tff.c$1261$2$2 ==.
                          13076 ;	tff.c:1261: if (!next_dir_entry(dirobj)) dirobj->sect = 0;	/* Next entry */
                          13077 ;	genCall
   3692 A8*00             13078 	mov	r0,_bp
   3694 08                13079 	inc	r0
   3695 86 82             13080 	mov	dpl,@r0
   3697 08                13081 	inc	r0
   3698 86 83             13082 	mov	dph,@r0
   369A 08                13083 	inc	r0
   369B 86 F0             13084 	mov	b,@r0
   369D C0 05             13085 	push	ar5
   369F C0 06             13086 	push	ar6
   36A1 C0 07             13087 	push	ar7
   36A3 12s06r1E          13088 	lcall	_next_dir_entry
   36A6 E5 82             13089 	mov	a,dpl
   36A8 D0 07             13090 	pop	ar7
   36AA D0 06             13091 	pop	ar6
   36AC D0 05             13092 	pop	ar5
                          13093 ;	genIfx
                          13094 ;	genIfxJump
                          13095 ;	Peephole 108.b	removed ljmp by inverse jump logic
   36AE 70 27             13096 	jnz	00111$
                          13097 ;	Peephole 300	removed redundant label 00133$
                          13098 ;	genPlus
   36B0 A8*00             13099 	mov	r0,_bp
   36B2 08                13100 	inc	r0
                          13101 ;     genPlusIncr
   36B3 74 0F             13102 	mov	a,#0x0F
   36B5 26                13103 	add	a,@r0
   36B6 FA                13104 	mov	r2,a
                          13105 ;	Peephole 181	changed mov to clr
   36B7 E4                13106 	clr	a
   36B8 08                13107 	inc	r0
   36B9 36                13108 	addc	a,@r0
   36BA FB                13109 	mov	r3,a
   36BB 08                13110 	inc	r0
   36BC 86 04             13111 	mov	ar4,@r0
                          13112 ;	genPointerSet
                          13113 ;	genGenPointerSet
   36BE 8A 82             13114 	mov	dpl,r2
   36C0 8B 83             13115 	mov	dph,r3
   36C2 8C F0             13116 	mov	b,r4
                          13117 ;	Peephole 181	changed mov to clr
   36C4 E4                13118 	clr	a
   36C5 12s00r00          13119 	lcall	__gptrput
   36C8 A3                13120 	inc	dptr
                          13121 ;	Peephole 181	changed mov to clr
   36C9 E4                13122 	clr	a
   36CA 12s00r00          13123 	lcall	__gptrput
   36CD A3                13124 	inc	dptr
                          13125 ;	Peephole 181	changed mov to clr
   36CE E4                13126 	clr	a
   36CF 12s00r00          13127 	lcall	__gptrput
   36D2 A3                13128 	inc	dptr
                          13129 ;	Peephole 181	changed mov to clr
   36D3 E4                13130 	clr	a
   36D4 12s00r00          13131 	lcall	__gptrput
   36D7                   13132 00111$:
                    36D7  13133 	C$tff.c$1262$2$2 ==.
                          13134 ;	tff.c:1262: if (finfo->fname[0]) break;						/* Found valid entry */
                          13135 ;	genCast
   36D7 E5*00             13136 	mov	a,_bp
   36D9 24 0E             13137 	add	a,#0x0e
   36DB F8                13138 	mov	r0,a
   36DC 86 02             13139 	mov	ar2,@r0
   36DE 08                13140 	inc	r0
   36DF 86 03             13141 	mov	ar3,@r0
   36E1 08                13142 	inc	r0
   36E2 86 04             13143 	mov	ar4,@r0
                          13144 ;	genPointerGet
                          13145 ;	genGenPointerGet
   36E4 8A 82             13146 	mov	dpl,r2
   36E6 8B 83             13147 	mov	dph,r3
   36E8 8C F0             13148 	mov	b,r4
   36EA 12s00r00          13149 	lcall	__gptrget
                          13150 ;	genIfxJump
   36ED 70 03             13151 	jnz	00134$
   36EF 02s35r7C          13152 	ljmp	00114$
   36F2                   13153 00134$:
   36F2                   13154 00116$:
                    36F2  13155 	C$tff.c$1265$1$1 ==.
                          13156 ;	tff.c:1265: return FR_OK;
                          13157 ;	genRet
   36F2 75 82 00          13158 	mov	dpl,#0x00
   36F5                   13159 00117$:
   36F5 85*00 81          13160 	mov	sp,_bp
   36F8 D0*00             13161 	pop	_bp
                    36FA  13162 	C$tff.c$1266$1$1 ==.
                    36FA  13163 	XG$f_readdir$0$0 ==.
   36FA 22                13164 	ret
                          13165 	.area CSEG    (CODE)
                          13166 	.area CONST   (CODE)
                    0000  13167 Ftff$_str_0$0$0 == .
   0000                   13168 __str_0:
   0000 46 41 54          13169 	.ascii "FAT"
   0003 00                13170 	.db 0x00
                    0004  13171 Ftff$_str_1$0$0 == .
   0004                   13172 __str_1:
   0004 46 41 54 33 32    13173 	.ascii "FAT32"
   0009 00                13174 	.db 0x00
                          13175 	.area XINIT   (CODE)
