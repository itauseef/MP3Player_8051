                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat May 02 15:12:59 2015
                              5 ;--------------------------------------------------------
                              6 	.module tff
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Stat
                             13 	.globl _f_mount
                             14 	.globl _f_open
                             15 	.globl _f_read
                             16 	.globl _f_mp3_read
                             17 	.globl _f_txt_read
                             18 	.globl _f_close
                             19 	.globl _f_lseek
                             20 	.globl _f_opendir
                             21 	.globl _f_readdir
                             22 ;--------------------------------------------------------
                             23 ; special function registers
                             24 ;--------------------------------------------------------
                             25 	.area RSEG    (DATA)
                             26 ;--------------------------------------------------------
                             27 ; special function bits
                             28 ;--------------------------------------------------------
                             29 	.area RSEG    (DATA)
                             30 ;--------------------------------------------------------
                             31 ; overlayable register banks
                             32 ;--------------------------------------------------------
                             33 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      34 	.ds 8
                             35 ;--------------------------------------------------------
                             36 ; internal ram data
                             37 ;--------------------------------------------------------
                             38 	.area DSEG    (DATA)
   0000                      39 _FatFs:
   0000                      40 	.ds 3
   0003                      41 _fsid:
   0003                      42 	.ds 2
                             43 ;--------------------------------------------------------
                             44 ; overlayable items in internal ram 
                             45 ;--------------------------------------------------------
                             46 	.area OSEG    (OVR,DATA)
                             47 ;--------------------------------------------------------
                             48 ; indirectly addressable internal ram data
                             49 ;--------------------------------------------------------
                             50 	.area ISEG    (DATA)
                             51 ;--------------------------------------------------------
                             52 ; bit data
                             53 ;--------------------------------------------------------
                             54 	.area BSEG    (BIT)
                             55 ;--------------------------------------------------------
                             56 ; paged external ram data
                             57 ;--------------------------------------------------------
                             58 	.area PSEG    (PAG,XDATA)
                             59 ;--------------------------------------------------------
                             60 ; external ram data
                             61 ;--------------------------------------------------------
                             62 	.area XSEG    (XDATA)
   0000                      63 _Stat::
   0000                      64 	.ds 1
                             65 ;--------------------------------------------------------
                             66 ; external initialized ram data
                             67 ;--------------------------------------------------------
                             68 	.area XISEG   (XDATA)
                             69 	.area HOME    (CODE)
                             70 	.area GSINIT0 (CODE)
                             71 	.area GSINIT1 (CODE)
                             72 	.area GSINIT2 (CODE)
                             73 	.area GSINIT3 (CODE)
                             74 	.area GSINIT4 (CODE)
                             75 	.area GSINIT5 (CODE)
                             76 	.area GSINIT  (CODE)
                             77 	.area GSFINAL (CODE)
                             78 	.area CSEG    (CODE)
                             79 ;--------------------------------------------------------
                             80 ; global & static initialisations
                             81 ;--------------------------------------------------------
                             82 	.area HOME    (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area GSINIT  (CODE)
                             86 ;--------------------------------------------------------
                             87 ; Home
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area CSEG    (CODE)
                             91 ;--------------------------------------------------------
                             92 ; code
                             93 ;--------------------------------------------------------
                             94 	.area CSEG    (CODE)
                             95 ;------------------------------------------------------------
                             96 ;Allocation info for local variables in function 'move_window'
                             97 ;------------------------------------------------------------
                             98 ;sector                    Allocated to stack - offset 1
                             99 ;wsect                     Allocated to registers r6 r7 r2 r3 
                            100 ;fs                        Allocated to stack - offset 5
                            101 ;------------------------------------------------------------
                            102 ;	FatDrivers/tff.c:79: BOOL move_window (		/* TRUE: successful, FALSE: failed */
                            103 ;	-----------------------------------------
                            104 ;	 function move_window
                            105 ;	-----------------------------------------
   0000                     106 _move_window:
                    0002    107 	ar2 = 0x02
                    0003    108 	ar3 = 0x03
                    0004    109 	ar4 = 0x04
                    0005    110 	ar5 = 0x05
                    0006    111 	ar6 = 0x06
                    0007    112 	ar7 = 0x07
                    0000    113 	ar0 = 0x00
                    0001    114 	ar1 = 0x01
   0000 C0*00               115 	push	_bp
   0002 85 81*00            116 	mov	_bp,sp
                            117 ;     genReceive
   0005 C0 82               118 	push	dpl
   0007 C0 83               119 	push	dph
   0009 C0 F0               120 	push	b
   000B C0 E0               121 	push	acc
   000D 05 81               122 	inc	sp
   000F 05 81               123 	inc	sp
   0011 05 81               124 	inc	sp
                            125 ;	FatDrivers/tff.c:84: FATFS *fs = FatFs;
                            126 ;	genAssign
   0013 E5*00               127 	mov	a,_bp
   0015 24 05               128 	add	a,#0x05
   0017 F8                  129 	mov	r0,a
   0018 A6*00               130 	mov	@r0,_FatFs
   001A 08                  131 	inc	r0
   001B A6*01               132 	mov	@r0,(_FatFs + 1)
   001D 08                  133 	inc	r0
   001E A6*02               134 	mov	@r0,(_FatFs + 2)
                            135 ;	FatDrivers/tff.c:87: wsect = fs->winsect;
                            136 ;	genPlus
   0020 E5*00               137 	mov	a,_bp
   0022 24 05               138 	add	a,#0x05
   0024 F8                  139 	mov	r0,a
                            140 ;     genPlusIncr
   0025 74 04               141 	mov	a,#0x04
   0027 26                  142 	add	a,@r0
   0028 FE                  143 	mov	r6,a
                            144 ;	Peephole 181	changed mov to clr
   0029 E4                  145 	clr	a
   002A 08                  146 	inc	r0
   002B 36                  147 	addc	a,@r0
   002C FF                  148 	mov	r7,a
   002D 08                  149 	inc	r0
   002E 86 02               150 	mov	ar2,@r0
                            151 ;	genPointerGet
                            152 ;	genGenPointerGet
   0030 8E 82               153 	mov	dpl,r6
   0032 8F 83               154 	mov	dph,r7
   0034 8A F0               155 	mov	b,r2
   0036 12s00r00            156 	lcall	__gptrget
   0039 FE                  157 	mov	r6,a
   003A A3                  158 	inc	dptr
   003B 12s00r00            159 	lcall	__gptrget
   003E FF                  160 	mov	r7,a
   003F A3                  161 	inc	dptr
   0040 12s00r00            162 	lcall	__gptrget
   0043 FA                  163 	mov	r2,a
   0044 A3                  164 	inc	dptr
   0045 12s00r00            165 	lcall	__gptrget
   0048 FB                  166 	mov	r3,a
                            167 ;	genAssign
                            168 ;	FatDrivers/tff.c:88: if (wsect != sector) {	/* Changed current window */
                            169 ;	genCmpEq
   0049 A8*00               170 	mov	r0,_bp
   004B 08                  171 	inc	r0
                            172 ;	gencjneshort
   004C E6                  173 	mov	a,@r0
   004D B5 06 12            174 	cjne	a,ar6,00112$
   0050 08                  175 	inc	r0
   0051 E6                  176 	mov	a,@r0
   0052 B5 07 0D            177 	cjne	a,ar7,00112$
   0055 08                  178 	inc	r0
   0056 E6                  179 	mov	a,@r0
   0057 B5 02 08            180 	cjne	a,ar2,00112$
   005A 08                  181 	inc	r0
   005B E6                  182 	mov	a,@r0
   005C B5 03 03            183 	cjne	a,ar3,00112$
   005F 02s00rE1            184 	ljmp	00106$
   0062                     185 00112$:
                            186 ;	FatDrivers/tff.c:103: if (sector) {
                            187 ;	genIfx
   0062 A8*00               188 	mov	r0,_bp
   0064 08                  189 	inc	r0
   0065 E6                  190 	mov	a,@r0
   0066 08                  191 	inc	r0
   0067 46                  192 	orl	a,@r0
   0068 08                  193 	inc	r0
   0069 46                  194 	orl	a,@r0
   006A 08                  195 	inc	r0
   006B 46                  196 	orl	a,@r0
                            197 ;	genIfxJump
                            198 ;	Peephole 108.c	removed ljmp by inverse jump logic
   006C 60 73               199 	jz	00106$
                            200 ;	Peephole 300	removed redundant label 00113$
                            201 ;	FatDrivers/tff.c:104: if (disk_read(0, fs->win, sector, 1) != RES_OK)
                            202 ;	genPlus
   006E E5*00               203 	mov	a,_bp
   0070 24 05               204 	add	a,#0x05
   0072 F8                  205 	mov	r0,a
                            206 ;     genPlusIncr
   0073 74 20               207 	mov	a,#0x20
   0075 26                  208 	add	a,@r0
   0076 FA                  209 	mov	r2,a
                            210 ;	Peephole 181	changed mov to clr
   0077 E4                  211 	clr	a
   0078 08                  212 	inc	r0
   0079 36                  213 	addc	a,@r0
   007A FB                  214 	mov	r3,a
   007B 08                  215 	inc	r0
   007C 86 04               216 	mov	ar4,@r0
                            217 ;	genIpush
   007E 74 01               218 	mov	a,#0x01
   0080 C0 E0               219 	push	acc
                            220 ;	genIpush
   0082 A8*00               221 	mov	r0,_bp
   0084 08                  222 	inc	r0
   0085 E6                  223 	mov	a,@r0
   0086 C0 E0               224 	push	acc
   0088 08                  225 	inc	r0
   0089 E6                  226 	mov	a,@r0
   008A C0 E0               227 	push	acc
   008C 08                  228 	inc	r0
   008D E6                  229 	mov	a,@r0
   008E C0 E0               230 	push	acc
   0090 08                  231 	inc	r0
   0091 E6                  232 	mov	a,@r0
   0092 C0 E0               233 	push	acc
                            234 ;	genIpush
   0094 C0 02               235 	push	ar2
   0096 C0 03               236 	push	ar3
   0098 C0 04               237 	push	ar4
                            238 ;	genCall
   009A 75 82 00            239 	mov	dpl,#0x00
   009D 12s00r00            240 	lcall	_disk_read
   00A0 AA 82               241 	mov	r2,dpl
   00A2 E5 81               242 	mov	a,sp
   00A4 24 F8               243 	add	a,#0xf8
   00A6 F5 81               244 	mov	sp,a
                            245 ;	genCmpEq
                            246 ;	gencjneshort
   00A8 BA 00 02            247 	cjne	r2,#0x00,00114$
                            248 ;	Peephole 112.b	changed ljmp to sjmp
   00AB 80 05               249 	sjmp	00102$
   00AD                     250 00114$:
                            251 ;	FatDrivers/tff.c:105: return FALSE;
                            252 ;	genRet
   00AD 75 82 00            253 	mov	dpl,#0x00
                            254 ;	Peephole 112.b	changed ljmp to sjmp
   00B0 80 32               255 	sjmp	00107$
   00B2                     256 00102$:
                            257 ;	FatDrivers/tff.c:106: fs->winsect = sector;
                            258 ;	genPlus
   00B2 E5*00               259 	mov	a,_bp
   00B4 24 05               260 	add	a,#0x05
   00B6 F8                  261 	mov	r0,a
                            262 ;     genPlusIncr
   00B7 74 04               263 	mov	a,#0x04
   00B9 26                  264 	add	a,@r0
   00BA FA                  265 	mov	r2,a
                            266 ;	Peephole 181	changed mov to clr
   00BB E4                  267 	clr	a
   00BC 08                  268 	inc	r0
   00BD 36                  269 	addc	a,@r0
   00BE FB                  270 	mov	r3,a
   00BF 08                  271 	inc	r0
   00C0 86 04               272 	mov	ar4,@r0
                            273 ;	genPointerSet
                            274 ;	genGenPointerSet
   00C2 8A 82               275 	mov	dpl,r2
   00C4 8B 83               276 	mov	dph,r3
   00C6 8C F0               277 	mov	b,r4
   00C8 A8*00               278 	mov	r0,_bp
   00CA 08                  279 	inc	r0
   00CB E6                  280 	mov	a,@r0
   00CC 12s00r00            281 	lcall	__gptrput
   00CF A3                  282 	inc	dptr
   00D0 08                  283 	inc	r0
   00D1 E6                  284 	mov	a,@r0
   00D2 12s00r00            285 	lcall	__gptrput
   00D5 A3                  286 	inc	dptr
   00D6 08                  287 	inc	r0
   00D7 E6                  288 	mov	a,@r0
   00D8 12s00r00            289 	lcall	__gptrput
   00DB A3                  290 	inc	dptr
   00DC 08                  291 	inc	r0
   00DD E6                  292 	mov	a,@r0
   00DE 12s00r00            293 	lcall	__gptrput
   00E1                     294 00106$:
                            295 ;	FatDrivers/tff.c:109: return TRUE;
                            296 ;	genRet
   00E1 75 82 01            297 	mov	dpl,#0x01
   00E4                     298 00107$:
   00E4 85*00 81            299 	mov	sp,_bp
   00E7 D0*00               300 	pop	_bp
   00E9 22                  301 	ret
                            302 ;------------------------------------------------------------
                            303 ;Allocation info for local variables in function 'get_cluster'
                            304 ;------------------------------------------------------------
                            305 ;clust                     Allocated to stack - offset 1
                            306 ;wc                        Allocated to stack - offset 5
                            307 ;bc                        Allocated to stack - offset 7
                            308 ;fatsect                   Allocated to stack - offset 9
                            309 ;fs                        Allocated to stack - offset 13
                            310 ;------------------------------------------------------------
                            311 ;	FatDrivers/tff.c:156: CLUST get_cluster (		/* 0,>=2: successful, 1: failed */
                            312 ;	-----------------------------------------
                            313 ;	 function get_cluster
                            314 ;	-----------------------------------------
   00EA                     315 _get_cluster:
   00EA C0*00               316 	push	_bp
   00EC 85 81*00            317 	mov	_bp,sp
                            318 ;     genReceive
   00EF C0 82               319 	push	dpl
   00F1 C0 83               320 	push	dph
   00F3 C0 F0               321 	push	b
   00F5 C0 E0               322 	push	acc
   00F7 E5 81               323 	mov	a,sp
   00F9 24 0F               324 	add	a,#0x0f
   00FB F5 81               325 	mov	sp,a
                            326 ;	FatDrivers/tff.c:162: FATFS *fs = FatFs;
                            327 ;	genAssign
   00FD E5*00               328 	mov	a,_bp
   00FF 24 0D               329 	add	a,#0x0d
   0101 F8                  330 	mov	r0,a
   0102 A6*00               331 	mov	@r0,_FatFs
   0104 08                  332 	inc	r0
   0105 A6*01               333 	mov	@r0,(_FatFs + 1)
   0107 08                  334 	inc	r0
   0108 A6*02               335 	mov	@r0,(_FatFs + 2)
                            336 ;	FatDrivers/tff.c:165: if (clust >= 2 && clust < fs->max_clust) {		/* Valid cluster# */
                            337 ;	genCmpLt
   010A A8*00               338 	mov	r0,_bp
   010C 08                  339 	inc	r0
                            340 ;	genCmp
   010D C3                  341 	clr	c
   010E E6                  342 	mov	a,@r0
   010F 94 02               343 	subb	a,#0x02
   0111 08                  344 	inc	r0
   0112 E6                  345 	mov	a,@r0
   0113 94 00               346 	subb	a,#0x00
   0115 08                  347 	inc	r0
   0116 E6                  348 	mov	a,@r0
   0117 94 00               349 	subb	a,#0x00
   0119 08                  350 	inc	r0
   011A E6                  351 	mov	a,@r0
   011B 94 00               352 	subb	a,#0x00
                            353 ;	genIfxJump
   011D 50 03               354 	jnc	00130$
   011F 02s04r1A            355 	ljmp	00114$
   0122                     356 00130$:
                            357 ;	genPlus
   0122 E5*00               358 	mov	a,_bp
   0124 24 0D               359 	add	a,#0x0d
   0126 F8                  360 	mov	r0,a
                            361 ;     genPlusIncr
   0127 74 18               362 	mov	a,#0x18
   0129 26                  363 	add	a,@r0
   012A FE                  364 	mov	r6,a
                            365 ;	Peephole 181	changed mov to clr
   012B E4                  366 	clr	a
   012C 08                  367 	inc	r0
   012D 36                  368 	addc	a,@r0
   012E FF                  369 	mov	r7,a
   012F 08                  370 	inc	r0
   0130 86 02               371 	mov	ar2,@r0
                            372 ;	genPointerGet
                            373 ;	genGenPointerGet
   0132 8E 82               374 	mov	dpl,r6
   0134 8F 83               375 	mov	dph,r7
   0136 8A F0               376 	mov	b,r2
   0138 12s00r00            377 	lcall	__gptrget
   013B FE                  378 	mov	r6,a
   013C A3                  379 	inc	dptr
   013D 12s00r00            380 	lcall	__gptrget
   0140 FF                  381 	mov	r7,a
   0141 A3                  382 	inc	dptr
   0142 12s00r00            383 	lcall	__gptrget
   0145 FA                  384 	mov	r2,a
   0146 A3                  385 	inc	dptr
   0147 12s00r00            386 	lcall	__gptrget
   014A FB                  387 	mov	r3,a
                            388 ;	genCmpLt
   014B A8*00               389 	mov	r0,_bp
   014D 08                  390 	inc	r0
                            391 ;	genCmp
   014E C3                  392 	clr	c
   014F E6                  393 	mov	a,@r0
   0150 9E                  394 	subb	a,r6
   0151 08                  395 	inc	r0
   0152 E6                  396 	mov	a,@r0
   0153 9F                  397 	subb	a,r7
   0154 08                  398 	inc	r0
   0155 E6                  399 	mov	a,@r0
   0156 9A                  400 	subb	a,r2
   0157 08                  401 	inc	r0
   0158 E6                  402 	mov	a,@r0
   0159 9B                  403 	subb	a,r3
                            404 ;	genIfxJump
   015A 40 03               405 	jc	00131$
   015C 02s04r1A            406 	ljmp	00114$
   015F                     407 00131$:
                            408 ;	FatDrivers/tff.c:166: fatsect = fs->fatbase;
                            409 ;	genPlus
   015F E5*00               410 	mov	a,_bp
   0161 24 0D               411 	add	a,#0x0d
   0163 F8                  412 	mov	r0,a
                            413 ;     genPlusIncr
   0164 74 08               414 	mov	a,#0x08
   0166 26                  415 	add	a,@r0
   0167 FA                  416 	mov	r2,a
                            417 ;	Peephole 181	changed mov to clr
   0168 E4                  418 	clr	a
   0169 08                  419 	inc	r0
   016A 36                  420 	addc	a,@r0
   016B FB                  421 	mov	r3,a
   016C 08                  422 	inc	r0
   016D 86 04               423 	mov	ar4,@r0
                            424 ;	genPointerGet
                            425 ;	genGenPointerGet
   016F 8A 82               426 	mov	dpl,r2
   0171 8B 83               427 	mov	dph,r3
   0173 8C F0               428 	mov	b,r4
   0175 12s00r00            429 	lcall	__gptrget
   0178 FA                  430 	mov	r2,a
   0179 A3                  431 	inc	dptr
   017A 12s00r00            432 	lcall	__gptrget
   017D FB                  433 	mov	r3,a
   017E A3                  434 	inc	dptr
   017F 12s00r00            435 	lcall	__gptrget
   0182 FC                  436 	mov	r4,a
   0183 A3                  437 	inc	dptr
   0184 12s00r00            438 	lcall	__gptrget
   0187 FD                  439 	mov	r5,a
                            440 ;	genAssign
   0188 E5*00               441 	mov	a,_bp
   018A 24 09               442 	add	a,#0x09
   018C F8                  443 	mov	r0,a
   018D A6 02               444 	mov	@r0,ar2
   018F 08                  445 	inc	r0
   0190 A6 03               446 	mov	@r0,ar3
   0192 08                  447 	inc	r0
   0193 A6 04               448 	mov	@r0,ar4
   0195 08                  449 	inc	r0
   0196 A6 05               450 	mov	@r0,ar5
                            451 ;	FatDrivers/tff.c:167: switch (fs->fs_type) {
                            452 ;	genPlus
   0198 E5*00               453 	mov	a,_bp
   019A 24 0D               454 	add	a,#0x0d
   019C F8                  455 	mov	r0,a
                            456 ;     genPlusIncr
   019D 74 1C               457 	mov	a,#0x1C
   019F 26                  458 	add	a,@r0
   01A0 FE                  459 	mov	r6,a
                            460 ;	Peephole 181	changed mov to clr
   01A1 E4                  461 	clr	a
   01A2 08                  462 	inc	r0
   01A3 36                  463 	addc	a,@r0
   01A4 FF                  464 	mov	r7,a
   01A5 08                  465 	inc	r0
   01A6 86 02               466 	mov	ar2,@r0
                            467 ;	genPointerGet
                            468 ;	genGenPointerGet
   01A8 8E 82               469 	mov	dpl,r6
   01AA 8F 83               470 	mov	dph,r7
   01AC 8A F0               471 	mov	b,r2
   01AE 12s00r00            472 	lcall	__gptrget
   01B1 FA                  473 	mov	r2,a
                            474 ;	genCmpEq
                            475 ;	gencjneshort
   01B2 BA 01 02            476 	cjne	r2,#0x01,00132$
                            477 ;	Peephole 112.b	changed ljmp to sjmp
   01B5 80 0F               478 	sjmp	00101$
   01B7                     479 00132$:
                            480 ;	genCmpEq
                            481 ;	gencjneshort
   01B7 BA 02 03            482 	cjne	r2,#0x02,00133$
   01BA 02s03r0B            483 	ljmp	00106$
   01BD                     484 00133$:
                            485 ;	genCmpEq
                            486 ;	gencjneshort
   01BD BA 03 03            487 	cjne	r2,#0x03,00134$
   01C0 02s03r82            488 	ljmp	00109$
   01C3                     489 00134$:
   01C3 02s04r1A            490 	ljmp	00114$
                            491 ;	FatDrivers/tff.c:168: case FS_FAT12 :
   01C6                     492 00101$:
                            493 ;	FatDrivers/tff.c:169: bc = (WORD)clust * 3 / 2;
                            494 ;	genCast
   01C6 A8*00               495 	mov	r0,_bp
   01C8 08                  496 	inc	r0
   01C9 86 82               497 	mov	dpl,@r0
   01CB 08                  498 	inc	r0
   01CC 86 83               499 	mov	dph,@r0
                            500 ;	genIpush
   01CE 74 03               501 	mov	a,#0x03
   01D0 C0 E0               502 	push	acc
                            503 ;	Peephole 181	changed mov to clr
   01D2 E4                  504 	clr	a
   01D3 C0 E0               505 	push	acc
                            506 ;	genCall
   01D5 12s00r00            507 	lcall	__mulint
   01D8 AA 82               508 	mov	r2,dpl
   01DA AB 83               509 	mov	r3,dph
   01DC 15 81               510 	dec	sp
   01DE 15 81               511 	dec	sp
                            512 ;	genRightShift
                            513 ;	genRightShiftLiteral
   01E0 E5*00               514 	mov	a,_bp
   01E2 24 07               515 	add	a,#0x07
   01E4 F8                  516 	mov	r0,a
                            517 ;	genrshTwo
   01E5 A6 02               518 	mov	@r0,ar2
   01E7 EB                  519 	mov	a,r3
   01E8 C3                  520 	clr	c
   01E9 13                  521 	rrc	a
   01EA C6                  522 	xch	a,@r0
   01EB 13                  523 	rrc	a
   01EC C6                  524 	xch	a,@r0
   01ED 08                  525 	inc	r0
   01EE F6                  526 	mov	@r0,a
                            527 ;	FatDrivers/tff.c:170: if (!move_window(fatsect + bc / 512)) break;
                            528 ;	genRightShift
                            529 ;	genRightShiftLiteral
   01EF E5*00               530 	mov	a,_bp
   01F1 24 07               531 	add	a,#0x07
                            532 ;	genrshTwo
                            533 ;	Peephole 185	changed order of increment (acc incremented also!)
   01F3 04                  534 	inc	a
   01F4 F8                  535 	mov	r0,a
   01F5 E6                  536 	mov	a,@r0
   01F6 C3                  537 	clr	c
   01F7 13                  538 	rrc	a
   01F8 FC                  539 	mov	r4,a
                            540 ;	genCast
                            541 ;	genPlus
                            542 ;	Peephole 3.c	changed mov to clr
                            543 ;	Peephole 3.b	changed mov to clr
   01F9 E4                  544 	clr	a
   01FA FD                  545 	mov	r5,a
   01FB FE                  546 	mov	r6,a
   01FC FF                  547 	mov	r7,a
   01FD E5*00               548 	mov	a,_bp
   01FF 24 09               549 	add	a,#0x09
   0201 F8                  550 	mov	r0,a
                            551 ;	Peephole 236.g	used r4 instead of ar4
   0202 EC                  552 	mov	a,r4
   0203 26                  553 	add	a,@r0
   0204 FC                  554 	mov	r4,a
                            555 ;	Peephole 236.g	used r5 instead of ar5
   0205 ED                  556 	mov	a,r5
   0206 08                  557 	inc	r0
   0207 36                  558 	addc	a,@r0
   0208 FD                  559 	mov	r5,a
                            560 ;	Peephole 236.g	used r6 instead of ar6
   0209 EE                  561 	mov	a,r6
   020A 08                  562 	inc	r0
   020B 36                  563 	addc	a,@r0
   020C FE                  564 	mov	r6,a
                            565 ;	Peephole 236.g	used r7 instead of ar7
   020D EF                  566 	mov	a,r7
   020E 08                  567 	inc	r0
   020F 36                  568 	addc	a,@r0
                            569 ;	genCall
   0210 FF                  570 	mov	r7,a
   0211 8C 82               571 	mov	dpl,r4
   0213 8D 83               572 	mov	dph,r5
   0215 8E F0               573 	mov	b,r6
                            574 ;	Peephole 191	removed redundant mov
   0217 12s00r00            575 	lcall	_move_window
   021A E5 82               576 	mov	a,dpl
                            577 ;	genIfx
                            578 ;	genIfxJump
   021C 70 03               579 	jnz	00135$
   021E 02s04r1A            580 	ljmp	00114$
   0221                     581 00135$:
                            582 ;	FatDrivers/tff.c:171: wc = fs->win[bc % 512]; bc++;
                            583 ;	genPlus
   0221 E5*00               584 	mov	a,_bp
   0223 24 0D               585 	add	a,#0x0d
   0225 F8                  586 	mov	r0,a
                            587 ;     genPlusIncr
   0226 74 20               588 	mov	a,#0x20
   0228 26                  589 	add	a,@r0
   0229 FC                  590 	mov	r4,a
                            591 ;	Peephole 181	changed mov to clr
   022A E4                  592 	clr	a
   022B 08                  593 	inc	r0
   022C 36                  594 	addc	a,@r0
   022D FD                  595 	mov	r5,a
   022E 08                  596 	inc	r0
   022F 86 06               597 	mov	ar6,@r0
                            598 ;	genAnd
   0231 E5*00               599 	mov	a,_bp
   0233 24 07               600 	add	a,#0x07
   0235 F8                  601 	mov	r0,a
   0236 86 07               602 	mov	ar7,@r0
   0238 74 01               603 	mov	a,#0x01
   023A 08                  604 	inc	r0
   023B 56                  605 	anl	a,@r0
   023C FA                  606 	mov	r2,a
                            607 ;	genPlus
                            608 ;	Peephole 236.g	used r7 instead of ar7
   023D EF                  609 	mov	a,r7
                            610 ;	Peephole 236.a	used r4 instead of ar4
   023E 2C                  611 	add	a,r4
   023F FC                  612 	mov	r4,a
                            613 ;	Peephole 236.g	used r2 instead of ar2
   0240 EA                  614 	mov	a,r2
                            615 ;	Peephole 236.b	used r5 instead of ar5
   0241 3D                  616 	addc	a,r5
   0242 FD                  617 	mov	r5,a
                            618 ;	genPointerGet
                            619 ;	genGenPointerGet
   0243 8C 82               620 	mov	dpl,r4
   0245 8D 83               621 	mov	dph,r5
   0247 8E F0               622 	mov	b,r6
   0249 12s00r00            623 	lcall	__gptrget
   024C FC                  624 	mov	r4,a
                            625 ;	genCast
   024D E5*00               626 	mov	a,_bp
   024F 24 05               627 	add	a,#0x05
   0251 F8                  628 	mov	r0,a
   0252 A6 04               629 	mov	@r0,ar4
   0254 08                  630 	inc	r0
   0255 76 00               631 	mov	@r0,#0x00
                            632 ;	genPlus
   0257 E5*00               633 	mov	a,_bp
   0259 24 07               634 	add	a,#0x07
   025B F8                  635 	mov	r0,a
                            636 ;     genPlusIncr
   025C 74 01               637 	mov	a,#0x01
   025E 26                  638 	add	a,@r0
   025F F6                  639 	mov	@r0,a
                            640 ;	Peephole 181	changed mov to clr
   0260 E4                  641 	clr	a
   0261 08                  642 	inc	r0
   0262 36                  643 	addc	a,@r0
   0263 F6                  644 	mov	@r0,a
                            645 ;	FatDrivers/tff.c:172: if (!move_window(fatsect + bc / 512)) break;
                            646 ;	genRightShift
                            647 ;	genRightShiftLiteral
   0264 E5*00               648 	mov	a,_bp
   0266 24 07               649 	add	a,#0x07
                            650 ;	genrshTwo
                            651 ;	Peephole 185	changed order of increment (acc incremented also!)
   0268 04                  652 	inc	a
   0269 F8                  653 	mov	r0,a
   026A E6                  654 	mov	a,@r0
   026B C3                  655 	clr	c
   026C 13                  656 	rrc	a
   026D FB                  657 	mov	r3,a
                            658 ;	genCast
                            659 ;	genPlus
                            660 ;	Peephole 3.c	changed mov to clr
                            661 ;	Peephole 3.b	changed mov to clr
   026E E4                  662 	clr	a
   026F FD                  663 	mov	r5,a
   0270 FE                  664 	mov	r6,a
   0271 FF                  665 	mov	r7,a
   0272 E5*00               666 	mov	a,_bp
   0274 24 09               667 	add	a,#0x09
   0276 F8                  668 	mov	r0,a
                            669 ;	Peephole 236.g	used r3 instead of ar3
   0277 EB                  670 	mov	a,r3
   0278 26                  671 	add	a,@r0
   0279 FB                  672 	mov	r3,a
                            673 ;	Peephole 236.g	used r5 instead of ar5
   027A ED                  674 	mov	a,r5
   027B 08                  675 	inc	r0
   027C 36                  676 	addc	a,@r0
   027D FD                  677 	mov	r5,a
                            678 ;	Peephole 236.g	used r6 instead of ar6
   027E EE                  679 	mov	a,r6
   027F 08                  680 	inc	r0
   0280 36                  681 	addc	a,@r0
   0281 FE                  682 	mov	r6,a
                            683 ;	Peephole 236.g	used r7 instead of ar7
   0282 EF                  684 	mov	a,r7
   0283 08                  685 	inc	r0
   0284 36                  686 	addc	a,@r0
                            687 ;	genCall
   0285 FF                  688 	mov	r7,a
   0286 8B 82               689 	mov	dpl,r3
   0288 8D 83               690 	mov	dph,r5
   028A 8E F0               691 	mov	b,r6
                            692 ;	Peephole 191	removed redundant mov
   028C 12s00r00            693 	lcall	_move_window
   028F E5 82               694 	mov	a,dpl
                            695 ;	genIfx
                            696 ;	genIfxJump
   0291 70 03               697 	jnz	00136$
   0293 02s04r1A            698 	ljmp	00114$
   0296                     699 00136$:
                            700 ;	FatDrivers/tff.c:173: wc |= (WORD)fs->win[bc % 512] << 8;
                            701 ;	genPlus
   0296 E5*00               702 	mov	a,_bp
   0298 24 0D               703 	add	a,#0x0d
   029A F8                  704 	mov	r0,a
                            705 ;     genPlusIncr
   029B 74 20               706 	mov	a,#0x20
   029D 26                  707 	add	a,@r0
   029E FB                  708 	mov	r3,a
                            709 ;	Peephole 181	changed mov to clr
   029F E4                  710 	clr	a
   02A0 08                  711 	inc	r0
   02A1 36                  712 	addc	a,@r0
   02A2 FD                  713 	mov	r5,a
   02A3 08                  714 	inc	r0
   02A4 86 06               715 	mov	ar6,@r0
                            716 ;	genAnd
   02A6 E5*00               717 	mov	a,_bp
   02A8 24 07               718 	add	a,#0x07
   02AA F8                  719 	mov	r0,a
   02AB 86 07               720 	mov	ar7,@r0
   02AD 74 01               721 	mov	a,#0x01
   02AF 08                  722 	inc	r0
   02B0 56                  723 	anl	a,@r0
   02B1 FA                  724 	mov	r2,a
                            725 ;	genPlus
                            726 ;	Peephole 236.g	used r7 instead of ar7
   02B2 EF                  727 	mov	a,r7
                            728 ;	Peephole 236.a	used r3 instead of ar3
   02B3 2B                  729 	add	a,r3
   02B4 FB                  730 	mov	r3,a
                            731 ;	Peephole 236.g	used r2 instead of ar2
   02B5 EA                  732 	mov	a,r2
                            733 ;	Peephole 236.b	used r5 instead of ar5
   02B6 3D                  734 	addc	a,r5
   02B7 FD                  735 	mov	r5,a
                            736 ;	genPointerGet
                            737 ;	genGenPointerGet
   02B8 8B 82               738 	mov	dpl,r3
   02BA 8D 83               739 	mov	dph,r5
   02BC 8E F0               740 	mov	b,r6
   02BE 12s00r00            741 	lcall	__gptrget
   02C1 FB                  742 	mov	r3,a
                            743 ;	genCast
                            744 ;	genLeftShift
                            745 ;	genLeftShiftLiteral
                            746 ;	genlshTwo
                            747 ;	peephole 177.e	removed redundant move
   02C2 8B 02               748 	mov	ar2,r3
   02C4 7B 00               749 	mov	r3,#0x00
                            750 ;	genOr
   02C6 E5*00               751 	mov	a,_bp
   02C8 24 05               752 	add	a,#0x05
   02CA F8                  753 	mov	r0,a
   02CB EB                  754 	mov	a,r3
   02CC 46                  755 	orl	a,@r0
   02CD F6                  756 	mov	@r0,a
   02CE EA                  757 	mov	a,r2
   02CF 08                  758 	inc	r0
   02D0 46                  759 	orl	a,@r0
   02D1 F6                  760 	mov	@r0,a
                            761 ;	FatDrivers/tff.c:174: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
                            762 ;	genAnd
   02D2 A8*00               763 	mov	r0,_bp
   02D4 08                  764 	inc	r0
   02D5 E6                  765 	mov	a,@r0
                            766 ;	genIfxJump
                            767 ;	Peephole 108.d	removed ljmp by inverse jump logic
   02D6 30 E0 18            768 	jnb	acc.0,00118$
                            769 ;	Peephole 300	removed redundant label 00137$
                            770 ;	genRightShift
                            771 ;	genRightShiftLiteral
   02D9 E5*00               772 	mov	a,_bp
   02DB 24 05               773 	add	a,#0x05
   02DD F8                  774 	mov	r0,a
                            775 ;	genrshTwo
   02DE 86 02               776 	mov	ar2,@r0
   02E0 08                  777 	inc	r0
   02E1 E6                  778 	mov	a,@r0
   02E2 C4                  779 	swap	a
   02E3 CA                  780 	xch	a,r2
   02E4 C4                  781 	swap	a
   02E5 54 0F               782 	anl	a,#0x0f
   02E7 6A                  783 	xrl	a,r2
   02E8 CA                  784 	xch	a,r2
   02E9 54 0F               785 	anl	a,#0x0f
   02EB CA                  786 	xch	a,r2
   02EC 6A                  787 	xrl	a,r2
   02ED CA                  788 	xch	a,r2
   02EE FB                  789 	mov	r3,a
                            790 ;	Peephole 112.b	changed ljmp to sjmp
   02EF 80 0C               791 	sjmp	00119$
   02F1                     792 00118$:
                            793 ;	genAnd
   02F1 E5*00               794 	mov	a,_bp
   02F3 24 05               795 	add	a,#0x05
   02F5 F8                  796 	mov	r0,a
   02F6 86 02               797 	mov	ar2,@r0
   02F8 74 0F               798 	mov	a,#0x0F
   02FA 08                  799 	inc	r0
   02FB 56                  800 	anl	a,@r0
   02FC FB                  801 	mov	r3,a
   02FD                     802 00119$:
                            803 ;	genCast
   02FD 7C 00               804 	mov	r4,#0x00
   02FF 7D 00               805 	mov	r5,#0x00
                            806 ;	genRet
   0301 8A 82               807 	mov	dpl,r2
   0303 8B 83               808 	mov	dph,r3
   0305 8C F0               809 	mov	b,r4
   0307 ED                  810 	mov	a,r5
   0308 02s04r20            811 	ljmp	00116$
                            812 ;	FatDrivers/tff.c:176: case FS_FAT16 :
   030B                     813 00106$:
                            814 ;	FatDrivers/tff.c:177: if (!move_window(fatsect + clust / 256)) break;
                            815 ;	genRightShift
                            816 ;	genRightShiftLiteral
   030B A8*00               817 	mov	r0,_bp
   030D 08                  818 	inc	r0
                            819 ;	genrshFour
   030E 08                  820 	inc	r0
   030F 86 02               821 	mov	ar2,@r0
   0311 08                  822 	inc	r0
   0312 86 03               823 	mov	ar3,@r0
   0314 08                  824 	inc	r0
   0315 86 04               825 	mov	ar4,@r0
   0317 7D 00               826 	mov	r5,#0x00
                            827 ;	genPlus
   0319 E5*00               828 	mov	a,_bp
   031B 24 09               829 	add	a,#0x09
   031D F8                  830 	mov	r0,a
                            831 ;	Peephole 236.g	used r2 instead of ar2
   031E EA                  832 	mov	a,r2
   031F 26                  833 	add	a,@r0
   0320 FA                  834 	mov	r2,a
                            835 ;	Peephole 236.g	used r3 instead of ar3
   0321 EB                  836 	mov	a,r3
   0322 08                  837 	inc	r0
   0323 36                  838 	addc	a,@r0
   0324 FB                  839 	mov	r3,a
                            840 ;	Peephole 236.g	used r4 instead of ar4
   0325 EC                  841 	mov	a,r4
   0326 08                  842 	inc	r0
   0327 36                  843 	addc	a,@r0
   0328 FC                  844 	mov	r4,a
                            845 ;	Peephole 236.g	used r5 instead of ar5
   0329 ED                  846 	mov	a,r5
   032A 08                  847 	inc	r0
   032B 36                  848 	addc	a,@r0
                            849 ;	genCall
   032C FD                  850 	mov	r5,a
   032D 8A 82               851 	mov	dpl,r2
   032F 8B 83               852 	mov	dph,r3
   0331 8C F0               853 	mov	b,r4
                            854 ;	Peephole 191	removed redundant mov
   0333 12s00r00            855 	lcall	_move_window
   0336 E5 82               856 	mov	a,dpl
                            857 ;	genIfx
                            858 ;	genIfxJump
   0338 70 03               859 	jnz	00138$
   033A 02s04r1A            860 	ljmp	00114$
   033D                     861 00138$:
                            862 ;	FatDrivers/tff.c:178: return LD_WORD(&fs->win[((WORD)clust * 2) % 512]);
                            863 ;	genPlus
   033D E5*00               864 	mov	a,_bp
   033F 24 0D               865 	add	a,#0x0d
   0341 F8                  866 	mov	r0,a
                            867 ;     genPlusIncr
   0342 74 20               868 	mov	a,#0x20
   0344 26                  869 	add	a,@r0
   0345 FA                  870 	mov	r2,a
                            871 ;	Peephole 181	changed mov to clr
   0346 E4                  872 	clr	a
   0347 08                  873 	inc	r0
   0348 36                  874 	addc	a,@r0
   0349 FB                  875 	mov	r3,a
   034A 08                  876 	inc	r0
   034B 86 04               877 	mov	ar4,@r0
                            878 ;	genCast
   034D A8*00               879 	mov	r0,_bp
   034F 08                  880 	inc	r0
   0350 86 05               881 	mov	ar5,@r0
   0352 08                  882 	inc	r0
   0353 86 06               883 	mov	ar6,@r0
                            884 ;	genLeftShift
                            885 ;	genLeftShiftLiteral
                            886 ;	genlshTwo
   0355 EE                  887 	mov	a,r6
   0356 CD                  888 	xch	a,r5
   0357 25 E0               889 	add	a,acc
   0359 CD                  890 	xch	a,r5
   035A 33                  891 	rlc	a
   035B FE                  892 	mov	r6,a
                            893 ;	genAnd
   035C 53 06 01            894 	anl	ar6,#0x01
                            895 ;	genPlus
                            896 ;	Peephole 236.g	used r5 instead of ar5
   035F ED                  897 	mov	a,r5
                            898 ;	Peephole 236.a	used r2 instead of ar2
   0360 2A                  899 	add	a,r2
   0361 FA                  900 	mov	r2,a
                            901 ;	Peephole 236.g	used r6 instead of ar6
   0362 EE                  902 	mov	a,r6
                            903 ;	Peephole 236.b	used r3 instead of ar3
   0363 3B                  904 	addc	a,r3
   0364 FB                  905 	mov	r3,a
                            906 ;	genPointerGet
                            907 ;	genGenPointerGet
   0365 8A 82               908 	mov	dpl,r2
   0367 8B 83               909 	mov	dph,r3
   0369 8C F0               910 	mov	b,r4
   036B 12s00r00            911 	lcall	__gptrget
   036E FA                  912 	mov	r2,a
   036F A3                  913 	inc	dptr
   0370 12s00r00            914 	lcall	__gptrget
   0373 FB                  915 	mov	r3,a
                            916 ;	genCast
   0374 7C 00               917 	mov	r4,#0x00
   0376 7D 00               918 	mov	r5,#0x00
                            919 ;	genRet
   0378 8A 82               920 	mov	dpl,r2
   037A 8B 83               921 	mov	dph,r3
   037C 8C F0               922 	mov	b,r4
   037E ED                  923 	mov	a,r5
   037F 02s04r20            924 	ljmp	00116$
                            925 ;	FatDrivers/tff.c:180: case FS_FAT32 :
   0382                     926 00109$:
                            927 ;	FatDrivers/tff.c:181: if (!move_window(fatsect + clust / 128)) break;
                            928 ;	genRightShift
                            929 ;	genRightShiftLiteral
   0382 A8*00               930 	mov	r0,_bp
   0384 08                  931 	inc	r0
                            932 ;	genrshFour
   0385 86 02               933 	mov	ar2,@r0
   0387 08                  934 	inc	r0
   0388 E6                  935 	mov	a,@r0
   0389 A2 E7               936 	mov	c,acc.7
   038B CA                  937 	xch	a,r2
   038C 33                  938 	rlc	a
   038D CA                  939 	xch	a,r2
   038E 33                  940 	rlc	a
   038F CA                  941 	xch	a,r2
   0390 54 01               942 	anl	a,#0x01
   0392 FB                  943 	mov	r3,a
   0393 08                  944 	inc	r0
   0394 E6                  945 	mov	a,@r0
   0395 25 E0               946 	add	a,acc
   0397 4B                  947 	orl	a,r3
   0398 FB                  948 	mov	r3,a
   0399 86 04               949 	mov	ar4,@r0
   039B 08                  950 	inc	r0
   039C E6                  951 	mov	a,@r0
   039D A2 E7               952 	mov	c,acc.7
   039F CC                  953 	xch	a,r4
   03A0 33                  954 	rlc	a
   03A1 CC                  955 	xch	a,r4
   03A2 33                  956 	rlc	a
   03A3 CC                  957 	xch	a,r4
   03A4 54 01               958 	anl	a,#0x01
   03A6 FD                  959 	mov	r5,a
                            960 ;	genPlus
   03A7 E5*00               961 	mov	a,_bp
   03A9 24 09               962 	add	a,#0x09
   03AB F8                  963 	mov	r0,a
                            964 ;	Peephole 236.g	used r2 instead of ar2
   03AC EA                  965 	mov	a,r2
   03AD 26                  966 	add	a,@r0
   03AE FA                  967 	mov	r2,a
                            968 ;	Peephole 236.g	used r3 instead of ar3
   03AF EB                  969 	mov	a,r3
   03B0 08                  970 	inc	r0
   03B1 36                  971 	addc	a,@r0
   03B2 FB                  972 	mov	r3,a
                            973 ;	Peephole 236.g	used r4 instead of ar4
   03B3 EC                  974 	mov	a,r4
   03B4 08                  975 	inc	r0
   03B5 36                  976 	addc	a,@r0
   03B6 FC                  977 	mov	r4,a
                            978 ;	Peephole 236.g	used r5 instead of ar5
   03B7 ED                  979 	mov	a,r5
   03B8 08                  980 	inc	r0
   03B9 36                  981 	addc	a,@r0
                            982 ;	genCall
   03BA FD                  983 	mov	r5,a
   03BB 8A 82               984 	mov	dpl,r2
   03BD 8B 83               985 	mov	dph,r3
   03BF 8C F0               986 	mov	b,r4
                            987 ;	Peephole 191	removed redundant mov
   03C1 12s00r00            988 	lcall	_move_window
   03C4 E5 82               989 	mov	a,dpl
                            990 ;	genIfx
                            991 ;	genIfxJump
                            992 ;	Peephole 108.c	removed ljmp by inverse jump logic
   03C6 60 52               993 	jz	00114$
                            994 ;	Peephole 300	removed redundant label 00139$
                            995 ;	FatDrivers/tff.c:182: return LD_DWORD(&fs->win[((WORD)clust * 4) % 512]) & 0x0FFFFFFF;
                            996 ;	genPlus
   03C8 E5*00               997 	mov	a,_bp
   03CA 24 0D               998 	add	a,#0x0d
   03CC F8                  999 	mov	r0,a
                           1000 ;     genPlusIncr
   03CD 74 20              1001 	mov	a,#0x20
   03CF 26                 1002 	add	a,@r0
   03D0 FA                 1003 	mov	r2,a
                           1004 ;	Peephole 181	changed mov to clr
   03D1 E4                 1005 	clr	a
   03D2 08                 1006 	inc	r0
   03D3 36                 1007 	addc	a,@r0
   03D4 FB                 1008 	mov	r3,a
   03D5 08                 1009 	inc	r0
   03D6 86 04              1010 	mov	ar4,@r0
                           1011 ;	genCast
   03D8 A8*00              1012 	mov	r0,_bp
   03DA 08                 1013 	inc	r0
   03DB 86 05              1014 	mov	ar5,@r0
   03DD 08                 1015 	inc	r0
   03DE 86 06              1016 	mov	ar6,@r0
                           1017 ;	genLeftShift
                           1018 ;	genLeftShiftLiteral
                           1019 ;	genlshTwo
   03E0 EE                 1020 	mov	a,r6
   03E1 CD                 1021 	xch	a,r5
   03E2 25 E0              1022 	add	a,acc
   03E4 CD                 1023 	xch	a,r5
   03E5 33                 1024 	rlc	a
   03E6 CD                 1025 	xch	a,r5
   03E7 25 E0              1026 	add	a,acc
   03E9 CD                 1027 	xch	a,r5
   03EA 33                 1028 	rlc	a
   03EB FE                 1029 	mov	r6,a
                           1030 ;	genAnd
   03EC 53 06 01           1031 	anl	ar6,#0x01
                           1032 ;	genPlus
                           1033 ;	Peephole 236.g	used r5 instead of ar5
   03EF ED                 1034 	mov	a,r5
                           1035 ;	Peephole 236.a	used r2 instead of ar2
   03F0 2A                 1036 	add	a,r2
   03F1 FA                 1037 	mov	r2,a
                           1038 ;	Peephole 236.g	used r6 instead of ar6
   03F2 EE                 1039 	mov	a,r6
                           1040 ;	Peephole 236.b	used r3 instead of ar3
   03F3 3B                 1041 	addc	a,r3
   03F4 FB                 1042 	mov	r3,a
                           1043 ;	genPointerGet
                           1044 ;	genGenPointerGet
   03F5 8A 82              1045 	mov	dpl,r2
   03F7 8B 83              1046 	mov	dph,r3
   03F9 8C F0              1047 	mov	b,r4
   03FB 12s00r00           1048 	lcall	__gptrget
   03FE FA                 1049 	mov	r2,a
   03FF A3                 1050 	inc	dptr
   0400 12s00r00           1051 	lcall	__gptrget
   0403 FB                 1052 	mov	r3,a
   0404 A3                 1053 	inc	dptr
   0405 12s00r00           1054 	lcall	__gptrget
   0408 FC                 1055 	mov	r4,a
   0409 A3                 1056 	inc	dptr
   040A 12s00r00           1057 	lcall	__gptrget
   040D FD                 1058 	mov	r5,a
                           1059 ;	genAnd
   040E 53 05 0F           1060 	anl	ar5,#0x0F
                           1061 ;	genRet
   0411 8A 82              1062 	mov	dpl,r2
   0413 8B 83              1063 	mov	dph,r3
   0415 8C F0              1064 	mov	b,r4
   0417 ED                 1065 	mov	a,r5
                           1066 ;	FatDrivers/tff.c:184: }
                           1067 ;	Peephole 112.b	changed ljmp to sjmp
   0418 80 06              1068 	sjmp	00116$
   041A                    1069 00114$:
                           1070 ;	FatDrivers/tff.c:187: return 1;	/* There is no cluster information, or an error occured */
                           1071 ;	genRet
                           1072 ;	Peephole 3.a	changed mov to clr
                           1073 ;	Peephole 3.b	changed mov to clr
                           1074 ;	Peephole 182.d	used 16 bit load of dptr
   041A 90 00 01           1075 	mov	dptr,#(0x01&0x00ff)
   041D E4                 1076 	clr	a
   041E F5 F0              1077 	mov	b,a
   0420                    1078 00116$:
   0420 85*00 81           1079 	mov	sp,_bp
   0423 D0*00              1080 	pop	_bp
   0425 22                 1081 	ret
                           1082 ;------------------------------------------------------------
                           1083 ;Allocation info for local variables in function 'clust2sect'
                           1084 ;------------------------------------------------------------
                           1085 ;clust                     Allocated to stack - offset 1
                           1086 ;fs                        Allocated to stack - offset 5
                           1087 ;sloc0                     Allocated to stack - offset 8
                           1088 ;------------------------------------------------------------
                           1089 ;	FatDrivers/tff.c:340: DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
                           1090 ;	-----------------------------------------
                           1091 ;	 function clust2sect
                           1092 ;	-----------------------------------------
   0426                    1093 _clust2sect:
   0426 C0*00              1094 	push	_bp
   0428 85 81*00           1095 	mov	_bp,sp
                           1096 ;     genReceive
   042B C0 82              1097 	push	dpl
   042D C0 83              1098 	push	dph
   042F C0 F0              1099 	push	b
   0431 C0 E0              1100 	push	acc
   0433 E5 81              1101 	mov	a,sp
   0435 24 0B              1102 	add	a,#0x0b
   0437 F5 81              1103 	mov	sp,a
                           1104 ;	FatDrivers/tff.c:344: FATFS *fs = FatFs;
                           1105 ;	genAssign
   0439 E5*00              1106 	mov	a,_bp
   043B 24 05              1107 	add	a,#0x05
   043D F8                 1108 	mov	r0,a
   043E A6*00              1109 	mov	@r0,_FatFs
   0440 08                 1110 	inc	r0
   0441 A6*01              1111 	mov	@r0,(_FatFs + 1)
   0443 08                 1112 	inc	r0
   0444 A6*02              1113 	mov	@r0,(_FatFs + 2)
                           1114 ;	FatDrivers/tff.c:347: clust -= 2;
                           1115 ;	genMinus
   0446 A8*00              1116 	mov	r0,_bp
   0448 08                 1117 	inc	r0
                           1118 ;	genMinusDec
   0449 E6                 1119 	mov	a,@r0
   044A 24 FE              1120 	add	a,#0xfe
   044C F6                 1121 	mov	@r0,a
   044D 08                 1122 	inc	r0
   044E E6                 1123 	mov	a,@r0
   044F 34 FF              1124 	addc	a,#0xff
   0451 F6                 1125 	mov	@r0,a
   0452 08                 1126 	inc	r0
   0453 E6                 1127 	mov	a,@r0
   0454 34 FF              1128 	addc	a,#0xff
   0456 F6                 1129 	mov	@r0,a
   0457 08                 1130 	inc	r0
   0458 E6                 1131 	mov	a,@r0
   0459 34 FF              1132 	addc	a,#0xff
   045B F6                 1133 	mov	@r0,a
                           1134 ;	FatDrivers/tff.c:348: if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
                           1135 ;	genPlus
   045C E5*00              1136 	mov	a,_bp
   045E 24 05              1137 	add	a,#0x05
   0460 F8                 1138 	mov	r0,a
                           1139 ;     genPlusIncr
   0461 74 18              1140 	mov	a,#0x18
   0463 26                 1141 	add	a,@r0
   0464 FB                 1142 	mov	r3,a
                           1143 ;	Peephole 181	changed mov to clr
   0465 E4                 1144 	clr	a
   0466 08                 1145 	inc	r0
   0467 36                 1146 	addc	a,@r0
   0468 FC                 1147 	mov	r4,a
   0469 08                 1148 	inc	r0
   046A 86 05              1149 	mov	ar5,@r0
                           1150 ;	genPointerGet
                           1151 ;	genGenPointerGet
   046C 8B 82              1152 	mov	dpl,r3
   046E 8C 83              1153 	mov	dph,r4
   0470 8D F0              1154 	mov	b,r5
   0472 12s00r00           1155 	lcall	__gptrget
   0475 FB                 1156 	mov	r3,a
   0476 A3                 1157 	inc	dptr
   0477 12s00r00           1158 	lcall	__gptrget
   047A FC                 1159 	mov	r4,a
   047B A3                 1160 	inc	dptr
   047C 12s00r00           1161 	lcall	__gptrget
   047F FD                 1162 	mov	r5,a
   0480 A3                 1163 	inc	dptr
   0481 12s00r00           1164 	lcall	__gptrget
   0484 FA                 1165 	mov	r2,a
                           1166 ;	genMinus
                           1167 ;	genMinusDec
   0485 EB                 1168 	mov	a,r3
   0486 24 FE              1169 	add	a,#0xfe
   0488 FB                 1170 	mov	r3,a
   0489 EC                 1171 	mov	a,r4
   048A 34 FF              1172 	addc	a,#0xff
   048C FC                 1173 	mov	r4,a
   048D ED                 1174 	mov	a,r5
   048E 34 FF              1175 	addc	a,#0xff
   0490 FD                 1176 	mov	r5,a
   0491 EA                 1177 	mov	a,r2
   0492 34 FF              1178 	addc	a,#0xff
   0494 FA                 1179 	mov	r2,a
                           1180 ;	genCmpLt
   0495 A8*00              1181 	mov	r0,_bp
   0497 08                 1182 	inc	r0
                           1183 ;	genCmp
   0498 C3                 1184 	clr	c
   0499 E6                 1185 	mov	a,@r0
   049A 9B                 1186 	subb	a,r3
   049B 08                 1187 	inc	r0
   049C E6                 1188 	mov	a,@r0
   049D 9C                 1189 	subb	a,r4
   049E 08                 1190 	inc	r0
   049F E6                 1191 	mov	a,@r0
   04A0 9D                 1192 	subb	a,r5
   04A1 08                 1193 	inc	r0
   04A2 E6                 1194 	mov	a,@r0
   04A3 9A                 1195 	subb	a,r2
                           1196 ;	genIfxJump
                           1197 ;	Peephole 112.b	changed ljmp to sjmp
                           1198 ;	Peephole 160.a	removed sjmp by inverse jump logic
   04A4 40 09              1199 	jc	00102$
                           1200 ;	Peephole 300	removed redundant label 00106$
                           1201 ;	genRet
                           1202 ;	Peephole 3.a	changed mov to clr
                           1203 ;	Peephole 3.b	changed mov to clr
                           1204 ;	Peephole 182.d	used 16 bit load of dptr
   04A6 90 00 00           1205 	mov	dptr,#(0x00&0x00ff)
   04A9 E4                 1206 	clr	a
   04AA F5 F0              1207 	mov	b,a
   04AC 02s05r43           1208 	ljmp	00103$
   04AF                    1209 00102$:
                           1210 ;	FatDrivers/tff.c:349: return (DWORD)clust * fs->sects_clust + fs->database;
                           1211 ;	genPlus
   04AF E5*00              1212 	mov	a,_bp
   04B1 24 05              1213 	add	a,#0x05
   04B3 F8                 1214 	mov	r0,a
                           1215 ;     genPlusIncr
   04B4 74 1D              1216 	mov	a,#0x1D
   04B6 26                 1217 	add	a,@r0
   04B7 FA                 1218 	mov	r2,a
                           1219 ;	Peephole 181	changed mov to clr
   04B8 E4                 1220 	clr	a
   04B9 08                 1221 	inc	r0
   04BA 36                 1222 	addc	a,@r0
   04BB FB                 1223 	mov	r3,a
   04BC 08                 1224 	inc	r0
   04BD 86 04              1225 	mov	ar4,@r0
                           1226 ;	genPointerGet
                           1227 ;	genGenPointerGet
   04BF 8A 82              1228 	mov	dpl,r2
   04C1 8B 83              1229 	mov	dph,r3
   04C3 8C F0              1230 	mov	b,r4
   04C5 12s00r00           1231 	lcall	__gptrget
   04C8 FA                 1232 	mov	r2,a
                           1233 ;	genCast
   04C9 7B 00              1234 	mov	r3,#0x00
   04CB 7C 00              1235 	mov	r4,#0x00
   04CD 7D 00              1236 	mov	r5,#0x00
                           1237 ;	genIpush
   04CF C0 02              1238 	push	ar2
   04D1 C0 03              1239 	push	ar3
   04D3 C0 04              1240 	push	ar4
   04D5 C0 05              1241 	push	ar5
                           1242 ;	genCall
   04D7 A8*00              1243 	mov	r0,_bp
   04D9 08                 1244 	inc	r0
   04DA 86 82              1245 	mov	dpl,@r0
   04DC 08                 1246 	inc	r0
   04DD 86 83              1247 	mov	dph,@r0
   04DF 08                 1248 	inc	r0
   04E0 86 F0              1249 	mov	b,@r0
   04E2 08                 1250 	inc	r0
   04E3 E6                 1251 	mov	a,@r0
   04E4 12s00r00           1252 	lcall	__mullong
   04E7 C0 E0              1253 	push	acc
   04E9 E5*00              1254 	mov	a,_bp
   04EB 24 08              1255 	add	a,#0x08
   04ED F8                 1256 	mov	r0,a
   04EE D0 E0              1257 	pop	acc
   04F0 A6 82              1258 	mov	@r0,dpl
   04F2 08                 1259 	inc	r0
   04F3 A6 83              1260 	mov	@r0,dph
   04F5 08                 1261 	inc	r0
   04F6 A6 F0              1262 	mov	@r0,b
   04F8 08                 1263 	inc	r0
   04F9 F6                 1264 	mov	@r0,a
   04FA E5 81              1265 	mov	a,sp
   04FC 24 FC              1266 	add	a,#0xfc
   04FE F5 81              1267 	mov	sp,a
                           1268 ;	genPlus
   0500 E5*00              1269 	mov	a,_bp
   0502 24 05              1270 	add	a,#0x05
   0504 F8                 1271 	mov	r0,a
                           1272 ;     genPlusIncr
   0505 74 10              1273 	mov	a,#0x10
   0507 26                 1274 	add	a,@r0
   0508 FE                 1275 	mov	r6,a
                           1276 ;	Peephole 181	changed mov to clr
   0509 E4                 1277 	clr	a
   050A 08                 1278 	inc	r0
   050B 36                 1279 	addc	a,@r0
   050C FF                 1280 	mov	r7,a
   050D 08                 1281 	inc	r0
   050E 86 02              1282 	mov	ar2,@r0
                           1283 ;	genPointerGet
                           1284 ;	genGenPointerGet
   0510 8E 82              1285 	mov	dpl,r6
   0512 8F 83              1286 	mov	dph,r7
   0514 8A F0              1287 	mov	b,r2
   0516 12s00r00           1288 	lcall	__gptrget
   0519 FE                 1289 	mov	r6,a
   051A A3                 1290 	inc	dptr
   051B 12s00r00           1291 	lcall	__gptrget
   051E FF                 1292 	mov	r7,a
   051F A3                 1293 	inc	dptr
   0520 12s00r00           1294 	lcall	__gptrget
   0523 FA                 1295 	mov	r2,a
   0524 A3                 1296 	inc	dptr
   0525 12s00r00           1297 	lcall	__gptrget
   0528 FB                 1298 	mov	r3,a
                           1299 ;	genPlus
   0529 E5*00              1300 	mov	a,_bp
   052B 24 08              1301 	add	a,#0x08
   052D F8                 1302 	mov	r0,a
                           1303 ;	Peephole 236.g	used r6 instead of ar6
   052E EE                 1304 	mov	a,r6
   052F 26                 1305 	add	a,@r0
   0530 FE                 1306 	mov	r6,a
                           1307 ;	Peephole 236.g	used r7 instead of ar7
   0531 EF                 1308 	mov	a,r7
   0532 08                 1309 	inc	r0
   0533 36                 1310 	addc	a,@r0
   0534 FF                 1311 	mov	r7,a
                           1312 ;	Peephole 236.g	used r2 instead of ar2
   0535 EA                 1313 	mov	a,r2
   0536 08                 1314 	inc	r0
   0537 36                 1315 	addc	a,@r0
   0538 FA                 1316 	mov	r2,a
                           1317 ;	Peephole 236.g	used r3 instead of ar3
   0539 EB                 1318 	mov	a,r3
   053A 08                 1319 	inc	r0
   053B 36                 1320 	addc	a,@r0
                           1321 ;	genRet
   053C FB                 1322 	mov	r3,a
   053D 8E 82              1323 	mov	dpl,r6
   053F 8F 83              1324 	mov	dph,r7
   0541 8A F0              1325 	mov	b,r2
                           1326 ;	Peephole 191	removed redundant mov
   0543                    1327 00103$:
   0543 85*00 81           1328 	mov	sp,_bp
   0546 D0*00              1329 	pop	_bp
   0548 22                 1330 	ret
                           1331 ;------------------------------------------------------------
                           1332 ;Allocation info for local variables in function 'next_dir_entry'
                           1333 ;------------------------------------------------------------
                           1334 ;dirobj                    Allocated to stack - offset 1
                           1335 ;clust                     Allocated to stack - offset 4
                           1336 ;idx                       Allocated to stack - offset 8
                           1337 ;fs                        Allocated to stack - offset 10
                           1338 ;sloc0                     Allocated to stack - offset 13
                           1339 ;sloc1                     Allocated to stack - offset 16
                           1340 ;sloc2                     Allocated to stack - offset 19
                           1341 ;sloc3                     Allocated to stack - offset 23
                           1342 ;------------------------------------------------------------
                           1343 ;	FatDrivers/tff.c:360: BOOL next_dir_entry (	/* TRUE: successful, FALSE: could not move next */
                           1344 ;	-----------------------------------------
                           1345 ;	 function next_dir_entry
                           1346 ;	-----------------------------------------
   0549                    1347 _next_dir_entry:
   0549 C0*00              1348 	push	_bp
   054B 85 81*00           1349 	mov	_bp,sp
                           1350 ;     genReceive
   054E C0 82              1351 	push	dpl
   0550 C0 83              1352 	push	dph
   0552 C0 F0              1353 	push	b
   0554 E5 81              1354 	mov	a,sp
   0556 24 19              1355 	add	a,#0x19
   0558 F5 81              1356 	mov	sp,a
                           1357 ;	FatDrivers/tff.c:366: FATFS *fs = FatFs;
                           1358 ;	genAssign
   055A E5*00              1359 	mov	a,_bp
   055C 24 0A              1360 	add	a,#0x0a
   055E F8                 1361 	mov	r0,a
   055F A6*00              1362 	mov	@r0,_FatFs
   0561 08                 1363 	inc	r0
   0562 A6*01              1364 	mov	@r0,(_FatFs + 1)
   0564 08                 1365 	inc	r0
   0565 A6*02              1366 	mov	@r0,(_FatFs + 2)
                           1367 ;	FatDrivers/tff.c:369: idx = dirobj->index + 1;
                           1368 ;	genPlus
   0567 A8*00              1369 	mov	r0,_bp
   0569 08                 1370 	inc	r0
   056A E5*00              1371 	mov	a,_bp
   056C 24 17              1372 	add	a,#0x17
   056E F9                 1373 	mov	r1,a
                           1374 ;     genPlusIncr
   056F 74 02              1375 	mov	a,#0x02
   0571 26                 1376 	add	a,@r0
   0572 F7                 1377 	mov	@r1,a
                           1378 ;	Peephole 181	changed mov to clr
   0573 E4                 1379 	clr	a
   0574 08                 1380 	inc	r0
   0575 36                 1381 	addc	a,@r0
   0576 09                 1382 	inc	r1
   0577 F7                 1383 	mov	@r1,a
   0578 08                 1384 	inc	r0
   0579 09                 1385 	inc	r1
   057A E6                 1386 	mov	a,@r0
   057B F7                 1387 	mov	@r1,a
                           1388 ;	genPointerGet
                           1389 ;	genGenPointerGet
   057C E5*00              1390 	mov	a,_bp
   057E 24 17              1391 	add	a,#0x17
   0580 F8                 1392 	mov	r0,a
   0581 86 82              1393 	mov	dpl,@r0
   0583 08                 1394 	inc	r0
   0584 86 83              1395 	mov	dph,@r0
   0586 08                 1396 	inc	r0
   0587 86 F0              1397 	mov	b,@r0
   0589 12s00r00           1398 	lcall	__gptrget
   058C FA                 1399 	mov	r2,a
   058D A3                 1400 	inc	dptr
   058E 12s00r00           1401 	lcall	__gptrget
   0591 FB                 1402 	mov	r3,a
                           1403 ;	genPlus
   0592 E5*00              1404 	mov	a,_bp
   0594 24 08              1405 	add	a,#0x08
   0596 F8                 1406 	mov	r0,a
                           1407 ;     genPlusIncr
   0597 74 01              1408 	mov	a,#0x01
                           1409 ;	Peephole 236.a	used r2 instead of ar2
   0599 2A                 1410 	add	a,r2
   059A F6                 1411 	mov	@r0,a
                           1412 ;	Peephole 181	changed mov to clr
   059B E4                 1413 	clr	a
                           1414 ;	Peephole 236.b	used r3 instead of ar3
   059C 3B                 1415 	addc	a,r3
   059D 08                 1416 	inc	r0
   059E F6                 1417 	mov	@r0,a
                           1418 ;	FatDrivers/tff.c:370: if ((idx & 15) == 0) {		/* Table sector changed? */
                           1419 ;	genAnd
   059F E5*00              1420 	mov	a,_bp
   05A1 24 08              1421 	add	a,#0x08
   05A3 F8                 1422 	mov	r0,a
   05A4 E6                 1423 	mov	a,@r0
   05A5 54 0F              1424 	anl	a,#0x0F
                           1425 ;	Peephole 160.c	removed sjmp by inverse jump logic
   05A7 60 03              1426 	jz	00121$
                           1427 ;	Peephole 300	removed redundant label 00120$
   05A9 02s07rB5           1428 	ljmp	00112$
   05AC                    1429 00121$:
                           1430 ;	FatDrivers/tff.c:371: dirobj->sect++;			/* Next sector */
                           1431 ;	genIpush
                           1432 ;	genPlus
   05AC A8*00              1433 	mov	r0,_bp
   05AE 08                 1434 	inc	r0
   05AF E5*00              1435 	mov	a,_bp
   05B1 24 0D              1436 	add	a,#0x0d
   05B3 F9                 1437 	mov	r1,a
                           1438 ;     genPlusIncr
   05B4 74 0F              1439 	mov	a,#0x0F
   05B6 26                 1440 	add	a,@r0
   05B7 F7                 1441 	mov	@r1,a
                           1442 ;	Peephole 181	changed mov to clr
   05B8 E4                 1443 	clr	a
   05B9 08                 1444 	inc	r0
   05BA 36                 1445 	addc	a,@r0
   05BB 09                 1446 	inc	r1
   05BC F7                 1447 	mov	@r1,a
   05BD 08                 1448 	inc	r0
   05BE 09                 1449 	inc	r1
   05BF E6                 1450 	mov	a,@r0
   05C0 F7                 1451 	mov	@r1,a
                           1452 ;	genPointerGet
                           1453 ;	genGenPointerGet
   05C1 E5*00              1454 	mov	a,_bp
   05C3 24 0D              1455 	add	a,#0x0d
   05C5 F8                 1456 	mov	r0,a
   05C6 86 82              1457 	mov	dpl,@r0
   05C8 08                 1458 	inc	r0
   05C9 86 83              1459 	mov	dph,@r0
   05CB 08                 1460 	inc	r0
   05CC 86 F0              1461 	mov	b,@r0
   05CE 12s00r00           1462 	lcall	__gptrget
   05D1 FC                 1463 	mov	r4,a
   05D2 A3                 1464 	inc	dptr
   05D3 12s00r00           1465 	lcall	__gptrget
   05D6 FD                 1466 	mov	r5,a
   05D7 A3                 1467 	inc	dptr
   05D8 12s00r00           1468 	lcall	__gptrget
   05DB FE                 1469 	mov	r6,a
   05DC A3                 1470 	inc	dptr
   05DD 12s00r00           1471 	lcall	__gptrget
   05E0 FF                 1472 	mov	r7,a
                           1473 ;	genPlus
                           1474 ;     genPlusIncr
   05E1 0C                 1475 	inc	r4
   05E2 BC 00 09           1476 	cjne	r4,#0x00,00122$
   05E5 0D                 1477 	inc	r5
   05E6 BD 00 05           1478 	cjne	r5,#0x00,00122$
   05E9 0E                 1479 	inc	r6
   05EA BE 00 01           1480 	cjne	r6,#0x00,00122$
   05ED 0F                 1481 	inc	r7
   05EE                    1482 00122$:
                           1483 ;	genPointerSet
                           1484 ;	genGenPointerSet
   05EE E5*00              1485 	mov	a,_bp
   05F0 24 0D              1486 	add	a,#0x0d
   05F2 F8                 1487 	mov	r0,a
   05F3 86 82              1488 	mov	dpl,@r0
   05F5 08                 1489 	inc	r0
   05F6 86 83              1490 	mov	dph,@r0
   05F8 08                 1491 	inc	r0
   05F9 86 F0              1492 	mov	b,@r0
   05FB EC                 1493 	mov	a,r4
   05FC 12s00r00           1494 	lcall	__gptrput
   05FF A3                 1495 	inc	dptr
   0600 ED                 1496 	mov	a,r5
   0601 12s00r00           1497 	lcall	__gptrput
   0604 A3                 1498 	inc	dptr
   0605 EE                 1499 	mov	a,r6
   0606 12s00r00           1500 	lcall	__gptrput
   0609 A3                 1501 	inc	dptr
   060A EF                 1502 	mov	a,r7
   060B 12s00r00           1503 	lcall	__gptrput
                           1504 ;	FatDrivers/tff.c:372: if (!dirobj->clust) {		/* In static table */
                           1505 ;	genPlus
   060E A8*00              1506 	mov	r0,_bp
   0610 08                 1507 	inc	r0
   0611 E5*00              1508 	mov	a,_bp
   0613 24 10              1509 	add	a,#0x10
   0615 F9                 1510 	mov	r1,a
                           1511 ;     genPlusIncr
   0616 74 0B              1512 	mov	a,#0x0B
   0618 26                 1513 	add	a,@r0
   0619 F7                 1514 	mov	@r1,a
                           1515 ;	Peephole 181	changed mov to clr
   061A E4                 1516 	clr	a
   061B 08                 1517 	inc	r0
   061C 36                 1518 	addc	a,@r0
   061D 09                 1519 	inc	r1
   061E F7                 1520 	mov	@r1,a
   061F 08                 1521 	inc	r0
   0620 09                 1522 	inc	r1
   0621 E6                 1523 	mov	a,@r0
   0622 F7                 1524 	mov	@r1,a
                           1525 ;	genPointerGet
                           1526 ;	genGenPointerGet
   0623 E5*00              1527 	mov	a,_bp
   0625 24 10              1528 	add	a,#0x10
   0627 F8                 1529 	mov	r0,a
   0628 86 82              1530 	mov	dpl,@r0
   062A 08                 1531 	inc	r0
   062B 86 83              1532 	mov	dph,@r0
   062D 08                 1533 	inc	r0
   062E 86 F0              1534 	mov	b,@r0
   0630 E5*00              1535 	mov	a,_bp
   0632 24 13              1536 	add	a,#0x13
   0634 F9                 1537 	mov	r1,a
   0635 12s00r00           1538 	lcall	__gptrget
   0638 F7                 1539 	mov	@r1,a
   0639 A3                 1540 	inc	dptr
   063A 12s00r00           1541 	lcall	__gptrget
   063D 09                 1542 	inc	r1
   063E F7                 1543 	mov	@r1,a
   063F A3                 1544 	inc	dptr
   0640 12s00r00           1545 	lcall	__gptrget
   0643 09                 1546 	inc	r1
   0644 F7                 1547 	mov	@r1,a
   0645 A3                 1548 	inc	dptr
   0646 12s00r00           1549 	lcall	__gptrget
   0649 09                 1550 	inc	r1
   064A F7                 1551 	mov	@r1,a
                           1552 ;	genIpop
                           1553 ;	genIfx
   064B E5*00              1554 	mov	a,_bp
   064D 24 13              1555 	add	a,#0x13
   064F F8                 1556 	mov	r0,a
   0650 E6                 1557 	mov	a,@r0
   0651 08                 1558 	inc	r0
   0652 46                 1559 	orl	a,@r0
   0653 08                 1560 	inc	r0
   0654 46                 1561 	orl	a,@r0
   0655 08                 1562 	inc	r0
   0656 46                 1563 	orl	a,@r0
                           1564 ;	genIfxJump
                           1565 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0657 70 35              1566 	jnz	00109$
                           1567 ;	Peephole 300	removed redundant label 00123$
                           1568 ;	FatDrivers/tff.c:373: if (idx >= fs->n_rootdir) return FALSE;	/* Reached to end of table */
                           1569 ;	genIpush
                           1570 ;	genPlus
   0659 E5*00              1571 	mov	a,_bp
   065B 24 0A              1572 	add	a,#0x0a
   065D F8                 1573 	mov	r0,a
                           1574 ;     genPlusIncr
   065E 74 02              1575 	mov	a,#0x02
   0660 26                 1576 	add	a,@r0
   0661 FC                 1577 	mov	r4,a
                           1578 ;	Peephole 181	changed mov to clr
   0662 E4                 1579 	clr	a
   0663 08                 1580 	inc	r0
   0664 36                 1581 	addc	a,@r0
   0665 FD                 1582 	mov	r5,a
   0666 08                 1583 	inc	r0
   0667 86 06              1584 	mov	ar6,@r0
                           1585 ;	genPointerGet
                           1586 ;	genGenPointerGet
   0669 8C 82              1587 	mov	dpl,r4
   066B 8D 83              1588 	mov	dph,r5
   066D 8E F0              1589 	mov	b,r6
   066F 12s00r00           1590 	lcall	__gptrget
   0672 FC                 1591 	mov	r4,a
   0673 A3                 1592 	inc	dptr
   0674 12s00r00           1593 	lcall	__gptrget
   0677 FD                 1594 	mov	r5,a
                           1595 ;	genCmpLt
   0678 E5*00              1596 	mov	a,_bp
   067A 24 08              1597 	add	a,#0x08
   067C F8                 1598 	mov	r0,a
                           1599 ;	genCmp
   067D C3                 1600 	clr	c
   067E E6                 1601 	mov	a,@r0
   067F 9C                 1602 	subb	a,r4
   0680 08                 1603 	inc	r0
   0681 E6                 1604 	mov	a,@r0
   0682 9D                 1605 	subb	a,r5
                           1606 ;	genIpop
                           1607 ;	genIfx
                           1608 ;	genIfxJump
                           1609 ;	Peephole 128	jump optimization
   0683 50 03              1610 	jnc	00124$
   0685 02s07rB5           1611 	ljmp	00112$
   0688                    1612 00124$:
                           1613 ;	genRet
   0688 75 82 00           1614 	mov	dpl,#0x00
   068B 02s07rD4           1615 	ljmp	00113$
   068E                    1616 00109$:
                           1617 ;	FatDrivers/tff.c:375: if (((idx / 16) & (fs->sects_clust - 1)) == 0) {	/* Cluster changed? */
                           1618 ;	genIpush
                           1619 ;	genRightShift
                           1620 ;	genRightShiftLiteral
   068E E5*00              1621 	mov	a,_bp
   0690 24 08              1622 	add	a,#0x08
   0692 F8                 1623 	mov	r0,a
                           1624 ;	genrshTwo
   0693 86 04              1625 	mov	ar4,@r0
   0695 08                 1626 	inc	r0
   0696 E6                 1627 	mov	a,@r0
   0697 C4                 1628 	swap	a
   0698 CC                 1629 	xch	a,r4
   0699 C4                 1630 	swap	a
   069A 54 0F              1631 	anl	a,#0x0f
   069C 6C                 1632 	xrl	a,r4
   069D CC                 1633 	xch	a,r4
   069E 54 0F              1634 	anl	a,#0x0f
   06A0 CC                 1635 	xch	a,r4
   06A1 6C                 1636 	xrl	a,r4
   06A2 CC                 1637 	xch	a,r4
   06A3 FD                 1638 	mov	r5,a
                           1639 ;	genPlus
   06A4 E5*00              1640 	mov	a,_bp
   06A6 24 0A              1641 	add	a,#0x0a
   06A8 F8                 1642 	mov	r0,a
                           1643 ;     genPlusIncr
   06A9 74 1D              1644 	mov	a,#0x1D
   06AB 26                 1645 	add	a,@r0
   06AC FE                 1646 	mov	r6,a
                           1647 ;	Peephole 181	changed mov to clr
   06AD E4                 1648 	clr	a
   06AE 08                 1649 	inc	r0
   06AF 36                 1650 	addc	a,@r0
   06B0 FF                 1651 	mov	r7,a
   06B1 08                 1652 	inc	r0
   06B2 86 02              1653 	mov	ar2,@r0
                           1654 ;	genPointerGet
                           1655 ;	genGenPointerGet
   06B4 8E 82              1656 	mov	dpl,r6
   06B6 8F 83              1657 	mov	dph,r7
   06B8 8A F0              1658 	mov	b,r2
   06BA 12s00r00           1659 	lcall	__gptrget
   06BD FE                 1660 	mov	r6,a
                           1661 ;	genCast
   06BE 7A 00              1662 	mov	r2,#0x00
                           1663 ;	genMinus
                           1664 ;	genMinusDec
   06C0 1E                 1665 	dec	r6
   06C1 BE FF 01           1666 	cjne	r6,#0xff,00125$
   06C4 1A                 1667 	dec	r2
   06C5                    1668 00125$:
                           1669 ;	genAnd
   06C5 EE                 1670 	mov	a,r6
   06C6 52 04              1671 	anl	ar4,a
   06C8 EA                 1672 	mov	a,r2
   06C9 52 05              1673 	anl	ar5,a
                           1674 ;	genIfx
   06CB EC                 1675 	mov	a,r4
   06CC 4D                 1676 	orl	a,r5
                           1677 ;	genIpop
                           1678 ;	genIfxJump
   06CD 60 03              1679 	jz	00126$
   06CF 02s07rB5           1680 	ljmp	00112$
   06D2                    1681 00126$:
                           1682 ;	FatDrivers/tff.c:376: clust = get_cluster(dirobj->clust);			/* Get next cluster */
                           1683 ;	genCall
   06D2 E5*00              1684 	mov	a,_bp
   06D4 24 13              1685 	add	a,#0x13
   06D6 F8                 1686 	mov	r0,a
   06D7 86 82              1687 	mov	dpl,@r0
   06D9 08                 1688 	inc	r0
   06DA 86 83              1689 	mov	dph,@r0
   06DC 08                 1690 	inc	r0
   06DD 86 F0              1691 	mov	b,@r0
   06DF 08                 1692 	inc	r0
   06E0 E6                 1693 	mov	a,@r0
   06E1 12s00rEA           1694 	lcall	_get_cluster
   06E4 AA 82              1695 	mov	r2,dpl
   06E6 AB 83              1696 	mov	r3,dph
   06E8 AC F0              1697 	mov	r4,b
   06EA FD                 1698 	mov	r5,a
                           1699 ;	genAssign
   06EB E5*00              1700 	mov	a,_bp
   06ED 24 04              1701 	add	a,#0x04
   06EF F8                 1702 	mov	r0,a
   06F0 A6 02              1703 	mov	@r0,ar2
   06F2 08                 1704 	inc	r0
   06F3 A6 03              1705 	mov	@r0,ar3
   06F5 08                 1706 	inc	r0
   06F6 A6 04              1707 	mov	@r0,ar4
   06F8 08                 1708 	inc	r0
   06F9 A6 05              1709 	mov	@r0,ar5
                           1710 ;	FatDrivers/tff.c:377: if (clust < 2 || clust >= fs->max_clust)	/* Reached to end of table */
                           1711 ;	genCmpLt
   06FB E5*00              1712 	mov	a,_bp
   06FD 24 04              1713 	add	a,#0x04
   06FF F8                 1714 	mov	r0,a
                           1715 ;	genCmp
   0700 C3                 1716 	clr	c
   0701 E6                 1717 	mov	a,@r0
   0702 94 02              1718 	subb	a,#0x02
   0704 08                 1719 	inc	r0
   0705 E6                 1720 	mov	a,@r0
   0706 94 00              1721 	subb	a,#0x00
   0708 08                 1722 	inc	r0
   0709 E6                 1723 	mov	a,@r0
   070A 94 00              1724 	subb	a,#0x00
   070C 08                 1725 	inc	r0
   070D E6                 1726 	mov	a,@r0
   070E 94 00              1727 	subb	a,#0x00
                           1728 ;	genIfxJump
                           1729 ;	Peephole 112.b	changed ljmp to sjmp
                           1730 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0710 40 3C              1731 	jc	00103$
                           1732 ;	Peephole 300	removed redundant label 00127$
                           1733 ;	genPlus
   0712 E5*00              1734 	mov	a,_bp
   0714 24 0A              1735 	add	a,#0x0a
   0716 F8                 1736 	mov	r0,a
                           1737 ;     genPlusIncr
   0717 74 18              1738 	mov	a,#0x18
   0719 26                 1739 	add	a,@r0
   071A FE                 1740 	mov	r6,a
                           1741 ;	Peephole 181	changed mov to clr
   071B E4                 1742 	clr	a
   071C 08                 1743 	inc	r0
   071D 36                 1744 	addc	a,@r0
   071E FF                 1745 	mov	r7,a
   071F 08                 1746 	inc	r0
   0720 86 02              1747 	mov	ar2,@r0
                           1748 ;	genPointerGet
                           1749 ;	genGenPointerGet
   0722 8E 82              1750 	mov	dpl,r6
   0724 8F 83              1751 	mov	dph,r7
   0726 8A F0              1752 	mov	b,r2
   0728 12s00r00           1753 	lcall	__gptrget
   072B FE                 1754 	mov	r6,a
   072C A3                 1755 	inc	dptr
   072D 12s00r00           1756 	lcall	__gptrget
   0730 FF                 1757 	mov	r7,a
   0731 A3                 1758 	inc	dptr
   0732 12s00r00           1759 	lcall	__gptrget
   0735 FA                 1760 	mov	r2,a
   0736 A3                 1761 	inc	dptr
   0737 12s00r00           1762 	lcall	__gptrget
   073A FB                 1763 	mov	r3,a
                           1764 ;	genCmpLt
   073B E5*00              1765 	mov	a,_bp
   073D 24 04              1766 	add	a,#0x04
   073F F8                 1767 	mov	r0,a
                           1768 ;	genCmp
   0740 C3                 1769 	clr	c
   0741 E6                 1770 	mov	a,@r0
   0742 9E                 1771 	subb	a,r6
   0743 08                 1772 	inc	r0
   0744 E6                 1773 	mov	a,@r0
   0745 9F                 1774 	subb	a,r7
   0746 08                 1775 	inc	r0
   0747 E6                 1776 	mov	a,@r0
   0748 9A                 1777 	subb	a,r2
   0749 08                 1778 	inc	r0
   074A E6                 1779 	mov	a,@r0
   074B 9B                 1780 	subb	a,r3
                           1781 ;	genIfxJump
                           1782 ;	Peephole 112.b	changed ljmp to sjmp
                           1783 ;	Peephole 160.a	removed sjmp by inverse jump logic
   074C 40 06              1784 	jc	00104$
                           1785 ;	Peephole 300	removed redundant label 00128$
   074E                    1786 00103$:
                           1787 ;	FatDrivers/tff.c:378: return FALSE;
                           1788 ;	genRet
   074E 75 82 00           1789 	mov	dpl,#0x00
   0751 02s07rD4           1790 	ljmp	00113$
   0754                    1791 00104$:
                           1792 ;	FatDrivers/tff.c:379: dirobj->clust = clust;				/* Initialize for new cluster */
                           1793 ;	genPointerSet
                           1794 ;	genGenPointerSet
   0754 E5*00              1795 	mov	a,_bp
   0756 24 10              1796 	add	a,#0x10
   0758 F8                 1797 	mov	r0,a
   0759 86 82              1798 	mov	dpl,@r0
   075B 08                 1799 	inc	r0
   075C 86 83              1800 	mov	dph,@r0
   075E 08                 1801 	inc	r0
   075F 86 F0              1802 	mov	b,@r0
   0761 E5*00              1803 	mov	a,_bp
   0763 24 04              1804 	add	a,#0x04
   0765 F9                 1805 	mov	r1,a
   0766 E7                 1806 	mov	a,@r1
   0767 12s00r00           1807 	lcall	__gptrput
   076A A3                 1808 	inc	dptr
   076B 09                 1809 	inc	r1
   076C E7                 1810 	mov	a,@r1
   076D 12s00r00           1811 	lcall	__gptrput
   0770 A3                 1812 	inc	dptr
   0771 09                 1813 	inc	r1
   0772 E7                 1814 	mov	a,@r1
   0773 12s00r00           1815 	lcall	__gptrput
   0776 A3                 1816 	inc	dptr
   0777 09                 1817 	inc	r1
   0778 E7                 1818 	mov	a,@r1
   0779 12s00r00           1819 	lcall	__gptrput
                           1820 ;	FatDrivers/tff.c:380: dirobj->sect = clust2sect(clust);
                           1821 ;	genCall
   077C E5*00              1822 	mov	a,_bp
   077E 24 04              1823 	add	a,#0x04
   0780 F8                 1824 	mov	r0,a
   0781 86 82              1825 	mov	dpl,@r0
   0783 08                 1826 	inc	r0
   0784 86 83              1827 	mov	dph,@r0
   0786 08                 1828 	inc	r0
   0787 86 F0              1829 	mov	b,@r0
   0789 08                 1830 	inc	r0
   078A E6                 1831 	mov	a,@r0
   078B 12s04r26           1832 	lcall	_clust2sect
   078E AA 82              1833 	mov	r2,dpl
   0790 AB 83              1834 	mov	r3,dph
   0792 AC F0              1835 	mov	r4,b
   0794 FD                 1836 	mov	r5,a
                           1837 ;	genPointerSet
                           1838 ;	genGenPointerSet
   0795 E5*00              1839 	mov	a,_bp
   0797 24 0D              1840 	add	a,#0x0d
   0799 F8                 1841 	mov	r0,a
   079A 86 82              1842 	mov	dpl,@r0
   079C 08                 1843 	inc	r0
   079D 86 83              1844 	mov	dph,@r0
   079F 08                 1845 	inc	r0
   07A0 86 F0              1846 	mov	b,@r0
   07A2 EA                 1847 	mov	a,r2
   07A3 12s00r00           1848 	lcall	__gptrput
   07A6 A3                 1849 	inc	dptr
   07A7 EB                 1850 	mov	a,r3
   07A8 12s00r00           1851 	lcall	__gptrput
   07AB A3                 1852 	inc	dptr
   07AC EC                 1853 	mov	a,r4
   07AD 12s00r00           1854 	lcall	__gptrput
   07B0 A3                 1855 	inc	dptr
   07B1 ED                 1856 	mov	a,r5
   07B2 12s00r00           1857 	lcall	__gptrput
   07B5                    1858 00112$:
                           1859 ;	FatDrivers/tff.c:384: dirobj->index = idx;	/* Lower 4 bit of dirobj->index indicates offset in dirobj->sect */
                           1860 ;	genPointerSet
                           1861 ;	genGenPointerSet
   07B5 E5*00              1862 	mov	a,_bp
   07B7 24 17              1863 	add	a,#0x17
   07B9 F8                 1864 	mov	r0,a
   07BA 86 82              1865 	mov	dpl,@r0
   07BC 08                 1866 	inc	r0
   07BD 86 83              1867 	mov	dph,@r0
   07BF 08                 1868 	inc	r0
   07C0 86 F0              1869 	mov	b,@r0
   07C2 E5*00              1870 	mov	a,_bp
   07C4 24 08              1871 	add	a,#0x08
   07C6 F9                 1872 	mov	r1,a
   07C7 E7                 1873 	mov	a,@r1
   07C8 12s00r00           1874 	lcall	__gptrput
   07CB A3                 1875 	inc	dptr
   07CC 09                 1876 	inc	r1
   07CD E7                 1877 	mov	a,@r1
   07CE 12s00r00           1878 	lcall	__gptrput
                           1879 ;	FatDrivers/tff.c:385: return TRUE;
                           1880 ;	genRet
   07D1 75 82 01           1881 	mov	dpl,#0x01
   07D4                    1882 00113$:
   07D4 85*00 81           1883 	mov	sp,_bp
   07D7 D0*00              1884 	pop	_bp
   07D9 22                 1885 	ret
                           1886 ;------------------------------------------------------------
                           1887 ;Allocation info for local variables in function 'get_fileinfo'
                           1888 ;------------------------------------------------------------
                           1889 ;dir                       Allocated to stack - offset -5
                           1890 ;finfo                     Allocated to stack - offset 1
                           1891 ;n                         Allocated to stack - offset 4
                           1892 ;c                         Allocated to stack - offset 5
                           1893 ;a                         Allocated to registers r5 
                           1894 ;p                         Allocated to stack - offset 6
                           1895 ;sloc0                     Allocated to stack - offset 9
                           1896 ;------------------------------------------------------------
                           1897 ;	FatDrivers/tff.c:397: void get_fileinfo (		/* No return code */
                           1898 ;	-----------------------------------------
                           1899 ;	 function get_fileinfo
                           1900 ;	-----------------------------------------
   07DA                    1901 _get_fileinfo:
   07DA C0*00              1902 	push	_bp
   07DC 85 81*00           1903 	mov	_bp,sp
                           1904 ;     genReceive
   07DF C0 82              1905 	push	dpl
   07E1 C0 83              1906 	push	dph
   07E3 C0 F0              1907 	push	b
   07E5 E5 81              1908 	mov	a,sp
   07E7 24 0B              1909 	add	a,#0x0b
   07E9 F5 81              1910 	mov	sp,a
                           1911 ;	FatDrivers/tff.c:406: p = &finfo->fname[0];
                           1912 ;	genPlus
   07EB A8*00              1913 	mov	r0,_bp
   07ED 08                 1914 	inc	r0
                           1915 ;     genPlusIncr
   07EE 74 09              1916 	mov	a,#0x09
   07F0 26                 1917 	add	a,@r0
   07F1 FD                 1918 	mov	r5,a
                           1919 ;	Peephole 181	changed mov to clr
   07F2 E4                 1920 	clr	a
   07F3 08                 1921 	inc	r0
   07F4 36                 1922 	addc	a,@r0
   07F5 FE                 1923 	mov	r6,a
   07F6 08                 1924 	inc	r0
   07F7 86 07              1925 	mov	ar7,@r0
                           1926 ;	genCast
   07F9 E5*00              1927 	mov	a,_bp
   07FB 24 06              1928 	add	a,#0x06
   07FD F8                 1929 	mov	r0,a
   07FE A6 05              1930 	mov	@r0,ar5
   0800 08                 1931 	inc	r0
   0801 A6 06              1932 	mov	@r0,ar6
   0803 08                 1933 	inc	r0
   0804 A6 07              1934 	mov	@r0,ar7
                           1935 ;	FatDrivers/tff.c:407: a = _USE_NTFLAG ? dir[DIR_NTres] : 0;	/* NT flag */
                           1936 ;	genPlus
   0806 E5*00              1937 	mov	a,_bp
   0808 24 FB              1938 	add	a,#0xfffffffb
   080A F8                 1939 	mov	r0,a
                           1940 ;     genPlusIncr
   080B 74 0C              1941 	mov	a,#0x0C
   080D 26                 1942 	add	a,@r0
   080E FD                 1943 	mov	r5,a
                           1944 ;	Peephole 181	changed mov to clr
   080F E4                 1945 	clr	a
   0810 08                 1946 	inc	r0
   0811 36                 1947 	addc	a,@r0
   0812 FE                 1948 	mov	r6,a
   0813 08                 1949 	inc	r0
   0814 86 07              1950 	mov	ar7,@r0
                           1951 ;	genPointerGet
                           1952 ;	genGenPointerGet
   0816 8D 82              1953 	mov	dpl,r5
   0818 8E 83              1954 	mov	dph,r6
   081A 8F F0              1955 	mov	b,r7
   081C 12s00r00           1956 	lcall	__gptrget
   081F FD                 1957 	mov	r5,a
                           1958 ;	genAssign
                           1959 ;	FatDrivers/tff.c:408: for (n = 0; n < 8; n++) {	/* Convert file name (body) */
                           1960 ;	genAnd
   0820 74 08              1961 	mov	a,#0x08
   0822 5D                 1962 	anl	a,r5
   0823 FE                 1963 	mov	r6,a
                           1964 ;	genAssign
   0824 E5*00              1965 	mov	a,_bp
   0826 24 06              1966 	add	a,#0x06
   0828 F8                 1967 	mov	r0,a
   0829 E5*00              1968 	mov	a,_bp
   082B 24 09              1969 	add	a,#0x09
   082D F9                 1970 	mov	r1,a
   082E E6                 1971 	mov	a,@r0
   082F F7                 1972 	mov	@r1,a
   0830 08                 1973 	inc	r0
   0831 09                 1974 	inc	r1
   0832 E6                 1975 	mov	a,@r0
   0833 F7                 1976 	mov	@r1,a
   0834 08                 1977 	inc	r0
   0835 09                 1978 	inc	r1
   0836 E6                 1979 	mov	a,@r0
   0837 F7                 1980 	mov	@r1,a
                           1981 ;	genAssign
   0838 7B 00              1982 	mov	r3,#0x00
   083A                    1983 00109$:
                           1984 ;	genCmpLt
                           1985 ;	genCmp
   083A BB 08 00           1986 	cjne	r3,#0x08,00143$
   083D                    1987 00143$:
                           1988 ;	genIfxJump
   083D 40 03              1989 	jc	00144$
   083F 02s08rC3           1990 	ljmp	00141$
   0842                    1991 00144$:
                           1992 ;	FatDrivers/tff.c:409: c = dir[n];
                           1993 ;	genIpush
   0842 C0 05              1994 	push	ar5
                           1995 ;	genPlus
   0844 E5*00              1996 	mov	a,_bp
   0846 24 FB              1997 	add	a,#0xfffffffb
   0848 F8                 1998 	mov	r0,a
                           1999 ;	Peephole 236.g	used r3 instead of ar3
   0849 EB                 2000 	mov	a,r3
   084A 26                 2001 	add	a,@r0
   084B FD                 2002 	mov	r5,a
                           2003 ;	Peephole 181	changed mov to clr
   084C E4                 2004 	clr	a
   084D 08                 2005 	inc	r0
   084E 36                 2006 	addc	a,@r0
   084F FF                 2007 	mov	r7,a
   0850 08                 2008 	inc	r0
   0851 86 02              2009 	mov	ar2,@r0
                           2010 ;	genPointerGet
                           2011 ;	genGenPointerGet
   0853 8D 82              2012 	mov	dpl,r5
   0855 8F 83              2013 	mov	dph,r7
   0857 8A F0              2014 	mov	b,r2
   0859 12s00r00           2015 	lcall	__gptrget
   085C FD                 2016 	mov	r5,a
                           2017 ;	genAssign
   085D E5*00              2018 	mov	a,_bp
   085F 24 05              2019 	add	a,#0x05
   0861 F8                 2020 	mov	r0,a
   0862 A6 05              2021 	mov	@r0,ar5
                           2022 ;	FatDrivers/tff.c:410: if (c == ' ') break;
                           2023 ;	genCmpEq
   0864 E5*00              2024 	mov	a,_bp
   0866 24 05              2025 	add	a,#0x05
   0868 F8                 2026 	mov	r0,a
                           2027 ;	gencjne
                           2028 ;	gencjneshort
                           2029 ;	Peephole 241.h	optimized compare
   0869 E4                 2030 	clr	a
   086A B6 20 01           2031 	cjne	@r0,#0x20,00145$
   086D 04                 2032 	inc	a
   086E                    2033 00145$:
                           2034 ;	Peephole 300	removed redundant label 00146$
                           2035 ;	genIpop
   086E D0 05              2036 	pop	ar5
                           2037 ;	genIfx
                           2038 ;	genIfxJump
                           2039 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0870 70 51              2040 	jnz	00141$
                           2041 ;	Peephole 300	removed redundant label 00147$
                           2042 ;	FatDrivers/tff.c:411: if (c == 0x05) c = 0xE5;
                           2043 ;	genCmpEq
   0872 E5*00              2044 	mov	a,_bp
   0874 24 05              2045 	add	a,#0x05
   0876 F8                 2046 	mov	r0,a
                           2047 ;	gencjneshort
                           2048 ;	Peephole 112.b	changed ljmp to sjmp
                           2049 ;	Peephole 198.b	optimized misc jump sequence
   0877 B6 05 07           2050 	cjne	@r0,#0x05,00104$
                           2051 ;	Peephole 200.b	removed redundant sjmp
                           2052 ;	Peephole 300	removed redundant label 00148$
                           2053 ;	Peephole 300	removed redundant label 00149$
                           2054 ;	genAssign
   087A E5*00              2055 	mov	a,_bp
   087C 24 05              2056 	add	a,#0x05
   087E F8                 2057 	mov	r0,a
   087F 76 E5              2058 	mov	@r0,#0xE5
   0881                    2059 00104$:
                           2060 ;	FatDrivers/tff.c:412: if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
                           2061 ;	genIfx
   0881 EE                 2062 	mov	a,r6
                           2063 ;	genIfxJump
                           2064 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0882 60 1D              2065 	jz	00106$
                           2066 ;	Peephole 300	removed redundant label 00150$
                           2067 ;	genCmpLt
   0884 E5*00              2068 	mov	a,_bp
   0886 24 05              2069 	add	a,#0x05
   0888 F8                 2070 	mov	r0,a
                           2071 ;	genCmp
   0889 B6 41 00           2072 	cjne	@r0,#0x41,00151$
   088C                    2073 00151$:
                           2074 ;	genIfxJump
                           2075 ;	Peephole 112.b	changed ljmp to sjmp
                           2076 ;	Peephole 160.a	removed sjmp by inverse jump logic
   088C 40 13              2077 	jc	00106$
                           2078 ;	Peephole 300	removed redundant label 00152$
                           2079 ;	genCmpGt
   088E E5*00              2080 	mov	a,_bp
   0890 24 05              2081 	add	a,#0x05
   0892 F8                 2082 	mov	r0,a
                           2083 ;	genCmp
                           2084 ;	genIfxJump
                           2085 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0893 E6                 2086 	mov	a,@r0
   0894 24 A5              2087 	add	a,#0xff - 0x5A
                           2088 ;	Peephole 112.b	changed ljmp to sjmp
                           2089 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0896 40 09              2090 	jc	00106$
                           2091 ;	Peephole 300	removed redundant label 00153$
                           2092 ;	genPlus
   0898 E5*00              2093 	mov	a,_bp
   089A 24 05              2094 	add	a,#0x05
   089C F8                 2095 	mov	r0,a
                           2096 ;     genPlusIncr
   089D 74 20              2097 	mov	a,#0x20
   089F 26                 2098 	add	a,@r0
   08A0 F6                 2099 	mov	@r0,a
   08A1                    2100 00106$:
                           2101 ;	FatDrivers/tff.c:413: *p++ = c;
                           2102 ;	genPointerSet
                           2103 ;	genGenPointerSet
   08A1 E5*00              2104 	mov	a,_bp
   08A3 24 09              2105 	add	a,#0x09
   08A5 F8                 2106 	mov	r0,a
   08A6 86 82              2107 	mov	dpl,@r0
   08A8 08                 2108 	inc	r0
   08A9 86 83              2109 	mov	dph,@r0
   08AB 08                 2110 	inc	r0
   08AC 86 F0              2111 	mov	b,@r0
   08AE E5*00              2112 	mov	a,_bp
   08B0 24 05              2113 	add	a,#0x05
   08B2 F9                 2114 	mov	r1,a
   08B3 E7                 2115 	mov	a,@r1
   08B4 12s00r00           2116 	lcall	__gptrput
   08B7 A3                 2117 	inc	dptr
   08B8 18                 2118 	dec	r0
   08B9 18                 2119 	dec	r0
   08BA A6 82              2120 	mov	@r0,dpl
   08BC 08                 2121 	inc	r0
   08BD A6 83              2122 	mov	@r0,dph
                           2123 ;	FatDrivers/tff.c:408: for (n = 0; n < 8; n++) {	/* Convert file name (body) */
                           2124 ;	genPlus
                           2125 ;     genPlusIncr
   08BF 0B                 2126 	inc	r3
   08C0 02s08r3A           2127 	ljmp	00109$
   08C3                    2128 00141$:
                           2129 ;	genAssign
   08C3 E5*00              2130 	mov	a,_bp
   08C5 24 09              2131 	add	a,#0x09
   08C7 F8                 2132 	mov	r0,a
   08C8 E5*00              2133 	mov	a,_bp
   08CA 24 06              2134 	add	a,#0x06
   08CC F9                 2135 	mov	r1,a
   08CD E6                 2136 	mov	a,@r0
   08CE F7                 2137 	mov	@r1,a
   08CF 08                 2138 	inc	r0
   08D0 09                 2139 	inc	r1
   08D1 E6                 2140 	mov	a,@r0
   08D2 F7                 2141 	mov	@r1,a
   08D3 08                 2142 	inc	r0
   08D4 09                 2143 	inc	r1
   08D5 E6                 2144 	mov	a,@r0
   08D6 F7                 2145 	mov	@r1,a
                           2146 ;	FatDrivers/tff.c:415: if (dir[8] != ' ') {		/* Convert file name (extension) */
                           2147 ;	genPlus
   08D7 E5*00              2148 	mov	a,_bp
   08D9 24 FB              2149 	add	a,#0xfffffffb
   08DB F8                 2150 	mov	r0,a
                           2151 ;     genPlusIncr
   08DC 74 08              2152 	mov	a,#0x08
   08DE 26                 2153 	add	a,@r0
   08DF FA                 2154 	mov	r2,a
                           2155 ;	Peephole 181	changed mov to clr
   08E0 E4                 2156 	clr	a
   08E1 08                 2157 	inc	r0
   08E2 36                 2158 	addc	a,@r0
   08E3 FB                 2159 	mov	r3,a
   08E4 08                 2160 	inc	r0
   08E5 86 04              2161 	mov	ar4,@r0
                           2162 ;	genPointerGet
                           2163 ;	genGenPointerGet
   08E7 8A 82              2164 	mov	dpl,r2
   08E9 8B 83              2165 	mov	dph,r3
   08EB 8C F0              2166 	mov	b,r4
   08ED 12s00r00           2167 	lcall	__gptrget
   08F0 FA                 2168 	mov	r2,a
                           2169 ;	genCmpEq
                           2170 ;	gencjneshort
   08F1 BA 20 03           2171 	cjne	r2,#0x20,00154$
   08F4 02s09rC4           2172 	ljmp	00124$
   08F7                    2173 00154$:
                           2174 ;	FatDrivers/tff.c:416: *p++ = '.';
                           2175 ;	genPointerSet
                           2176 ;	genGenPointerSet
   08F7 E5*00              2177 	mov	a,_bp
   08F9 24 09              2178 	add	a,#0x09
   08FB F8                 2179 	mov	r0,a
   08FC 86 82              2180 	mov	dpl,@r0
   08FE 08                 2181 	inc	r0
   08FF 86 83              2182 	mov	dph,@r0
   0901 08                 2183 	inc	r0
   0902 86 F0              2184 	mov	b,@r0
   0904 74 2E              2185 	mov	a,#0x2E
   0906 12s00r00           2186 	lcall	__gptrput
                           2187 ;	genPlus
   0909 E5*00              2188 	mov	a,_bp
   090B 24 09              2189 	add	a,#0x09
   090D F8                 2190 	mov	r0,a
   090E E5*00              2191 	mov	a,_bp
   0910 24 06              2192 	add	a,#0x06
   0912 F9                 2193 	mov	r1,a
                           2194 ;     genPlusIncr
   0913 74 01              2195 	mov	a,#0x01
   0915 26                 2196 	add	a,@r0
   0916 F7                 2197 	mov	@r1,a
                           2198 ;	Peephole 181	changed mov to clr
   0917 E4                 2199 	clr	a
   0918 08                 2200 	inc	r0
   0919 36                 2201 	addc	a,@r0
   091A 09                 2202 	inc	r1
   091B F7                 2203 	mov	@r1,a
   091C 08                 2204 	inc	r0
   091D 09                 2205 	inc	r1
   091E E6                 2206 	mov	a,@r0
   091F F7                 2207 	mov	@r1,a
                           2208 ;	FatDrivers/tff.c:417: for (n = 8; n < 11; n++) {
                           2209 ;	genAnd
   0920 74 10              2210 	mov	a,#0x10
   0922 5D                 2211 	anl	a,r5
   0923 FA                 2212 	mov	r2,a
                           2213 ;	genAssign
   0924 E5*00              2214 	mov	a,_bp
   0926 24 06              2215 	add	a,#0x06
   0928 F8                 2216 	mov	r0,a
   0929 86 03              2217 	mov	ar3,@r0
   092B 08                 2218 	inc	r0
   092C 86 04              2219 	mov	ar4,@r0
   092E 08                 2220 	inc	r0
   092F 86 05              2221 	mov	ar5,@r0
                           2222 ;	genAssign
   0931 E5*00              2223 	mov	a,_bp
   0933 24 04              2224 	add	a,#0x04
   0935 F8                 2225 	mov	r0,a
   0936 76 08              2226 	mov	@r0,#0x08
   0938                    2227 00119$:
                           2228 ;	genCmpLt
   0938 E5*00              2229 	mov	a,_bp
   093A 24 04              2230 	add	a,#0x04
   093C F8                 2231 	mov	r0,a
                           2232 ;	genCmp
   093D B6 0B 00           2233 	cjne	@r0,#0x0B,00155$
   0940                    2234 00155$:
                           2235 ;	genIfxJump
   0940 40 03              2236 	jc	00156$
   0942 02s09rB7           2237 	ljmp	00142$
   0945                    2238 00156$:
                           2239 ;	FatDrivers/tff.c:418: c = dir[n];
                           2240 ;	genIpush
   0945 C0 02              2241 	push	ar2
                           2242 ;	genPlus
   0947 E5*00              2243 	mov	a,_bp
   0949 24 FB              2244 	add	a,#0xfffffffb
   094B F8                 2245 	mov	r0,a
   094C E5*00              2246 	mov	a,_bp
   094E 24 04              2247 	add	a,#0x04
   0950 F9                 2248 	mov	r1,a
   0951 E7                 2249 	mov	a,@r1
   0952 26                 2250 	add	a,@r0
   0953 FF                 2251 	mov	r7,a
                           2252 ;	Peephole 181	changed mov to clr
   0954 E4                 2253 	clr	a
   0955 08                 2254 	inc	r0
   0956 36                 2255 	addc	a,@r0
   0957 FA                 2256 	mov	r2,a
   0958 08                 2257 	inc	r0
   0959 86 06              2258 	mov	ar6,@r0
                           2259 ;	genPointerGet
                           2260 ;	genGenPointerGet
   095B 8F 82              2261 	mov	dpl,r7
   095D 8A 83              2262 	mov	dph,r2
   095F 8E F0              2263 	mov	b,r6
   0961 12s00r00           2264 	lcall	__gptrget
   0964 FF                 2265 	mov	r7,a
                           2266 ;	genAssign
   0965 E5*00              2267 	mov	a,_bp
   0967 24 05              2268 	add	a,#0x05
   0969 F8                 2269 	mov	r0,a
   096A A6 07              2270 	mov	@r0,ar7
                           2271 ;	FatDrivers/tff.c:419: if (c == ' ') break;
                           2272 ;	genCmpEq
   096C E5*00              2273 	mov	a,_bp
   096E 24 05              2274 	add	a,#0x05
   0970 F8                 2275 	mov	r0,a
                           2276 ;	gencjne
                           2277 ;	gencjneshort
                           2278 ;	Peephole 241.h	optimized compare
   0971 E4                 2279 	clr	a
   0972 B6 20 01           2280 	cjne	@r0,#0x20,00157$
   0975 04                 2281 	inc	a
   0976                    2282 00157$:
                           2283 ;	Peephole 300	removed redundant label 00158$
                           2284 ;	genIpop
   0976 D0 02              2285 	pop	ar2
                           2286 ;	genIfx
                           2287 ;	genIfxJump
                           2288 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0978 70 3D              2289 	jnz	00142$
                           2290 ;	Peephole 300	removed redundant label 00159$
                           2291 ;	FatDrivers/tff.c:420: if (a & 0x10 && c >= 'A' && c <= 'Z') c += 0x20;
                           2292 ;	genIfx
   097A EA                 2293 	mov	a,r2
                           2294 ;	genIfxJump
                           2295 ;	Peephole 108.c	removed ljmp by inverse jump logic
   097B 60 1D              2296 	jz	00116$
                           2297 ;	Peephole 300	removed redundant label 00160$
                           2298 ;	genCmpLt
   097D E5*00              2299 	mov	a,_bp
   097F 24 05              2300 	add	a,#0x05
   0981 F8                 2301 	mov	r0,a
                           2302 ;	genCmp
   0982 B6 41 00           2303 	cjne	@r0,#0x41,00161$
   0985                    2304 00161$:
                           2305 ;	genIfxJump
                           2306 ;	Peephole 112.b	changed ljmp to sjmp
                           2307 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0985 40 13              2308 	jc	00116$
                           2309 ;	Peephole 300	removed redundant label 00162$
                           2310 ;	genCmpGt
   0987 E5*00              2311 	mov	a,_bp
   0989 24 05              2312 	add	a,#0x05
   098B F8                 2313 	mov	r0,a
                           2314 ;	genCmp
                           2315 ;	genIfxJump
                           2316 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   098C E6                 2317 	mov	a,@r0
   098D 24 A5              2318 	add	a,#0xff - 0x5A
                           2319 ;	Peephole 112.b	changed ljmp to sjmp
                           2320 ;	Peephole 160.a	removed sjmp by inverse jump logic
   098F 40 09              2321 	jc	00116$
                           2322 ;	Peephole 300	removed redundant label 00163$
                           2323 ;	genPlus
   0991 E5*00              2324 	mov	a,_bp
   0993 24 05              2325 	add	a,#0x05
   0995 F8                 2326 	mov	r0,a
                           2327 ;     genPlusIncr
   0996 74 20              2328 	mov	a,#0x20
   0998 26                 2329 	add	a,@r0
   0999 F6                 2330 	mov	@r0,a
   099A                    2331 00116$:
                           2332 ;	FatDrivers/tff.c:421: *p++ = c;
                           2333 ;	genPointerSet
                           2334 ;	genGenPointerSet
   099A 8B 82              2335 	mov	dpl,r3
   099C 8C 83              2336 	mov	dph,r4
   099E 8D F0              2337 	mov	b,r5
   09A0 E5*00              2338 	mov	a,_bp
   09A2 24 05              2339 	add	a,#0x05
   09A4 F8                 2340 	mov	r0,a
   09A5 E6                 2341 	mov	a,@r0
   09A6 12s00r00           2342 	lcall	__gptrput
   09A9 A3                 2343 	inc	dptr
   09AA AB 82              2344 	mov	r3,dpl
   09AC AC 83              2345 	mov	r4,dph
                           2346 ;	FatDrivers/tff.c:417: for (n = 8; n < 11; n++) {
                           2347 ;	genPlus
   09AE E5*00              2348 	mov	a,_bp
   09B0 24 04              2349 	add	a,#0x04
   09B2 F8                 2350 	mov	r0,a
                           2351 ;     genPlusIncr
   09B3 06                 2352 	inc	@r0
   09B4 02s09r38           2353 	ljmp	00119$
   09B7                    2354 00142$:
                           2355 ;	genAssign
   09B7 E5*00              2356 	mov	a,_bp
   09B9 24 06              2357 	add	a,#0x06
   09BB F8                 2358 	mov	r0,a
   09BC A6 03              2359 	mov	@r0,ar3
   09BE 08                 2360 	inc	r0
   09BF A6 04              2361 	mov	@r0,ar4
   09C1 08                 2362 	inc	r0
   09C2 A6 05              2363 	mov	@r0,ar5
   09C4                    2364 00124$:
                           2365 ;	FatDrivers/tff.c:424: *p = '\0';
                           2366 ;	genPointerSet
                           2367 ;	genGenPointerSet
   09C4 E5*00              2368 	mov	a,_bp
   09C6 24 06              2369 	add	a,#0x06
   09C8 F8                 2370 	mov	r0,a
   09C9 86 82              2371 	mov	dpl,@r0
   09CB 08                 2372 	inc	r0
   09CC 86 83              2373 	mov	dph,@r0
   09CE 08                 2374 	inc	r0
   09CF 86 F0              2375 	mov	b,@r0
                           2376 ;	Peephole 181	changed mov to clr
   09D1 E4                 2377 	clr	a
   09D2 12s00r00           2378 	lcall	__gptrput
                           2379 ;	FatDrivers/tff.c:426: finfo->fattrib = dir[DIR_Attr];			/* Attribute */
                           2380 ;	genPlus
   09D5 A8*00              2381 	mov	r0,_bp
   09D7 08                 2382 	inc	r0
                           2383 ;     genPlusIncr
   09D8 74 08              2384 	mov	a,#0x08
   09DA 26                 2385 	add	a,@r0
   09DB FA                 2386 	mov	r2,a
                           2387 ;	Peephole 181	changed mov to clr
   09DC E4                 2388 	clr	a
   09DD 08                 2389 	inc	r0
   09DE 36                 2390 	addc	a,@r0
   09DF FB                 2391 	mov	r3,a
   09E0 08                 2392 	inc	r0
   09E1 86 04              2393 	mov	ar4,@r0
                           2394 ;	genPlus
   09E3 E5*00              2395 	mov	a,_bp
   09E5 24 FB              2396 	add	a,#0xfffffffb
   09E7 F8                 2397 	mov	r0,a
                           2398 ;     genPlusIncr
   09E8 74 0B              2399 	mov	a,#0x0B
   09EA 26                 2400 	add	a,@r0
   09EB FD                 2401 	mov	r5,a
                           2402 ;	Peephole 181	changed mov to clr
   09EC E4                 2403 	clr	a
   09ED 08                 2404 	inc	r0
   09EE 36                 2405 	addc	a,@r0
   09EF FE                 2406 	mov	r6,a
   09F0 08                 2407 	inc	r0
   09F1 86 07              2408 	mov	ar7,@r0
                           2409 ;	genPointerGet
                           2410 ;	genGenPointerGet
   09F3 8D 82              2411 	mov	dpl,r5
   09F5 8E 83              2412 	mov	dph,r6
   09F7 8F F0              2413 	mov	b,r7
   09F9 12s00r00           2414 	lcall	__gptrget
                           2415 ;	genPointerSet
                           2416 ;	genGenPointerSet
   09FC FD                 2417 	mov	r5,a
   09FD 8A 82              2418 	mov	dpl,r2
   09FF 8B 83              2419 	mov	dph,r3
   0A01 8C F0              2420 	mov	b,r4
                           2421 ;	Peephole 191	removed redundant mov
   0A03 12s00r00           2422 	lcall	__gptrput
                           2423 ;	FatDrivers/tff.c:427: finfo->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* Size */
                           2424 ;	genPlus
   0A06 E5*00              2425 	mov	a,_bp
   0A08 24 FB              2426 	add	a,#0xfffffffb
   0A0A F8                 2427 	mov	r0,a
                           2428 ;     genPlusIncr
   0A0B 74 1C              2429 	mov	a,#0x1C
   0A0D 26                 2430 	add	a,@r0
   0A0E FA                 2431 	mov	r2,a
                           2432 ;	Peephole 181	changed mov to clr
   0A0F E4                 2433 	clr	a
   0A10 08                 2434 	inc	r0
   0A11 36                 2435 	addc	a,@r0
   0A12 FB                 2436 	mov	r3,a
   0A13 08                 2437 	inc	r0
   0A14 86 04              2438 	mov	ar4,@r0
                           2439 ;	genPointerGet
                           2440 ;	genGenPointerGet
   0A16 8A 82              2441 	mov	dpl,r2
   0A18 8B 83              2442 	mov	dph,r3
   0A1A 8C F0              2443 	mov	b,r4
   0A1C 12s00r00           2444 	lcall	__gptrget
   0A1F FA                 2445 	mov	r2,a
   0A20 A3                 2446 	inc	dptr
   0A21 12s00r00           2447 	lcall	__gptrget
   0A24 FB                 2448 	mov	r3,a
   0A25 A3                 2449 	inc	dptr
   0A26 12s00r00           2450 	lcall	__gptrget
   0A29 FC                 2451 	mov	r4,a
   0A2A A3                 2452 	inc	dptr
   0A2B 12s00r00           2453 	lcall	__gptrget
   0A2E FD                 2454 	mov	r5,a
                           2455 ;	genPointerSet
                           2456 ;	genGenPointerSet
   0A2F A8*00              2457 	mov	r0,_bp
   0A31 08                 2458 	inc	r0
   0A32 86 82              2459 	mov	dpl,@r0
   0A34 08                 2460 	inc	r0
   0A35 86 83              2461 	mov	dph,@r0
   0A37 08                 2462 	inc	r0
   0A38 86 F0              2463 	mov	b,@r0
   0A3A EA                 2464 	mov	a,r2
   0A3B 12s00r00           2465 	lcall	__gptrput
   0A3E A3                 2466 	inc	dptr
   0A3F EB                 2467 	mov	a,r3
   0A40 12s00r00           2468 	lcall	__gptrput
   0A43 A3                 2469 	inc	dptr
   0A44 EC                 2470 	mov	a,r4
   0A45 12s00r00           2471 	lcall	__gptrput
   0A48 A3                 2472 	inc	dptr
   0A49 ED                 2473 	mov	a,r5
   0A4A 12s00r00           2474 	lcall	__gptrput
                           2475 ;	FatDrivers/tff.c:428: finfo->fdate = LD_WORD(&dir[DIR_WrtDate]);	/* Date */
                           2476 ;	genPlus
   0A4D A8*00              2477 	mov	r0,_bp
   0A4F 08                 2478 	inc	r0
                           2479 ;     genPlusIncr
   0A50 74 04              2480 	mov	a,#0x04
   0A52 26                 2481 	add	a,@r0
   0A53 FA                 2482 	mov	r2,a
                           2483 ;	Peephole 181	changed mov to clr
   0A54 E4                 2484 	clr	a
   0A55 08                 2485 	inc	r0
   0A56 36                 2486 	addc	a,@r0
   0A57 FB                 2487 	mov	r3,a
   0A58 08                 2488 	inc	r0
   0A59 86 04              2489 	mov	ar4,@r0
                           2490 ;	genPlus
   0A5B E5*00              2491 	mov	a,_bp
   0A5D 24 FB              2492 	add	a,#0xfffffffb
   0A5F F8                 2493 	mov	r0,a
                           2494 ;     genPlusIncr
   0A60 74 18              2495 	mov	a,#0x18
   0A62 26                 2496 	add	a,@r0
   0A63 FD                 2497 	mov	r5,a
                           2498 ;	Peephole 181	changed mov to clr
   0A64 E4                 2499 	clr	a
   0A65 08                 2500 	inc	r0
   0A66 36                 2501 	addc	a,@r0
   0A67 FE                 2502 	mov	r6,a
   0A68 08                 2503 	inc	r0
   0A69 86 07              2504 	mov	ar7,@r0
                           2505 ;	genPointerGet
                           2506 ;	genGenPointerGet
   0A6B 8D 82              2507 	mov	dpl,r5
   0A6D 8E 83              2508 	mov	dph,r6
   0A6F 8F F0              2509 	mov	b,r7
   0A71 12s00r00           2510 	lcall	__gptrget
   0A74 FD                 2511 	mov	r5,a
   0A75 A3                 2512 	inc	dptr
   0A76 12s00r00           2513 	lcall	__gptrget
   0A79 FE                 2514 	mov	r6,a
                           2515 ;	genPointerSet
                           2516 ;	genGenPointerSet
   0A7A 8A 82              2517 	mov	dpl,r2
   0A7C 8B 83              2518 	mov	dph,r3
   0A7E 8C F0              2519 	mov	b,r4
   0A80 ED                 2520 	mov	a,r5
   0A81 12s00r00           2521 	lcall	__gptrput
   0A84 A3                 2522 	inc	dptr
   0A85 EE                 2523 	mov	a,r6
   0A86 12s00r00           2524 	lcall	__gptrput
                           2525 ;	FatDrivers/tff.c:429: finfo->ftime = LD_WORD(&dir[DIR_WrtTime]);	/* Time */
                           2526 ;	genPlus
   0A89 A8*00              2527 	mov	r0,_bp
   0A8B 08                 2528 	inc	r0
                           2529 ;     genPlusIncr
   0A8C 74 06              2530 	mov	a,#0x06
   0A8E 26                 2531 	add	a,@r0
   0A8F FA                 2532 	mov	r2,a
                           2533 ;	Peephole 181	changed mov to clr
   0A90 E4                 2534 	clr	a
   0A91 08                 2535 	inc	r0
   0A92 36                 2536 	addc	a,@r0
   0A93 FB                 2537 	mov	r3,a
   0A94 08                 2538 	inc	r0
   0A95 86 04              2539 	mov	ar4,@r0
                           2540 ;	genPlus
   0A97 E5*00              2541 	mov	a,_bp
   0A99 24 FB              2542 	add	a,#0xfffffffb
   0A9B F8                 2543 	mov	r0,a
                           2544 ;     genPlusIncr
   0A9C 74 16              2545 	mov	a,#0x16
   0A9E 26                 2546 	add	a,@r0
   0A9F FD                 2547 	mov	r5,a
                           2548 ;	Peephole 181	changed mov to clr
   0AA0 E4                 2549 	clr	a
   0AA1 08                 2550 	inc	r0
   0AA2 36                 2551 	addc	a,@r0
   0AA3 FE                 2552 	mov	r6,a
   0AA4 08                 2553 	inc	r0
   0AA5 86 07              2554 	mov	ar7,@r0
                           2555 ;	genPointerGet
                           2556 ;	genGenPointerGet
   0AA7 8D 82              2557 	mov	dpl,r5
   0AA9 8E 83              2558 	mov	dph,r6
   0AAB 8F F0              2559 	mov	b,r7
   0AAD 12s00r00           2560 	lcall	__gptrget
   0AB0 FD                 2561 	mov	r5,a
   0AB1 A3                 2562 	inc	dptr
   0AB2 12s00r00           2563 	lcall	__gptrget
   0AB5 FE                 2564 	mov	r6,a
                           2565 ;	genPointerSet
                           2566 ;	genGenPointerSet
   0AB6 8A 82              2567 	mov	dpl,r2
   0AB8 8B 83              2568 	mov	dph,r3
   0ABA 8C F0              2569 	mov	b,r4
   0ABC ED                 2570 	mov	a,r5
   0ABD 12s00r00           2571 	lcall	__gptrput
   0AC0 A3                 2572 	inc	dptr
   0AC1 EE                 2573 	mov	a,r6
   0AC2 12s00r00           2574 	lcall	__gptrput
                           2575 ;	Peephole 300	removed redundant label 00125$
   0AC5 85*00 81           2576 	mov	sp,_bp
   0AC8 D0*00              2577 	pop	_bp
   0ACA 22                 2578 	ret
                           2579 ;------------------------------------------------------------
                           2580 ;Allocation info for local variables in function 'make_dirfile'
                           2581 ;------------------------------------------------------------
                           2582 ;dirname                   Allocated to stack - offset -5
                           2583 ;path                      Allocated to stack - offset 1
                           2584 ;n                         Allocated to stack - offset 4
                           2585 ;t                         Allocated to registers r6 
                           2586 ;c                         Allocated to registers r7 
                           2587 ;a                         Allocated to stack - offset 5
                           2588 ;b                         Allocated to stack - offset 6
                           2589 ;------------------------------------------------------------
                           2590 ;	FatDrivers/tff.c:441: char make_dirfile (			/* 1: error - detected an invalid format, '\0'or'/': next character */
                           2591 ;	-----------------------------------------
                           2592 ;	 function make_dirfile
                           2593 ;	-----------------------------------------
   0ACB                    2594 _make_dirfile:
   0ACB C0*00              2595 	push	_bp
   0ACD 85 81*00           2596 	mov	_bp,sp
                           2597 ;     genReceive
   0AD0 C0 82              2598 	push	dpl
   0AD2 C0 83              2599 	push	dph
   0AD4 C0 F0              2600 	push	b
   0AD6 05 81              2601 	inc	sp
   0AD8 05 81              2602 	inc	sp
   0ADA 05 81              2603 	inc	sp
                           2604 ;	FatDrivers/tff.c:449: memset(dirname, ' ', 8+3);	/* Fill buffer with spaces */
                           2605 ;	genAssign
   0ADC E5*00              2606 	mov	a,_bp
   0ADE 24 FB              2607 	add	a,#0xfffffffb
   0AE0 F8                 2608 	mov	r0,a
   0AE1 86 05              2609 	mov	ar5,@r0
   0AE3 08                 2610 	inc	r0
   0AE4 86 06              2611 	mov	ar6,@r0
   0AE6 08                 2612 	inc	r0
   0AE7 86 07              2613 	mov	ar7,@r0
                           2614 ;	genIpush
   0AE9 74 0B              2615 	mov	a,#0x0B
   0AEB C0 E0              2616 	push	acc
                           2617 ;	Peephole 181	changed mov to clr
   0AED E4                 2618 	clr	a
   0AEE C0 E0              2619 	push	acc
                           2620 ;	genIpush
   0AF0 74 20              2621 	mov	a,#0x20
   0AF2 C0 E0              2622 	push	acc
                           2623 ;	genCall
   0AF4 8D 82              2624 	mov	dpl,r5
   0AF6 8E 83              2625 	mov	dph,r6
   0AF8 8F F0              2626 	mov	b,r7
   0AFA 12s00r00           2627 	lcall	_memset
   0AFD 15 81              2628 	dec	sp
   0AFF 15 81              2629 	dec	sp
   0B01 15 81              2630 	dec	sp
                           2631 ;	FatDrivers/tff.c:450: a = 0; b = 0x18;	/* NT flag */
                           2632 ;	genAssign
   0B03 E5*00              2633 	mov	a,_bp
   0B05 24 05              2634 	add	a,#0x05
   0B07 F8                 2635 	mov	r0,a
   0B08 76 00              2636 	mov	@r0,#0x00
                           2637 ;	genAssign
   0B0A E5*00              2638 	mov	a,_bp
   0B0C 24 06              2639 	add	a,#0x06
   0B0E F8                 2640 	mov	r0,a
   0B0F 76 18              2641 	mov	@r0,#0x18
                           2642 ;	FatDrivers/tff.c:451: n = 0; t = 8;
                           2643 ;	genAssign
   0B11 E5*00              2644 	mov	a,_bp
   0B13 24 04              2645 	add	a,#0x04
   0B15 F8                 2646 	mov	r0,a
   0B16 76 00              2647 	mov	@r0,#0x00
                           2648 ;	genAssign
   0B18 7E 08              2649 	mov	r6,#0x08
   0B1A                    2650 00155$:
                           2651 ;	FatDrivers/tff.c:453: c = *(*path)++;
                           2652 ;	genIpush
   0B1A C0 06              2653 	push	ar6
                           2654 ;	genPointerGet
                           2655 ;	genGenPointerGet
   0B1C A8*00              2656 	mov	r0,_bp
   0B1E 08                 2657 	inc	r0
   0B1F 86 82              2658 	mov	dpl,@r0
   0B21 08                 2659 	inc	r0
   0B22 86 83              2660 	mov	dph,@r0
   0B24 08                 2661 	inc	r0
   0B25 86 F0              2662 	mov	b,@r0
   0B27 12s00r00           2663 	lcall	__gptrget
   0B2A FE                 2664 	mov	r6,a
   0B2B A3                 2665 	inc	dptr
   0B2C 12s00r00           2666 	lcall	__gptrget
   0B2F FF                 2667 	mov	r7,a
   0B30 A3                 2668 	inc	dptr
   0B31 12s00r00           2669 	lcall	__gptrget
   0B34 FD                 2670 	mov	r5,a
                           2671 ;	genPlus
                           2672 ;     genPlusIncr
   0B35 74 01              2673 	mov	a,#0x01
                           2674 ;	Peephole 236.a	used r6 instead of ar6
   0B37 2E                 2675 	add	a,r6
   0B38 FA                 2676 	mov	r2,a
                           2677 ;	Peephole 181	changed mov to clr
   0B39 E4                 2678 	clr	a
                           2679 ;	Peephole 236.b	used r7 instead of ar7
   0B3A 3F                 2680 	addc	a,r7
   0B3B FB                 2681 	mov	r3,a
   0B3C 8D 04              2682 	mov	ar4,r5
                           2683 ;	genPointerSet
                           2684 ;	genGenPointerSet
   0B3E A8*00              2685 	mov	r0,_bp
   0B40 08                 2686 	inc	r0
   0B41 86 82              2687 	mov	dpl,@r0
   0B43 08                 2688 	inc	r0
   0B44 86 83              2689 	mov	dph,@r0
   0B46 08                 2690 	inc	r0
   0B47 86 F0              2691 	mov	b,@r0
   0B49 EA                 2692 	mov	a,r2
   0B4A 12s00r00           2693 	lcall	__gptrput
   0B4D A3                 2694 	inc	dptr
   0B4E EB                 2695 	mov	a,r3
   0B4F 12s00r00           2696 	lcall	__gptrput
   0B52 A3                 2697 	inc	dptr
   0B53 EC                 2698 	mov	a,r4
   0B54 12s00r00           2699 	lcall	__gptrput
                           2700 ;	genPointerGet
                           2701 ;	genGenPointerGet
   0B57 8E 82              2702 	mov	dpl,r6
   0B59 8F 83              2703 	mov	dph,r7
   0B5B 8D F0              2704 	mov	b,r5
   0B5D 12s00r00           2705 	lcall	__gptrget
   0B60 FE                 2706 	mov	r6,a
                           2707 ;	genAssign
   0B61 8E 07              2708 	mov	ar7,r6
                           2709 ;	FatDrivers/tff.c:454: if (c == '\0' || c == '/') {		/* Reached to end of str or directory separator */
                           2710 ;	genIpop
   0B63 D0 06              2711 	pop	ar6
                           2712 ;	genIfx
   0B65 EF                 2713 	mov	a,r7
                           2714 ;	genIfxJump
                           2715 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0B66 60 03              2716 	jz	00103$
                           2717 ;	Peephole 300	removed redundant label 00191$
                           2718 ;	genCmpEq
                           2719 ;	gencjneshort
                           2720 ;	Peephole 112.b	changed ljmp to sjmp
                           2721 ;	Peephole 198.b	optimized misc jump sequence
   0B68 BF 2F 36           2722 	cjne	r7,#0x2F,00104$
                           2723 ;	Peephole 200.b	removed redundant sjmp
                           2724 ;	Peephole 300	removed redundant label 00192$
                           2725 ;	Peephole 300	removed redundant label 00193$
   0B6B                    2726 00103$:
                           2727 ;	FatDrivers/tff.c:455: if (n == 0) break;
                           2728 ;	genIfx
   0B6B E5*00              2729 	mov	a,_bp
   0B6D 24 04              2730 	add	a,#0x04
   0B6F F8                 2731 	mov	r0,a
   0B70 E6                 2732 	mov	a,@r0
                           2733 ;	genIfxJump
   0B71 70 03              2734 	jnz	00194$
   0B73 02s0CrD5           2735 	ljmp	00156$
   0B76                    2736 00194$:
                           2737 ;	FatDrivers/tff.c:456: dirname[11] = _USE_NTFLAG ? (a & b) : 0;
                           2738 ;	genPlus
   0B76 E5*00              2739 	mov	a,_bp
   0B78 24 FB              2740 	add	a,#0xfffffffb
   0B7A F8                 2741 	mov	r0,a
                           2742 ;     genPlusIncr
   0B7B 74 0B              2743 	mov	a,#0x0B
   0B7D 26                 2744 	add	a,@r0
   0B7E FA                 2745 	mov	r2,a
                           2746 ;	Peephole 181	changed mov to clr
   0B7F E4                 2747 	clr	a
   0B80 08                 2748 	inc	r0
   0B81 36                 2749 	addc	a,@r0
   0B82 FB                 2750 	mov	r3,a
   0B83 08                 2751 	inc	r0
   0B84 86 04              2752 	mov	ar4,@r0
                           2753 ;	genAnd
   0B86 E5*00              2754 	mov	a,_bp
   0B88 24 05              2755 	add	a,#0x05
   0B8A F8                 2756 	mov	r0,a
   0B8B E5*00              2757 	mov	a,_bp
   0B8D 24 06              2758 	add	a,#0x06
   0B8F F9                 2759 	mov	r1,a
   0B90 E7                 2760 	mov	a,@r1
   0B91 56                 2761 	anl	a,@r0
                           2762 ;	genPointerSet
                           2763 ;	genGenPointerSet
   0B92 FD                 2764 	mov	r5,a
   0B93 8A 82              2765 	mov	dpl,r2
   0B95 8B 83              2766 	mov	dph,r3
   0B97 8C F0              2767 	mov	b,r4
                           2768 ;	Peephole 191	removed redundant mov
   0B99 12s00r00           2769 	lcall	__gptrput
                           2770 ;	FatDrivers/tff.c:457: return c;
                           2771 ;	genRet
   0B9C 8F 82              2772 	mov	dpl,r7
   0B9E 02s0CrD8           2773 	ljmp	00157$
   0BA1                    2774 00104$:
                           2775 ;	FatDrivers/tff.c:459: if (c <= ' ' || c == 0x7F) break;		/* Reject invisible chars */
                           2776 ;	genCmpGt
                           2777 ;	genCmp
                           2778 ;	genIfxJump
                           2779 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0BA1 EF                 2780 	mov	a,r7
   0BA2 24 DF              2781 	add	a,#0xff - 0x20
   0BA4 40 03              2782 	jc	00195$
   0BA6 02s0CrD5           2783 	ljmp	00156$
   0BA9                    2784 00195$:
                           2785 ;	genCmpEq
                           2786 ;	gencjneshort
   0BA9 BF 7F 03           2787 	cjne	r7,#0x7F,00196$
   0BAC 02s0CrD5           2788 	ljmp	00156$
   0BAF                    2789 00196$:
                           2790 ;	FatDrivers/tff.c:460: if (c == '.') {
                           2791 ;	genCmpEq
                           2792 ;	gencjneshort
                           2793 ;	Peephole 112.b	changed ljmp to sjmp
                           2794 ;	Peephole 198.b	optimized misc jump sequence
   0BAF BF 2E 32           2795 	cjne	r7,#0x2E,00123$
                           2796 ;	Peephole 200.b	removed redundant sjmp
                           2797 ;	Peephole 300	removed redundant label 00197$
                           2798 ;	Peephole 300	removed redundant label 00198$
                           2799 ;	FatDrivers/tff.c:461: if (!(a & 1) && n >= 1 && n <= 8) {	/* Enter extension part */
                           2800 ;	genAnd
   0BB2 E5*00              2801 	mov	a,_bp
   0BB4 24 05              2802 	add	a,#0x05
   0BB6 F8                 2803 	mov	r0,a
   0BB7 E6                 2804 	mov	a,@r0
                           2805 ;	genIfxJump
   0BB8 30 E0 03           2806 	jnb	acc.0,00199$
   0BBB 02s0CrD5           2807 	ljmp	00156$
   0BBE                    2808 00199$:
                           2809 ;	genCmpLt
   0BBE E5*00              2810 	mov	a,_bp
   0BC0 24 04              2811 	add	a,#0x04
   0BC2 F8                 2812 	mov	r0,a
                           2813 ;	genCmp
   0BC3 B6 01 00           2814 	cjne	@r0,#0x01,00200$
   0BC6                    2815 00200$:
                           2816 ;	genIfxJump
   0BC6 50 03              2817 	jnc	00201$
   0BC8 02s0CrD5           2818 	ljmp	00156$
   0BCB                    2819 00201$:
                           2820 ;	genCmpGt
   0BCB E5*00              2821 	mov	a,_bp
   0BCD 24 04              2822 	add	a,#0x04
   0BCF F8                 2823 	mov	r0,a
                           2824 ;	genCmp
                           2825 ;	genIfxJump
                           2826 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0BD0 E6                 2827 	mov	a,@r0
   0BD1 24 F7              2828 	add	a,#0xff - 0x08
   0BD3 50 03              2829 	jnc	00202$
   0BD5 02s0CrD5           2830 	ljmp	00156$
   0BD8                    2831 00202$:
                           2832 ;	FatDrivers/tff.c:462: n = 8; t = 11; continue;
                           2833 ;	genAssign
   0BD8 E5*00              2834 	mov	a,_bp
   0BDA 24 04              2835 	add	a,#0x04
   0BDC F8                 2836 	mov	r0,a
   0BDD 76 08              2837 	mov	@r0,#0x08
                           2838 ;	genAssign
   0BDF 7E 0B              2839 	mov	r6,#0x0B
   0BE1 02s0Br1A           2840 	ljmp	00155$
                           2841 ;	FatDrivers/tff.c:466: if (_USE_SJIS &&
   0BE4                    2842 00123$:
                           2843 ;	FatDrivers/tff.c:467: ((c >= 0x81 && c <= 0x9F) ||		/* Accept S-JIS code */
                           2844 ;	genCmpLt
                           2845 ;	genCmp
   0BE4 BF 81 00           2846 	cjne	r7,#0x81,00203$
   0BE7                    2847 00203$:
                           2848 ;	genIfxJump
                           2849 ;	Peephole 112.b	changed ljmp to sjmp
                           2850 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0BE7 40 05              2851 	jc	00122$
                           2852 ;	Peephole 300	removed redundant label 00204$
                           2853 ;	genCmpGt
                           2854 ;	genCmp
                           2855 ;	genIfxJump
                           2856 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           2857 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0BE9 EF                 2858 	mov	a,r7
   0BEA 24 60              2859 	add	a,#0xff - 0x9F
   0BEC 50 0A              2860 	jnc	00118$
                           2861 ;	Peephole 300	removed redundant label 00205$
   0BEE                    2862 00122$:
                           2863 ;	FatDrivers/tff.c:468: (c >= 0xE0 && c <= 0xFC))) {
                           2864 ;	genCmpLt
                           2865 ;	genCmp
   0BEE BF E0 00           2866 	cjne	r7,#0xE0,00206$
   0BF1                    2867 00206$:
                           2868 ;	genIfxJump
                           2869 ;	Peephole 112.b	changed ljmp to sjmp
                           2870 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0BF1 40 1E              2871 	jc	00119$
                           2872 ;	Peephole 300	removed redundant label 00207$
                           2873 ;	genCmpGt
                           2874 ;	genCmp
                           2875 ;	genIfxJump
                           2876 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0BF3 EF                 2877 	mov	a,r7
   0BF4 24 03              2878 	add	a,#0xff - 0xFC
                           2879 ;	Peephole 112.b	changed ljmp to sjmp
                           2880 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0BF6 40 19              2881 	jc	00119$
                           2882 ;	Peephole 300	removed redundant label 00208$
   0BF8                    2883 00118$:
                           2884 ;	FatDrivers/tff.c:469: if (n == 0 && c == 0xE5)		/* Change heading \xE5 to \x05 */
                           2885 ;	genIfx
   0BF8 E5*00              2886 	mov	a,_bp
   0BFA 24 04              2887 	add	a,#0x04
   0BFC F8                 2888 	mov	r0,a
   0BFD E6                 2889 	mov	a,@r0
                           2890 ;	genIfxJump
                           2891 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0BFE 70 05              2892 	jnz	00116$
                           2893 ;	Peephole 300	removed redundant label 00209$
                           2894 ;	genCmpEq
                           2895 ;	gencjneshort
                           2896 ;	Peephole 112.b	changed ljmp to sjmp
                           2897 ;	Peephole 198.b	optimized misc jump sequence
   0C00 BF E5 02           2898 	cjne	r7,#0xE5,00116$
                           2899 ;	Peephole 200.b	removed redundant sjmp
                           2900 ;	Peephole 300	removed redundant label 00210$
                           2901 ;	Peephole 300	removed redundant label 00211$
                           2902 ;	FatDrivers/tff.c:470: c = 0x05;
                           2903 ;	genAssign
   0C03 7F 05              2904 	mov	r7,#0x05
   0C05                    2905 00116$:
                           2906 ;	FatDrivers/tff.c:471: a ^= 1; goto md_l2;
                           2907 ;	genXor
   0C05 E5*00              2908 	mov	a,_bp
   0C07 24 05              2909 	add	a,#0x05
   0C09 F8                 2910 	mov	r0,a
   0C0A E6                 2911 	mov	a,@r0
   0C0B 64 01              2912 	xrl	a,#0x01
   0C0D F6                 2913 	mov	@r0,a
   0C0E 02s0CrA2           2914 	ljmp	00151$
   0C11                    2915 00119$:
                           2916 ;	FatDrivers/tff.c:473: if (c == '"') break;				/* Reject " */
                           2917 ;	genCmpEq
                           2918 ;	gencjneshort
   0C11 BF 22 03           2919 	cjne	r7,#0x22,00212$
   0C14 02s0CrD5           2920 	ljmp	00156$
   0C17                    2921 00212$:
                           2922 ;	FatDrivers/tff.c:474: if (c <= ')') goto md_l1;			/* Accept ! # $ % & ' ( ) */
                           2923 ;	genCmpGt
                           2924 ;	genCmp
                           2925 ;	genIfxJump
                           2926 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0C17 EF                 2927 	mov	a,r7
   0C18 24 D6              2928 	add	a,#0xff - 0x29
   0C1A 40 03              2929 	jc	00213$
   0C1C 02s0Cr99           2930 	ljmp	00150$
   0C1F                    2931 00213$:
                           2932 ;	FatDrivers/tff.c:475: if (c <= ',') break;				/* Reject * + , */
                           2933 ;	genCmpGt
                           2934 ;	genCmp
                           2935 ;	genIfxJump
                           2936 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0C1F EF                 2937 	mov	a,r7
   0C20 24 D3              2938 	add	a,#0xff - 0x2C
   0C22 40 03              2939 	jc	00214$
   0C24 02s0CrD5           2940 	ljmp	00156$
   0C27                    2941 00214$:
                           2942 ;	FatDrivers/tff.c:476: if (c <= '9') goto md_l1;			/* Accept - 0-9 */
                           2943 ;	genCmpGt
                           2944 ;	genCmp
                           2945 ;	genIfxJump
                           2946 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0C27 EF                 2947 	mov	a,r7
   0C28 24 C6              2948 	add	a,#0xff - 0x39
   0C2A 40 03              2949 	jc	00215$
   0C2C 02s0Cr99           2950 	ljmp	00150$
   0C2F                    2951 00215$:
                           2952 ;	FatDrivers/tff.c:477: if (c <= '?') break;				/* Reject : ; < = > ? */
                           2953 ;	genCmpGt
                           2954 ;	genCmp
                           2955 ;	genIfxJump
                           2956 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0C2F EF                 2957 	mov	a,r7
   0C30 24 C0              2958 	add	a,#0xff - 0x3F
   0C32 40 03              2959 	jc	00216$
   0C34 02s0CrD5           2960 	ljmp	00156$
   0C37                    2961 00216$:
                           2962 ;	FatDrivers/tff.c:478: if (!(a & 1)) {	/* These checks are not applied to S-JIS 2nd byte */
                           2963 ;	genAnd
   0C37 E5*00              2964 	mov	a,_bp
   0C39 24 05              2965 	add	a,#0x05
   0C3B F8                 2966 	mov	r0,a
   0C3C E6                 2967 	mov	a,@r0
                           2968 ;	genIfxJump
                           2969 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0C3D 20 E0 59           2970 	jb	acc.0,00150$
                           2971 ;	Peephole 300	removed redundant label 00217$
                           2972 ;	FatDrivers/tff.c:479: if (c == '|') break;			/* Reject | */
                           2973 ;	genCmpEq
                           2974 ;	gencjneshort
   0C40 BF 7C 03           2975 	cjne	r7,#0x7C,00218$
   0C43 02s0CrD5           2976 	ljmp	00156$
   0C46                    2977 00218$:
                           2978 ;	FatDrivers/tff.c:480: if (c >= '[' && c <= ']') break;/* Reject [ \ ] */
                           2979 ;	genCmpLt
                           2980 ;	genCmp
   0C46 BF 5B 00           2981 	cjne	r7,#0x5B,00219$
   0C49                    2982 00219$:
                           2983 ;	genIfxJump
                           2984 ;	Peephole 112.b	changed ljmp to sjmp
                           2985 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0C49 40 08              2986 	jc	00141$
                           2987 ;	Peephole 300	removed redundant label 00220$
                           2988 ;	genCmpGt
                           2989 ;	genCmp
                           2990 ;	genIfxJump
                           2991 ;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)
   0C4B EF                 2992 	mov	a,r7
   0C4C 24 A2              2993 	add	a,#0xff - 0x5D
   0C4E 40 03              2994 	jc	00221$
   0C50 02s0CrD5           2995 	ljmp	00156$
   0C53                    2996 00221$:
                           2997 ;	FatDrivers/tff.c:481: if (_USE_NTFLAG && c >= 'A' && c <= 'Z')
   0C53                    2998 00141$:
                           2999 ;	genCmpLt
                           3000 ;	genCmp
   0C53 BF 41 00           3001 	cjne	r7,#0x41,00222$
   0C56                    3002 00222$:
                           3003 ;	genIfxJump
                           3004 ;	Peephole 112.b	changed ljmp to sjmp
                           3005 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0C56 40 1C              3006 	jc	00140$
                           3007 ;	Peephole 300	removed redundant label 00223$
                           3008 ;	genCmpGt
                           3009 ;	genCmp
                           3010 ;	genIfxJump
                           3011 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0C58 EF                 3012 	mov	a,r7
   0C59 24 A5              3013 	add	a,#0xff - 0x5A
                           3014 ;	Peephole 112.b	changed ljmp to sjmp
                           3015 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0C5B 40 17              3016 	jc	00140$
                           3017 ;	Peephole 300	removed redundant label 00224$
                           3018 ;	FatDrivers/tff.c:482: (t == 8) ? (b &= ~0x08) : (b &= ~0x10);
                           3019 ;	genCmpEq
                           3020 ;	gencjneshort
                           3021 ;	Peephole 112.b	changed ljmp to sjmp
                           3022 ;	Peephole 198.b	optimized misc jump sequence
   0C5D BE 08 0B           3023 	cjne	r6,#0x08,00159$
                           3024 ;	Peephole 200.b	removed redundant sjmp
                           3025 ;	Peephole 300	removed redundant label 00225$
                           3026 ;	Peephole 300	removed redundant label 00226$
                           3027 ;	genAnd
   0C60 E5*00              3028 	mov	a,_bp
   0C62 24 06              3029 	add	a,#0x06
   0C64 F8                 3030 	mov	r0,a
   0C65 E6                 3031 	mov	a,@r0
   0C66 54 F7              3032 	anl	a,#0xF7
   0C68 F6                 3033 	mov	@r0,a
                           3034 ;	Peephole 112.b	changed ljmp to sjmp
   0C69 80 09              3035 	sjmp	00140$
   0C6B                    3036 00159$:
                           3037 ;	genAnd
   0C6B E5*00              3038 	mov	a,_bp
   0C6D 24 06              3039 	add	a,#0x06
   0C6F F8                 3040 	mov	r0,a
   0C70 E6                 3041 	mov	a,@r0
   0C71 54 EF              3042 	anl	a,#0xEF
   0C73 F6                 3043 	mov	@r0,a
   0C74                    3044 00140$:
                           3045 ;	FatDrivers/tff.c:483: if (c >= 'a' && c <= 'z') {		/* Convert to upper case */
                           3046 ;	genCmpLt
                           3047 ;	genCmp
   0C74 BF 61 00           3048 	cjne	r7,#0x61,00227$
   0C77                    3049 00227$:
                           3050 ;	genIfxJump
                           3051 ;	Peephole 112.b	changed ljmp to sjmp
                           3052 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0C77 40 20              3053 	jc	00150$
                           3054 ;	Peephole 300	removed redundant label 00228$
                           3055 ;	genCmpGt
                           3056 ;	genCmp
                           3057 ;	genIfxJump
                           3058 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0C79 EF                 3059 	mov	a,r7
   0C7A 24 85              3060 	add	a,#0xff - 0x7A
                           3061 ;	Peephole 112.b	changed ljmp to sjmp
                           3062 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0C7C 40 1B              3063 	jc	00150$
                           3064 ;	Peephole 300	removed redundant label 00229$
                           3065 ;	FatDrivers/tff.c:484: c -= 0x20;
                           3066 ;	genMinus
   0C7E EF                 3067 	mov	a,r7
   0C7F 24 E0              3068 	add	a,#0xe0
   0C81 FF                 3069 	mov	r7,a
                           3070 ;	FatDrivers/tff.c:485: if (_USE_NTFLAG) (t == 8) ? (a |= 0x08) : (a |= 0x10);
                           3071 ;	genCmpEq
                           3072 ;	gencjneshort
                           3073 ;	Peephole 112.b	changed ljmp to sjmp
                           3074 ;	Peephole 198.b	optimized misc jump sequence
   0C82 BE 08 0B           3075 	cjne	r6,#0x08,00161$
                           3076 ;	Peephole 200.b	removed redundant sjmp
                           3077 ;	Peephole 300	removed redundant label 00230$
                           3078 ;	Peephole 300	removed redundant label 00231$
                           3079 ;	genOr
   0C85 E5*00              3080 	mov	a,_bp
   0C87 24 05              3081 	add	a,#0x05
   0C89 F8                 3082 	mov	r0,a
   0C8A E6                 3083 	mov	a,@r0
   0C8B 44 08              3084 	orl	a,#0x08
   0C8D F6                 3085 	mov	@r0,a
                           3086 ;	Peephole 112.b	changed ljmp to sjmp
   0C8E 80 09              3087 	sjmp	00150$
   0C90                    3088 00161$:
                           3089 ;	genOr
   0C90 E5*00              3090 	mov	a,_bp
   0C92 24 05              3091 	add	a,#0x05
   0C94 F8                 3092 	mov	r0,a
   0C95 E6                 3093 	mov	a,@r0
   0C96 44 10              3094 	orl	a,#0x10
   0C98 F6                 3095 	mov	@r0,a
                           3096 ;	FatDrivers/tff.c:488: md_l1:
   0C99                    3097 00150$:
                           3098 ;	FatDrivers/tff.c:489: a &= ~1;
                           3099 ;	genAnd
   0C99 E5*00              3100 	mov	a,_bp
   0C9B 24 05              3101 	add	a,#0x05
   0C9D F8                 3102 	mov	r0,a
   0C9E E6                 3103 	mov	a,@r0
   0C9F 54 FE              3104 	anl	a,#0xFE
   0CA1 F6                 3105 	mov	@r0,a
                           3106 ;	FatDrivers/tff.c:490: md_l2:
   0CA2                    3107 00151$:
                           3108 ;	FatDrivers/tff.c:491: if (n >= t) break;
                           3109 ;	genCmpLt
   0CA2 E5*00              3110 	mov	a,_bp
   0CA4 24 04              3111 	add	a,#0x04
   0CA6 F8                 3112 	mov	r0,a
                           3113 ;	genCmp
   0CA7 C3                 3114 	clr	c
   0CA8 E6                 3115 	mov	a,@r0
   0CA9 9E                 3116 	subb	a,r6
                           3117 ;	genIfxJump
                           3118 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0CAA 50 29              3119 	jnc	00156$
                           3120 ;	Peephole 300	removed redundant label 00232$
                           3121 ;	FatDrivers/tff.c:492: dirname[n++] = c;
                           3122 ;	genAssign
   0CAC E5*00              3123 	mov	a,_bp
   0CAE 24 04              3124 	add	a,#0x04
   0CB0 F8                 3125 	mov	r0,a
   0CB1 86 02              3126 	mov	ar2,@r0
                           3127 ;	genPlus
   0CB3 E5*00              3128 	mov	a,_bp
   0CB5 24 04              3129 	add	a,#0x04
   0CB7 F8                 3130 	mov	r0,a
                           3131 ;     genPlusIncr
   0CB8 06                 3132 	inc	@r0
                           3133 ;	genPlus
   0CB9 E5*00              3134 	mov	a,_bp
   0CBB 24 FB              3135 	add	a,#0xfffffffb
   0CBD F8                 3136 	mov	r0,a
                           3137 ;	Peephole 236.g	used r2 instead of ar2
   0CBE EA                 3138 	mov	a,r2
   0CBF 26                 3139 	add	a,@r0
   0CC0 FA                 3140 	mov	r2,a
                           3141 ;	Peephole 181	changed mov to clr
   0CC1 E4                 3142 	clr	a
   0CC2 08                 3143 	inc	r0
   0CC3 36                 3144 	addc	a,@r0
   0CC4 FB                 3145 	mov	r3,a
   0CC5 08                 3146 	inc	r0
   0CC6 86 04              3147 	mov	ar4,@r0
                           3148 ;	genPointerSet
                           3149 ;	genGenPointerSet
   0CC8 8A 82              3150 	mov	dpl,r2
   0CCA 8B 83              3151 	mov	dph,r3
   0CCC 8C F0              3152 	mov	b,r4
   0CCE EF                 3153 	mov	a,r7
   0CCF 12s00r00           3154 	lcall	__gptrput
   0CD2 02s0Br1A           3155 	ljmp	00155$
   0CD5                    3156 00156$:
                           3157 ;	FatDrivers/tff.c:494: return 1;
                           3158 ;	genRet
   0CD5 75 82 01           3159 	mov	dpl,#0x01
   0CD8                    3160 00157$:
   0CD8 85*00 81           3161 	mov	sp,_bp
   0CDB D0*00              3162 	pop	_bp
   0CDD 22                 3163 	ret
                           3164 ;------------------------------------------------------------
                           3165 ;Allocation info for local variables in function 'trace_path'
                           3166 ;------------------------------------------------------------
                           3167 ;fn                        Allocated to stack - offset -5
                           3168 ;path                      Allocated to stack - offset -8
                           3169 ;dir                       Allocated to stack - offset -11
                           3170 ;dirobj                    Allocated to stack - offset 1
                           3171 ;clust                     Allocated to stack - offset 4
                           3172 ;ds                        Allocated to registers r2 
                           3173 ;dptr                      Allocated to stack - offset 8
                           3174 ;fs                        Allocated to stack - offset 11
                           3175 ;sloc0                     Allocated to stack - offset 14
                           3176 ;sloc1                     Allocated to stack - offset 17
                           3177 ;sloc2                     Allocated to stack - offset 20
                           3178 ;------------------------------------------------------------
                           3179 ;	FatDrivers/tff.c:504: FRESULT trace_path (	/* FR_OK(0): successful, !=0: error code */
                           3180 ;	-----------------------------------------
                           3181 ;	 function trace_path
                           3182 ;	-----------------------------------------
   0CDE                    3183 _trace_path:
   0CDE C0*00              3184 	push	_bp
   0CE0 85 81*00           3185 	mov	_bp,sp
                           3186 ;     genReceive
   0CE3 C0 82              3187 	push	dpl
   0CE5 C0 83              3188 	push	dph
   0CE7 C0 F0              3189 	push	b
   0CE9 E5 81              3190 	mov	a,sp
   0CEB 24 17              3191 	add	a,#0x17
   0CED F5 81              3192 	mov	sp,a
                           3193 ;	FatDrivers/tff.c:514: FATFS *fs = FatFs;
                           3194 ;	genAssign
   0CEF E5*00              3195 	mov	a,_bp
   0CF1 24 0B              3196 	add	a,#0x0b
   0CF3 F8                 3197 	mov	r0,a
   0CF4 A6*00              3198 	mov	@r0,_FatFs
   0CF6 08                 3199 	inc	r0
   0CF7 A6*01              3200 	mov	@r0,(_FatFs + 1)
   0CF9 08                 3201 	inc	r0
   0CFA A6*02              3202 	mov	@r0,(_FatFs + 2)
                           3203 ;	FatDrivers/tff.c:517: clust = fs->dirbase;
                           3204 ;	genPlus
   0CFC E5*00              3205 	mov	a,_bp
   0CFE 24 0B              3206 	add	a,#0x0b
   0D00 F8                 3207 	mov	r0,a
                           3208 ;     genPlusIncr
   0D01 74 0C              3209 	mov	a,#0x0C
   0D03 26                 3210 	add	a,@r0
   0D04 FD                 3211 	mov	r5,a
                           3212 ;	Peephole 181	changed mov to clr
   0D05 E4                 3213 	clr	a
   0D06 08                 3214 	inc	r0
   0D07 36                 3215 	addc	a,@r0
   0D08 FE                 3216 	mov	r6,a
   0D09 08                 3217 	inc	r0
   0D0A 86 07              3218 	mov	ar7,@r0
                           3219 ;	genPointerGet
                           3220 ;	genGenPointerGet
   0D0C 8D 82              3221 	mov	dpl,r5
   0D0E 8E 83              3222 	mov	dph,r6
   0D10 8F F0              3223 	mov	b,r7
   0D12 12s00r00           3224 	lcall	__gptrget
   0D15 FA                 3225 	mov	r2,a
   0D16 A3                 3226 	inc	dptr
   0D17 12s00r00           3227 	lcall	__gptrget
   0D1A FB                 3228 	mov	r3,a
   0D1B A3                 3229 	inc	dptr
   0D1C 12s00r00           3230 	lcall	__gptrget
   0D1F FC                 3231 	mov	r4,a
   0D20 A3                 3232 	inc	dptr
   0D21 12s00r00           3233 	lcall	__gptrget
   0D24 FD                 3234 	mov	r5,a
                           3235 ;	genAssign
   0D25 E5*00              3236 	mov	a,_bp
   0D27 24 04              3237 	add	a,#0x04
   0D29 F8                 3238 	mov	r0,a
   0D2A A6 02              3239 	mov	@r0,ar2
   0D2C 08                 3240 	inc	r0
   0D2D A6 03              3241 	mov	@r0,ar3
   0D2F 08                 3242 	inc	r0
   0D30 A6 04              3243 	mov	@r0,ar4
   0D32 08                 3244 	inc	r0
   0D33 A6 05              3245 	mov	@r0,ar5
                           3246 ;	FatDrivers/tff.c:519: if (fs->fs_type == FS_FAT32) {
                           3247 ;	genPlus
   0D35 E5*00              3248 	mov	a,_bp
   0D37 24 0B              3249 	add	a,#0x0b
   0D39 F8                 3250 	mov	r0,a
                           3251 ;     genPlusIncr
   0D3A 74 1C              3252 	mov	a,#0x1C
   0D3C 26                 3253 	add	a,@r0
   0D3D FD                 3254 	mov	r5,a
                           3255 ;	Peephole 181	changed mov to clr
   0D3E E4                 3256 	clr	a
   0D3F 08                 3257 	inc	r0
   0D40 36                 3258 	addc	a,@r0
   0D41 FE                 3259 	mov	r6,a
   0D42 08                 3260 	inc	r0
   0D43 86 07              3261 	mov	ar7,@r0
                           3262 ;	genPointerGet
                           3263 ;	genGenPointerGet
   0D45 8D 82              3264 	mov	dpl,r5
   0D47 8E 83              3265 	mov	dph,r6
   0D49 8F F0              3266 	mov	b,r7
   0D4B 12s00r00           3267 	lcall	__gptrget
   0D4E FD                 3268 	mov	r5,a
                           3269 ;	genCmpEq
                           3270 ;	gencjneshort
   0D4F BD 03 02           3271 	cjne	r5,#0x03,00148$
   0D52 80 03              3272 	sjmp	00149$
   0D54                    3273 00148$:
   0D54 02s0Er06           3274 	ljmp	00102$
   0D57                    3275 00149$:
                           3276 ;	FatDrivers/tff.c:520: dirobj->clust = dirobj->sclust = clust;
                           3277 ;	genPlus
   0D57 A8*00              3278 	mov	r0,_bp
   0D59 08                 3279 	inc	r0
                           3280 ;     genPlusIncr
   0D5A 74 0B              3281 	mov	a,#0x0B
   0D5C 26                 3282 	add	a,@r0
   0D5D FD                 3283 	mov	r5,a
                           3284 ;	Peephole 181	changed mov to clr
   0D5E E4                 3285 	clr	a
   0D5F 08                 3286 	inc	r0
   0D60 36                 3287 	addc	a,@r0
   0D61 FE                 3288 	mov	r6,a
   0D62 08                 3289 	inc	r0
   0D63 86 07              3290 	mov	ar7,@r0
                           3291 ;	genPlus
   0D65 A8*00              3292 	mov	r0,_bp
   0D67 08                 3293 	inc	r0
                           3294 ;     genPlusIncr
   0D68 74 07              3295 	mov	a,#0x07
   0D6A 26                 3296 	add	a,@r0
   0D6B FA                 3297 	mov	r2,a
                           3298 ;	Peephole 181	changed mov to clr
   0D6C E4                 3299 	clr	a
   0D6D 08                 3300 	inc	r0
   0D6E 36                 3301 	addc	a,@r0
   0D6F FB                 3302 	mov	r3,a
   0D70 08                 3303 	inc	r0
   0D71 86 04              3304 	mov	ar4,@r0
                           3305 ;	genPointerSet
                           3306 ;	genGenPointerSet
   0D73 8A 82              3307 	mov	dpl,r2
   0D75 8B 83              3308 	mov	dph,r3
   0D77 8C F0              3309 	mov	b,r4
   0D79 E5*00              3310 	mov	a,_bp
   0D7B 24 04              3311 	add	a,#0x04
   0D7D F8                 3312 	mov	r0,a
   0D7E E6                 3313 	mov	a,@r0
   0D7F 12s00r00           3314 	lcall	__gptrput
   0D82 A3                 3315 	inc	dptr
   0D83 08                 3316 	inc	r0
   0D84 E6                 3317 	mov	a,@r0
   0D85 12s00r00           3318 	lcall	__gptrput
   0D88 A3                 3319 	inc	dptr
   0D89 08                 3320 	inc	r0
   0D8A E6                 3321 	mov	a,@r0
   0D8B 12s00r00           3322 	lcall	__gptrput
   0D8E A3                 3323 	inc	dptr
   0D8F 08                 3324 	inc	r0
   0D90 E6                 3325 	mov	a,@r0
   0D91 12s00r00           3326 	lcall	__gptrput
                           3327 ;	genPointerSet
                           3328 ;	genGenPointerSet
   0D94 8D 82              3329 	mov	dpl,r5
   0D96 8E 83              3330 	mov	dph,r6
   0D98 8F F0              3331 	mov	b,r7
   0D9A E5*00              3332 	mov	a,_bp
   0D9C 24 04              3333 	add	a,#0x04
   0D9E F8                 3334 	mov	r0,a
   0D9F E6                 3335 	mov	a,@r0
   0DA0 12s00r00           3336 	lcall	__gptrput
   0DA3 A3                 3337 	inc	dptr
   0DA4 08                 3338 	inc	r0
   0DA5 E6                 3339 	mov	a,@r0
   0DA6 12s00r00           3340 	lcall	__gptrput
   0DA9 A3                 3341 	inc	dptr
   0DAA 08                 3342 	inc	r0
   0DAB E6                 3343 	mov	a,@r0
   0DAC 12s00r00           3344 	lcall	__gptrput
   0DAF A3                 3345 	inc	dptr
   0DB0 08                 3346 	inc	r0
   0DB1 E6                 3347 	mov	a,@r0
   0DB2 12s00r00           3348 	lcall	__gptrput
                           3349 ;	FatDrivers/tff.c:521: dirobj->sect = clust2sect(clust);
                           3350 ;	genPlus
   0DB5 A8*00              3351 	mov	r0,_bp
   0DB7 08                 3352 	inc	r0
   0DB8 E5*00              3353 	mov	a,_bp
   0DBA 24 0E              3354 	add	a,#0x0e
   0DBC F9                 3355 	mov	r1,a
                           3356 ;     genPlusIncr
   0DBD 74 0F              3357 	mov	a,#0x0F
   0DBF 26                 3358 	add	a,@r0
   0DC0 F7                 3359 	mov	@r1,a
                           3360 ;	Peephole 181	changed mov to clr
   0DC1 E4                 3361 	clr	a
   0DC2 08                 3362 	inc	r0
   0DC3 36                 3363 	addc	a,@r0
   0DC4 09                 3364 	inc	r1
   0DC5 F7                 3365 	mov	@r1,a
   0DC6 08                 3366 	inc	r0
   0DC7 09                 3367 	inc	r1
   0DC8 E6                 3368 	mov	a,@r0
   0DC9 F7                 3369 	mov	@r1,a
                           3370 ;	genCall
   0DCA E5*00              3371 	mov	a,_bp
   0DCC 24 04              3372 	add	a,#0x04
   0DCE F8                 3373 	mov	r0,a
   0DCF 86 82              3374 	mov	dpl,@r0
   0DD1 08                 3375 	inc	r0
   0DD2 86 83              3376 	mov	dph,@r0
   0DD4 08                 3377 	inc	r0
   0DD5 86 F0              3378 	mov	b,@r0
   0DD7 08                 3379 	inc	r0
   0DD8 E6                 3380 	mov	a,@r0
   0DD9 12s04r26           3381 	lcall	_clust2sect
   0DDC AD 82              3382 	mov	r5,dpl
   0DDE AE 83              3383 	mov	r6,dph
   0DE0 AF F0              3384 	mov	r7,b
   0DE2 FA                 3385 	mov	r2,a
                           3386 ;	genPointerSet
                           3387 ;	genGenPointerSet
   0DE3 E5*00              3388 	mov	a,_bp
   0DE5 24 0E              3389 	add	a,#0x0e
   0DE7 F8                 3390 	mov	r0,a
   0DE8 86 82              3391 	mov	dpl,@r0
   0DEA 08                 3392 	inc	r0
   0DEB 86 83              3393 	mov	dph,@r0
   0DED 08                 3394 	inc	r0
   0DEE 86 F0              3395 	mov	b,@r0
   0DF0 ED                 3396 	mov	a,r5
   0DF1 12s00r00           3397 	lcall	__gptrput
   0DF4 A3                 3398 	inc	dptr
   0DF5 EE                 3399 	mov	a,r6
   0DF6 12s00r00           3400 	lcall	__gptrput
   0DF9 A3                 3401 	inc	dptr
   0DFA EF                 3402 	mov	a,r7
   0DFB 12s00r00           3403 	lcall	__gptrput
   0DFE A3                 3404 	inc	dptr
   0DFF EA                 3405 	mov	a,r2
   0E00 12s00r00           3406 	lcall	__gptrput
   0E03 02s0Er83           3407 	ljmp	00103$
   0E06                    3408 00102$:
                           3409 ;	FatDrivers/tff.c:525: dirobj->clust = dirobj->sclust = 0;
                           3410 ;	genPlus
   0E06 A8*00              3411 	mov	r0,_bp
   0E08 08                 3412 	inc	r0
                           3413 ;     genPlusIncr
   0E09 74 0B              3414 	mov	a,#0x0B
   0E0B 26                 3415 	add	a,@r0
   0E0C FA                 3416 	mov	r2,a
                           3417 ;	Peephole 181	changed mov to clr
   0E0D E4                 3418 	clr	a
   0E0E 08                 3419 	inc	r0
   0E0F 36                 3420 	addc	a,@r0
   0E10 FB                 3421 	mov	r3,a
   0E11 08                 3422 	inc	r0
   0E12 86 04              3423 	mov	ar4,@r0
                           3424 ;	genPlus
   0E14 A8*00              3425 	mov	r0,_bp
   0E16 08                 3426 	inc	r0
                           3427 ;     genPlusIncr
   0E17 74 07              3428 	mov	a,#0x07
   0E19 26                 3429 	add	a,@r0
   0E1A FD                 3430 	mov	r5,a
                           3431 ;	Peephole 181	changed mov to clr
   0E1B E4                 3432 	clr	a
   0E1C 08                 3433 	inc	r0
   0E1D 36                 3434 	addc	a,@r0
   0E1E FE                 3435 	mov	r6,a
   0E1F 08                 3436 	inc	r0
   0E20 86 07              3437 	mov	ar7,@r0
                           3438 ;	genPointerSet
                           3439 ;	genGenPointerSet
   0E22 8D 82              3440 	mov	dpl,r5
   0E24 8E 83              3441 	mov	dph,r6
   0E26 8F F0              3442 	mov	b,r7
                           3443 ;	Peephole 181	changed mov to clr
   0E28 E4                 3444 	clr	a
   0E29 12s00r00           3445 	lcall	__gptrput
   0E2C A3                 3446 	inc	dptr
                           3447 ;	Peephole 181	changed mov to clr
   0E2D E4                 3448 	clr	a
   0E2E 12s00r00           3449 	lcall	__gptrput
   0E31 A3                 3450 	inc	dptr
                           3451 ;	Peephole 181	changed mov to clr
   0E32 E4                 3452 	clr	a
   0E33 12s00r00           3453 	lcall	__gptrput
   0E36 A3                 3454 	inc	dptr
                           3455 ;	Peephole 181	changed mov to clr
   0E37 E4                 3456 	clr	a
   0E38 12s00r00           3457 	lcall	__gptrput
                           3458 ;	genPointerSet
                           3459 ;	genGenPointerSet
   0E3B 8A 82              3460 	mov	dpl,r2
   0E3D 8B 83              3461 	mov	dph,r3
   0E3F 8C F0              3462 	mov	b,r4
                           3463 ;	Peephole 181	changed mov to clr
   0E41 E4                 3464 	clr	a
   0E42 12s00r00           3465 	lcall	__gptrput
   0E45 A3                 3466 	inc	dptr
                           3467 ;	Peephole 181	changed mov to clr
   0E46 E4                 3468 	clr	a
   0E47 12s00r00           3469 	lcall	__gptrput
   0E4A A3                 3470 	inc	dptr
                           3471 ;	Peephole 181	changed mov to clr
   0E4B E4                 3472 	clr	a
   0E4C 12s00r00           3473 	lcall	__gptrput
   0E4F A3                 3474 	inc	dptr
                           3475 ;	Peephole 181	changed mov to clr
   0E50 E4                 3476 	clr	a
   0E51 12s00r00           3477 	lcall	__gptrput
                           3478 ;	FatDrivers/tff.c:526: dirobj->sect = clust;
                           3479 ;	genPlus
   0E54 A8*00              3480 	mov	r0,_bp
   0E56 08                 3481 	inc	r0
                           3482 ;     genPlusIncr
   0E57 74 0F              3483 	mov	a,#0x0F
   0E59 26                 3484 	add	a,@r0
   0E5A FA                 3485 	mov	r2,a
                           3486 ;	Peephole 181	changed mov to clr
   0E5B E4                 3487 	clr	a
   0E5C 08                 3488 	inc	r0
   0E5D 36                 3489 	addc	a,@r0
   0E5E FB                 3490 	mov	r3,a
   0E5F 08                 3491 	inc	r0
   0E60 86 04              3492 	mov	ar4,@r0
                           3493 ;	genPointerSet
                           3494 ;	genGenPointerSet
   0E62 8A 82              3495 	mov	dpl,r2
   0E64 8B 83              3496 	mov	dph,r3
   0E66 8C F0              3497 	mov	b,r4
   0E68 E5*00              3498 	mov	a,_bp
   0E6A 24 04              3499 	add	a,#0x04
   0E6C F8                 3500 	mov	r0,a
   0E6D E6                 3501 	mov	a,@r0
   0E6E 12s00r00           3502 	lcall	__gptrput
   0E71 A3                 3503 	inc	dptr
   0E72 08                 3504 	inc	r0
   0E73 E6                 3505 	mov	a,@r0
   0E74 12s00r00           3506 	lcall	__gptrput
   0E77 A3                 3507 	inc	dptr
   0E78 08                 3508 	inc	r0
   0E79 E6                 3509 	mov	a,@r0
   0E7A 12s00r00           3510 	lcall	__gptrput
   0E7D A3                 3511 	inc	dptr
   0E7E 08                 3512 	inc	r0
   0E7F E6                 3513 	mov	a,@r0
   0E80 12s00r00           3514 	lcall	__gptrput
   0E83                    3515 00103$:
                           3516 ;	FatDrivers/tff.c:528: dirobj->index = 0;
                           3517 ;	genPlus
   0E83 A8*00              3518 	mov	r0,_bp
   0E85 08                 3519 	inc	r0
                           3520 ;     genPlusIncr
   0E86 74 02              3521 	mov	a,#0x02
   0E88 26                 3522 	add	a,@r0
   0E89 FA                 3523 	mov	r2,a
                           3524 ;	Peephole 181	changed mov to clr
   0E8A E4                 3525 	clr	a
   0E8B 08                 3526 	inc	r0
   0E8C 36                 3527 	addc	a,@r0
   0E8D FB                 3528 	mov	r3,a
   0E8E 08                 3529 	inc	r0
   0E8F 86 04              3530 	mov	ar4,@r0
                           3531 ;	genPointerSet
                           3532 ;	genGenPointerSet
   0E91 8A 82              3533 	mov	dpl,r2
   0E93 8B 83              3534 	mov	dph,r3
   0E95 8C F0              3535 	mov	b,r4
                           3536 ;	Peephole 181	changed mov to clr
   0E97 E4                 3537 	clr	a
   0E98 12s00r00           3538 	lcall	__gptrput
   0E9B A3                 3539 	inc	dptr
                           3540 ;	Peephole 181	changed mov to clr
   0E9C E4                 3541 	clr	a
   0E9D 12s00r00           3542 	lcall	__gptrput
                           3543 ;	FatDrivers/tff.c:529: dirobj->fs = fs;
                           3544 ;	genPlus
   0EA0 A8*00              3545 	mov	r0,_bp
   0EA2 08                 3546 	inc	r0
                           3547 ;     genPlusIncr
   0EA3 74 04              3548 	mov	a,#0x04
   0EA5 26                 3549 	add	a,@r0
   0EA6 FA                 3550 	mov	r2,a
                           3551 ;	Peephole 181	changed mov to clr
   0EA7 E4                 3552 	clr	a
   0EA8 08                 3553 	inc	r0
   0EA9 36                 3554 	addc	a,@r0
   0EAA FB                 3555 	mov	r3,a
   0EAB 08                 3556 	inc	r0
   0EAC 86 04              3557 	mov	ar4,@r0
                           3558 ;	genPointerSet
                           3559 ;	genGenPointerSet
   0EAE 8A 82              3560 	mov	dpl,r2
   0EB0 8B 83              3561 	mov	dph,r3
   0EB2 8C F0              3562 	mov	b,r4
   0EB4 E5*00              3563 	mov	a,_bp
   0EB6 24 0B              3564 	add	a,#0x0b
   0EB8 F8                 3565 	mov	r0,a
   0EB9 E6                 3566 	mov	a,@r0
   0EBA 12s00r00           3567 	lcall	__gptrput
   0EBD A3                 3568 	inc	dptr
   0EBE 08                 3569 	inc	r0
   0EBF E6                 3570 	mov	a,@r0
   0EC0 12s00r00           3571 	lcall	__gptrput
   0EC3 A3                 3572 	inc	dptr
   0EC4 08                 3573 	inc	r0
   0EC5 E6                 3574 	mov	a,@r0
   0EC6 12s00r00           3575 	lcall	__gptrput
                           3576 ;	FatDrivers/tff.c:531: if (*path == '\0') {							/* Null path means the root directory */
                           3577 ;	genAssign
   0EC9 E5*00              3578 	mov	a,_bp
   0ECB 24 F8              3579 	add	a,#0xfffffff8
   0ECD F8                 3580 	mov	r0,a
   0ECE 86 02              3581 	mov	ar2,@r0
   0ED0 08                 3582 	inc	r0
   0ED1 86 03              3583 	mov	ar3,@r0
   0ED3 08                 3584 	inc	r0
   0ED4 86 04              3585 	mov	ar4,@r0
                           3586 ;	genPointerGet
                           3587 ;	genGenPointerGet
   0ED6 8A 82              3588 	mov	dpl,r2
   0ED8 8B 83              3589 	mov	dph,r3
   0EDA 8C F0              3590 	mov	b,r4
   0EDC 12s00r00           3591 	lcall	__gptrget
                           3592 ;	genIfxJump
                           3593 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0EDF 70 27              3594 	jnz	00126$
                           3595 ;	Peephole 300	removed redundant label 00150$
                           3596 ;	FatDrivers/tff.c:532: *dir = NULL; return FR_OK;
                           3597 ;	genAssign
   0EE1 E5*00              3598 	mov	a,_bp
   0EE3 24 F5              3599 	add	a,#0xfffffff5
   0EE5 F8                 3600 	mov	r0,a
   0EE6 86 02              3601 	mov	ar2,@r0
   0EE8 08                 3602 	inc	r0
   0EE9 86 03              3603 	mov	ar3,@r0
   0EEB 08                 3604 	inc	r0
   0EEC 86 04              3605 	mov	ar4,@r0
                           3606 ;	genPointerSet
                           3607 ;	genGenPointerSet
   0EEE 8A 82              3608 	mov	dpl,r2
   0EF0 8B 83              3609 	mov	dph,r3
   0EF2 8C F0              3610 	mov	b,r4
                           3611 ;	Peephole 181	changed mov to clr
   0EF4 E4                 3612 	clr	a
   0EF5 12s00r00           3613 	lcall	__gptrput
   0EF8 A3                 3614 	inc	dptr
                           3615 ;	Peephole 181	changed mov to clr
   0EF9 E4                 3616 	clr	a
   0EFA 12s00r00           3617 	lcall	__gptrput
   0EFD A3                 3618 	inc	dptr
                           3619 ;	Peephole 181	changed mov to clr
   0EFE E4                 3620 	clr	a
   0EFF 12s00r00           3621 	lcall	__gptrput
                           3622 ;	genRet
   0F02 75 82 00           3623 	mov	dpl,#0x00
   0F05 02s12r6B           3624 	ljmp	00128$
   0F08                    3625 00126$:
                           3626 ;	FatDrivers/tff.c:536: ds = make_dirfile(&path, fn);					/* Get a paragraph into fn[] */
                           3627 ;	genAddrOf
   0F08 E5*00              3628 	mov	a,_bp
   0F0A 24 F8              3629 	add	a,#0xf8
   0F0C FA                 3630 	mov	r2,a
                           3631 ;	genCast
   0F0D 7B 00              3632 	mov	r3,#0x00
   0F0F 7C 40              3633 	mov	r4,#0x40
                           3634 ;	genIpush
   0F11 E5*00              3635 	mov	a,_bp
   0F13 24 FB              3636 	add	a,#0xfffffffb
   0F15 F8                 3637 	mov	r0,a
   0F16 E6                 3638 	mov	a,@r0
   0F17 C0 E0              3639 	push	acc
   0F19 08                 3640 	inc	r0
   0F1A E6                 3641 	mov	a,@r0
   0F1B C0 E0              3642 	push	acc
   0F1D 08                 3643 	inc	r0
   0F1E E6                 3644 	mov	a,@r0
   0F1F C0 E0              3645 	push	acc
                           3646 ;	genCall
   0F21 8A 82              3647 	mov	dpl,r2
   0F23 8B 83              3648 	mov	dph,r3
   0F25 8C F0              3649 	mov	b,r4
   0F27 12s0ArCB           3650 	lcall	_make_dirfile
   0F2A AA 82              3651 	mov	r2,dpl
   0F2C 15 81              3652 	dec	sp
   0F2E 15 81              3653 	dec	sp
   0F30 15 81              3654 	dec	sp
                           3655 ;	genAssign
                           3656 ;	FatDrivers/tff.c:537: if (ds == 1) return FR_INVALID_NAME;
                           3657 ;	genCmpEq
                           3658 ;	gencjneshort
                           3659 ;	Peephole 112.b	changed ljmp to sjmp
                           3660 ;	Peephole 198.b	optimized misc jump sequence
   0F32 BA 01 06           3661 	cjne	r2,#0x01,00142$
                           3662 ;	Peephole 200.b	removed redundant sjmp
                           3663 ;	Peephole 300	removed redundant label 00151$
                           3664 ;	Peephole 300	removed redundant label 00152$
                           3665 ;	genRet
   0F35 75 82 04           3666 	mov	dpl,#0x04
   0F38 02s12r6B           3667 	ljmp	00128$
   0F3B                    3668 00142$:
                           3669 ;	genPlus
   0F3B E5*00              3670 	mov	a,_bp
   0F3D 24 0B              3671 	add	a,#0x0b
   0F3F F8                 3672 	mov	r0,a
                           3673 ;     genPlusIncr
   0F40 74 20              3674 	mov	a,#0x20
   0F42 26                 3675 	add	a,@r0
   0F43 FB                 3676 	mov	r3,a
                           3677 ;	Peephole 181	changed mov to clr
   0F44 E4                 3678 	clr	a
   0F45 08                 3679 	inc	r0
   0F46 36                 3680 	addc	a,@r0
   0F47 FC                 3681 	mov	r4,a
   0F48 08                 3682 	inc	r0
   0F49 86 05              3683 	mov	ar5,@r0
                           3684 ;	genPlus
   0F4B A8*00              3685 	mov	r0,_bp
   0F4D 08                 3686 	inc	r0
   0F4E E5*00              3687 	mov	a,_bp
   0F50 24 0E              3688 	add	a,#0x0e
   0F52 F9                 3689 	mov	r1,a
                           3690 ;     genPlusIncr
   0F53 74 0F              3691 	mov	a,#0x0F
   0F55 26                 3692 	add	a,@r0
   0F56 F7                 3693 	mov	@r1,a
                           3694 ;	Peephole 181	changed mov to clr
   0F57 E4                 3695 	clr	a
   0F58 08                 3696 	inc	r0
   0F59 36                 3697 	addc	a,@r0
   0F5A 09                 3698 	inc	r1
   0F5B F7                 3699 	mov	@r1,a
   0F5C 08                 3700 	inc	r0
   0F5D 09                 3701 	inc	r1
   0F5E E6                 3702 	mov	a,@r0
   0F5F F7                 3703 	mov	@r1,a
   0F60                    3704 00119$:
                           3705 ;	FatDrivers/tff.c:539: if (!move_window(dirobj->sect)) return FR_RW_ERROR;
                           3706 ;	genIpush
   0F60 C0 03              3707 	push	ar3
   0F62 C0 04              3708 	push	ar4
   0F64 C0 05              3709 	push	ar5
                           3710 ;	genPointerGet
                           3711 ;	genGenPointerGet
   0F66 E5*00              3712 	mov	a,_bp
   0F68 24 0E              3713 	add	a,#0x0e
   0F6A F8                 3714 	mov	r0,a
   0F6B 86 82              3715 	mov	dpl,@r0
   0F6D 08                 3716 	inc	r0
   0F6E 86 83              3717 	mov	dph,@r0
   0F70 08                 3718 	inc	r0
   0F71 86 F0              3719 	mov	b,@r0
   0F73 12s00r00           3720 	lcall	__gptrget
   0F76 FE                 3721 	mov	r6,a
   0F77 A3                 3722 	inc	dptr
   0F78 12s00r00           3723 	lcall	__gptrget
   0F7B FF                 3724 	mov	r7,a
   0F7C A3                 3725 	inc	dptr
   0F7D 12s00r00           3726 	lcall	__gptrget
   0F80 FB                 3727 	mov	r3,a
   0F81 A3                 3728 	inc	dptr
   0F82 12s00r00           3729 	lcall	__gptrget
                           3730 ;	genCall
   0F85 FC                 3731 	mov	r4,a
   0F86 8E 82              3732 	mov	dpl,r6
   0F88 8F 83              3733 	mov	dph,r7
   0F8A 8B F0              3734 	mov	b,r3
                           3735 ;	Peephole 191	removed redundant mov
   0F8C C0 02              3736 	push	ar2
   0F8E C0 03              3737 	push	ar3
   0F90 C0 04              3738 	push	ar4
   0F92 C0 05              3739 	push	ar5
   0F94 12s00r00           3740 	lcall	_move_window
   0F97 E5 82              3741 	mov	a,dpl
   0F99 D0 05              3742 	pop	ar5
   0F9B D0 04              3743 	pop	ar4
   0F9D D0 03              3744 	pop	ar3
   0F9F D0 02              3745 	pop	ar2
                           3746 ;	genIpop
   0FA1 D0 05              3747 	pop	ar5
   0FA3 D0 04              3748 	pop	ar4
   0FA5 D0 03              3749 	pop	ar3
                           3750 ;	genIfx
                           3751 ;	genIfxJump
                           3752 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0FA7 70 06              3753 	jnz	00109$
                           3754 ;	Peephole 300	removed redundant label 00153$
                           3755 ;	genRet
   0FA9 75 82 08           3756 	mov	dpl,#0x08
   0FAC 02s12r6B           3757 	ljmp	00128$
   0FAF                    3758 00109$:
                           3759 ;	FatDrivers/tff.c:540: dptr = &fs->win[(dirobj->index & 15) * 32];		/* Pointer to the directory entry */
                           3760 ;	genIpush
   0FAF C0 02              3761 	push	ar2
                           3762 ;	genPlus
   0FB1 A8*00              3763 	mov	r0,_bp
   0FB3 08                 3764 	inc	r0
   0FB4 E5*00              3765 	mov	a,_bp
   0FB6 24 11              3766 	add	a,#0x11
   0FB8 F9                 3767 	mov	r1,a
                           3768 ;     genPlusIncr
   0FB9 74 02              3769 	mov	a,#0x02
   0FBB 26                 3770 	add	a,@r0
   0FBC F7                 3771 	mov	@r1,a
                           3772 ;	Peephole 181	changed mov to clr
   0FBD E4                 3773 	clr	a
   0FBE 08                 3774 	inc	r0
   0FBF 36                 3775 	addc	a,@r0
   0FC0 09                 3776 	inc	r1
   0FC1 F7                 3777 	mov	@r1,a
   0FC2 08                 3778 	inc	r0
   0FC3 09                 3779 	inc	r1
   0FC4 E6                 3780 	mov	a,@r0
   0FC5 F7                 3781 	mov	@r1,a
                           3782 ;	genPointerGet
                           3783 ;	genGenPointerGet
   0FC6 E5*00              3784 	mov	a,_bp
   0FC8 24 11              3785 	add	a,#0x11
   0FCA F8                 3786 	mov	r0,a
   0FCB 86 82              3787 	mov	dpl,@r0
   0FCD 08                 3788 	inc	r0
   0FCE 86 83              3789 	mov	dph,@r0
   0FD0 08                 3790 	inc	r0
   0FD1 86 F0              3791 	mov	b,@r0
   0FD3 12s00r00           3792 	lcall	__gptrget
   0FD6 FE                 3793 	mov	r6,a
   0FD7 A3                 3794 	inc	dptr
   0FD8 12s00r00           3795 	lcall	__gptrget
   0FDB FF                 3796 	mov	r7,a
                           3797 ;	genAnd
   0FDC 53 06 0F           3798 	anl	ar6,#0x0F
                           3799 ;	genLeftShift
                           3800 ;	genLeftShiftLiteral
                           3801 ;	genlshTwo
                           3802 ;	peephole 177.g	optimized mov sequence
                           3803 ;	Peephole 181	changed mov to clr
   0FDF E4                 3804 	clr	a
   0FE0 FF                 3805 	mov	r7,a
   0FE1 C4                 3806 	swap	a
   0FE2 23                 3807 	rl	a
   0FE3 54 E0              3808 	anl	a,#0xe0
   0FE5 CE                 3809 	xch	a,r6
   0FE6 C4                 3810 	swap	a
   0FE7 23                 3811 	rl	a
   0FE8 CE                 3812 	xch	a,r6
   0FE9 6E                 3813 	xrl	a,r6
   0FEA CE                 3814 	xch	a,r6
   0FEB 54 E0              3815 	anl	a,#0xe0
   0FED CE                 3816 	xch	a,r6
   0FEE 6E                 3817 	xrl	a,r6
   0FEF FF                 3818 	mov	r7,a
                           3819 ;	genPlus
                           3820 ;	Peephole 236.g	used r6 instead of ar6
   0FF0 EE                 3821 	mov	a,r6
                           3822 ;	Peephole 236.a	used r3 instead of ar3
   0FF1 2B                 3823 	add	a,r3
   0FF2 FE                 3824 	mov	r6,a
                           3825 ;	Peephole 236.g	used r7 instead of ar7
   0FF3 EF                 3826 	mov	a,r7
                           3827 ;	Peephole 236.b	used r4 instead of ar4
   0FF4 3C                 3828 	addc	a,r4
   0FF5 FF                 3829 	mov	r7,a
   0FF6 8D 02              3830 	mov	ar2,r5
                           3831 ;	genAssign
   0FF8 E5*00              3832 	mov	a,_bp
   0FFA 24 08              3833 	add	a,#0x08
   0FFC F8                 3834 	mov	r0,a
   0FFD A6 06              3835 	mov	@r0,ar6
   0FFF 08                 3836 	inc	r0
   1000 A6 07              3837 	mov	@r0,ar7
   1002 08                 3838 	inc	r0
   1003 A6 02              3839 	mov	@r0,ar2
                           3840 ;	FatDrivers/tff.c:541: if (dptr[DIR_Name] == 0)						/* Has it reached to end of dir? */
                           3841 ;	genPointerGet
                           3842 ;	genGenPointerGet
   1005 E5*00              3843 	mov	a,_bp
   1007 24 08              3844 	add	a,#0x08
   1009 F8                 3845 	mov	r0,a
   100A 86 82              3846 	mov	dpl,@r0
   100C 08                 3847 	inc	r0
   100D 86 83              3848 	mov	dph,@r0
   100F 08                 3849 	inc	r0
   1010 86 F0              3850 	mov	b,@r0
   1012 12s00r00           3851 	lcall	__gptrget
                           3852 ;	genIpop
   1015 D0 02              3853 	pop	ar2
                           3854 ;	genIfx
                           3855 ;	genIfxJump
                           3856 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1017 70 14              3857 	jnz	00111$
                           3858 ;	Peephole 300	removed redundant label 00154$
                           3859 ;	FatDrivers/tff.c:542: return !ds ? FR_NO_FILE : FR_NO_PATH;
                           3860 ;	genNot
   1019 EA                 3861 	mov	a,r2
   101A B4 01 00           3862 	cjne	a,#0x01,00155$
   101D                    3863 00155$:
   101D E4                 3864 	clr	a
   101E 33                 3865 	rlc	a
                           3866 ;	genIfx
   101F FE                 3867 	mov	r6,a
                           3868 ;	Peephole 105	removed redundant mov
                           3869 ;	genIfxJump
                           3870 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1020 60 04              3871 	jz	00130$
                           3872 ;	Peephole 300	removed redundant label 00156$
                           3873 ;	genAssign
   1022 7E 02              3874 	mov	r6,#0x02
                           3875 ;	Peephole 112.b	changed ljmp to sjmp
   1024 80 02              3876 	sjmp	00131$
   1026                    3877 00130$:
                           3878 ;	genAssign
   1026 7E 03              3879 	mov	r6,#0x03
   1028                    3880 00131$:
                           3881 ;	genRet
   1028 8E 82              3882 	mov	dpl,r6
   102A 02s12r6B           3883 	ljmp	00128$
   102D                    3884 00111$:
                           3885 ;	FatDrivers/tff.c:543: if (dptr[DIR_Name] != 0xE5						/* Matched? */
                           3886 ;	genPointerGet
                           3887 ;	genGenPointerGet
   102D E5*00              3888 	mov	a,_bp
   102F 24 08              3889 	add	a,#0x08
   1031 F8                 3890 	mov	r0,a
   1032 86 82              3891 	mov	dpl,@r0
   1034 08                 3892 	inc	r0
   1035 86 83              3893 	mov	dph,@r0
   1037 08                 3894 	inc	r0
   1038 86 F0              3895 	mov	b,@r0
   103A 12s00r00           3896 	lcall	__gptrget
   103D FE                 3897 	mov	r6,a
                           3898 ;	genCmpEq
                           3899 ;	gencjneshort
   103E BE E5 02           3900 	cjne	r6,#0xE5,00157$
                           3901 ;	Peephole 112.b	changed ljmp to sjmp
   1041 80 6F              3902 	sjmp	00113$
   1043                    3903 00157$:
                           3904 ;	FatDrivers/tff.c:544: && !(dptr[DIR_Attr] & AM_VOL)
                           3905 ;	genIpush
   1043 C0 03              3906 	push	ar3
   1045 C0 04              3907 	push	ar4
   1047 C0 05              3908 	push	ar5
                           3909 ;	genPlus
   1049 E5*00              3910 	mov	a,_bp
   104B 24 08              3911 	add	a,#0x08
   104D F8                 3912 	mov	r0,a
                           3913 ;     genPlusIncr
   104E 74 0B              3914 	mov	a,#0x0B
   1050 26                 3915 	add	a,@r0
   1051 FE                 3916 	mov	r6,a
                           3917 ;	Peephole 181	changed mov to clr
   1052 E4                 3918 	clr	a
   1053 08                 3919 	inc	r0
   1054 36                 3920 	addc	a,@r0
   1055 FF                 3921 	mov	r7,a
   1056 08                 3922 	inc	r0
   1057 86 03              3923 	mov	ar3,@r0
                           3924 ;	genPointerGet
                           3925 ;	genGenPointerGet
   1059 8E 82              3926 	mov	dpl,r6
   105B 8F 83              3927 	mov	dph,r7
   105D 8B F0              3928 	mov	b,r3
   105F 12s00r00           3929 	lcall	__gptrget
                           3930 ;	genAnd
   1062 FE                 3931 	mov	r6,a
                           3932 ;	Peephole 105	removed redundant mov
   1063 54 08              3933 	anl	a,#0x08
                           3934 ;	genIpop
   1065 D0 05              3935 	pop	ar5
   1067 D0 04              3936 	pop	ar4
   1069 D0 03              3937 	pop	ar3
                           3938 ;	genIfx
                           3939 ;	genIfxJump
                           3940 ;	Peephole 108.b	removed ljmp by inverse jump logic
   106B 70 45              3941 	jnz	00113$
                           3942 ;	Peephole 300	removed redundant label 00158$
                           3943 ;	FatDrivers/tff.c:545: && !memcmp(&dptr[DIR_Name], fn, 8+3) ) break;
                           3944 ;	genIpush
   106D C0 02              3945 	push	ar2
   106F C0 03              3946 	push	ar3
   1071 C0 04              3947 	push	ar4
   1073 C0 05              3948 	push	ar5
   1075 74 0B              3949 	mov	a,#0x0B
   1077 C0 E0              3950 	push	acc
                           3951 ;	Peephole 181	changed mov to clr
   1079 E4                 3952 	clr	a
   107A C0 E0              3953 	push	acc
                           3954 ;	genIpush
   107C E5*00              3955 	mov	a,_bp
   107E 24 FB              3956 	add	a,#0xfffffffb
   1080 F8                 3957 	mov	r0,a
   1081 E6                 3958 	mov	a,@r0
   1082 C0 E0              3959 	push	acc
   1084 08                 3960 	inc	r0
   1085 E6                 3961 	mov	a,@r0
   1086 C0 E0              3962 	push	acc
   1088 08                 3963 	inc	r0
   1089 E6                 3964 	mov	a,@r0
   108A C0 E0              3965 	push	acc
                           3966 ;	genCall
   108C E5*00              3967 	mov	a,_bp
   108E 24 08              3968 	add	a,#0x08
   1090 F8                 3969 	mov	r0,a
   1091 86 82              3970 	mov	dpl,@r0
   1093 08                 3971 	inc	r0
   1094 86 83              3972 	mov	dph,@r0
   1096 08                 3973 	inc	r0
   1097 86 F0              3974 	mov	b,@r0
   1099 12s00r00           3975 	lcall	_memcmp
   109C AE 82              3976 	mov	r6,dpl
   109E AF 83              3977 	mov	r7,dph
   10A0 E5 81              3978 	mov	a,sp
   10A2 24 FB              3979 	add	a,#0xfb
   10A4 F5 81              3980 	mov	sp,a
   10A6 D0 05              3981 	pop	ar5
   10A8 D0 04              3982 	pop	ar4
   10AA D0 03              3983 	pop	ar3
   10AC D0 02              3984 	pop	ar2
                           3985 ;	genIfx
   10AE EE                 3986 	mov	a,r6
   10AF 4F                 3987 	orl	a,r7
                           3988 ;	genIfxJump
                           3989 ;	Peephole 108.c	removed ljmp by inverse jump logic
   10B0 60 39              3990 	jz	00120$
                           3991 ;	Peephole 300	removed redundant label 00159$
   10B2                    3992 00113$:
                           3993 ;	FatDrivers/tff.c:546: if (!next_dir_entry(dirobj))					/* Next directory pointer */
                           3994 ;	genCall
   10B2 A8*00              3995 	mov	r0,_bp
   10B4 08                 3996 	inc	r0
   10B5 86 82              3997 	mov	dpl,@r0
   10B7 08                 3998 	inc	r0
   10B8 86 83              3999 	mov	dph,@r0
   10BA 08                 4000 	inc	r0
   10BB 86 F0              4001 	mov	b,@r0
   10BD C0 02              4002 	push	ar2
   10BF C0 03              4003 	push	ar3
   10C1 C0 04              4004 	push	ar4
   10C3 C0 05              4005 	push	ar5
   10C5 12s05r49           4006 	lcall	_next_dir_entry
   10C8 E5 82              4007 	mov	a,dpl
   10CA D0 05              4008 	pop	ar5
   10CC D0 04              4009 	pop	ar4
   10CE D0 03              4010 	pop	ar3
   10D0 D0 02              4011 	pop	ar2
                           4012 ;	genIfx
                           4013 ;	genIfxJump
   10D2 60 03              4014 	jz	00160$
   10D4 02s0Fr60           4015 	ljmp	00119$
   10D7                    4016 00160$:
                           4017 ;	FatDrivers/tff.c:547: return !ds ? FR_NO_FILE : FR_NO_PATH;
                           4018 ;	genNot
   10D7 EA                 4019 	mov	a,r2
   10D8 B4 01 00           4020 	cjne	a,#0x01,00161$
   10DB                    4021 00161$:
   10DB E4                 4022 	clr	a
   10DC 33                 4023 	rlc	a
                           4024 ;	genIfx
   10DD FB                 4025 	mov	r3,a
                           4026 ;	Peephole 105	removed redundant mov
                           4027 ;	genIfxJump
                           4028 ;	Peephole 108.c	removed ljmp by inverse jump logic
   10DE 60 04              4029 	jz	00132$
                           4030 ;	Peephole 300	removed redundant label 00162$
                           4031 ;	genAssign
   10E0 7B 02              4032 	mov	r3,#0x02
                           4033 ;	Peephole 112.b	changed ljmp to sjmp
   10E2 80 02              4034 	sjmp	00133$
   10E4                    4035 00132$:
                           4036 ;	genAssign
   10E4 7B 03              4037 	mov	r3,#0x03
   10E6                    4038 00133$:
                           4039 ;	genRet
   10E6 8B 82              4040 	mov	dpl,r3
   10E8 02s12r6B           4041 	ljmp	00128$
   10EB                    4042 00120$:
                           4043 ;	FatDrivers/tff.c:549: if (!ds) { *dir = dptr; return FR_OK; }				/* Matched with end of path */
                           4044 ;	genIfx
   10EB EA                 4045 	mov	a,r2
                           4046 ;	genIfxJump
                           4047 ;	Peephole 108.b	removed ljmp by inverse jump logic
   10EC 70 2E              4048 	jnz	00122$
                           4049 ;	Peephole 300	removed redundant label 00163$
                           4050 ;	genAssign
   10EE E5*00              4051 	mov	a,_bp
   10F0 24 F5              4052 	add	a,#0xfffffff5
   10F2 F8                 4053 	mov	r0,a
   10F3 86 02              4054 	mov	ar2,@r0
   10F5 08                 4055 	inc	r0
   10F6 86 03              4056 	mov	ar3,@r0
   10F8 08                 4057 	inc	r0
   10F9 86 04              4058 	mov	ar4,@r0
                           4059 ;	genPointerSet
                           4060 ;	genGenPointerSet
   10FB 8A 82              4061 	mov	dpl,r2
   10FD 8B 83              4062 	mov	dph,r3
   10FF 8C F0              4063 	mov	b,r4
   1101 E5*00              4064 	mov	a,_bp
   1103 24 08              4065 	add	a,#0x08
   1105 F8                 4066 	mov	r0,a
   1106 E6                 4067 	mov	a,@r0
   1107 12s00r00           4068 	lcall	__gptrput
   110A A3                 4069 	inc	dptr
   110B 08                 4070 	inc	r0
   110C E6                 4071 	mov	a,@r0
   110D 12s00r00           4072 	lcall	__gptrput
   1110 A3                 4073 	inc	dptr
   1111 08                 4074 	inc	r0
   1112 E6                 4075 	mov	a,@r0
   1113 12s00r00           4076 	lcall	__gptrput
                           4077 ;	genRet
   1116 75 82 00           4078 	mov	dpl,#0x00
   1119 02s12r6B           4079 	ljmp	00128$
   111C                    4080 00122$:
                           4081 ;	FatDrivers/tff.c:550: if (!(dptr[DIR_Attr] & AM_DIR)) return FR_NO_PATH;	/* Cannot trace because it is a file */
                           4082 ;	genPlus
   111C E5*00              4083 	mov	a,_bp
   111E 24 08              4084 	add	a,#0x08
   1120 F8                 4085 	mov	r0,a
                           4086 ;     genPlusIncr
   1121 74 0B              4087 	mov	a,#0x0B
   1123 26                 4088 	add	a,@r0
   1124 FA                 4089 	mov	r2,a
                           4090 ;	Peephole 181	changed mov to clr
   1125 E4                 4091 	clr	a
   1126 08                 4092 	inc	r0
   1127 36                 4093 	addc	a,@r0
   1128 FB                 4094 	mov	r3,a
   1129 08                 4095 	inc	r0
   112A 86 04              4096 	mov	ar4,@r0
                           4097 ;	genPointerGet
                           4098 ;	genGenPointerGet
   112C 8A 82              4099 	mov	dpl,r2
   112E 8B 83              4100 	mov	dph,r3
   1130 8C F0              4101 	mov	b,r4
   1132 12s00r00           4102 	lcall	__gptrget
                           4103 ;	genAnd
   1135 FA                 4104 	mov	r2,a
                           4105 ;	Peephole 105	removed redundant mov
                           4106 ;	genIfxJump
                           4107 ;	Peephole 108.e	removed ljmp by inverse jump logic
   1136 20 E4 06           4108 	jb	acc.4,00124$
                           4109 ;	Peephole 300	removed redundant label 00164$
                           4110 ;	genRet
   1139 75 82 03           4111 	mov	dpl,#0x03
   113C 02s12r6B           4112 	ljmp	00128$
   113F                    4113 00124$:
                           4114 ;	FatDrivers/tff.c:553: ((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) |
                           4115 ;	genPlus
   113F E5*00              4116 	mov	a,_bp
   1141 24 08              4117 	add	a,#0x08
   1143 F8                 4118 	mov	r0,a
                           4119 ;     genPlusIncr
   1144 74 14              4120 	mov	a,#0x14
   1146 26                 4121 	add	a,@r0
   1147 FA                 4122 	mov	r2,a
                           4123 ;	Peephole 181	changed mov to clr
   1148 E4                 4124 	clr	a
   1149 08                 4125 	inc	r0
   114A 36                 4126 	addc	a,@r0
   114B FB                 4127 	mov	r3,a
   114C 08                 4128 	inc	r0
   114D 86 04              4129 	mov	ar4,@r0
                           4130 ;	genPointerGet
                           4131 ;	genGenPointerGet
   114F 8A 82              4132 	mov	dpl,r2
   1151 8B 83              4133 	mov	dph,r3
   1153 8C F0              4134 	mov	b,r4
   1155 12s00r00           4135 	lcall	__gptrget
   1158 FA                 4136 	mov	r2,a
   1159 A3                 4137 	inc	dptr
   115A 12s00r00           4138 	lcall	__gptrget
   115D FB                 4139 	mov	r3,a
                           4140 ;	genCast
                           4141 ;	genLeftShift
                           4142 ;	genLeftShiftLiteral
                           4143 ;	Peephole 3.c	changed mov to clr
   115E E4                 4144 	clr	a
   115F FC                 4145 	mov	r4,a
   1160 FD                 4146 	mov	r5,a
   1161 E5*00              4147 	mov	a,_bp
   1163 24 14              4148 	add	a,#0x14
                           4149 ;	genlshFour
                           4150 ;	Peephole 185	changed order of increment (acc incremented also!)
   1165 04                 4151 	inc	a
                           4152 ;	Peephole 185	changed order of increment (acc incremented also!)
   1166 04                 4153 	inc	a
                           4154 ;	Peephole 185	changed order of increment (acc incremented also!)
   1167 04                 4155 	inc	a
   1168 F8                 4156 	mov	r0,a
   1169 A6 03              4157 	mov	@r0,ar3
   116B 18                 4158 	dec	r0
   116C A6 02              4159 	mov	@r0,ar2
   116E 18                 4160 	dec	r0
   116F 76 00              4161 	mov	@r0,#0x00
   1171 18                 4162 	dec	r0
   1172 76 00              4163 	mov	@r0,#0x00
                           4164 ;	FatDrivers/tff.c:555: LD_WORD(&dptr[DIR_FstClusLO]);
                           4165 ;	genPlus
   1174 E5*00              4166 	mov	a,_bp
   1176 24 08              4167 	add	a,#0x08
   1178 F8                 4168 	mov	r0,a
                           4169 ;     genPlusIncr
   1179 74 1A              4170 	mov	a,#0x1A
   117B 26                 4171 	add	a,@r0
   117C FE                 4172 	mov	r6,a
                           4173 ;	Peephole 181	changed mov to clr
   117D E4                 4174 	clr	a
   117E 08                 4175 	inc	r0
   117F 36                 4176 	addc	a,@r0
   1180 FF                 4177 	mov	r7,a
   1181 08                 4178 	inc	r0
   1182 86 02              4179 	mov	ar2,@r0
                           4180 ;	genPointerGet
                           4181 ;	genGenPointerGet
   1184 8E 82              4182 	mov	dpl,r6
   1186 8F 83              4183 	mov	dph,r7
   1188 8A F0              4184 	mov	b,r2
   118A 12s00r00           4185 	lcall	__gptrget
   118D FE                 4186 	mov	r6,a
   118E A3                 4187 	inc	dptr
   118F 12s00r00           4188 	lcall	__gptrget
   1192 FF                 4189 	mov	r7,a
                           4190 ;	genCast
                           4191 ;	genOr
                           4192 ;	Peephole 3.c	changed mov to clr
   1193 E4                 4193 	clr	a
   1194 FA                 4194 	mov	r2,a
   1195 FB                 4195 	mov	r3,a
   1196 E5*00              4196 	mov	a,_bp
   1198 24 14              4197 	add	a,#0x14
   119A F8                 4198 	mov	r0,a
   119B E6                 4199 	mov	a,@r0
   119C 42 06              4200 	orl	ar6,a
   119E 08                 4201 	inc	r0
   119F E6                 4202 	mov	a,@r0
   11A0 42 07              4203 	orl	ar7,a
   11A2 08                 4204 	inc	r0
   11A3 E6                 4205 	mov	a,@r0
   11A4 42 02              4206 	orl	ar2,a
   11A6 08                 4207 	inc	r0
   11A7 E6                 4208 	mov	a,@r0
   11A8 42 03              4209 	orl	ar3,a
                           4210 ;	genAssign
   11AA E5*00              4211 	mov	a,_bp
   11AC 24 04              4212 	add	a,#0x04
   11AE F8                 4213 	mov	r0,a
   11AF A6 06              4214 	mov	@r0,ar6
   11B1 08                 4215 	inc	r0
   11B2 A6 07              4216 	mov	@r0,ar7
   11B4 08                 4217 	inc	r0
   11B5 A6 02              4218 	mov	@r0,ar2
   11B7 08                 4219 	inc	r0
   11B8 A6 03              4220 	mov	@r0,ar3
                           4221 ;	FatDrivers/tff.c:556: dirobj->clust = dirobj->sclust = clust;				/* Restart scannig with the new directory */
                           4222 ;	genPlus
   11BA A8*00              4223 	mov	r0,_bp
   11BC 08                 4224 	inc	r0
                           4225 ;     genPlusIncr
   11BD 74 0B              4226 	mov	a,#0x0B
   11BF 26                 4227 	add	a,@r0
   11C0 FA                 4228 	mov	r2,a
                           4229 ;	Peephole 181	changed mov to clr
   11C1 E4                 4230 	clr	a
   11C2 08                 4231 	inc	r0
   11C3 36                 4232 	addc	a,@r0
   11C4 FB                 4233 	mov	r3,a
   11C5 08                 4234 	inc	r0
   11C6 86 04              4235 	mov	ar4,@r0
                           4236 ;	genPlus
   11C8 A8*00              4237 	mov	r0,_bp
   11CA 08                 4238 	inc	r0
                           4239 ;     genPlusIncr
   11CB 74 07              4240 	mov	a,#0x07
   11CD 26                 4241 	add	a,@r0
   11CE FD                 4242 	mov	r5,a
                           4243 ;	Peephole 181	changed mov to clr
   11CF E4                 4244 	clr	a
   11D0 08                 4245 	inc	r0
   11D1 36                 4246 	addc	a,@r0
   11D2 FE                 4247 	mov	r6,a
   11D3 08                 4248 	inc	r0
   11D4 86 07              4249 	mov	ar7,@r0
                           4250 ;	genPointerSet
                           4251 ;	genGenPointerSet
   11D6 8D 82              4252 	mov	dpl,r5
   11D8 8E 83              4253 	mov	dph,r6
   11DA 8F F0              4254 	mov	b,r7
   11DC E5*00              4255 	mov	a,_bp
   11DE 24 04              4256 	add	a,#0x04
   11E0 F8                 4257 	mov	r0,a
   11E1 E6                 4258 	mov	a,@r0
   11E2 12s00r00           4259 	lcall	__gptrput
   11E5 A3                 4260 	inc	dptr
   11E6 08                 4261 	inc	r0
   11E7 E6                 4262 	mov	a,@r0
   11E8 12s00r00           4263 	lcall	__gptrput
   11EB A3                 4264 	inc	dptr
   11EC 08                 4265 	inc	r0
   11ED E6                 4266 	mov	a,@r0
   11EE 12s00r00           4267 	lcall	__gptrput
   11F1 A3                 4268 	inc	dptr
   11F2 08                 4269 	inc	r0
   11F3 E6                 4270 	mov	a,@r0
   11F4 12s00r00           4271 	lcall	__gptrput
                           4272 ;	genPointerSet
                           4273 ;	genGenPointerSet
   11F7 8A 82              4274 	mov	dpl,r2
   11F9 8B 83              4275 	mov	dph,r3
   11FB 8C F0              4276 	mov	b,r4
   11FD E5*00              4277 	mov	a,_bp
   11FF 24 04              4278 	add	a,#0x04
   1201 F8                 4279 	mov	r0,a
   1202 E6                 4280 	mov	a,@r0
   1203 12s00r00           4281 	lcall	__gptrput
   1206 A3                 4282 	inc	dptr
   1207 08                 4283 	inc	r0
   1208 E6                 4284 	mov	a,@r0
   1209 12s00r00           4285 	lcall	__gptrput
   120C A3                 4286 	inc	dptr
   120D 08                 4287 	inc	r0
   120E E6                 4288 	mov	a,@r0
   120F 12s00r00           4289 	lcall	__gptrput
   1212 A3                 4290 	inc	dptr
   1213 08                 4291 	inc	r0
   1214 E6                 4292 	mov	a,@r0
   1215 12s00r00           4293 	lcall	__gptrput
                           4294 ;	FatDrivers/tff.c:557: dirobj->sect = clust2sect(clust);
                           4295 ;	genCall
   1218 E5*00              4296 	mov	a,_bp
   121A 24 04              4297 	add	a,#0x04
   121C F8                 4298 	mov	r0,a
   121D 86 82              4299 	mov	dpl,@r0
   121F 08                 4300 	inc	r0
   1220 86 83              4301 	mov	dph,@r0
   1222 08                 4302 	inc	r0
   1223 86 F0              4303 	mov	b,@r0
   1225 08                 4304 	inc	r0
   1226 E6                 4305 	mov	a,@r0
   1227 12s04r26           4306 	lcall	_clust2sect
   122A AA 82              4307 	mov	r2,dpl
   122C AB 83              4308 	mov	r3,dph
   122E AC F0              4309 	mov	r4,b
   1230 FD                 4310 	mov	r5,a
                           4311 ;	genPointerSet
                           4312 ;	genGenPointerSet
   1231 E5*00              4313 	mov	a,_bp
   1233 24 0E              4314 	add	a,#0x0e
   1235 F8                 4315 	mov	r0,a
   1236 86 82              4316 	mov	dpl,@r0
   1238 08                 4317 	inc	r0
   1239 86 83              4318 	mov	dph,@r0
   123B 08                 4319 	inc	r0
   123C 86 F0              4320 	mov	b,@r0
   123E EA                 4321 	mov	a,r2
   123F 12s00r00           4322 	lcall	__gptrput
   1242 A3                 4323 	inc	dptr
   1243 EB                 4324 	mov	a,r3
   1244 12s00r00           4325 	lcall	__gptrput
   1247 A3                 4326 	inc	dptr
   1248 EC                 4327 	mov	a,r4
   1249 12s00r00           4328 	lcall	__gptrput
   124C A3                 4329 	inc	dptr
   124D ED                 4330 	mov	a,r5
   124E 12s00r00           4331 	lcall	__gptrput
                           4332 ;	FatDrivers/tff.c:558: dirobj->index = 2;
                           4333 ;	genPointerSet
                           4334 ;	genGenPointerSet
   1251 E5*00              4335 	mov	a,_bp
   1253 24 11              4336 	add	a,#0x11
   1255 F8                 4337 	mov	r0,a
   1256 86 82              4338 	mov	dpl,@r0
   1258 08                 4339 	inc	r0
   1259 86 83              4340 	mov	dph,@r0
   125B 08                 4341 	inc	r0
   125C 86 F0              4342 	mov	b,@r0
   125E 74 02              4343 	mov	a,#0x02
   1260 12s00r00           4344 	lcall	__gptrput
   1263 A3                 4345 	inc	dptr
                           4346 ;	Peephole 181	changed mov to clr
   1264 E4                 4347 	clr	a
   1265 12s00r00           4348 	lcall	__gptrput
   1268 02s0Fr08           4349 	ljmp	00126$
   126B                    4350 00128$:
   126B 85*00 81           4351 	mov	sp,_bp
   126E D0*00              4352 	pop	_bp
   1270 22                 4353 	ret
                           4354 ;------------------------------------------------------------
                           4355 ;Allocation info for local variables in function 'check_fs'
                           4356 ;------------------------------------------------------------
                           4357 ;sect                      Allocated to stack - offset 1
                           4358 ;fs                        Allocated to registers r6 r7 r2 
                           4359 ;------------------------------------------------------------
                           4360 ;	FatDrivers/tff.c:626: BYTE check_fs (		/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record or error */
                           4361 ;	-----------------------------------------
                           4362 ;	 function check_fs
                           4363 ;	-----------------------------------------
   1271                    4364 _check_fs:
   1271 C0*00              4365 	push	_bp
   1273 85 81*00           4366 	mov	_bp,sp
                           4367 ;     genReceive
   1276 C0 82              4368 	push	dpl
   1278 C0 83              4369 	push	dph
   127A C0 F0              4370 	push	b
   127C C0 E0              4371 	push	acc
                           4372 ;	FatDrivers/tff.c:630: FATFS *fs = FatFs;
                           4373 ;	genAssign
   127E AE*00              4374 	mov	r6,_FatFs
   1280 AF*01              4375 	mov	r7,(_FatFs + 1)
   1282 AA*02              4376 	mov	r2,(_FatFs + 2)
                           4377 ;	FatDrivers/tff.c:632: if (disk_read(0, fs->win, sect, 1) != RES_OK)	/* Load boot record */
                           4378 ;	genPlus
                           4379 ;     genPlusIncr
   1284 74 20              4380 	mov	a,#0x20
                           4381 ;	Peephole 236.a	used r6 instead of ar6
   1286 2E                 4382 	add	a,r6
   1287 FB                 4383 	mov	r3,a
                           4384 ;	Peephole 181	changed mov to clr
   1288 E4                 4385 	clr	a
                           4386 ;	Peephole 236.b	used r7 instead of ar7
   1289 3F                 4387 	addc	a,r7
   128A FC                 4388 	mov	r4,a
   128B 8A 05              4389 	mov	ar5,r2
                           4390 ;	genIpush
   128D C0 02              4391 	push	ar2
   128F C0 06              4392 	push	ar6
   1291 C0 07              4393 	push	ar7
   1293 74 01              4394 	mov	a,#0x01
   1295 C0 E0              4395 	push	acc
                           4396 ;	genIpush
   1297 A8*00              4397 	mov	r0,_bp
   1299 08                 4398 	inc	r0
   129A E6                 4399 	mov	a,@r0
   129B C0 E0              4400 	push	acc
   129D 08                 4401 	inc	r0
   129E E6                 4402 	mov	a,@r0
   129F C0 E0              4403 	push	acc
   12A1 08                 4404 	inc	r0
   12A2 E6                 4405 	mov	a,@r0
   12A3 C0 E0              4406 	push	acc
   12A5 08                 4407 	inc	r0
   12A6 E6                 4408 	mov	a,@r0
   12A7 C0 E0              4409 	push	acc
                           4410 ;	genIpush
   12A9 C0 03              4411 	push	ar3
   12AB C0 04              4412 	push	ar4
   12AD C0 05              4413 	push	ar5
                           4414 ;	genCall
   12AF 75 82 00           4415 	mov	dpl,#0x00
   12B2 12s00r00           4416 	lcall	_disk_read
   12B5 AB 82              4417 	mov	r3,dpl
   12B7 E5 81              4418 	mov	a,sp
   12B9 24 F8              4419 	add	a,#0xf8
   12BB F5 81              4420 	mov	sp,a
   12BD D0 07              4421 	pop	ar7
   12BF D0 06              4422 	pop	ar6
   12C1 D0 02              4423 	pop	ar2
                           4424 ;	genCmpEq
                           4425 ;	gencjneshort
   12C3 BB 00 02           4426 	cjne	r3,#0x00,00117$
                           4427 ;	Peephole 112.b	changed ljmp to sjmp
   12C6 80 06              4428 	sjmp	00102$
   12C8                    4429 00117$:
                           4430 ;	FatDrivers/tff.c:633: return 2;
                           4431 ;	genRet
   12C8 75 82 02           4432 	mov	dpl,#0x02
   12CB 02s13rAF           4433 	ljmp	00110$
   12CE                    4434 00102$:
                           4435 ;	FatDrivers/tff.c:634: if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature */
                           4436 ;	genPlus
                           4437 ;     genPlusIncr
   12CE 74 20              4438 	mov	a,#0x20
                           4439 ;	Peephole 236.a	used r6 instead of ar6
   12D0 2E                 4440 	add	a,r6
   12D1 FB                 4441 	mov	r3,a
                           4442 ;	Peephole 181	changed mov to clr
   12D2 E4                 4443 	clr	a
                           4444 ;	Peephole 236.b	used r7 instead of ar7
   12D3 3F                 4445 	addc	a,r7
   12D4 FC                 4446 	mov	r4,a
   12D5 8A 05              4447 	mov	ar5,r2
                           4448 ;	genPlus
                           4449 ;     genPlusIncr
   12D7 74 FE              4450 	mov	a,#0xFE
                           4451 ;	Peephole 236.a	used r3 instead of ar3
   12D9 2B                 4452 	add	a,r3
   12DA FB                 4453 	mov	r3,a
   12DB 74 01              4454 	mov	a,#0x01
                           4455 ;	Peephole 236.b	used r4 instead of ar4
   12DD 3C                 4456 	addc	a,r4
   12DE FC                 4457 	mov	r4,a
                           4458 ;	genPointerGet
                           4459 ;	genGenPointerGet
   12DF 8B 82              4460 	mov	dpl,r3
   12E1 8C 83              4461 	mov	dph,r4
   12E3 8D F0              4462 	mov	b,r5
   12E5 12s00r00           4463 	lcall	__gptrget
   12E8 FB                 4464 	mov	r3,a
   12E9 A3                 4465 	inc	dptr
   12EA 12s00r00           4466 	lcall	__gptrget
   12ED FC                 4467 	mov	r4,a
                           4468 ;	genCmpEq
                           4469 ;	gencjneshort
   12EE BB 55 05           4470 	cjne	r3,#0x55,00118$
   12F1 BC AA 02           4471 	cjne	r4,#0xAA,00118$
                           4472 ;	Peephole 112.b	changed ljmp to sjmp
   12F4 80 06              4473 	sjmp	00104$
   12F6                    4474 00118$:
                           4475 ;	FatDrivers/tff.c:635: return 2;
                           4476 ;	genRet
   12F6 75 82 02           4477 	mov	dpl,#0x02
   12F9 02s13rAF           4478 	ljmp	00110$
   12FC                    4479 00104$:
                           4480 ;	FatDrivers/tff.c:637: if (!memcmp(&fs->win[BS_FilSysType], "FAT", 3))	/* Check FAT signature */
                           4481 ;	genPlus
                           4482 ;     genPlusIncr
   12FC 74 20              4483 	mov	a,#0x20
                           4484 ;	Peephole 236.a	used r6 instead of ar6
   12FE 2E                 4485 	add	a,r6
   12FF FB                 4486 	mov	r3,a
                           4487 ;	Peephole 181	changed mov to clr
   1300 E4                 4488 	clr	a
                           4489 ;	Peephole 236.b	used r7 instead of ar7
   1301 3F                 4490 	addc	a,r7
   1302 FC                 4491 	mov	r4,a
   1303 8A 05              4492 	mov	ar5,r2
                           4493 ;	genPlus
                           4494 ;     genPlusIncr
   1305 74 36              4495 	mov	a,#0x36
                           4496 ;	Peephole 236.a	used r3 instead of ar3
   1307 2B                 4497 	add	a,r3
   1308 FB                 4498 	mov	r3,a
                           4499 ;	Peephole 181	changed mov to clr
   1309 E4                 4500 	clr	a
                           4501 ;	Peephole 236.b	used r4 instead of ar4
   130A 3C                 4502 	addc	a,r4
   130B FC                 4503 	mov	r4,a
                           4504 ;	genIpush
   130C C0 02              4505 	push	ar2
   130E C0 06              4506 	push	ar6
   1310 C0 07              4507 	push	ar7
   1312 74 03              4508 	mov	a,#0x03
   1314 C0 E0              4509 	push	acc
                           4510 ;	Peephole 181	changed mov to clr
   1316 E4                 4511 	clr	a
   1317 C0 E0              4512 	push	acc
                           4513 ;	genIpush
   1319 74r00              4514 	mov	a,#__str_0
   131B C0 E0              4515 	push	acc
   131D 74s00              4516 	mov	a,#(__str_0 >> 8)
   131F C0 E0              4517 	push	acc
   1321 74 80              4518 	mov	a,#0x80
   1323 C0 E0              4519 	push	acc
                           4520 ;	genCall
   1325 8B 82              4521 	mov	dpl,r3
   1327 8C 83              4522 	mov	dph,r4
   1329 8D F0              4523 	mov	b,r5
   132B 12s00r00           4524 	lcall	_memcmp
   132E AB 82              4525 	mov	r3,dpl
   1330 AC 83              4526 	mov	r4,dph
   1332 E5 81              4527 	mov	a,sp
   1334 24 FB              4528 	add	a,#0xfb
   1336 F5 81              4529 	mov	sp,a
   1338 D0 07              4530 	pop	ar7
   133A D0 06              4531 	pop	ar6
   133C D0 02              4532 	pop	ar2
                           4533 ;	genIfx
   133E EB                 4534 	mov	a,r3
   133F 4C                 4535 	orl	a,r4
                           4536 ;	genIfxJump
                           4537 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           4538 ;	FatDrivers/tff.c:638: return 0;
                           4539 ;	genRet
   1340 70 04              4540 	jnz	00106$
                           4541 ;	Peephole 300	removed redundant label 00119$
                           4542 ;	Peephole 256.c	loading dpl with zero from a
   1342 F5 82              4543 	mov	dpl,a
                           4544 ;	Peephole 112.b	changed ljmp to sjmp
   1344 80 69              4545 	sjmp	00110$
   1346                    4546 00106$:
                           4547 ;	FatDrivers/tff.c:640: if (!memcmp(&fs->win[BS_FilSysType32], "FAT32", 5) && !(fs->win[BPB_ExtFlags] & 0x80))
                           4548 ;	genPlus
                           4549 ;     genPlusIncr
   1346 74 20              4550 	mov	a,#0x20
                           4551 ;	Peephole 236.a	used r6 instead of ar6
   1348 2E                 4552 	add	a,r6
   1349 FB                 4553 	mov	r3,a
                           4554 ;	Peephole 181	changed mov to clr
   134A E4                 4555 	clr	a
                           4556 ;	Peephole 236.b	used r7 instead of ar7
   134B 3F                 4557 	addc	a,r7
   134C FC                 4558 	mov	r4,a
   134D 8A 05              4559 	mov	ar5,r2
                           4560 ;	genPlus
                           4561 ;     genPlusIncr
   134F 74 52              4562 	mov	a,#0x52
                           4563 ;	Peephole 236.a	used r3 instead of ar3
   1351 2B                 4564 	add	a,r3
   1352 FB                 4565 	mov	r3,a
                           4566 ;	Peephole 181	changed mov to clr
   1353 E4                 4567 	clr	a
                           4568 ;	Peephole 236.b	used r4 instead of ar4
   1354 3C                 4569 	addc	a,r4
   1355 FC                 4570 	mov	r4,a
                           4571 ;	genIpush
   1356 C0 02              4572 	push	ar2
   1358 C0 06              4573 	push	ar6
   135A C0 07              4574 	push	ar7
   135C 74 05              4575 	mov	a,#0x05
   135E C0 E0              4576 	push	acc
                           4577 ;	Peephole 181	changed mov to clr
   1360 E4                 4578 	clr	a
   1361 C0 E0              4579 	push	acc
                           4580 ;	genIpush
   1363 74r04              4581 	mov	a,#__str_1
   1365 C0 E0              4582 	push	acc
   1367 74s00              4583 	mov	a,#(__str_1 >> 8)
   1369 C0 E0              4584 	push	acc
   136B 74 80              4585 	mov	a,#0x80
   136D C0 E0              4586 	push	acc
                           4587 ;	genCall
   136F 8B 82              4588 	mov	dpl,r3
   1371 8C 83              4589 	mov	dph,r4
   1373 8D F0              4590 	mov	b,r5
   1375 12s00r00           4591 	lcall	_memcmp
   1378 AB 82              4592 	mov	r3,dpl
   137A AC 83              4593 	mov	r4,dph
   137C E5 81              4594 	mov	a,sp
   137E 24 FB              4595 	add	a,#0xfb
   1380 F5 81              4596 	mov	sp,a
   1382 D0 07              4597 	pop	ar7
   1384 D0 06              4598 	pop	ar6
   1386 D0 02              4599 	pop	ar2
                           4600 ;	genIfx
   1388 EB                 4601 	mov	a,r3
   1389 4C                 4602 	orl	a,r4
                           4603 ;	genIfxJump
                           4604 ;	Peephole 108.b	removed ljmp by inverse jump logic
   138A 70 20              4605 	jnz	00108$
                           4606 ;	Peephole 300	removed redundant label 00120$
                           4607 ;	genPlus
                           4608 ;     genPlusIncr
   138C 74 20              4609 	mov	a,#0x20
                           4610 ;	Peephole 236.a	used r6 instead of ar6
   138E 2E                 4611 	add	a,r6
   138F FE                 4612 	mov	r6,a
                           4613 ;	Peephole 181	changed mov to clr
   1390 E4                 4614 	clr	a
                           4615 ;	Peephole 236.b	used r7 instead of ar7
   1391 3F                 4616 	addc	a,r7
   1392 FF                 4617 	mov	r7,a
                           4618 ;	genPlus
                           4619 ;     genPlusIncr
   1393 74 28              4620 	mov	a,#0x28
                           4621 ;	Peephole 236.a	used r6 instead of ar6
   1395 2E                 4622 	add	a,r6
   1396 FE                 4623 	mov	r6,a
                           4624 ;	Peephole 181	changed mov to clr
   1397 E4                 4625 	clr	a
                           4626 ;	Peephole 236.b	used r7 instead of ar7
   1398 3F                 4627 	addc	a,r7
   1399 FF                 4628 	mov	r7,a
                           4629 ;	genPointerGet
                           4630 ;	genGenPointerGet
   139A 8E 82              4631 	mov	dpl,r6
   139C 8F 83              4632 	mov	dph,r7
   139E 8A F0              4633 	mov	b,r2
   13A0 12s00r00           4634 	lcall	__gptrget
                           4635 ;	genAnd
   13A3 FE                 4636 	mov	r6,a
                           4637 ;	Peephole 105	removed redundant mov
                           4638 ;	genIfxJump
                           4639 ;	Peephole 108.e	removed ljmp by inverse jump logic
   13A4 20 E7 05           4640 	jb	acc.7,00108$
                           4641 ;	Peephole 300	removed redundant label 00121$
                           4642 ;	FatDrivers/tff.c:641: return 0;
                           4643 ;	genRet
   13A7 75 82 00           4644 	mov	dpl,#0x00
                           4645 ;	Peephole 112.b	changed ljmp to sjmp
   13AA 80 03              4646 	sjmp	00110$
   13AC                    4647 00108$:
                           4648 ;	FatDrivers/tff.c:643: return 1;
                           4649 ;	genRet
   13AC 75 82 01           4650 	mov	dpl,#0x01
   13AF                    4651 00110$:
   13AF 85*00 81           4652 	mov	sp,_bp
   13B2 D0*00              4653 	pop	_bp
   13B4 22                 4654 	ret
                           4655 ;------------------------------------------------------------
                           4656 ;Allocation info for local variables in function 'auto_mount'
                           4657 ;------------------------------------------------------------
                           4658 ;chk_wp                    Allocated to stack - offset -3
                           4659 ;path                      Allocated to stack - offset 1
                           4660 ;fmt                       Allocated to stack - offset 4
                           4661 ;stat                      Allocated to registers r2 
                           4662 ;bootsect                  Allocated to stack - offset 5
                           4663 ;fatsize                   Allocated to stack - offset 9
                           4664 ;totalsect                 Allocated to stack - offset 13
                           4665 ;maxclust                  Allocated to stack - offset 17
                           4666 ;p                         Allocated to registers r5 r6 r7 
                           4667 ;fs                        Allocated to stack - offset 21
                           4668 ;sloc0                     Allocated to stack - offset 24
                           4669 ;sloc1                     Allocated to stack - offset 25
                           4670 ;sloc2                     Allocated to stack - offset 28
                           4671 ;sloc3                     Allocated to stack - offset 32
                           4672 ;sloc4                     Allocated to stack - offset 35
                           4673 ;sloc5                     Allocated to stack - offset 38
                           4674 ;sloc6                     Allocated to stack - offset 42
                           4675 ;------------------------------------------------------------
                           4676 ;	FatDrivers/tff.c:654: FRESULT auto_mount (		/* FR_OK(0): successful, !=0: any error occured */
                           4677 ;	-----------------------------------------
                           4678 ;	 function auto_mount
                           4679 ;	-----------------------------------------
   13B5                    4680 _auto_mount:
   13B5 C0*00              4681 	push	_bp
   13B7 85 81*00           4682 	mov	_bp,sp
                           4683 ;     genReceive
   13BA C0 82              4684 	push	dpl
   13BC C0 83              4685 	push	dph
   13BE C0 F0              4686 	push	b
   13C0 E5 81              4687 	mov	a,sp
   13C2 24 2D              4688 	add	a,#0x2d
   13C4 F5 81              4689 	mov	sp,a
                           4690 ;	FatDrivers/tff.c:662: const char *p = *path;
                           4691 ;	genPointerGet
                           4692 ;	genGenPointerGet
   13C6 A8*00              4693 	mov	r0,_bp
   13C8 08                 4694 	inc	r0
   13C9 86 82              4695 	mov	dpl,@r0
   13CB 08                 4696 	inc	r0
   13CC 86 83              4697 	mov	dph,@r0
   13CE 08                 4698 	inc	r0
   13CF 86 F0              4699 	mov	b,@r0
   13D1 12s00r00           4700 	lcall	__gptrget
   13D4 FD                 4701 	mov	r5,a
   13D5 A3                 4702 	inc	dptr
   13D6 12s00r00           4703 	lcall	__gptrget
   13D9 FE                 4704 	mov	r6,a
   13DA A3                 4705 	inc	dptr
   13DB 12s00r00           4706 	lcall	__gptrget
   13DE FF                 4707 	mov	r7,a
                           4708 ;	genAssign
                           4709 ;	FatDrivers/tff.c:663: FATFS *fs = FatFs;
                           4710 ;	genAssign
   13DF E5*00              4711 	mov	a,_bp
   13E1 24 15              4712 	add	a,#0x15
   13E3 F8                 4713 	mov	r0,a
   13E4 A6*00              4714 	mov	@r0,_FatFs
   13E6 08                 4715 	inc	r0
   13E7 A6*01              4716 	mov	@r0,(_FatFs + 1)
   13E9 08                 4717 	inc	r0
   13EA A6*02              4718 	mov	@r0,(_FatFs + 2)
                           4719 ;	FatDrivers/tff.c:667: while (*p == ' ') p++;	/* Strip leading spaces */
                           4720 ;	genAssign
   13EC 8D 02              4721 	mov	ar2,r5
   13EE 8E 03              4722 	mov	ar3,r6
   13F0 8F 04              4723 	mov	ar4,r7
   13F2                    4724 00101$:
                           4725 ;	genPointerGet
                           4726 ;	genGenPointerGet
   13F2 8A 82              4727 	mov	dpl,r2
   13F4 8B 83              4728 	mov	dph,r3
   13F6 8C F0              4729 	mov	b,r4
   13F8 E5*00              4730 	mov	a,_bp
   13FA 24 18              4731 	add	a,#0x18
   13FC F8                 4732 	mov	r0,a
   13FD 12s00r00           4733 	lcall	__gptrget
   1400 F6                 4734 	mov	@r0,a
                           4735 ;	genCmpEq
   1401 E5*00              4736 	mov	a,_bp
   1403 24 18              4737 	add	a,#0x18
   1405 F8                 4738 	mov	r0,a
                           4739 ;	gencjneshort
                           4740 ;	Peephole 112.b	changed ljmp to sjmp
                           4741 ;	Peephole 198.b	optimized misc jump sequence
   1406 B6 20 07           4742 	cjne	@r0,#0x20,00149$
                           4743 ;	Peephole 200.b	removed redundant sjmp
                           4744 ;	Peephole 300	removed redundant label 00150$
                           4745 ;	Peephole 300	removed redundant label 00151$
                           4746 ;	genPlus
                           4747 ;     genPlusIncr
                           4748 ;	tail increment optimized (range 4)
   1409 0A                 4749 	inc	r2
   140A BA 00 E5           4750 	cjne	r2,#0x00,00101$
   140D 0B                 4751 	inc	r3
                           4752 ;	Peephole 112.b	changed ljmp to sjmp
   140E 80 E2              4753 	sjmp	00101$
   1410                    4754 00149$:
                           4755 ;	genAssign
   1410 8A 05              4756 	mov	ar5,r2
   1412 8B 06              4757 	mov	ar6,r3
   1414 8C 07              4758 	mov	ar7,r4
                           4759 ;	FatDrivers/tff.c:668: if (*p == '/') p++;		/* Strip heading slash */
                           4760 ;	genCmpEq
   1416 E5*00              4761 	mov	a,_bp
   1418 24 18              4762 	add	a,#0x18
   141A F8                 4763 	mov	r0,a
                           4764 ;	gencjneshort
                           4765 ;	Peephole 112.b	changed ljmp to sjmp
                           4766 ;	Peephole 198.b	optimized misc jump sequence
   141B B6 2F 09           4767 	cjne	@r0,#0x2F,00105$
                           4768 ;	Peephole 200.b	removed redundant sjmp
                           4769 ;	Peephole 300	removed redundant label 00152$
                           4770 ;	Peephole 300	removed redundant label 00153$
                           4771 ;	genPlus
                           4772 ;     genPlusIncr
   141E 74 01              4773 	mov	a,#0x01
                           4774 ;	Peephole 236.a	used r2 instead of ar2
   1420 2A                 4775 	add	a,r2
   1421 FD                 4776 	mov	r5,a
                           4777 ;	Peephole 181	changed mov to clr
   1422 E4                 4778 	clr	a
                           4779 ;	Peephole 236.b	used r3 instead of ar3
   1423 3B                 4780 	addc	a,r3
   1424 FE                 4781 	mov	r6,a
   1425 8C 07              4782 	mov	ar7,r4
   1427                    4783 00105$:
                           4784 ;	FatDrivers/tff.c:669: *path = p;				/* Return pointer to the path name */
                           4785 ;	genPointerSet
                           4786 ;	genGenPointerSet
   1427 A8*00              4787 	mov	r0,_bp
   1429 08                 4788 	inc	r0
   142A 86 82              4789 	mov	dpl,@r0
   142C 08                 4790 	inc	r0
   142D 86 83              4791 	mov	dph,@r0
   142F 08                 4792 	inc	r0
   1430 86 F0              4793 	mov	b,@r0
   1432 ED                 4794 	mov	a,r5
   1433 12s00r00           4795 	lcall	__gptrput
   1436 A3                 4796 	inc	dptr
   1437 EE                 4797 	mov	a,r6
   1438 12s00r00           4798 	lcall	__gptrput
   143B A3                 4799 	inc	dptr
   143C EF                 4800 	mov	a,r7
   143D 12s00r00           4801 	lcall	__gptrput
                           4802 ;	FatDrivers/tff.c:672: if (!fs) return FR_NOT_ENABLED;
                           4803 ;	genIfx
   1440 E5*00              4804 	mov	a,_bp
   1442 24 15              4805 	add	a,#0x15
   1444 F8                 4806 	mov	r0,a
   1445 E6                 4807 	mov	a,@r0
   1446 08                 4808 	inc	r0
   1447 46                 4809 	orl	a,@r0
   1448 08                 4810 	inc	r0
   1449 46                 4811 	orl	a,@r0
                           4812 ;	genIfxJump
                           4813 ;	Peephole 108.b	removed ljmp by inverse jump logic
   144A 70 06              4814 	jnz	00107$
                           4815 ;	Peephole 300	removed redundant label 00154$
                           4816 ;	genRet
   144C 75 82 0A           4817 	mov	dpl,#0x0A
   144F 02s1Br7E           4818 	ljmp	00132$
   1452                    4819 00107$:
                           4820 ;	FatDrivers/tff.c:675: if (fs->fs_type) {
                           4821 ;	genPlus
   1452 E5*00              4822 	mov	a,_bp
   1454 24 15              4823 	add	a,#0x15
   1456 F8                 4824 	mov	r0,a
                           4825 ;     genPlusIncr
   1457 74 1C              4826 	mov	a,#0x1C
   1459 26                 4827 	add	a,@r0
   145A FA                 4828 	mov	r2,a
                           4829 ;	Peephole 181	changed mov to clr
   145B E4                 4830 	clr	a
   145C 08                 4831 	inc	r0
   145D 36                 4832 	addc	a,@r0
   145E FB                 4833 	mov	r3,a
   145F 08                 4834 	inc	r0
   1460 86 04              4835 	mov	ar4,@r0
                           4836 ;	genPointerGet
                           4837 ;	genGenPointerGet
   1462 8A 82              4838 	mov	dpl,r2
   1464 8B 83              4839 	mov	dph,r3
   1466 8C F0              4840 	mov	b,r4
   1468 12s00r00           4841 	lcall	__gptrget
                           4842 ;	genIfxJump
                           4843 ;	Peephole 108.c	removed ljmp by inverse jump logic
   146B 60 12              4844 	jz	00111$
                           4845 ;	Peephole 300	removed redundant label 00155$
                           4846 ;	FatDrivers/tff.c:676: stat = disk_status(0);
                           4847 ;	genCall
   146D 75 82 00           4848 	mov	dpl,#0x00
   1470 12s00r00           4849 	lcall	_disk_status
                           4850 ;	genAssign
                           4851 ;	FatDrivers/tff.c:677: if (!(stat & STA_NOINIT)) {				/* If the physical drive is kept initialized */
                           4852 ;	genAnd
                           4853 ;	peephole 177.g	optimized mov sequence
   1473 E5 82              4854 	mov	a,dpl
   1475 FA                 4855 	mov	r2,a
                           4856 ;	genIfxJump
                           4857 ;	Peephole 108.e	removed ljmp by inverse jump logic
   1476 20 E0 06           4858 	jb	acc.0,00111$
                           4859 ;	Peephole 300	removed redundant label 00156$
                           4860 ;	FatDrivers/tff.c:682: return FR_OK;						/* The file system object is valid */
                           4861 ;	genRet
   1479 75 82 00           4862 	mov	dpl,#0x00
   147C 02s1Br7E           4863 	ljmp	00132$
   147F                    4864 00111$:
                           4865 ;	FatDrivers/tff.c:688: memset(fs, 0, sizeof(FATFS));		/* Clean-up the file system object */
                           4866 ;	genIpush
   147F 74 20              4867 	mov	a,#0x20
   1481 C0 E0              4868 	push	acc
   1483 74 02              4869 	mov	a,#0x02
   1485 C0 E0              4870 	push	acc
                           4871 ;	genIpush
                           4872 ;	Peephole 181	changed mov to clr
   1487 E4                 4873 	clr	a
   1488 C0 E0              4874 	push	acc
                           4875 ;	genCall
   148A E5*00              4876 	mov	a,_bp
   148C 24 15              4877 	add	a,#0x15
   148E F8                 4878 	mov	r0,a
   148F 86 82              4879 	mov	dpl,@r0
   1491 08                 4880 	inc	r0
   1492 86 83              4881 	mov	dph,@r0
   1494 08                 4882 	inc	r0
   1495 86 F0              4883 	mov	b,@r0
   1497 12s00r00           4884 	lcall	_memset
   149A 15 81              4885 	dec	sp
   149C 15 81              4886 	dec	sp
   149E 15 81              4887 	dec	sp
                           4888 ;	FatDrivers/tff.c:689: stat = disk_initialize(0);			/* Initialize low level disk I/O layer */
                           4889 ;	genCall
   14A0 75 82 00           4890 	mov	dpl,#0x00
   14A3 12s00r00           4891 	lcall	_disk_initialize
   14A6 AB 82              4892 	mov	r3,dpl
                           4893 ;	genAssign
   14A8 8B 02              4894 	mov	ar2,r3
                           4895 ;	FatDrivers/tff.c:690: if (stat & STA_NOINIT)				/* Check if the drive is ready */
                           4896 ;	genAnd
   14AA EA                 4897 	mov	a,r2
                           4898 ;	genIfxJump
                           4899 ;	Peephole 108.d	removed ljmp by inverse jump logic
   14AB 30 E0 06           4900 	jnb	acc.0,00113$
                           4901 ;	Peephole 300	removed redundant label 00157$
                           4902 ;	FatDrivers/tff.c:691: return FR_NOT_READY;
                           4903 ;	genRet
   14AE 75 82 01           4904 	mov	dpl,#0x01
   14B1 02s1Br7E           4905 	ljmp	00132$
   14B4                    4906 00113$:
                           4907 ;	FatDrivers/tff.c:698: fmt = check_fs(bootsect = 0);		/* Check sector 0 as an SFD format */
                           4908 ;	genAssign
   14B4 E5*00              4909 	mov	a,_bp
   14B6 24 05              4910 	add	a,#0x05
   14B8 F8                 4911 	mov	r0,a
   14B9 E4                 4912 	clr	a
   14BA F6                 4913 	mov	@r0,a
   14BB 08                 4914 	inc	r0
   14BC F6                 4915 	mov	@r0,a
   14BD 08                 4916 	inc	r0
   14BE F6                 4917 	mov	@r0,a
   14BF 08                 4918 	inc	r0
   14C0 F6                 4919 	mov	@r0,a
                           4920 ;	genCall
   14C1 75 82 00           4921 	mov	dpl,#0x00
   14C4 12s12r71           4922 	lcall	_check_fs
   14C7 AA 82              4923 	mov	r2,dpl
                           4924 ;	genAssign
   14C9 E5*00              4925 	mov	a,_bp
   14CB 24 04              4926 	add	a,#0x04
   14CD F8                 4927 	mov	r0,a
   14CE A6 02              4928 	mov	@r0,ar2
                           4929 ;	FatDrivers/tff.c:699: if (fmt == 1) {						/* Not a FAT boot record, it may be patitioned */
                           4930 ;	genCmpEq
   14D0 E5*00              4931 	mov	a,_bp
   14D2 24 04              4932 	add	a,#0x04
   14D4 F8                 4933 	mov	r0,a
                           4934 ;	gencjneshort
   14D5 B6 01 02           4935 	cjne	@r0,#0x01,00158$
   14D8 80 03              4936 	sjmp	00159$
   14DA                    4937 00158$:
   14DA 02s15r5C           4938 	ljmp	00117$
   14DD                    4939 00159$:
                           4940 ;	FatDrivers/tff.c:701: if (fs->win[MBR_Table+4]) {					/* Is the 1st partition existing? */
                           4941 ;	genIpush
                           4942 ;	genPlus
   14DD E5*00              4943 	mov	a,_bp
   14DF 24 15              4944 	add	a,#0x15
   14E1 F8                 4945 	mov	r0,a
                           4946 ;     genPlusIncr
   14E2 74 20              4947 	mov	a,#0x20
   14E4 26                 4948 	add	a,@r0
   14E5 FB                 4949 	mov	r3,a
                           4950 ;	Peephole 181	changed mov to clr
   14E6 E4                 4951 	clr	a
   14E7 08                 4952 	inc	r0
   14E8 36                 4953 	addc	a,@r0
   14E9 FC                 4954 	mov	r4,a
   14EA 08                 4955 	inc	r0
   14EB 86 02              4956 	mov	ar2,@r0
                           4957 ;	genPlus
                           4958 ;     genPlusIncr
   14ED 74 C2              4959 	mov	a,#0xC2
                           4960 ;	Peephole 236.a	used r3 instead of ar3
   14EF 2B                 4961 	add	a,r3
   14F0 FB                 4962 	mov	r3,a
   14F1 74 01              4963 	mov	a,#0x01
                           4964 ;	Peephole 236.b	used r4 instead of ar4
   14F3 3C                 4965 	addc	a,r4
   14F4 FC                 4966 	mov	r4,a
                           4967 ;	genPointerGet
                           4968 ;	genGenPointerGet
   14F5 8B 82              4969 	mov	dpl,r3
   14F7 8C 83              4970 	mov	dph,r4
   14F9 8A F0              4971 	mov	b,r2
   14FB 12s00r00           4972 	lcall	__gptrget
                           4973 ;	genIpop
                           4974 ;	genIfx
                           4975 ;	genIfxJump
                           4976 ;	Peephole 108.c	removed ljmp by inverse jump logic
   14FE 60 5C              4977 	jz	00117$
                           4978 ;	Peephole 300	removed redundant label 00160$
                           4979 ;	FatDrivers/tff.c:702: bootsect = LD_DWORD(&fs->win[MBR_Table+8]);	/* Partition offset in LBA */
                           4980 ;	genPlus
   1500 E5*00              4981 	mov	a,_bp
   1502 24 15              4982 	add	a,#0x15
   1504 F8                 4983 	mov	r0,a
                           4984 ;     genPlusIncr
   1505 74 20              4985 	mov	a,#0x20
   1507 26                 4986 	add	a,@r0
   1508 FB                 4987 	mov	r3,a
                           4988 ;	Peephole 181	changed mov to clr
   1509 E4                 4989 	clr	a
   150A 08                 4990 	inc	r0
   150B 36                 4991 	addc	a,@r0
   150C FC                 4992 	mov	r4,a
   150D 08                 4993 	inc	r0
   150E 86 05              4994 	mov	ar5,@r0
                           4995 ;	genPlus
                           4996 ;     genPlusIncr
   1510 74 C6              4997 	mov	a,#0xC6
                           4998 ;	Peephole 236.a	used r3 instead of ar3
   1512 2B                 4999 	add	a,r3
   1513 FB                 5000 	mov	r3,a
   1514 74 01              5001 	mov	a,#0x01
                           5002 ;	Peephole 236.b	used r4 instead of ar4
   1516 3C                 5003 	addc	a,r4
   1517 FC                 5004 	mov	r4,a
                           5005 ;	genPointerGet
                           5006 ;	genGenPointerGet
   1518 8B 82              5007 	mov	dpl,r3
   151A 8C 83              5008 	mov	dph,r4
   151C 8D F0              5009 	mov	b,r5
   151E 12s00r00           5010 	lcall	__gptrget
   1521 FB                 5011 	mov	r3,a
   1522 A3                 5012 	inc	dptr
   1523 12s00r00           5013 	lcall	__gptrget
   1526 FC                 5014 	mov	r4,a
   1527 A3                 5015 	inc	dptr
   1528 12s00r00           5016 	lcall	__gptrget
   152B FD                 5017 	mov	r5,a
   152C A3                 5018 	inc	dptr
   152D 12s00r00           5019 	lcall	__gptrget
   1530 FE                 5020 	mov	r6,a
                           5021 ;	genAssign
   1531 E5*00              5022 	mov	a,_bp
   1533 24 05              5023 	add	a,#0x05
   1535 F8                 5024 	mov	r0,a
   1536 A6 03              5025 	mov	@r0,ar3
   1538 08                 5026 	inc	r0
   1539 A6 04              5027 	mov	@r0,ar4
   153B 08                 5028 	inc	r0
   153C A6 05              5029 	mov	@r0,ar5
   153E 08                 5030 	inc	r0
   153F A6 06              5031 	mov	@r0,ar6
                           5032 ;	FatDrivers/tff.c:703: fmt = check_fs(bootsect);				/* Check the partition */
                           5033 ;	genCall
   1541 E5*00              5034 	mov	a,_bp
   1543 24 05              5035 	add	a,#0x05
   1545 F8                 5036 	mov	r0,a
   1546 86 82              5037 	mov	dpl,@r0
   1548 08                 5038 	inc	r0
   1549 86 83              5039 	mov	dph,@r0
   154B 08                 5040 	inc	r0
   154C 86 F0              5041 	mov	b,@r0
   154E 08                 5042 	inc	r0
   154F E6                 5043 	mov	a,@r0
   1550 12s12r71           5044 	lcall	_check_fs
   1553 AB 82              5045 	mov	r3,dpl
                           5046 ;	genAssign
   1555 E5*00              5047 	mov	a,_bp
   1557 24 04              5048 	add	a,#0x04
   1559 F8                 5049 	mov	r0,a
   155A A6 03              5050 	mov	@r0,ar3
   155C                    5051 00117$:
                           5052 ;	FatDrivers/tff.c:706: if (fmt || LD_WORD(&fs->win[BPB_BytsPerSec]) != 512)	/* No valid FAT patition is found */
                           5053 ;	genIfx
   155C E5*00              5054 	mov	a,_bp
   155E 24 04              5055 	add	a,#0x04
   1560 F8                 5056 	mov	r0,a
   1561 E6                 5057 	mov	a,@r0
                           5058 ;	genIfxJump
                           5059 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1562 70 2E              5060 	jnz	00118$
                           5061 ;	Peephole 300	removed redundant label 00161$
                           5062 ;	genPlus
   1564 E5*00              5063 	mov	a,_bp
   1566 24 15              5064 	add	a,#0x15
   1568 F8                 5065 	mov	r0,a
                           5066 ;     genPlusIncr
   1569 74 20              5067 	mov	a,#0x20
   156B 26                 5068 	add	a,@r0
   156C FB                 5069 	mov	r3,a
                           5070 ;	Peephole 181	changed mov to clr
   156D E4                 5071 	clr	a
   156E 08                 5072 	inc	r0
   156F 36                 5073 	addc	a,@r0
   1570 FC                 5074 	mov	r4,a
   1571 08                 5075 	inc	r0
   1572 86 05              5076 	mov	ar5,@r0
                           5077 ;	genPlus
                           5078 ;     genPlusIncr
   1574 74 0B              5079 	mov	a,#0x0B
                           5080 ;	Peephole 236.a	used r3 instead of ar3
   1576 2B                 5081 	add	a,r3
   1577 FB                 5082 	mov	r3,a
                           5083 ;	Peephole 181	changed mov to clr
   1578 E4                 5084 	clr	a
                           5085 ;	Peephole 236.b	used r4 instead of ar4
   1579 3C                 5086 	addc	a,r4
   157A FC                 5087 	mov	r4,a
                           5088 ;	genPointerGet
                           5089 ;	genGenPointerGet
   157B 8B 82              5090 	mov	dpl,r3
   157D 8C 83              5091 	mov	dph,r4
   157F 8D F0              5092 	mov	b,r5
   1581 12s00r00           5093 	lcall	__gptrget
   1584 FB                 5094 	mov	r3,a
   1585 A3                 5095 	inc	dptr
   1586 12s00r00           5096 	lcall	__gptrget
   1589 FC                 5097 	mov	r4,a
                           5098 ;	genCmpEq
                           5099 ;	gencjneshort
   158A BB 00 05           5100 	cjne	r3,#0x00,00162$
   158D BC 02 02           5101 	cjne	r4,#0x02,00162$
                           5102 ;	Peephole 112.b	changed ljmp to sjmp
   1590 80 06              5103 	sjmp	00119$
   1592                    5104 00162$:
   1592                    5105 00118$:
                           5106 ;	FatDrivers/tff.c:707: return FR_NO_FILESYSTEM;
                           5107 ;	genRet
   1592 75 82 0B           5108 	mov	dpl,#0x0B
   1595 02s1Br7E           5109 	ljmp	00132$
   1598                    5110 00119$:
                           5111 ;	FatDrivers/tff.c:710: fatsize = LD_WORD(&fs->win[BPB_FATSz16]);			/* Number of sectors per FAT */
                           5112 ;	genPlus
   1598 E5*00              5113 	mov	a,_bp
   159A 24 15              5114 	add	a,#0x15
   159C F8                 5115 	mov	r0,a
                           5116 ;     genPlusIncr
   159D 74 20              5117 	mov	a,#0x20
   159F 26                 5118 	add	a,@r0
   15A0 FB                 5119 	mov	r3,a
                           5120 ;	Peephole 181	changed mov to clr
   15A1 E4                 5121 	clr	a
   15A2 08                 5122 	inc	r0
   15A3 36                 5123 	addc	a,@r0
   15A4 FC                 5124 	mov	r4,a
   15A5 08                 5125 	inc	r0
   15A6 86 05              5126 	mov	ar5,@r0
                           5127 ;	genPlus
                           5128 ;     genPlusIncr
   15A8 74 16              5129 	mov	a,#0x16
                           5130 ;	Peephole 236.a	used r3 instead of ar3
   15AA 2B                 5131 	add	a,r3
   15AB FB                 5132 	mov	r3,a
                           5133 ;	Peephole 181	changed mov to clr
   15AC E4                 5134 	clr	a
                           5135 ;	Peephole 236.b	used r4 instead of ar4
   15AD 3C                 5136 	addc	a,r4
   15AE FC                 5137 	mov	r4,a
                           5138 ;	genPointerGet
                           5139 ;	genGenPointerGet
   15AF 8B 82              5140 	mov	dpl,r3
   15B1 8C 83              5141 	mov	dph,r4
   15B3 8D F0              5142 	mov	b,r5
   15B5 12s00r00           5143 	lcall	__gptrget
   15B8 FB                 5144 	mov	r3,a
   15B9 A3                 5145 	inc	dptr
   15BA 12s00r00           5146 	lcall	__gptrget
   15BD FC                 5147 	mov	r4,a
                           5148 ;	genCast
   15BE E5*00              5149 	mov	a,_bp
   15C0 24 09              5150 	add	a,#0x09
   15C2 F8                 5151 	mov	r0,a
   15C3 A6 03              5152 	mov	@r0,ar3
   15C5 08                 5153 	inc	r0
   15C6 A6 04              5154 	mov	@r0,ar4
   15C8 08                 5155 	inc	r0
   15C9 76 00              5156 	mov	@r0,#0x00
   15CB 08                 5157 	inc	r0
   15CC 76 00              5158 	mov	@r0,#0x00
                           5159 ;	FatDrivers/tff.c:711: if (!fatsize) fatsize = LD_DWORD(&fs->win[BPB_FATSz32]);
                           5160 ;	genIfx
   15CE E5*00              5161 	mov	a,_bp
   15D0 24 09              5162 	add	a,#0x09
   15D2 F8                 5163 	mov	r0,a
   15D3 E6                 5164 	mov	a,@r0
   15D4 08                 5165 	inc	r0
   15D5 46                 5166 	orl	a,@r0
   15D6 08                 5167 	inc	r0
   15D7 46                 5168 	orl	a,@r0
   15D8 08                 5169 	inc	r0
   15D9 46                 5170 	orl	a,@r0
                           5171 ;	genIfxJump
                           5172 ;	Peephole 108.b	removed ljmp by inverse jump logic
   15DA 70 40              5173 	jnz	00122$
                           5174 ;	Peephole 300	removed redundant label 00163$
                           5175 ;	genPlus
   15DC E5*00              5176 	mov	a,_bp
   15DE 24 15              5177 	add	a,#0x15
   15E0 F8                 5178 	mov	r0,a
                           5179 ;     genPlusIncr
   15E1 74 20              5180 	mov	a,#0x20
   15E3 26                 5181 	add	a,@r0
   15E4 FA                 5182 	mov	r2,a
                           5183 ;	Peephole 181	changed mov to clr
   15E5 E4                 5184 	clr	a
   15E6 08                 5185 	inc	r0
   15E7 36                 5186 	addc	a,@r0
   15E8 FB                 5187 	mov	r3,a
   15E9 08                 5188 	inc	r0
   15EA 86 04              5189 	mov	ar4,@r0
                           5190 ;	genPlus
                           5191 ;     genPlusIncr
   15EC 74 24              5192 	mov	a,#0x24
                           5193 ;	Peephole 236.a	used r2 instead of ar2
   15EE 2A                 5194 	add	a,r2
   15EF FA                 5195 	mov	r2,a
                           5196 ;	Peephole 181	changed mov to clr
   15F0 E4                 5197 	clr	a
                           5198 ;	Peephole 236.b	used r3 instead of ar3
   15F1 3B                 5199 	addc	a,r3
   15F2 FB                 5200 	mov	r3,a
                           5201 ;	genPointerGet
                           5202 ;	genGenPointerGet
   15F3 8A 82              5203 	mov	dpl,r2
   15F5 8B 83              5204 	mov	dph,r3
   15F7 8C F0              5205 	mov	b,r4
   15F9 12s00r00           5206 	lcall	__gptrget
   15FC FA                 5207 	mov	r2,a
   15FD A3                 5208 	inc	dptr
   15FE 12s00r00           5209 	lcall	__gptrget
   1601 FB                 5210 	mov	r3,a
   1602 A3                 5211 	inc	dptr
   1603 12s00r00           5212 	lcall	__gptrget
   1606 FC                 5213 	mov	r4,a
   1607 A3                 5214 	inc	dptr
   1608 12s00r00           5215 	lcall	__gptrget
   160B FD                 5216 	mov	r5,a
                           5217 ;	genAssign
   160C E5*00              5218 	mov	a,_bp
   160E 24 09              5219 	add	a,#0x09
   1610 F8                 5220 	mov	r0,a
   1611 A6 02              5221 	mov	@r0,ar2
   1613 08                 5222 	inc	r0
   1614 A6 03              5223 	mov	@r0,ar3
   1616 08                 5224 	inc	r0
   1617 A6 04              5225 	mov	@r0,ar4
   1619 08                 5226 	inc	r0
   161A A6 05              5227 	mov	@r0,ar5
   161C                    5228 00122$:
                           5229 ;	FatDrivers/tff.c:712: fs->sects_fat = (CLUST)fatsize;
                           5230 ;	genPlus
   161C E5*00              5231 	mov	a,_bp
   161E 24 15              5232 	add	a,#0x15
   1620 F8                 5233 	mov	r0,a
                           5234 ;     genPlusIncr
   1621 74 14              5235 	mov	a,#0x14
   1623 26                 5236 	add	a,@r0
   1624 FF                 5237 	mov	r7,a
                           5238 ;	Peephole 181	changed mov to clr
   1625 E4                 5239 	clr	a
   1626 08                 5240 	inc	r0
   1627 36                 5241 	addc	a,@r0
   1628 FB                 5242 	mov	r3,a
   1629 08                 5243 	inc	r0
   162A 86 04              5244 	mov	ar4,@r0
                           5245 ;	genPointerSet
                           5246 ;	genGenPointerSet
   162C 8F 82              5247 	mov	dpl,r7
   162E 8B 83              5248 	mov	dph,r3
   1630 8C F0              5249 	mov	b,r4
   1632 E5*00              5250 	mov	a,_bp
   1634 24 09              5251 	add	a,#0x09
   1636 F8                 5252 	mov	r0,a
   1637 E6                 5253 	mov	a,@r0
   1638 12s00r00           5254 	lcall	__gptrput
   163B A3                 5255 	inc	dptr
   163C 08                 5256 	inc	r0
   163D E6                 5257 	mov	a,@r0
   163E 12s00r00           5258 	lcall	__gptrput
   1641 A3                 5259 	inc	dptr
   1642 08                 5260 	inc	r0
   1643 E6                 5261 	mov	a,@r0
   1644 12s00r00           5262 	lcall	__gptrput
   1647 A3                 5263 	inc	dptr
   1648 08                 5264 	inc	r0
   1649 E6                 5265 	mov	a,@r0
   164A 12s00r00           5266 	lcall	__gptrput
                           5267 ;	FatDrivers/tff.c:713: fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
                           5268 ;	genPlus
   164D E5*00              5269 	mov	a,_bp
   164F 24 15              5270 	add	a,#0x15
   1651 F8                 5271 	mov	r0,a
                           5272 ;     genPlusIncr
   1652 74 1E              5273 	mov	a,#0x1E
   1654 26                 5274 	add	a,@r0
   1655 FA                 5275 	mov	r2,a
                           5276 ;	Peephole 181	changed mov to clr
   1656 E4                 5277 	clr	a
   1657 08                 5278 	inc	r0
   1658 36                 5279 	addc	a,@r0
   1659 FE                 5280 	mov	r6,a
   165A 08                 5281 	inc	r0
   165B 86 07              5282 	mov	ar7,@r0
                           5283 ;	genPlus
   165D E5*00              5284 	mov	a,_bp
   165F 24 15              5285 	add	a,#0x15
   1661 F8                 5286 	mov	r0,a
   1662 E5*00              5287 	mov	a,_bp
   1664 24 19              5288 	add	a,#0x19
   1666 F9                 5289 	mov	r1,a
                           5290 ;     genPlusIncr
   1667 74 20              5291 	mov	a,#0x20
   1669 26                 5292 	add	a,@r0
   166A F7                 5293 	mov	@r1,a
                           5294 ;	Peephole 181	changed mov to clr
   166B E4                 5295 	clr	a
   166C 08                 5296 	inc	r0
   166D 36                 5297 	addc	a,@r0
   166E 09                 5298 	inc	r1
   166F F7                 5299 	mov	@r1,a
   1670 08                 5300 	inc	r0
   1671 09                 5301 	inc	r1
   1672 E6                 5302 	mov	a,@r0
   1673 F7                 5303 	mov	@r1,a
                           5304 ;	genPlus
   1674 E5*00              5305 	mov	a,_bp
   1676 24 19              5306 	add	a,#0x19
   1678 F8                 5307 	mov	r0,a
                           5308 ;     genPlusIncr
   1679 74 10              5309 	mov	a,#0x10
   167B 26                 5310 	add	a,@r0
   167C FC                 5311 	mov	r4,a
                           5312 ;	Peephole 181	changed mov to clr
   167D E4                 5313 	clr	a
   167E 08                 5314 	inc	r0
   167F 36                 5315 	addc	a,@r0
   1680 FD                 5316 	mov	r5,a
   1681 08                 5317 	inc	r0
   1682 86 03              5318 	mov	ar3,@r0
                           5319 ;	genPointerGet
                           5320 ;	genGenPointerGet
   1684 8C 82              5321 	mov	dpl,r4
   1686 8D 83              5322 	mov	dph,r5
   1688 8B F0              5323 	mov	b,r3
   168A 12s00r00           5324 	lcall	__gptrget
                           5325 ;	genPointerSet
                           5326 ;	genGenPointerSet
   168D FC                 5327 	mov	r4,a
   168E 8A 82              5328 	mov	dpl,r2
   1690 8E 83              5329 	mov	dph,r6
   1692 8F F0              5330 	mov	b,r7
                           5331 ;	Peephole 191	removed redundant mov
   1694 12s00r00           5332 	lcall	__gptrput
                           5333 ;	FatDrivers/tff.c:714: fatsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
                           5334 ;	genCast
   1697 7B 00              5335 	mov	r3,#0x00
   1699 7D 00              5336 	mov	r5,#0x00
   169B 7E 00              5337 	mov	r6,#0x00
                           5338 ;	genIpush
   169D C0 04              5339 	push	ar4
   169F C0 03              5340 	push	ar3
   16A1 C0 05              5341 	push	ar5
   16A3 C0 06              5342 	push	ar6
                           5343 ;	genCall
   16A5 E5*00              5344 	mov	a,_bp
   16A7 24 09              5345 	add	a,#0x09
   16A9 F8                 5346 	mov	r0,a
   16AA 86 82              5347 	mov	dpl,@r0
   16AC 08                 5348 	inc	r0
   16AD 86 83              5349 	mov	dph,@r0
   16AF 08                 5350 	inc	r0
   16B0 86 F0              5351 	mov	b,@r0
   16B2 08                 5352 	inc	r0
   16B3 E6                 5353 	mov	a,@r0
   16B4 12s00r00           5354 	lcall	__mullong
   16B7 AB 82              5355 	mov	r3,dpl
   16B9 AC 83              5356 	mov	r4,dph
   16BB AD F0              5357 	mov	r5,b
   16BD FE                 5358 	mov	r6,a
   16BE E5 81              5359 	mov	a,sp
   16C0 24 FC              5360 	add	a,#0xfc
   16C2 F5 81              5361 	mov	sp,a
                           5362 ;	genAssign
   16C4 E5*00              5363 	mov	a,_bp
   16C6 24 09              5364 	add	a,#0x09
   16C8 F8                 5365 	mov	r0,a
   16C9 A6 03              5366 	mov	@r0,ar3
   16CB 08                 5367 	inc	r0
   16CC A6 04              5368 	mov	@r0,ar4
   16CE 08                 5369 	inc	r0
   16CF A6 05              5370 	mov	@r0,ar5
   16D1 08                 5371 	inc	r0
   16D2 A6 06              5372 	mov	@r0,ar6
                           5373 ;	FatDrivers/tff.c:715: fs->fatbase = bootsect + LD_WORD(&fs->win[BPB_RsvdSecCnt]);	/* FAT start sector (lba) */
                           5374 ;	genPlus
   16D4 E5*00              5375 	mov	a,_bp
   16D6 24 15              5376 	add	a,#0x15
   16D8 F8                 5377 	mov	r0,a
   16D9 E5*00              5378 	mov	a,_bp
   16DB 24 1C              5379 	add	a,#0x1c
   16DD F9                 5380 	mov	r1,a
                           5381 ;     genPlusIncr
   16DE 74 08              5382 	mov	a,#0x08
   16E0 26                 5383 	add	a,@r0
   16E1 F7                 5384 	mov	@r1,a
                           5385 ;	Peephole 181	changed mov to clr
   16E2 E4                 5386 	clr	a
   16E3 08                 5387 	inc	r0
   16E4 36                 5388 	addc	a,@r0
   16E5 09                 5389 	inc	r1
   16E6 F7                 5390 	mov	@r1,a
   16E7 08                 5391 	inc	r0
   16E8 09                 5392 	inc	r1
   16E9 E6                 5393 	mov	a,@r0
   16EA F7                 5394 	mov	@r1,a
                           5395 ;	genPlus
   16EB E5*00              5396 	mov	a,_bp
   16ED 24 19              5397 	add	a,#0x19
   16EF F8                 5398 	mov	r0,a
                           5399 ;     genPlusIncr
   16F0 74 0E              5400 	mov	a,#0x0E
   16F2 26                 5401 	add	a,@r0
   16F3 FE                 5402 	mov	r6,a
                           5403 ;	Peephole 181	changed mov to clr
   16F4 E4                 5404 	clr	a
   16F5 08                 5405 	inc	r0
   16F6 36                 5406 	addc	a,@r0
   16F7 FF                 5407 	mov	r7,a
   16F8 08                 5408 	inc	r0
   16F9 86 03              5409 	mov	ar3,@r0
                           5410 ;	genPointerGet
                           5411 ;	genGenPointerGet
   16FB 8E 82              5412 	mov	dpl,r6
   16FD 8F 83              5413 	mov	dph,r7
   16FF 8B F0              5414 	mov	b,r3
   1701 12s00r00           5415 	lcall	__gptrget
   1704 FE                 5416 	mov	r6,a
   1705 A3                 5417 	inc	dptr
   1706 12s00r00           5418 	lcall	__gptrget
   1709 FF                 5419 	mov	r7,a
                           5420 ;	genCast
                           5421 ;	genPlus
                           5422 ;	Peephole 3.c	changed mov to clr
   170A E4                 5423 	clr	a
   170B FB                 5424 	mov	r3,a
   170C FC                 5425 	mov	r4,a
   170D E5*00              5426 	mov	a,_bp
   170F 24 05              5427 	add	a,#0x05
   1711 F8                 5428 	mov	r0,a
                           5429 ;	Peephole 236.g	used r6 instead of ar6
   1712 EE                 5430 	mov	a,r6
   1713 26                 5431 	add	a,@r0
   1714 FE                 5432 	mov	r6,a
                           5433 ;	Peephole 236.g	used r7 instead of ar7
   1715 EF                 5434 	mov	a,r7
   1716 08                 5435 	inc	r0
   1717 36                 5436 	addc	a,@r0
   1718 FF                 5437 	mov	r7,a
                           5438 ;	Peephole 236.g	used r3 instead of ar3
   1719 EB                 5439 	mov	a,r3
   171A 08                 5440 	inc	r0
   171B 36                 5441 	addc	a,@r0
   171C FB                 5442 	mov	r3,a
                           5443 ;	Peephole 236.g	used r4 instead of ar4
   171D EC                 5444 	mov	a,r4
   171E 08                 5445 	inc	r0
   171F 36                 5446 	addc	a,@r0
   1720 FC                 5447 	mov	r4,a
                           5448 ;	genPointerSet
                           5449 ;	genGenPointerSet
   1721 E5*00              5450 	mov	a,_bp
   1723 24 1C              5451 	add	a,#0x1c
   1725 F8                 5452 	mov	r0,a
   1726 86 82              5453 	mov	dpl,@r0
   1728 08                 5454 	inc	r0
   1729 86 83              5455 	mov	dph,@r0
   172B 08                 5456 	inc	r0
   172C 86 F0              5457 	mov	b,@r0
   172E EE                 5458 	mov	a,r6
   172F 12s00r00           5459 	lcall	__gptrput
   1732 A3                 5460 	inc	dptr
   1733 EF                 5461 	mov	a,r7
   1734 12s00r00           5462 	lcall	__gptrput
   1737 A3                 5463 	inc	dptr
   1738 EB                 5464 	mov	a,r3
   1739 12s00r00           5465 	lcall	__gptrput
   173C A3                 5466 	inc	dptr
   173D EC                 5467 	mov	a,r4
   173E 12s00r00           5468 	lcall	__gptrput
                           5469 ;	FatDrivers/tff.c:716: fs->sects_clust = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
                           5470 ;	genPlus
   1741 E5*00              5471 	mov	a,_bp
   1743 24 15              5472 	add	a,#0x15
   1745 F8                 5473 	mov	r0,a
   1746 E5*00              5474 	mov	a,_bp
   1748 24 20              5475 	add	a,#0x20
   174A F9                 5476 	mov	r1,a
                           5477 ;     genPlusIncr
   174B 74 1D              5478 	mov	a,#0x1D
   174D 26                 5479 	add	a,@r0
   174E F7                 5480 	mov	@r1,a
                           5481 ;	Peephole 181	changed mov to clr
   174F E4                 5482 	clr	a
   1750 08                 5483 	inc	r0
   1751 36                 5484 	addc	a,@r0
   1752 09                 5485 	inc	r1
   1753 F7                 5486 	mov	@r1,a
   1754 08                 5487 	inc	r0
   1755 09                 5488 	inc	r1
   1756 E6                 5489 	mov	a,@r0
   1757 F7                 5490 	mov	@r1,a
                           5491 ;	genPlus
   1758 E5*00              5492 	mov	a,_bp
   175A 24 19              5493 	add	a,#0x19
   175C F8                 5494 	mov	r0,a
                           5495 ;     genPlusIncr
   175D 74 0D              5496 	mov	a,#0x0D
   175F 26                 5497 	add	a,@r0
   1760 FE                 5498 	mov	r6,a
                           5499 ;	Peephole 181	changed mov to clr
   1761 E4                 5500 	clr	a
   1762 08                 5501 	inc	r0
   1763 36                 5502 	addc	a,@r0
   1764 FF                 5503 	mov	r7,a
   1765 08                 5504 	inc	r0
   1766 86 03              5505 	mov	ar3,@r0
                           5506 ;	genPointerGet
                           5507 ;	genGenPointerGet
   1768 8E 82              5508 	mov	dpl,r6
   176A 8F 83              5509 	mov	dph,r7
   176C 8B F0              5510 	mov	b,r3
   176E 12s00r00           5511 	lcall	__gptrget
   1771 FE                 5512 	mov	r6,a
                           5513 ;	genPointerSet
                           5514 ;	genGenPointerSet
   1772 E5*00              5515 	mov	a,_bp
   1774 24 20              5516 	add	a,#0x20
   1776 F8                 5517 	mov	r0,a
   1777 86 82              5518 	mov	dpl,@r0
   1779 08                 5519 	inc	r0
   177A 86 83              5520 	mov	dph,@r0
   177C 08                 5521 	inc	r0
   177D 86 F0              5522 	mov	b,@r0
   177F EE                 5523 	mov	a,r6
   1780 12s00r00           5524 	lcall	__gptrput
                           5525 ;	FatDrivers/tff.c:717: fs->n_rootdir = LD_WORD(&fs->win[BPB_RootEntCnt]);	/* Nmuber of root directory entries */
                           5526 ;	genPlus
   1783 E5*00              5527 	mov	a,_bp
   1785 24 15              5528 	add	a,#0x15
   1787 F8                 5529 	mov	r0,a
   1788 E5*00              5530 	mov	a,_bp
   178A 24 23              5531 	add	a,#0x23
   178C F9                 5532 	mov	r1,a
                           5533 ;     genPlusIncr
   178D 74 02              5534 	mov	a,#0x02
   178F 26                 5535 	add	a,@r0
   1790 F7                 5536 	mov	@r1,a
                           5537 ;	Peephole 181	changed mov to clr
   1791 E4                 5538 	clr	a
   1792 08                 5539 	inc	r0
   1793 36                 5540 	addc	a,@r0
   1794 09                 5541 	inc	r1
   1795 F7                 5542 	mov	@r1,a
   1796 08                 5543 	inc	r0
   1797 09                 5544 	inc	r1
   1798 E6                 5545 	mov	a,@r0
   1799 F7                 5546 	mov	@r1,a
                           5547 ;	genPlus
   179A E5*00              5548 	mov	a,_bp
   179C 24 19              5549 	add	a,#0x19
   179E F8                 5550 	mov	r0,a
                           5551 ;     genPlusIncr
   179F 74 11              5552 	mov	a,#0x11
   17A1 26                 5553 	add	a,@r0
   17A2 FE                 5554 	mov	r6,a
                           5555 ;	Peephole 181	changed mov to clr
   17A3 E4                 5556 	clr	a
   17A4 08                 5557 	inc	r0
   17A5 36                 5558 	addc	a,@r0
   17A6 FF                 5559 	mov	r7,a
   17A7 08                 5560 	inc	r0
   17A8 86 03              5561 	mov	ar3,@r0
                           5562 ;	genPointerGet
                           5563 ;	genGenPointerGet
   17AA 8E 82              5564 	mov	dpl,r6
   17AC 8F 83              5565 	mov	dph,r7
   17AE 8B F0              5566 	mov	b,r3
   17B0 12s00r00           5567 	lcall	__gptrget
   17B3 FE                 5568 	mov	r6,a
   17B4 A3                 5569 	inc	dptr
   17B5 12s00r00           5570 	lcall	__gptrget
   17B8 FF                 5571 	mov	r7,a
                           5572 ;	genPointerSet
                           5573 ;	genGenPointerSet
   17B9 E5*00              5574 	mov	a,_bp
   17BB 24 23              5575 	add	a,#0x23
   17BD F8                 5576 	mov	r0,a
   17BE 86 82              5577 	mov	dpl,@r0
   17C0 08                 5578 	inc	r0
   17C1 86 83              5579 	mov	dph,@r0
   17C3 08                 5580 	inc	r0
   17C4 86 F0              5581 	mov	b,@r0
   17C6 EE                 5582 	mov	a,r6
   17C7 12s00r00           5583 	lcall	__gptrput
   17CA A3                 5584 	inc	dptr
   17CB EF                 5585 	mov	a,r7
   17CC 12s00r00           5586 	lcall	__gptrput
                           5587 ;	FatDrivers/tff.c:718: totalsect = LD_WORD(&fs->win[BPB_TotSec16]);		/* Number of sectors on the file system */
                           5588 ;	genPlus
   17CF E5*00              5589 	mov	a,_bp
   17D1 24 19              5590 	add	a,#0x19
   17D3 F8                 5591 	mov	r0,a
                           5592 ;     genPlusIncr
   17D4 74 13              5593 	mov	a,#0x13
   17D6 26                 5594 	add	a,@r0
   17D7 FB                 5595 	mov	r3,a
                           5596 ;	Peephole 181	changed mov to clr
   17D8 E4                 5597 	clr	a
   17D9 08                 5598 	inc	r0
   17DA 36                 5599 	addc	a,@r0
   17DB FC                 5600 	mov	r4,a
   17DC 08                 5601 	inc	r0
   17DD 86 05              5602 	mov	ar5,@r0
                           5603 ;	genPointerGet
                           5604 ;	genGenPointerGet
   17DF 8B 82              5605 	mov	dpl,r3
   17E1 8C 83              5606 	mov	dph,r4
   17E3 8D F0              5607 	mov	b,r5
   17E5 12s00r00           5608 	lcall	__gptrget
   17E8 FB                 5609 	mov	r3,a
   17E9 A3                 5610 	inc	dptr
   17EA 12s00r00           5611 	lcall	__gptrget
   17ED FC                 5612 	mov	r4,a
                           5613 ;	genCast
   17EE E5*00              5614 	mov	a,_bp
   17F0 24 0D              5615 	add	a,#0x0d
   17F2 F8                 5616 	mov	r0,a
   17F3 A6 03              5617 	mov	@r0,ar3
   17F5 08                 5618 	inc	r0
   17F6 A6 04              5619 	mov	@r0,ar4
   17F8 08                 5620 	inc	r0
   17F9 76 00              5621 	mov	@r0,#0x00
   17FB 08                 5622 	inc	r0
   17FC 76 00              5623 	mov	@r0,#0x00
                           5624 ;	FatDrivers/tff.c:719: if (!totalsect) totalsect = LD_DWORD(&fs->win[BPB_TotSec32]);
                           5625 ;	genIfx
   17FE E5*00              5626 	mov	a,_bp
   1800 24 0D              5627 	add	a,#0x0d
   1802 F8                 5628 	mov	r0,a
   1803 E6                 5629 	mov	a,@r0
   1804 08                 5630 	inc	r0
   1805 46                 5631 	orl	a,@r0
   1806 08                 5632 	inc	r0
   1807 46                 5633 	orl	a,@r0
   1808 08                 5634 	inc	r0
   1809 46                 5635 	orl	a,@r0
                           5636 ;	genIfxJump
                           5637 ;	Peephole 108.b	removed ljmp by inverse jump logic
   180A 70 40              5638 	jnz	00124$
                           5639 ;	Peephole 300	removed redundant label 00164$
                           5640 ;	genPlus
   180C E5*00              5641 	mov	a,_bp
   180E 24 15              5642 	add	a,#0x15
   1810 F8                 5643 	mov	r0,a
                           5644 ;     genPlusIncr
   1811 74 20              5645 	mov	a,#0x20
   1813 26                 5646 	add	a,@r0
   1814 FA                 5647 	mov	r2,a
                           5648 ;	Peephole 181	changed mov to clr
   1815 E4                 5649 	clr	a
   1816 08                 5650 	inc	r0
   1817 36                 5651 	addc	a,@r0
   1818 FB                 5652 	mov	r3,a
   1819 08                 5653 	inc	r0
   181A 86 04              5654 	mov	ar4,@r0
                           5655 ;	genPlus
                           5656 ;     genPlusIncr
   181C 74 20              5657 	mov	a,#0x20
                           5658 ;	Peephole 236.a	used r2 instead of ar2
   181E 2A                 5659 	add	a,r2
   181F FA                 5660 	mov	r2,a
                           5661 ;	Peephole 181	changed mov to clr
   1820 E4                 5662 	clr	a
                           5663 ;	Peephole 236.b	used r3 instead of ar3
   1821 3B                 5664 	addc	a,r3
   1822 FB                 5665 	mov	r3,a
                           5666 ;	genPointerGet
                           5667 ;	genGenPointerGet
   1823 8A 82              5668 	mov	dpl,r2
   1825 8B 83              5669 	mov	dph,r3
   1827 8C F0              5670 	mov	b,r4
   1829 12s00r00           5671 	lcall	__gptrget
   182C FA                 5672 	mov	r2,a
   182D A3                 5673 	inc	dptr
   182E 12s00r00           5674 	lcall	__gptrget
   1831 FB                 5675 	mov	r3,a
   1832 A3                 5676 	inc	dptr
   1833 12s00r00           5677 	lcall	__gptrget
   1836 FC                 5678 	mov	r4,a
   1837 A3                 5679 	inc	dptr
   1838 12s00r00           5680 	lcall	__gptrget
   183B FD                 5681 	mov	r5,a
                           5682 ;	genAssign
   183C E5*00              5683 	mov	a,_bp
   183E 24 0D              5684 	add	a,#0x0d
   1840 F8                 5685 	mov	r0,a
   1841 A6 02              5686 	mov	@r0,ar2
   1843 08                 5687 	inc	r0
   1844 A6 03              5688 	mov	@r0,ar3
   1846 08                 5689 	inc	r0
   1847 A6 04              5690 	mov	@r0,ar4
   1849 08                 5691 	inc	r0
   184A A6 05              5692 	mov	@r0,ar5
   184C                    5693 00124$:
                           5694 ;	FatDrivers/tff.c:720: fs->max_clust = maxclust = (totalsect				/* Last cluster# + 1 */
                           5695 ;	genPlus
   184C E5*00              5696 	mov	a,_bp
   184E 24 15              5697 	add	a,#0x15
   1850 F8                 5698 	mov	r0,a
   1851 E5*00              5699 	mov	a,_bp
   1853 24 26              5700 	add	a,#0x26
   1855 F9                 5701 	mov	r1,a
                           5702 ;     genPlusIncr
   1856 74 18              5703 	mov	a,#0x18
   1858 26                 5704 	add	a,@r0
   1859 F7                 5705 	mov	@r1,a
                           5706 ;	Peephole 181	changed mov to clr
   185A E4                 5707 	clr	a
   185B 08                 5708 	inc	r0
   185C 36                 5709 	addc	a,@r0
   185D 09                 5710 	inc	r1
   185E F7                 5711 	mov	@r1,a
   185F 08                 5712 	inc	r0
   1860 09                 5713 	inc	r1
   1861 E6                 5714 	mov	a,@r0
   1862 F7                 5715 	mov	@r1,a
                           5716 ;	FatDrivers/tff.c:721: - LD_WORD(&fs->win[BPB_RsvdSecCnt]) - fatsize - fs->n_rootdir / 16
                           5717 ;	genPlus
   1863 E5*00              5718 	mov	a,_bp
   1865 24 15              5719 	add	a,#0x15
   1867 F8                 5720 	mov	r0,a
                           5721 ;     genPlusIncr
   1868 74 20              5722 	mov	a,#0x20
   186A 26                 5723 	add	a,@r0
   186B FD                 5724 	mov	r5,a
                           5725 ;	Peephole 181	changed mov to clr
   186C E4                 5726 	clr	a
   186D 08                 5727 	inc	r0
   186E 36                 5728 	addc	a,@r0
   186F FE                 5729 	mov	r6,a
   1870 08                 5730 	inc	r0
   1871 86 03              5731 	mov	ar3,@r0
                           5732 ;	genPlus
                           5733 ;     genPlusIncr
   1873 74 0E              5734 	mov	a,#0x0E
                           5735 ;	Peephole 236.a	used r5 instead of ar5
   1875 2D                 5736 	add	a,r5
   1876 FD                 5737 	mov	r5,a
                           5738 ;	Peephole 181	changed mov to clr
   1877 E4                 5739 	clr	a
                           5740 ;	Peephole 236.b	used r6 instead of ar6
   1878 3E                 5741 	addc	a,r6
   1879 FE                 5742 	mov	r6,a
                           5743 ;	genPointerGet
                           5744 ;	genGenPointerGet
   187A 8D 82              5745 	mov	dpl,r5
   187C 8E 83              5746 	mov	dph,r6
   187E 8B F0              5747 	mov	b,r3
   1880 12s00r00           5748 	lcall	__gptrget
   1883 FD                 5749 	mov	r5,a
   1884 A3                 5750 	inc	dptr
   1885 12s00r00           5751 	lcall	__gptrget
   1888 FE                 5752 	mov	r6,a
                           5753 ;	genCast
                           5754 ;	genMinus
                           5755 ;	Peephole 3.c	changed mov to clr
   1889 E4                 5756 	clr	a
   188A FB                 5757 	mov	r3,a
   188B FC                 5758 	mov	r4,a
   188C E5*00              5759 	mov	a,_bp
   188E 24 0D              5760 	add	a,#0x0d
   1890 F8                 5761 	mov	r0,a
   1891 E6                 5762 	mov	a,@r0
   1892 C3                 5763 	clr	c
                           5764 ;	Peephole 236.l	used r5 instead of ar5
   1893 9D                 5765 	subb	a,r5
   1894 FD                 5766 	mov	r5,a
   1895 08                 5767 	inc	r0
   1896 E6                 5768 	mov	a,@r0
                           5769 ;	Peephole 236.l	used r6 instead of ar6
   1897 9E                 5770 	subb	a,r6
   1898 FE                 5771 	mov	r6,a
   1899 08                 5772 	inc	r0
   189A E6                 5773 	mov	a,@r0
                           5774 ;	Peephole 236.l	used r3 instead of ar3
   189B 9B                 5775 	subb	a,r3
   189C FB                 5776 	mov	r3,a
   189D 08                 5777 	inc	r0
   189E E6                 5778 	mov	a,@r0
                           5779 ;	Peephole 236.l	used r4 instead of ar4
   189F 9C                 5780 	subb	a,r4
   18A0 FC                 5781 	mov	r4,a
                           5782 ;	genMinus
   18A1 E5*00              5783 	mov	a,_bp
   18A3 24 09              5784 	add	a,#0x09
   18A5 F8                 5785 	mov	r0,a
   18A6 E5*00              5786 	mov	a,_bp
   18A8 24 2A              5787 	add	a,#0x2a
   18AA F9                 5788 	mov	r1,a
   18AB ED                 5789 	mov	a,r5
   18AC C3                 5790 	clr	c
   18AD 96                 5791 	subb	a,@r0
   18AE F7                 5792 	mov	@r1,a
   18AF EE                 5793 	mov	a,r6
   18B0 08                 5794 	inc	r0
   18B1 96                 5795 	subb	a,@r0
   18B2 09                 5796 	inc	r1
   18B3 F7                 5797 	mov	@r1,a
   18B4 EB                 5798 	mov	a,r3
   18B5 08                 5799 	inc	r0
   18B6 96                 5800 	subb	a,@r0
   18B7 09                 5801 	inc	r1
   18B8 F7                 5802 	mov	@r1,a
   18B9 EC                 5803 	mov	a,r4
   18BA 08                 5804 	inc	r0
   18BB 96                 5805 	subb	a,@r0
   18BC 09                 5806 	inc	r1
   18BD F7                 5807 	mov	@r1,a
                           5808 ;	genPointerGet
                           5809 ;	genGenPointerGet
   18BE E5*00              5810 	mov	a,_bp
   18C0 24 23              5811 	add	a,#0x23
   18C2 F8                 5812 	mov	r0,a
   18C3 86 82              5813 	mov	dpl,@r0
   18C5 08                 5814 	inc	r0
   18C6 86 83              5815 	mov	dph,@r0
   18C8 08                 5816 	inc	r0
   18C9 86 F0              5817 	mov	b,@r0
   18CB 12s00r00           5818 	lcall	__gptrget
   18CE FF                 5819 	mov	r7,a
   18CF A3                 5820 	inc	dptr
   18D0 12s00r00           5821 	lcall	__gptrget
                           5822 ;	genRightShift
                           5823 ;	genRightShiftLiteral
                           5824 ;	genrshTwo
   18D3 FB                 5825 	mov	r3,a
                           5826 ;	Peephole 105	removed redundant mov
   18D4 C4                 5827 	swap	a
   18D5 CF                 5828 	xch	a,r7
   18D6 C4                 5829 	swap	a
   18D7 54 0F              5830 	anl	a,#0x0f
   18D9 6F                 5831 	xrl	a,r7
   18DA CF                 5832 	xch	a,r7
   18DB 54 0F              5833 	anl	a,#0x0f
   18DD CF                 5834 	xch	a,r7
   18DE 6F                 5835 	xrl	a,r7
   18DF CF                 5836 	xch	a,r7
   18E0 FB                 5837 	mov	r3,a
                           5838 ;	genCast
                           5839 ;	genMinus
                           5840 ;	Peephole 3.c	changed mov to clr
   18E1 E4                 5841 	clr	a
   18E2 FC                 5842 	mov	r4,a
   18E3 FD                 5843 	mov	r5,a
   18E4 E5*00              5844 	mov	a,_bp
   18E6 24 2A              5845 	add	a,#0x2a
   18E8 F8                 5846 	mov	r0,a
   18E9 E6                 5847 	mov	a,@r0
   18EA C3                 5848 	clr	c
                           5849 ;	Peephole 236.l	used r7 instead of ar7
   18EB 9F                 5850 	subb	a,r7
   18EC F6                 5851 	mov	@r0,a
   18ED 08                 5852 	inc	r0
   18EE E6                 5853 	mov	a,@r0
                           5854 ;	Peephole 236.l	used r3 instead of ar3
   18EF 9B                 5855 	subb	a,r3
   18F0 F6                 5856 	mov	@r0,a
   18F1 08                 5857 	inc	r0
   18F2 E6                 5858 	mov	a,@r0
                           5859 ;	Peephole 236.l	used r4 instead of ar4
   18F3 9C                 5860 	subb	a,r4
   18F4 F6                 5861 	mov	@r0,a
   18F5 08                 5862 	inc	r0
   18F6 E6                 5863 	mov	a,@r0
                           5864 ;	Peephole 236.l	used r5 instead of ar5
   18F7 9D                 5865 	subb	a,r5
   18F8 F6                 5866 	mov	@r0,a
                           5867 ;	FatDrivers/tff.c:722: ) / fs->sects_clust + 2;
                           5868 ;	genPointerGet
                           5869 ;	genGenPointerGet
   18F9 E5*00              5870 	mov	a,_bp
   18FB 24 20              5871 	add	a,#0x20
   18FD F8                 5872 	mov	r0,a
   18FE 86 82              5873 	mov	dpl,@r0
   1900 08                 5874 	inc	r0
   1901 86 83              5875 	mov	dph,@r0
   1903 08                 5876 	inc	r0
   1904 86 F0              5877 	mov	b,@r0
   1906 12s00r00           5878 	lcall	__gptrget
   1909 FE                 5879 	mov	r6,a
                           5880 ;	genCast
   190A 7B 00              5881 	mov	r3,#0x00
   190C 7C 00              5882 	mov	r4,#0x00
   190E 7D 00              5883 	mov	r5,#0x00
                           5884 ;	genIpush
   1910 C0 06              5885 	push	ar6
   1912 C0 03              5886 	push	ar3
   1914 C0 04              5887 	push	ar4
   1916 C0 05              5888 	push	ar5
                           5889 ;	genCall
   1918 E5*00              5890 	mov	a,_bp
   191A 24 2A              5891 	add	a,#0x2a
   191C F8                 5892 	mov	r0,a
   191D 86 82              5893 	mov	dpl,@r0
   191F 08                 5894 	inc	r0
   1920 86 83              5895 	mov	dph,@r0
   1922 08                 5896 	inc	r0
   1923 86 F0              5897 	mov	b,@r0
   1925 08                 5898 	inc	r0
   1926 E6                 5899 	mov	a,@r0
   1927 12s00r00           5900 	lcall	__divulong
   192A AB 82              5901 	mov	r3,dpl
   192C AC 83              5902 	mov	r4,dph
   192E AD F0              5903 	mov	r5,b
   1930 FE                 5904 	mov	r6,a
   1931 E5 81              5905 	mov	a,sp
   1933 24 FC              5906 	add	a,#0xfc
   1935 F5 81              5907 	mov	sp,a
                           5908 ;	genPlus
   1937 E5*00              5909 	mov	a,_bp
   1939 24 11              5910 	add	a,#0x11
   193B F8                 5911 	mov	r0,a
                           5912 ;     genPlusIncr
   193C 74 02              5913 	mov	a,#0x02
                           5914 ;	Peephole 236.a	used r3 instead of ar3
   193E 2B                 5915 	add	a,r3
   193F F6                 5916 	mov	@r0,a
                           5917 ;	Peephole 181	changed mov to clr
   1940 E4                 5918 	clr	a
                           5919 ;	Peephole 236.b	used r4 instead of ar4
   1941 3C                 5920 	addc	a,r4
   1942 08                 5921 	inc	r0
   1943 F6                 5922 	mov	@r0,a
                           5923 ;	Peephole 181	changed mov to clr
   1944 E4                 5924 	clr	a
                           5925 ;	Peephole 236.b	used r5 instead of ar5
   1945 3D                 5926 	addc	a,r5
   1946 08                 5927 	inc	r0
   1947 F6                 5928 	mov	@r0,a
                           5929 ;	Peephole 181	changed mov to clr
   1948 E4                 5930 	clr	a
                           5931 ;	Peephole 236.b	used r6 instead of ar6
   1949 3E                 5932 	addc	a,r6
   194A 08                 5933 	inc	r0
   194B F6                 5934 	mov	@r0,a
                           5935 ;	genAssign
   194C E5*00              5936 	mov	a,_bp
   194E 24 11              5937 	add	a,#0x11
   1950 F8                 5938 	mov	r0,a
   1951 86 07              5939 	mov	ar7,@r0
   1953 08                 5940 	inc	r0
   1954 86 03              5941 	mov	ar3,@r0
   1956 08                 5942 	inc	r0
   1957 86 04              5943 	mov	ar4,@r0
   1959 08                 5944 	inc	r0
   195A 86 05              5945 	mov	ar5,@r0
                           5946 ;	genPointerSet
                           5947 ;	genGenPointerSet
   195C E5*00              5948 	mov	a,_bp
   195E 24 26              5949 	add	a,#0x26
   1960 F8                 5950 	mov	r0,a
   1961 86 82              5951 	mov	dpl,@r0
   1963 08                 5952 	inc	r0
   1964 86 83              5953 	mov	dph,@r0
   1966 08                 5954 	inc	r0
   1967 86 F0              5955 	mov	b,@r0
   1969 E5*00              5956 	mov	a,_bp
   196B 24 11              5957 	add	a,#0x11
   196D F9                 5958 	mov	r1,a
   196E E7                 5959 	mov	a,@r1
   196F 12s00r00           5960 	lcall	__gptrput
   1972 A3                 5961 	inc	dptr
   1973 09                 5962 	inc	r1
   1974 E7                 5963 	mov	a,@r1
   1975 12s00r00           5964 	lcall	__gptrput
   1978 A3                 5965 	inc	dptr
   1979 09                 5966 	inc	r1
   197A E7                 5967 	mov	a,@r1
   197B 12s00r00           5968 	lcall	__gptrput
   197E A3                 5969 	inc	dptr
   197F 09                 5970 	inc	r1
   1980 E7                 5971 	mov	a,@r1
   1981 12s00r00           5972 	lcall	__gptrput
                           5973 ;	FatDrivers/tff.c:724: fmt = FS_FAT12;										/* Determine the FAT sub type */
                           5974 ;	genAssign
   1984 E5*00              5975 	mov	a,_bp
   1986 24 04              5976 	add	a,#0x04
   1988 F8                 5977 	mov	r0,a
   1989 76 01              5978 	mov	@r0,#0x01
                           5979 ;	FatDrivers/tff.c:725: if (maxclust > 0xFF7) fmt = FS_FAT16;
                           5980 ;	genCmpGt
                           5981 ;	genCmp
   198B C3                 5982 	clr	c
   198C 74 F7              5983 	mov	a,#0xF7
   198E 9F                 5984 	subb	a,r7
   198F 74 0F              5985 	mov	a,#0x0F
   1991 9B                 5986 	subb	a,r3
                           5987 ;	Peephole 181	changed mov to clr
   1992 E4                 5988 	clr	a
   1993 9C                 5989 	subb	a,r4
                           5990 ;	Peephole 181	changed mov to clr
   1994 E4                 5991 	clr	a
   1995 9D                 5992 	subb	a,r5
                           5993 ;	genIfxJump
                           5994 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1996 50 07              5995 	jnc	00126$
                           5996 ;	Peephole 300	removed redundant label 00165$
                           5997 ;	genAssign
   1998 E5*00              5998 	mov	a,_bp
   199A 24 04              5999 	add	a,#0x04
   199C F8                 6000 	mov	r0,a
   199D 76 02              6001 	mov	@r0,#0x02
   199F                    6002 00126$:
                           6003 ;	FatDrivers/tff.c:726: if (maxclust > 0xFFF7)
                           6004 ;	genCmpGt
                           6005 ;	genCmp
   199F C3                 6006 	clr	c
   19A0 74 F7              6007 	mov	a,#0xF7
   19A2 9F                 6008 	subb	a,r7
   19A3 74 FF              6009 	mov	a,#0xFF
   19A5 9B                 6010 	subb	a,r3
                           6011 ;	Peephole 181	changed mov to clr
   19A6 E4                 6012 	clr	a
   19A7 9C                 6013 	subb	a,r4
                           6014 ;	Peephole 181	changed mov to clr
   19A8 E4                 6015 	clr	a
   19A9 9D                 6016 	subb	a,r5
                           6017 ;	genIfxJump
                           6018 ;	Peephole 108.a	removed ljmp by inverse jump logic
   19AA 50 07              6019 	jnc	00128$
                           6020 ;	Peephole 300	removed redundant label 00166$
                           6021 ;	FatDrivers/tff.c:730: fmt = FS_FAT32;
                           6022 ;	genAssign
   19AC E5*00              6023 	mov	a,_bp
   19AE 24 04              6024 	add	a,#0x04
   19B0 F8                 6025 	mov	r0,a
   19B1 76 03              6026 	mov	@r0,#0x03
   19B3                    6027 00128$:
                           6028 ;	FatDrivers/tff.c:731: if (fmt == FS_FAT32)
                           6029 ;	genCmpEq
   19B3 E5*00              6030 	mov	a,_bp
   19B5 24 04              6031 	add	a,#0x04
   19B7 F8                 6032 	mov	r0,a
                           6033 ;	gencjneshort
                           6034 ;	Peephole 112.b	changed ljmp to sjmp
                           6035 ;	Peephole 198.b	optimized misc jump sequence
   19B8 B6 03 69           6036 	cjne	@r0,#0x03,00130$
                           6037 ;	Peephole 200.b	removed redundant sjmp
                           6038 ;	Peephole 300	removed redundant label 00167$
                           6039 ;	Peephole 300	removed redundant label 00168$
                           6040 ;	FatDrivers/tff.c:732: fs->dirbase = LD_DWORD(&fs->win[BPB_RootClus]);	/* Root directory start cluster */
                           6041 ;	genIpush
                           6042 ;	genPlus
   19BB E5*00              6043 	mov	a,_bp
   19BD 24 15              6044 	add	a,#0x15
   19BF F8                 6045 	mov	r0,a
   19C0 E5*00              6046 	mov	a,_bp
   19C2 24 2A              6047 	add	a,#0x2a
   19C4 F9                 6048 	mov	r1,a
                           6049 ;     genPlusIncr
   19C5 74 0C              6050 	mov	a,#0x0C
   19C7 26                 6051 	add	a,@r0
   19C8 F7                 6052 	mov	@r1,a
                           6053 ;	Peephole 181	changed mov to clr
   19C9 E4                 6054 	clr	a
   19CA 08                 6055 	inc	r0
   19CB 36                 6056 	addc	a,@r0
   19CC 09                 6057 	inc	r1
   19CD F7                 6058 	mov	@r1,a
   19CE 08                 6059 	inc	r0
   19CF 09                 6060 	inc	r1
   19D0 E6                 6061 	mov	a,@r0
   19D1 F7                 6062 	mov	@r1,a
                           6063 ;	genPlus
   19D2 E5*00              6064 	mov	a,_bp
   19D4 24 15              6065 	add	a,#0x15
   19D6 F8                 6066 	mov	r0,a
                           6067 ;     genPlusIncr
   19D7 74 20              6068 	mov	a,#0x20
   19D9 26                 6069 	add	a,@r0
   19DA FE                 6070 	mov	r6,a
                           6071 ;	Peephole 181	changed mov to clr
   19DB E4                 6072 	clr	a
   19DC 08                 6073 	inc	r0
   19DD 36                 6074 	addc	a,@r0
   19DE FF                 6075 	mov	r7,a
   19DF 08                 6076 	inc	r0
   19E0 86 02              6077 	mov	ar2,@r0
                           6078 ;	genPlus
                           6079 ;     genPlusIncr
   19E2 74 2C              6080 	mov	a,#0x2C
                           6081 ;	Peephole 236.a	used r6 instead of ar6
   19E4 2E                 6082 	add	a,r6
   19E5 FE                 6083 	mov	r6,a
                           6084 ;	Peephole 181	changed mov to clr
   19E6 E4                 6085 	clr	a
                           6086 ;	Peephole 236.b	used r7 instead of ar7
   19E7 3F                 6087 	addc	a,r7
   19E8 FF                 6088 	mov	r7,a
                           6089 ;	genPointerGet
                           6090 ;	genGenPointerGet
   19E9 8E 82              6091 	mov	dpl,r6
   19EB 8F 83              6092 	mov	dph,r7
   19ED 8A F0              6093 	mov	b,r2
   19EF 12s00r00           6094 	lcall	__gptrget
   19F2 FA                 6095 	mov	r2,a
   19F3 A3                 6096 	inc	dptr
   19F4 12s00r00           6097 	lcall	__gptrget
   19F7 FE                 6098 	mov	r6,a
   19F8 A3                 6099 	inc	dptr
   19F9 12s00r00           6100 	lcall	__gptrget
   19FC FF                 6101 	mov	r7,a
   19FD A3                 6102 	inc	dptr
   19FE 12s00r00           6103 	lcall	__gptrget
   1A01 FB                 6104 	mov	r3,a
                           6105 ;	genPointerSet
                           6106 ;	genGenPointerSet
   1A02 E5*00              6107 	mov	a,_bp
   1A04 24 2A              6108 	add	a,#0x2a
   1A06 F8                 6109 	mov	r0,a
   1A07 86 82              6110 	mov	dpl,@r0
   1A09 08                 6111 	inc	r0
   1A0A 86 83              6112 	mov	dph,@r0
   1A0C 08                 6113 	inc	r0
   1A0D 86 F0              6114 	mov	b,@r0
   1A0F EA                 6115 	mov	a,r2
   1A10 12s00r00           6116 	lcall	__gptrput
   1A13 A3                 6117 	inc	dptr
   1A14 EE                 6118 	mov	a,r6
   1A15 12s00r00           6119 	lcall	__gptrput
   1A18 A3                 6120 	inc	dptr
   1A19 EF                 6121 	mov	a,r7
   1A1A 12s00r00           6122 	lcall	__gptrput
   1A1D A3                 6123 	inc	dptr
   1A1E EB                 6124 	mov	a,r3
   1A1F 12s00r00           6125 	lcall	__gptrput
                           6126 ;	genIpop
                           6127 ;	Peephole 112.b	changed ljmp to sjmp
   1A22 80 6B              6128 	sjmp	00131$
   1A24                    6129 00130$:
                           6130 ;	FatDrivers/tff.c:735: fs->dirbase = fs->fatbase + fatsize;			/* Root directory start sector (lba) */
                           6131 ;	genIpush
                           6132 ;	genPlus
   1A24 E5*00              6133 	mov	a,_bp
   1A26 24 15              6134 	add	a,#0x15
   1A28 F8                 6135 	mov	r0,a
   1A29 E5*00              6136 	mov	a,_bp
   1A2B 24 2A              6137 	add	a,#0x2a
   1A2D F9                 6138 	mov	r1,a
                           6139 ;     genPlusIncr
   1A2E 74 0C              6140 	mov	a,#0x0C
   1A30 26                 6141 	add	a,@r0
   1A31 F7                 6142 	mov	@r1,a
                           6143 ;	Peephole 181	changed mov to clr
   1A32 E4                 6144 	clr	a
   1A33 08                 6145 	inc	r0
   1A34 36                 6146 	addc	a,@r0
   1A35 09                 6147 	inc	r1
   1A36 F7                 6148 	mov	@r1,a
   1A37 08                 6149 	inc	r0
   1A38 09                 6150 	inc	r1
   1A39 E6                 6151 	mov	a,@r0
   1A3A F7                 6152 	mov	@r1,a
                           6153 ;	genPointerGet
                           6154 ;	genGenPointerGet
   1A3B E5*00              6155 	mov	a,_bp
   1A3D 24 1C              6156 	add	a,#0x1c
   1A3F F8                 6157 	mov	r0,a
   1A40 86 82              6158 	mov	dpl,@r0
   1A42 08                 6159 	inc	r0
   1A43 86 83              6160 	mov	dph,@r0
   1A45 08                 6161 	inc	r0
   1A46 86 F0              6162 	mov	b,@r0
   1A48 12s00r00           6163 	lcall	__gptrget
   1A4B FE                 6164 	mov	r6,a
   1A4C A3                 6165 	inc	dptr
   1A4D 12s00r00           6166 	lcall	__gptrget
   1A50 FF                 6167 	mov	r7,a
   1A51 A3                 6168 	inc	dptr
   1A52 12s00r00           6169 	lcall	__gptrget
   1A55 FA                 6170 	mov	r2,a
   1A56 A3                 6171 	inc	dptr
   1A57 12s00r00           6172 	lcall	__gptrget
   1A5A FB                 6173 	mov	r3,a
                           6174 ;	genPlus
   1A5B E5*00              6175 	mov	a,_bp
   1A5D 24 09              6176 	add	a,#0x09
   1A5F F8                 6177 	mov	r0,a
   1A60 E6                 6178 	mov	a,@r0
                           6179 ;	Peephole 236.a	used r6 instead of ar6
   1A61 2E                 6180 	add	a,r6
   1A62 FE                 6181 	mov	r6,a
   1A63 08                 6182 	inc	r0
   1A64 E6                 6183 	mov	a,@r0
                           6184 ;	Peephole 236.b	used r7 instead of ar7
   1A65 3F                 6185 	addc	a,r7
   1A66 FF                 6186 	mov	r7,a
   1A67 08                 6187 	inc	r0
   1A68 E6                 6188 	mov	a,@r0
                           6189 ;	Peephole 236.b	used r2 instead of ar2
   1A69 3A                 6190 	addc	a,r2
   1A6A FA                 6191 	mov	r2,a
   1A6B 08                 6192 	inc	r0
   1A6C E6                 6193 	mov	a,@r0
                           6194 ;	Peephole 236.b	used r3 instead of ar3
   1A6D 3B                 6195 	addc	a,r3
   1A6E FB                 6196 	mov	r3,a
                           6197 ;	genPointerSet
                           6198 ;	genGenPointerSet
   1A6F E5*00              6199 	mov	a,_bp
   1A71 24 2A              6200 	add	a,#0x2a
   1A73 F8                 6201 	mov	r0,a
   1A74 86 82              6202 	mov	dpl,@r0
   1A76 08                 6203 	inc	r0
   1A77 86 83              6204 	mov	dph,@r0
   1A79 08                 6205 	inc	r0
   1A7A 86 F0              6206 	mov	b,@r0
   1A7C EE                 6207 	mov	a,r6
   1A7D 12s00r00           6208 	lcall	__gptrput
   1A80 A3                 6209 	inc	dptr
   1A81 EF                 6210 	mov	a,r7
   1A82 12s00r00           6211 	lcall	__gptrput
   1A85 A3                 6212 	inc	dptr
   1A86 EA                 6213 	mov	a,r2
   1A87 12s00r00           6214 	lcall	__gptrput
   1A8A A3                 6215 	inc	dptr
   1A8B EB                 6216 	mov	a,r3
   1A8C 12s00r00           6217 	lcall	__gptrput
                           6218 ;	FatDrivers/tff.c:756: return FR_OK;
                           6219 ;	genIpop
                           6220 ;	FatDrivers/tff.c:735: fs->dirbase = fs->fatbase + fatsize;			/* Root directory start sector (lba) */
   1A8F                    6221 00131$:
                           6222 ;	FatDrivers/tff.c:736: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
                           6223 ;	genPlus
   1A8F E5*00              6224 	mov	a,_bp
   1A91 24 15              6225 	add	a,#0x15
   1A93 F8                 6226 	mov	r0,a
   1A94 E5*00              6227 	mov	a,_bp
   1A96 24 2A              6228 	add	a,#0x2a
   1A98 F9                 6229 	mov	r1,a
                           6230 ;     genPlusIncr
   1A99 74 10              6231 	mov	a,#0x10
   1A9B 26                 6232 	add	a,@r0
   1A9C F7                 6233 	mov	@r1,a
                           6234 ;	Peephole 181	changed mov to clr
   1A9D E4                 6235 	clr	a
   1A9E 08                 6236 	inc	r0
   1A9F 36                 6237 	addc	a,@r0
   1AA0 09                 6238 	inc	r1
   1AA1 F7                 6239 	mov	@r1,a
   1AA2 08                 6240 	inc	r0
   1AA3 09                 6241 	inc	r1
   1AA4 E6                 6242 	mov	a,@r0
   1AA5 F7                 6243 	mov	@r1,a
                           6244 ;	genPointerGet
                           6245 ;	genGenPointerGet
   1AA6 E5*00              6246 	mov	a,_bp
   1AA8 24 1C              6247 	add	a,#0x1c
   1AAA F8                 6248 	mov	r0,a
   1AAB 86 82              6249 	mov	dpl,@r0
   1AAD 08                 6250 	inc	r0
   1AAE 86 83              6251 	mov	dph,@r0
   1AB0 08                 6252 	inc	r0
   1AB1 86 F0              6253 	mov	b,@r0
   1AB3 12s00r00           6254 	lcall	__gptrget
   1AB6 FE                 6255 	mov	r6,a
   1AB7 A3                 6256 	inc	dptr
   1AB8 12s00r00           6257 	lcall	__gptrget
   1ABB FF                 6258 	mov	r7,a
   1ABC A3                 6259 	inc	dptr
   1ABD 12s00r00           6260 	lcall	__gptrget
   1AC0 FA                 6261 	mov	r2,a
   1AC1 A3                 6262 	inc	dptr
   1AC2 12s00r00           6263 	lcall	__gptrget
   1AC5 FB                 6264 	mov	r3,a
                           6265 ;	genPlus
   1AC6 E5*00              6266 	mov	a,_bp
   1AC8 24 09              6267 	add	a,#0x09
   1ACA F8                 6268 	mov	r0,a
   1ACB E5*00              6269 	mov	a,_bp
   1ACD 24 26              6270 	add	a,#0x26
   1ACF F9                 6271 	mov	r1,a
   1AD0 E6                 6272 	mov	a,@r0
                           6273 ;	Peephole 236.a	used r6 instead of ar6
   1AD1 2E                 6274 	add	a,r6
   1AD2 F7                 6275 	mov	@r1,a
   1AD3 08                 6276 	inc	r0
   1AD4 E6                 6277 	mov	a,@r0
                           6278 ;	Peephole 236.b	used r7 instead of ar7
   1AD5 3F                 6279 	addc	a,r7
   1AD6 09                 6280 	inc	r1
   1AD7 F7                 6281 	mov	@r1,a
   1AD8 08                 6282 	inc	r0
   1AD9 E6                 6283 	mov	a,@r0
                           6284 ;	Peephole 236.b	used r2 instead of ar2
   1ADA 3A                 6285 	addc	a,r2
   1ADB 09                 6286 	inc	r1
   1ADC F7                 6287 	mov	@r1,a
   1ADD 08                 6288 	inc	r0
   1ADE E6                 6289 	mov	a,@r0
                           6290 ;	Peephole 236.b	used r3 instead of ar3
   1ADF 3B                 6291 	addc	a,r3
   1AE0 09                 6292 	inc	r1
   1AE1 F7                 6293 	mov	@r1,a
                           6294 ;	genPointerGet
                           6295 ;	genGenPointerGet
   1AE2 E5*00              6296 	mov	a,_bp
   1AE4 24 23              6297 	add	a,#0x23
   1AE6 F8                 6298 	mov	r0,a
   1AE7 86 82              6299 	mov	dpl,@r0
   1AE9 08                 6300 	inc	r0
   1AEA 86 83              6301 	mov	dph,@r0
   1AEC 08                 6302 	inc	r0
   1AED 86 F0              6303 	mov	b,@r0
   1AEF 12s00r00           6304 	lcall	__gptrget
   1AF2 FC                 6305 	mov	r4,a
   1AF3 A3                 6306 	inc	dptr
   1AF4 12s00r00           6307 	lcall	__gptrget
                           6308 ;	genRightShift
                           6309 ;	genRightShiftLiteral
                           6310 ;	genrshTwo
   1AF7 FD                 6311 	mov	r5,a
                           6312 ;	Peephole 105	removed redundant mov
   1AF8 C4                 6313 	swap	a
   1AF9 CC                 6314 	xch	a,r4
   1AFA C4                 6315 	swap	a
   1AFB 54 0F              6316 	anl	a,#0x0f
   1AFD 6C                 6317 	xrl	a,r4
   1AFE CC                 6318 	xch	a,r4
   1AFF 54 0F              6319 	anl	a,#0x0f
   1B01 CC                 6320 	xch	a,r4
   1B02 6C                 6321 	xrl	a,r4
   1B03 CC                 6322 	xch	a,r4
   1B04 FD                 6323 	mov	r5,a
                           6324 ;	genCast
                           6325 ;	genPlus
                           6326 ;	Peephole 3.c	changed mov to clr
   1B05 E4                 6327 	clr	a
   1B06 FA                 6328 	mov	r2,a
   1B07 FB                 6329 	mov	r3,a
   1B08 E5*00              6330 	mov	a,_bp
   1B0A 24 26              6331 	add	a,#0x26
   1B0C F8                 6332 	mov	r0,a
                           6333 ;	Peephole 236.g	used r4 instead of ar4
   1B0D EC                 6334 	mov	a,r4
   1B0E 26                 6335 	add	a,@r0
   1B0F FC                 6336 	mov	r4,a
                           6337 ;	Peephole 236.g	used r5 instead of ar5
   1B10 ED                 6338 	mov	a,r5
   1B11 08                 6339 	inc	r0
   1B12 36                 6340 	addc	a,@r0
   1B13 FD                 6341 	mov	r5,a
                           6342 ;	Peephole 236.g	used r2 instead of ar2
   1B14 EA                 6343 	mov	a,r2
   1B15 08                 6344 	inc	r0
   1B16 36                 6345 	addc	a,@r0
   1B17 FA                 6346 	mov	r2,a
                           6347 ;	Peephole 236.g	used r3 instead of ar3
   1B18 EB                 6348 	mov	a,r3
   1B19 08                 6349 	inc	r0
   1B1A 36                 6350 	addc	a,@r0
   1B1B FB                 6351 	mov	r3,a
                           6352 ;	genPointerSet
                           6353 ;	genGenPointerSet
   1B1C E5*00              6354 	mov	a,_bp
   1B1E 24 2A              6355 	add	a,#0x2a
   1B20 F8                 6356 	mov	r0,a
   1B21 86 82              6357 	mov	dpl,@r0
   1B23 08                 6358 	inc	r0
   1B24 86 83              6359 	mov	dph,@r0
   1B26 08                 6360 	inc	r0
   1B27 86 F0              6361 	mov	b,@r0
   1B29 EC                 6362 	mov	a,r4
   1B2A 12s00r00           6363 	lcall	__gptrput
   1B2D A3                 6364 	inc	dptr
   1B2E ED                 6365 	mov	a,r5
   1B2F 12s00r00           6366 	lcall	__gptrput
   1B32 A3                 6367 	inc	dptr
   1B33 EA                 6368 	mov	a,r2
   1B34 12s00r00           6369 	lcall	__gptrput
   1B37 A3                 6370 	inc	dptr
   1B38 EB                 6371 	mov	a,r3
   1B39 12s00r00           6372 	lcall	__gptrput
                           6373 ;	FatDrivers/tff.c:737: fs->fs_type = fmt;									/* FAT sub-type */
                           6374 ;	genPlus
   1B3C E5*00              6375 	mov	a,_bp
   1B3E 24 15              6376 	add	a,#0x15
   1B40 F8                 6377 	mov	r0,a
                           6378 ;     genPlusIncr
   1B41 74 1C              6379 	mov	a,#0x1C
   1B43 26                 6380 	add	a,@r0
   1B44 FA                 6381 	mov	r2,a
                           6382 ;	Peephole 181	changed mov to clr
   1B45 E4                 6383 	clr	a
   1B46 08                 6384 	inc	r0
   1B47 36                 6385 	addc	a,@r0
   1B48 FB                 6386 	mov	r3,a
   1B49 08                 6387 	inc	r0
   1B4A 86 04              6388 	mov	ar4,@r0
                           6389 ;	genPointerSet
                           6390 ;	genGenPointerSet
   1B4C 8A 82              6391 	mov	dpl,r2
   1B4E 8B 83              6392 	mov	dph,r3
   1B50 8C F0              6393 	mov	b,r4
   1B52 E5*00              6394 	mov	a,_bp
   1B54 24 04              6395 	add	a,#0x04
   1B56 F8                 6396 	mov	r0,a
   1B57 E6                 6397 	mov	a,@r0
   1B58 12s00r00           6398 	lcall	__gptrput
                           6399 ;	FatDrivers/tff.c:755: fs->id = ++fsid;									/* File system mount ID */
                           6400 ;	genPlus
                           6401 ;     genPlusIncr
   1B5B 05*03              6402 	inc	_fsid
   1B5D E4                 6403 	clr	a
   1B5E B5*03 02           6404 	cjne	a,_fsid,00169$
   1B61 05*04              6405 	inc	(_fsid + 1)
   1B63                    6406 00169$:
                           6407 ;	genPointerSet
                           6408 ;	genGenPointerSet
   1B63 E5*00              6409 	mov	a,_bp
   1B65 24 15              6410 	add	a,#0x15
   1B67 F8                 6411 	mov	r0,a
   1B68 86 82              6412 	mov	dpl,@r0
   1B6A 08                 6413 	inc	r0
   1B6B 86 83              6414 	mov	dph,@r0
   1B6D 08                 6415 	inc	r0
   1B6E 86 F0              6416 	mov	b,@r0
   1B70 E5*03              6417 	mov	a,_fsid
   1B72 12s00r00           6418 	lcall	__gptrput
   1B75 A3                 6419 	inc	dptr
   1B76 E5*04              6420 	mov	a,(_fsid + 1)
   1B78 12s00r00           6421 	lcall	__gptrput
                           6422 ;	FatDrivers/tff.c:756: return FR_OK;
                           6423 ;	genRet
   1B7B 75 82 00           6424 	mov	dpl,#0x00
   1B7E                    6425 00132$:
   1B7E 85*00 81           6426 	mov	sp,_bp
   1B81 D0*00              6427 	pop	_bp
   1B83 22                 6428 	ret
                           6429 ;------------------------------------------------------------
                           6430 ;Allocation info for local variables in function 'validate'
                           6431 ;------------------------------------------------------------
                           6432 ;id                        Allocated to stack - offset -4
                           6433 ;fs                        Allocated to registers r2 r3 r4 
                           6434 ;------------------------------------------------------------
                           6435 ;	FatDrivers/tff.c:767: FRESULT validate (		/* FR_OK(0): The id is valid, !=0: Not valid */
                           6436 ;	-----------------------------------------
                           6437 ;	 function validate
                           6438 ;	-----------------------------------------
   1B84                    6439 _validate:
   1B84 C0*00              6440 	push	_bp
   1B86 85 81*00           6441 	mov	_bp,sp
                           6442 ;	genReceive
   1B89 AA 82              6443 	mov	r2,dpl
   1B8B AB 83              6444 	mov	r3,dph
   1B8D AC F0              6445 	mov	r4,b
                           6446 ;	FatDrivers/tff.c:772: if (!fs || fs->id != id)
                           6447 ;	genIfx
   1B8F EA                 6448 	mov	a,r2
   1B90 4B                 6449 	orl	a,r3
   1B91 4C                 6450 	orl	a,r4
                           6451 ;	genIfxJump
                           6452 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1B92 60 1F              6453 	jz	00101$
                           6454 ;	Peephole 300	removed redundant label 00110$
                           6455 ;	genPointerGet
                           6456 ;	genGenPointerGet
   1B94 8A 82              6457 	mov	dpl,r2
   1B96 8B 83              6458 	mov	dph,r3
   1B98 8C F0              6459 	mov	b,r4
   1B9A 12s00r00           6460 	lcall	__gptrget
   1B9D FA                 6461 	mov	r2,a
   1B9E A3                 6462 	inc	dptr
   1B9F 12s00r00           6463 	lcall	__gptrget
   1BA2 FB                 6464 	mov	r3,a
                           6465 ;	genCmpEq
   1BA3 E5*00              6466 	mov	a,_bp
   1BA5 24 FC              6467 	add	a,#0xfffffffc
   1BA7 F8                 6468 	mov	r0,a
                           6469 ;	gencjneshort
   1BA8 E6                 6470 	mov	a,@r0
   1BA9 B5 02 07           6471 	cjne	a,ar2,00111$
   1BAC 08                 6472 	inc	r0
   1BAD E6                 6473 	mov	a,@r0
   1BAE B5 03 02           6474 	cjne	a,ar3,00111$
                           6475 ;	Peephole 112.b	changed ljmp to sjmp
   1BB1 80 05              6476 	sjmp	00102$
   1BB3                    6477 00111$:
   1BB3                    6478 00101$:
                           6479 ;	FatDrivers/tff.c:773: return FR_INVALID_OBJECT;
                           6480 ;	genRet
   1BB3 75 82 0C           6481 	mov	dpl,#0x0C
                           6482 ;	Peephole 112.b	changed ljmp to sjmp
   1BB6 80 13              6483 	sjmp	00106$
   1BB8                    6484 00102$:
                           6485 ;	FatDrivers/tff.c:774: if (disk_status(0) & STA_NOINIT)
                           6486 ;	genCall
   1BB8 75 82 00           6487 	mov	dpl,#0x00
   1BBB 12s00r00           6488 	lcall	_disk_status
   1BBE E5 82              6489 	mov	a,dpl
                           6490 ;	genAnd
                           6491 ;	genIfxJump
                           6492 ;	Peephole 108.d	removed ljmp by inverse jump logic
   1BC0 30 E0 05           6493 	jnb	acc.0,00105$
                           6494 ;	Peephole 300	removed redundant label 00112$
                           6495 ;	FatDrivers/tff.c:775: return FR_NOT_READY;
                           6496 ;	genRet
   1BC3 75 82 01           6497 	mov	dpl,#0x01
                           6498 ;	Peephole 112.b	changed ljmp to sjmp
   1BC6 80 03              6499 	sjmp	00106$
   1BC8                    6500 00105$:
                           6501 ;	FatDrivers/tff.c:777: return FR_OK;
                           6502 ;	genRet
   1BC8 75 82 00           6503 	mov	dpl,#0x00
   1BCB                    6504 00106$:
   1BCB D0*00              6505 	pop	_bp
   1BCD 22                 6506 	ret
                           6507 ;------------------------------------------------------------
                           6508 ;Allocation info for local variables in function 'f_mount'
                           6509 ;------------------------------------------------------------
                           6510 ;fs                        Allocated to stack - offset -5
                           6511 ;drv                       Allocated to registers r2 
                           6512 ;fsobj                     Allocated to registers r2 r3 r4 
                           6513 ;------------------------------------------------------------
                           6514 ;	FatDrivers/tff.c:792: FRESULT f_mount (
                           6515 ;	-----------------------------------------
                           6516 ;	 function f_mount
                           6517 ;	-----------------------------------------
   1BCE                    6518 _f_mount:
   1BCE C0*00              6519 	push	_bp
   1BD0 85 81*00           6520 	mov	_bp,sp
                           6521 ;	genReceive
                           6522 ;	FatDrivers/tff.c:800: if (drv) return FR_INVALID_DRIVE;
                           6523 ;	genIfx
                           6524 ;	peephole 177.g	optimized mov sequence
   1BD3 E5 82              6525 	mov	a,dpl
   1BD5 FA                 6526 	mov	r2,a
                           6527 ;	genIfxJump
                           6528 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1BD6 60 05              6529 	jz	00102$
                           6530 ;	Peephole 300	removed redundant label 00112$
                           6531 ;	genRet
   1BD8 75 82 05           6532 	mov	dpl,#0x05
                           6533 ;	Peephole 112.b	changed ljmp to sjmp
   1BDB 80 66              6534 	sjmp	00107$
   1BDD                    6535 00102$:
                           6536 ;	FatDrivers/tff.c:801: fsobj = FatFs;
                           6537 ;	genAssign
   1BDD AA*00              6538 	mov	r2,_FatFs
   1BDF AB*01              6539 	mov	r3,(_FatFs + 1)
   1BE1 AC*02              6540 	mov	r4,(_FatFs + 2)
                           6541 ;	FatDrivers/tff.c:802: FatFs = fs;
                           6542 ;	genAssign
   1BE3 E5*00              6543 	mov	a,_bp
   1BE5 24 FB              6544 	add	a,#0xfffffffb
   1BE7 F8                 6545 	mov	r0,a
   1BE8 86 05              6546 	mov	ar5,@r0
   1BEA 08                 6547 	inc	r0
   1BEB 86 06              6548 	mov	ar6,@r0
   1BED 08                 6549 	inc	r0
   1BEE 86 07              6550 	mov	ar7,@r0
                           6551 ;	genAssign
   1BF0 8D*00              6552 	mov	_FatFs,r5
   1BF2 8E*01              6553 	mov	(_FatFs + 1),r6
   1BF4 8F*02              6554 	mov	(_FatFs + 2),r7
                           6555 ;	FatDrivers/tff.c:803: if (fsobj) memset(fsobj, 0, sizeof(FATFS));
                           6556 ;	genIfx
   1BF6 EA                 6557 	mov	a,r2
   1BF7 4B                 6558 	orl	a,r3
   1BF8 4C                 6559 	orl	a,r4
                           6560 ;	genIfxJump
                           6561 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1BF9 60 26              6562 	jz	00104$
                           6563 ;	Peephole 300	removed redundant label 00113$
                           6564 ;	genIpush
   1BFB C0 05              6565 	push	ar5
   1BFD C0 06              6566 	push	ar6
   1BFF C0 07              6567 	push	ar7
   1C01 74 20              6568 	mov	a,#0x20
   1C03 C0 E0              6569 	push	acc
   1C05 74 02              6570 	mov	a,#0x02
   1C07 C0 E0              6571 	push	acc
                           6572 ;	genIpush
                           6573 ;	Peephole 181	changed mov to clr
   1C09 E4                 6574 	clr	a
   1C0A C0 E0              6575 	push	acc
                           6576 ;	genCall
   1C0C 8A 82              6577 	mov	dpl,r2
   1C0E 8B 83              6578 	mov	dph,r3
   1C10 8C F0              6579 	mov	b,r4
   1C12 12s00r00           6580 	lcall	_memset
   1C15 15 81              6581 	dec	sp
   1C17 15 81              6582 	dec	sp
   1C19 15 81              6583 	dec	sp
   1C1B D0 07              6584 	pop	ar7
   1C1D D0 06              6585 	pop	ar6
   1C1F D0 05              6586 	pop	ar5
   1C21                    6587 00104$:
                           6588 ;	FatDrivers/tff.c:804: if (fs) memset(fs, 0, sizeof(FATFS));
                           6589 ;	genIfx
   1C21 ED                 6590 	mov	a,r5
   1C22 4E                 6591 	orl	a,r6
   1C23 4F                 6592 	orl	a,r7
                           6593 ;	genIfxJump
                           6594 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1C24 60 1A              6595 	jz	00106$
                           6596 ;	Peephole 300	removed redundant label 00114$
                           6597 ;	genAssign
                           6598 ;	genIpush
   1C26 74 20              6599 	mov	a,#0x20
   1C28 C0 E0              6600 	push	acc
   1C2A 74 02              6601 	mov	a,#0x02
   1C2C C0 E0              6602 	push	acc
                           6603 ;	genIpush
                           6604 ;	Peephole 181	changed mov to clr
   1C2E E4                 6605 	clr	a
   1C2F C0 E0              6606 	push	acc
                           6607 ;	genCall
   1C31 8D 82              6608 	mov	dpl,r5
   1C33 8E 83              6609 	mov	dph,r6
   1C35 8F F0              6610 	mov	b,r7
   1C37 12s00r00           6611 	lcall	_memset
   1C3A 15 81              6612 	dec	sp
   1C3C 15 81              6613 	dec	sp
   1C3E 15 81              6614 	dec	sp
   1C40                    6615 00106$:
                           6616 ;	FatDrivers/tff.c:806: return FR_OK;
                           6617 ;	genRet
   1C40 75 82 00           6618 	mov	dpl,#0x00
   1C43                    6619 00107$:
   1C43 D0*00              6620 	pop	_bp
   1C45 22                 6621 	ret
                           6622 ;------------------------------------------------------------
                           6623 ;Allocation info for local variables in function 'f_open'
                           6624 ;------------------------------------------------------------
                           6625 ;path                      Allocated to stack - offset -5
                           6626 ;mode                      Allocated to stack - offset -6
                           6627 ;fp                        Allocated to stack - offset 1
                           6628 ;res                       Allocated to registers r2 
                           6629 ;dir                       Allocated to stack - offset 4
                           6630 ;dirobj                    Allocated to stack - offset 7
                           6631 ;fn                        Allocated to stack - offset 26
                           6632 ;fs                        Allocated to stack - offset 38
                           6633 ;sloc0                     Allocated to stack - offset 41
                           6634 ;sloc1                     Allocated to stack - offset 44
                           6635 ;sloc2                     Allocated to stack - offset 47
                           6636 ;sloc3                     Allocated to stack - offset 50
                           6637 ;------------------------------------------------------------
                           6638 ;	FatDrivers/tff.c:813: FRESULT f_open (
                           6639 ;	-----------------------------------------
                           6640 ;	 function f_open
                           6641 ;	-----------------------------------------
   1C46                    6642 _f_open:
   1C46 C0*00              6643 	push	_bp
   1C48 85 81*00           6644 	mov	_bp,sp
                           6645 ;     genReceive
   1C4B C0 82              6646 	push	dpl
   1C4D C0 83              6647 	push	dph
   1C4F C0 F0              6648 	push	b
   1C51 E5 81              6649 	mov	a,sp
   1C53 24 35              6650 	add	a,#0x35
   1C55 F5 81              6651 	mov	sp,a
                           6652 ;	FatDrivers/tff.c:823: FATFS *fs = FatFs;
                           6653 ;	genAssign
   1C57 E5*00              6654 	mov	a,_bp
   1C59 24 26              6655 	add	a,#0x26
   1C5B F8                 6656 	mov	r0,a
   1C5C A6*00              6657 	mov	@r0,_FatFs
   1C5E 08                 6658 	inc	r0
   1C5F A6*01              6659 	mov	@r0,(_FatFs + 1)
   1C61 08                 6660 	inc	r0
   1C62 A6*02              6661 	mov	@r0,(_FatFs + 2)
                           6662 ;	FatDrivers/tff.c:826: fp->fs = NULL;
                           6663 ;	genPlus
   1C64 A8*00              6664 	mov	r0,_bp
   1C66 08                 6665 	inc	r0
   1C67 E5*00              6666 	mov	a,_bp
   1C69 24 2F              6667 	add	a,#0x2f
   1C6B F9                 6668 	mov	r1,a
                           6669 ;     genPlusIncr
   1C6C 74 04              6670 	mov	a,#0x04
   1C6E 26                 6671 	add	a,@r0
   1C6F F7                 6672 	mov	@r1,a
                           6673 ;	Peephole 181	changed mov to clr
   1C70 E4                 6674 	clr	a
   1C71 08                 6675 	inc	r0
   1C72 36                 6676 	addc	a,@r0
   1C73 09                 6677 	inc	r1
   1C74 F7                 6678 	mov	@r1,a
   1C75 08                 6679 	inc	r0
   1C76 09                 6680 	inc	r1
   1C77 E6                 6681 	mov	a,@r0
   1C78 F7                 6682 	mov	@r1,a
                           6683 ;	genPointerSet
                           6684 ;	genGenPointerSet
   1C79 E5*00              6685 	mov	a,_bp
   1C7B 24 2F              6686 	add	a,#0x2f
   1C7D F8                 6687 	mov	r0,a
   1C7E 86 82              6688 	mov	dpl,@r0
   1C80 08                 6689 	inc	r0
   1C81 86 83              6690 	mov	dph,@r0
   1C83 08                 6691 	inc	r0
   1C84 86 F0              6692 	mov	b,@r0
                           6693 ;	Peephole 181	changed mov to clr
   1C86 E4                 6694 	clr	a
   1C87 12s00r00           6695 	lcall	__gptrput
   1C8A A3                 6696 	inc	dptr
                           6697 ;	Peephole 181	changed mov to clr
   1C8B E4                 6698 	clr	a
   1C8C 12s00r00           6699 	lcall	__gptrput
   1C8F A3                 6700 	inc	dptr
                           6701 ;	Peephole 181	changed mov to clr
   1C90 E4                 6702 	clr	a
   1C91 12s00r00           6703 	lcall	__gptrput
                           6704 ;	FatDrivers/tff.c:831: mode &= FA_READ;
                           6705 ;	genAnd
   1C94 E5*00              6706 	mov	a,_bp
   1C96 24 FA              6707 	add	a,#0xfffffffa
   1C98 F8                 6708 	mov	r0,a
   1C99 E6                 6709 	mov	a,@r0
   1C9A 54 01              6710 	anl	a,#0x01
   1C9C F6                 6711 	mov	@r0,a
                           6712 ;	FatDrivers/tff.c:832: res = auto_mount(&path, 0);
                           6713 ;	genAddrOf
   1C9D E5*00              6714 	mov	a,_bp
   1C9F 24 FB              6715 	add	a,#0xfb
   1CA1 FA                 6716 	mov	r2,a
                           6717 ;	genCast
   1CA2 7B 00              6718 	mov	r3,#0x00
   1CA4 7C 40              6719 	mov	r4,#0x40
                           6720 ;	genIpush
                           6721 ;	Peephole 181	changed mov to clr
   1CA6 E4                 6722 	clr	a
   1CA7 C0 E0              6723 	push	acc
                           6724 ;	genCall
   1CA9 8A 82              6725 	mov	dpl,r2
   1CAB 8B 83              6726 	mov	dph,r3
   1CAD 8C F0              6727 	mov	b,r4
   1CAF 12s13rB5           6728 	lcall	_auto_mount
   1CB2 AA 82              6729 	mov	r2,dpl
   1CB4 15 81              6730 	dec	sp
                           6731 ;	genAssign
                           6732 ;	FatDrivers/tff.c:834: if (res != FR_OK) return res;
                           6733 ;	genCmpEq
                           6734 ;	gencjneshort
   1CB6 BA 00 02           6735 	cjne	r2,#0x00,00113$
                           6736 ;	Peephole 112.b	changed ljmp to sjmp
   1CB9 80 05              6737 	sjmp	00102$
   1CBB                    6738 00113$:
                           6739 ;	genRet
   1CBB 8A 82              6740 	mov	dpl,r2
   1CBD 02s1Fr09           6741 	ljmp	00108$
   1CC0                    6742 00102$:
                           6743 ;	FatDrivers/tff.c:837: res = trace_path(&dirobj, fn, path, &dir);	/* Trace the file path */
                           6744 ;	genIpush
                           6745 ;	genAddrOf
   1CC0 E5*00              6746 	mov	a,_bp
   1CC2 24 04              6747 	add	a,#0x04
   1CC4 FB                 6748 	mov	r3,a
                           6749 ;	genCast
   1CC5 E5*00              6750 	mov	a,_bp
   1CC7 24 29              6751 	add	a,#0x29
   1CC9 F8                 6752 	mov	r0,a
   1CCA A6 03              6753 	mov	@r0,ar3
   1CCC 08                 6754 	inc	r0
   1CCD 76 00              6755 	mov	@r0,#0x00
   1CCF 08                 6756 	inc	r0
   1CD0 76 40              6757 	mov	@r0,#0x40
                           6758 ;	genAddrOf
   1CD2 E5*00              6759 	mov	a,_bp
   1CD4 24 1A              6760 	add	a,#0x1a
   1CD6 FE                 6761 	mov	r6,a
                           6762 ;	genCast
   1CD7 7A 00              6763 	mov	r2,#0x00
   1CD9 7F 40              6764 	mov	r7,#0x40
                           6765 ;	genAddrOf
   1CDB E5*00              6766 	mov	a,_bp
   1CDD 24 07              6767 	add	a,#0x07
   1CDF FC                 6768 	mov	r4,a
                           6769 ;	genCast
   1CE0 7D 00              6770 	mov	r5,#0x00
   1CE2 7B 40              6771 	mov	r3,#0x40
                           6772 ;	genIpush
   1CE4 E5*00              6773 	mov	a,_bp
   1CE6 24 29              6774 	add	a,#0x29
   1CE8 F8                 6775 	mov	r0,a
   1CE9 E6                 6776 	mov	a,@r0
   1CEA C0 E0              6777 	push	acc
   1CEC 08                 6778 	inc	r0
   1CED E6                 6779 	mov	a,@r0
   1CEE C0 E0              6780 	push	acc
   1CF0 08                 6781 	inc	r0
   1CF1 E6                 6782 	mov	a,@r0
   1CF2 C0 E0              6783 	push	acc
                           6784 ;	genIpush
   1CF4 E5*00              6785 	mov	a,_bp
   1CF6 24 FB              6786 	add	a,#0xfffffffb
   1CF8 F8                 6787 	mov	r0,a
   1CF9 E6                 6788 	mov	a,@r0
   1CFA C0 E0              6789 	push	acc
   1CFC 08                 6790 	inc	r0
   1CFD E6                 6791 	mov	a,@r0
   1CFE C0 E0              6792 	push	acc
   1D00 08                 6793 	inc	r0
   1D01 E6                 6794 	mov	a,@r0
   1D02 C0 E0              6795 	push	acc
                           6796 ;	genIpush
   1D04 C0 06              6797 	push	ar6
   1D06 C0 02              6798 	push	ar2
   1D08 C0 07              6799 	push	ar7
                           6800 ;	genCall
   1D0A 8C 82              6801 	mov	dpl,r4
   1D0C 8D 83              6802 	mov	dph,r5
   1D0E 8B F0              6803 	mov	b,r3
   1D10 12s0CrDE           6804 	lcall	_trace_path
   1D13 AB 82              6805 	mov	r3,dpl
   1D15 E5 81              6806 	mov	a,sp
   1D17 24 F7              6807 	add	a,#0xf7
   1D19 F5 81              6808 	mov	sp,a
                           6809 ;	genAssign
   1D1B 8B 02              6810 	mov	ar2,r3
                           6811 ;	FatDrivers/tff.c:884: if (res != FR_OK) return res;		/* Trace failed */
                           6812 ;	genCmpEq
                           6813 ;	gencjne
                           6814 ;	gencjneshort
                           6815 ;	Peephole 241.d	optimized compare
   1D1D E4                 6816 	clr	a
   1D1E BA 00 01           6817 	cjne	r2,#0x00,00114$
   1D21 04                 6818 	inc	a
   1D22                    6819 00114$:
                           6820 ;	Peephole 300	removed redundant label 00115$
                           6821 ;	genIpop
                           6822 ;	genIfx
                           6823 ;	genIfxJump
                           6824 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1D22 70 05              6825 	jnz	00104$
                           6826 ;	Peephole 300	removed redundant label 00116$
                           6827 ;	genRet
   1D24 8A 82              6828 	mov	dpl,r2
   1D26 02s1Fr09           6829 	ljmp	00108$
   1D29                    6830 00104$:
                           6831 ;	FatDrivers/tff.c:885: if (dir == NULL || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
                           6832 ;	genAssign
                           6833 ;	genCmpEq
   1D29 E5*00              6834 	mov	a,_bp
   1D2B 24 04              6835 	add	a,#0x04
   1D2D F8                 6836 	mov	r0,a
                           6837 ;	gencjneshort
   1D2E B6 00 0A           6838 	cjne	@r0,#0x00,00117$
   1D31 08                 6839 	inc	r0
   1D32 B6 00 06           6840 	cjne	@r0,#0x00,00117$
   1D35 08                 6841 	inc	r0
   1D36 B6 00 02           6842 	cjne	@r0,#0x00,00117$
                           6843 ;	Peephole 112.b	changed ljmp to sjmp
   1D39 80 1E              6844 	sjmp	00105$
   1D3B                    6845 00117$:
                           6846 ;	genIpush
                           6847 ;	genPlus
   1D3B E5*00              6848 	mov	a,_bp
   1D3D 24 04              6849 	add	a,#0x04
   1D3F F8                 6850 	mov	r0,a
                           6851 ;     genPlusIncr
   1D40 74 0B              6852 	mov	a,#0x0B
   1D42 26                 6853 	add	a,@r0
   1D43 FD                 6854 	mov	r5,a
                           6855 ;	Peephole 181	changed mov to clr
   1D44 E4                 6856 	clr	a
   1D45 08                 6857 	inc	r0
   1D46 36                 6858 	addc	a,@r0
   1D47 FE                 6859 	mov	r6,a
   1D48 08                 6860 	inc	r0
   1D49 86 07              6861 	mov	ar7,@r0
                           6862 ;	genPointerGet
                           6863 ;	genGenPointerGet
   1D4B 8D 82              6864 	mov	dpl,r5
   1D4D 8E 83              6865 	mov	dph,r6
   1D4F 8F F0              6866 	mov	b,r7
   1D51 12s00r00           6867 	lcall	__gptrget
                           6868 ;	genAnd
   1D54 FD                 6869 	mov	r5,a
                           6870 ;	Peephole 105	removed redundant mov
   1D55 54 10              6871 	anl	a,#0x10
                           6872 ;	genIpop
                           6873 ;	genIfx
                           6874 ;	genIfxJump
                           6875 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1D57 60 06              6876 	jz	00106$
                           6877 ;	Peephole 300	removed redundant label 00118$
   1D59                    6878 00105$:
                           6879 ;	FatDrivers/tff.c:886: return FR_NO_FILE;
                           6880 ;	genRet
   1D59 75 82 02           6881 	mov	dpl,#0x02
   1D5C 02s1Fr09           6882 	ljmp	00108$
   1D5F                    6883 00106$:
                           6884 ;	FatDrivers/tff.c:895: fp->flag = mode;							/* File access mode */
                           6885 ;	genPlus
   1D5F A8*00              6886 	mov	r0,_bp
   1D61 08                 6887 	inc	r0
                           6888 ;     genPlusIncr
   1D62 74 02              6889 	mov	a,#0x02
   1D64 26                 6890 	add	a,@r0
   1D65 FA                 6891 	mov	r2,a
                           6892 ;	Peephole 181	changed mov to clr
   1D66 E4                 6893 	clr	a
   1D67 08                 6894 	inc	r0
   1D68 36                 6895 	addc	a,@r0
   1D69 FB                 6896 	mov	r3,a
   1D6A 08                 6897 	inc	r0
   1D6B 86 04              6898 	mov	ar4,@r0
                           6899 ;	genPointerSet
                           6900 ;	genGenPointerSet
   1D6D 8A 82              6901 	mov	dpl,r2
   1D6F 8B 83              6902 	mov	dph,r3
   1D71 8C F0              6903 	mov	b,r4
   1D73 E5*00              6904 	mov	a,_bp
   1D75 24 FA              6905 	add	a,#0xfffffffa
   1D77 F8                 6906 	mov	r0,a
   1D78 E6                 6907 	mov	a,@r0
   1D79 12s00r00           6908 	lcall	__gptrput
                           6909 ;	FatDrivers/tff.c:896: fp->org_clust =								/* File start cluster */
                           6910 ;	genPlus
   1D7C A8*00              6911 	mov	r0,_bp
   1D7E 08                 6912 	inc	r0
   1D7F E5*00              6913 	mov	a,_bp
   1D81 24 2C              6914 	add	a,#0x2c
   1D83 F9                 6915 	mov	r1,a
                           6916 ;     genPlusIncr
   1D84 74 0F              6917 	mov	a,#0x0F
   1D86 26                 6918 	add	a,@r0
   1D87 F7                 6919 	mov	@r1,a
                           6920 ;	Peephole 181	changed mov to clr
   1D88 E4                 6921 	clr	a
   1D89 08                 6922 	inc	r0
   1D8A 36                 6923 	addc	a,@r0
   1D8B 09                 6924 	inc	r1
   1D8C F7                 6925 	mov	@r1,a
   1D8D 08                 6926 	inc	r0
   1D8E 09                 6927 	inc	r1
   1D8F E6                 6928 	mov	a,@r0
   1D90 F7                 6929 	mov	@r1,a
                           6930 ;	FatDrivers/tff.c:898: ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
                           6931 ;	genPlus
   1D91 E5*00              6932 	mov	a,_bp
   1D93 24 04              6933 	add	a,#0x04
   1D95 F8                 6934 	mov	r0,a
                           6935 ;     genPlusIncr
   1D96 74 14              6936 	mov	a,#0x14
   1D98 26                 6937 	add	a,@r0
   1D99 FA                 6938 	mov	r2,a
                           6939 ;	Peephole 181	changed mov to clr
   1D9A E4                 6940 	clr	a
   1D9B 08                 6941 	inc	r0
   1D9C 36                 6942 	addc	a,@r0
   1D9D FB                 6943 	mov	r3,a
   1D9E 08                 6944 	inc	r0
   1D9F 86 04              6945 	mov	ar4,@r0
                           6946 ;	genPointerGet
                           6947 ;	genGenPointerGet
   1DA1 8A 82              6948 	mov	dpl,r2
   1DA3 8B 83              6949 	mov	dph,r3
   1DA5 8C F0              6950 	mov	b,r4
   1DA7 12s00r00           6951 	lcall	__gptrget
   1DAA FA                 6952 	mov	r2,a
   1DAB A3                 6953 	inc	dptr
   1DAC 12s00r00           6954 	lcall	__gptrget
   1DAF FB                 6955 	mov	r3,a
                           6956 ;	genCast
                           6957 ;	genLeftShift
                           6958 ;	genLeftShiftLiteral
                           6959 ;	Peephole 3.c	changed mov to clr
   1DB0 E4                 6960 	clr	a
   1DB1 FC                 6961 	mov	r4,a
   1DB2 FD                 6962 	mov	r5,a
   1DB3 E5*00              6963 	mov	a,_bp
   1DB5 24 32              6964 	add	a,#0x32
                           6965 ;	genlshFour
                           6966 ;	Peephole 185	changed order of increment (acc incremented also!)
   1DB7 04                 6967 	inc	a
                           6968 ;	Peephole 185	changed order of increment (acc incremented also!)
   1DB8 04                 6969 	inc	a
                           6970 ;	Peephole 185	changed order of increment (acc incremented also!)
   1DB9 04                 6971 	inc	a
   1DBA F8                 6972 	mov	r0,a
   1DBB A6 03              6973 	mov	@r0,ar3
   1DBD 18                 6974 	dec	r0
   1DBE A6 02              6975 	mov	@r0,ar2
   1DC0 18                 6976 	dec	r0
   1DC1 76 00              6977 	mov	@r0,#0x00
   1DC3 18                 6978 	dec	r0
   1DC4 76 00              6979 	mov	@r0,#0x00
                           6980 ;	FatDrivers/tff.c:900: LD_WORD(&dir[DIR_FstClusLO]);
                           6981 ;	genPlus
   1DC6 E5*00              6982 	mov	a,_bp
   1DC8 24 04              6983 	add	a,#0x04
   1DCA F8                 6984 	mov	r0,a
                           6985 ;     genPlusIncr
   1DCB 74 1A              6986 	mov	a,#0x1A
   1DCD 26                 6987 	add	a,@r0
   1DCE FE                 6988 	mov	r6,a
                           6989 ;	Peephole 181	changed mov to clr
   1DCF E4                 6990 	clr	a
   1DD0 08                 6991 	inc	r0
   1DD1 36                 6992 	addc	a,@r0
   1DD2 FF                 6993 	mov	r7,a
   1DD3 08                 6994 	inc	r0
   1DD4 86 02              6995 	mov	ar2,@r0
                           6996 ;	genPointerGet
                           6997 ;	genGenPointerGet
   1DD6 8E 82              6998 	mov	dpl,r6
   1DD8 8F 83              6999 	mov	dph,r7
   1DDA 8A F0              7000 	mov	b,r2
   1DDC 12s00r00           7001 	lcall	__gptrget
   1DDF FE                 7002 	mov	r6,a
   1DE0 A3                 7003 	inc	dptr
   1DE1 12s00r00           7004 	lcall	__gptrget
   1DE4 FF                 7005 	mov	r7,a
                           7006 ;	genCast
                           7007 ;	genOr
                           7008 ;	Peephole 3.c	changed mov to clr
   1DE5 E4                 7009 	clr	a
   1DE6 FA                 7010 	mov	r2,a
   1DE7 FB                 7011 	mov	r3,a
   1DE8 E5*00              7012 	mov	a,_bp
   1DEA 24 32              7013 	add	a,#0x32
   1DEC F8                 7014 	mov	r0,a
   1DED E6                 7015 	mov	a,@r0
   1DEE 42 06              7016 	orl	ar6,a
   1DF0 08                 7017 	inc	r0
   1DF1 E6                 7018 	mov	a,@r0
   1DF2 42 07              7019 	orl	ar7,a
   1DF4 08                 7020 	inc	r0
   1DF5 E6                 7021 	mov	a,@r0
   1DF6 42 02              7022 	orl	ar2,a
   1DF8 08                 7023 	inc	r0
   1DF9 E6                 7024 	mov	a,@r0
   1DFA 42 03              7025 	orl	ar3,a
                           7026 ;	genPointerSet
                           7027 ;	genGenPointerSet
   1DFC E5*00              7028 	mov	a,_bp
   1DFE 24 2C              7029 	add	a,#0x2c
   1E00 F8                 7030 	mov	r0,a
   1E01 86 82              7031 	mov	dpl,@r0
   1E03 08                 7032 	inc	r0
   1E04 86 83              7033 	mov	dph,@r0
   1E06 08                 7034 	inc	r0
   1E07 86 F0              7035 	mov	b,@r0
   1E09 EE                 7036 	mov	a,r6
   1E0A 12s00r00           7037 	lcall	__gptrput
   1E0D A3                 7038 	inc	dptr
   1E0E EF                 7039 	mov	a,r7
   1E0F 12s00r00           7040 	lcall	__gptrput
   1E12 A3                 7041 	inc	dptr
   1E13 EA                 7042 	mov	a,r2
   1E14 12s00r00           7043 	lcall	__gptrput
   1E17 A3                 7044 	inc	dptr
   1E18 EB                 7045 	mov	a,r3
   1E19 12s00r00           7046 	lcall	__gptrput
                           7047 ;	FatDrivers/tff.c:901: fp->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* File size */
                           7048 ;	genPlus
   1E1C A8*00              7049 	mov	r0,_bp
   1E1E 08                 7050 	inc	r0
   1E1F E5*00              7051 	mov	a,_bp
   1E21 24 32              7052 	add	a,#0x32
   1E23 F9                 7053 	mov	r1,a
                           7054 ;     genPlusIncr
   1E24 74 0B              7055 	mov	a,#0x0B
   1E26 26                 7056 	add	a,@r0
   1E27 F7                 7057 	mov	@r1,a
                           7058 ;	Peephole 181	changed mov to clr
   1E28 E4                 7059 	clr	a
   1E29 08                 7060 	inc	r0
   1E2A 36                 7061 	addc	a,@r0
   1E2B 09                 7062 	inc	r1
   1E2C F7                 7063 	mov	@r1,a
   1E2D 08                 7064 	inc	r0
   1E2E 09                 7065 	inc	r1
   1E2F E6                 7066 	mov	a,@r0
   1E30 F7                 7067 	mov	@r1,a
                           7068 ;	genPlus
   1E31 E5*00              7069 	mov	a,_bp
   1E33 24 04              7070 	add	a,#0x04
   1E35 F8                 7071 	mov	r0,a
                           7072 ;     genPlusIncr
   1E36 74 1C              7073 	mov	a,#0x1C
   1E38 26                 7074 	add	a,@r0
   1E39 FD                 7075 	mov	r5,a
                           7076 ;	Peephole 181	changed mov to clr
   1E3A E4                 7077 	clr	a
   1E3B 08                 7078 	inc	r0
   1E3C 36                 7079 	addc	a,@r0
   1E3D FE                 7080 	mov	r6,a
   1E3E 08                 7081 	inc	r0
   1E3F 86 07              7082 	mov	ar7,@r0
                           7083 ;	genPointerGet
                           7084 ;	genGenPointerGet
   1E41 8D 82              7085 	mov	dpl,r5
   1E43 8E 83              7086 	mov	dph,r6
   1E45 8F F0              7087 	mov	b,r7
   1E47 12s00r00           7088 	lcall	__gptrget
   1E4A FD                 7089 	mov	r5,a
   1E4B A3                 7090 	inc	dptr
   1E4C 12s00r00           7091 	lcall	__gptrget
   1E4F FE                 7092 	mov	r6,a
   1E50 A3                 7093 	inc	dptr
   1E51 12s00r00           7094 	lcall	__gptrget
   1E54 FF                 7095 	mov	r7,a
   1E55 A3                 7096 	inc	dptr
   1E56 12s00r00           7097 	lcall	__gptrget
   1E59 FA                 7098 	mov	r2,a
                           7099 ;	genPointerSet
                           7100 ;	genGenPointerSet
   1E5A E5*00              7101 	mov	a,_bp
   1E5C 24 32              7102 	add	a,#0x32
   1E5E F8                 7103 	mov	r0,a
   1E5F 86 82              7104 	mov	dpl,@r0
   1E61 08                 7105 	inc	r0
   1E62 86 83              7106 	mov	dph,@r0
   1E64 08                 7107 	inc	r0
   1E65 86 F0              7108 	mov	b,@r0
   1E67 ED                 7109 	mov	a,r5
   1E68 12s00r00           7110 	lcall	__gptrput
   1E6B A3                 7111 	inc	dptr
   1E6C EE                 7112 	mov	a,r6
   1E6D 12s00r00           7113 	lcall	__gptrput
   1E70 A3                 7114 	inc	dptr
   1E71 EF                 7115 	mov	a,r7
   1E72 12s00r00           7116 	lcall	__gptrput
   1E75 A3                 7117 	inc	dptr
   1E76 EA                 7118 	mov	a,r2
   1E77 12s00r00           7119 	lcall	__gptrput
                           7120 ;	FatDrivers/tff.c:902: fp->fptr = 0;								/* File ptr */
                           7121 ;	genPlus
   1E7A A8*00              7122 	mov	r0,_bp
   1E7C 08                 7123 	inc	r0
                           7124 ;     genPlusIncr
   1E7D 74 07              7125 	mov	a,#0x07
   1E7F 26                 7126 	add	a,@r0
   1E80 FA                 7127 	mov	r2,a
                           7128 ;	Peephole 181	changed mov to clr
   1E81 E4                 7129 	clr	a
   1E82 08                 7130 	inc	r0
   1E83 36                 7131 	addc	a,@r0
   1E84 FB                 7132 	mov	r3,a
   1E85 08                 7133 	inc	r0
   1E86 86 04              7134 	mov	ar4,@r0
                           7135 ;	genPointerSet
                           7136 ;	genGenPointerSet
   1E88 8A 82              7137 	mov	dpl,r2
   1E8A 8B 83              7138 	mov	dph,r3
   1E8C 8C F0              7139 	mov	b,r4
                           7140 ;	Peephole 181	changed mov to clr
   1E8E E4                 7141 	clr	a
   1E8F 12s00r00           7142 	lcall	__gptrput
   1E92 A3                 7143 	inc	dptr
                           7144 ;	Peephole 181	changed mov to clr
   1E93 E4                 7145 	clr	a
   1E94 12s00r00           7146 	lcall	__gptrput
   1E97 A3                 7147 	inc	dptr
                           7148 ;	Peephole 181	changed mov to clr
   1E98 E4                 7149 	clr	a
   1E99 12s00r00           7150 	lcall	__gptrput
   1E9C A3                 7151 	inc	dptr
                           7152 ;	Peephole 181	changed mov to clr
   1E9D E4                 7153 	clr	a
   1E9E 12s00r00           7154 	lcall	__gptrput
                           7155 ;	FatDrivers/tff.c:903: fp->sect_clust = 1;							/* Sector counter */
                           7156 ;	genPlus
   1EA1 A8*00              7157 	mov	r0,_bp
   1EA3 08                 7158 	inc	r0
                           7159 ;     genPlusIncr
   1EA4 74 03              7160 	mov	a,#0x03
   1EA6 26                 7161 	add	a,@r0
   1EA7 FA                 7162 	mov	r2,a
                           7163 ;	Peephole 181	changed mov to clr
   1EA8 E4                 7164 	clr	a
   1EA9 08                 7165 	inc	r0
   1EAA 36                 7166 	addc	a,@r0
   1EAB FB                 7167 	mov	r3,a
   1EAC 08                 7168 	inc	r0
   1EAD 86 04              7169 	mov	ar4,@r0
                           7170 ;	genPointerSet
                           7171 ;	genGenPointerSet
   1EAF 8A 82              7172 	mov	dpl,r2
   1EB1 8B 83              7173 	mov	dph,r3
   1EB3 8C F0              7174 	mov	b,r4
   1EB5 74 01              7175 	mov	a,#0x01
   1EB7 12s00r00           7176 	lcall	__gptrput
                           7177 ;	FatDrivers/tff.c:904: fp->fs = fs; fp->id = fs->id;				/* Owner file system object of the file */
                           7178 ;	genPointerSet
                           7179 ;	genGenPointerSet
   1EBA E5*00              7180 	mov	a,_bp
   1EBC 24 2F              7181 	add	a,#0x2f
   1EBE F8                 7182 	mov	r0,a
   1EBF 86 82              7183 	mov	dpl,@r0
   1EC1 08                 7184 	inc	r0
   1EC2 86 83              7185 	mov	dph,@r0
   1EC4 08                 7186 	inc	r0
   1EC5 86 F0              7187 	mov	b,@r0
   1EC7 E5*00              7188 	mov	a,_bp
   1EC9 24 26              7189 	add	a,#0x26
   1ECB F9                 7190 	mov	r1,a
   1ECC E7                 7191 	mov	a,@r1
   1ECD 12s00r00           7192 	lcall	__gptrput
   1ED0 A3                 7193 	inc	dptr
   1ED1 09                 7194 	inc	r1
   1ED2 E7                 7195 	mov	a,@r1
   1ED3 12s00r00           7196 	lcall	__gptrput
   1ED6 A3                 7197 	inc	dptr
   1ED7 09                 7198 	inc	r1
   1ED8 E7                 7199 	mov	a,@r1
   1ED9 12s00r00           7200 	lcall	__gptrput
                           7201 ;	genPointerGet
                           7202 ;	genGenPointerGet
   1EDC E5*00              7203 	mov	a,_bp
   1EDE 24 26              7204 	add	a,#0x26
   1EE0 F8                 7205 	mov	r0,a
   1EE1 86 82              7206 	mov	dpl,@r0
   1EE3 08                 7207 	inc	r0
   1EE4 86 83              7208 	mov	dph,@r0
   1EE6 08                 7209 	inc	r0
   1EE7 86 F0              7210 	mov	b,@r0
   1EE9 12s00r00           7211 	lcall	__gptrget
   1EEC FA                 7212 	mov	r2,a
   1EED A3                 7213 	inc	dptr
   1EEE 12s00r00           7214 	lcall	__gptrget
   1EF1 FB                 7215 	mov	r3,a
                           7216 ;	genPointerSet
                           7217 ;	genGenPointerSet
   1EF2 A8*00              7218 	mov	r0,_bp
   1EF4 08                 7219 	inc	r0
   1EF5 86 82              7220 	mov	dpl,@r0
   1EF7 08                 7221 	inc	r0
   1EF8 86 83              7222 	mov	dph,@r0
   1EFA 08                 7223 	inc	r0
   1EFB 86 F0              7224 	mov	b,@r0
   1EFD EA                 7225 	mov	a,r2
   1EFE 12s00r00           7226 	lcall	__gptrput
   1F01 A3                 7227 	inc	dptr
   1F02 EB                 7228 	mov	a,r3
   1F03 12s00r00           7229 	lcall	__gptrput
                           7230 ;	FatDrivers/tff.c:906: return FR_OK;
                           7231 ;	genRet
   1F06 75 82 00           7232 	mov	dpl,#0x00
   1F09                    7233 00108$:
   1F09 85*00 81           7234 	mov	sp,_bp
   1F0C D0*00              7235 	pop	_bp
   1F0E 22                 7236 	ret
                           7237 ;------------------------------------------------------------
                           7238 ;Allocation info for local variables in function 'f_read'
                           7239 ;------------------------------------------------------------
                           7240 ;buff                      Allocated to stack - offset -5
                           7241 ;btr                       Allocated to stack - offset -7
                           7242 ;br                        Allocated to stack - offset -10
                           7243 ;fp                        Allocated to stack - offset 1
                           7244 ;sect                      Allocated to stack - offset 4
                           7245 ;remain                    Allocated to stack - offset 8
                           7246 ;rcnt                      Allocated to stack - offset 12
                           7247 ;cc                        Allocated to registers r6 r7 
                           7248 ;clust                     Allocated to stack - offset 14
                           7249 ;rbuff                     Allocated to stack - offset 18
                           7250 ;res                       Allocated to registers r2 
                           7251 ;fs                        Allocated to stack - offset 21
                           7252 ;sloc0                     Allocated to stack - offset 27
                           7253 ;sloc1                     Allocated to stack - offset 24
                           7254 ;sloc2                     Allocated to stack - offset 27
                           7255 ;sloc3                     Allocated to stack - offset 30
                           7256 ;sloc4                     Allocated to stack - offset 34
                           7257 ;sloc5                     Allocated to stack - offset 37
                           7258 ;sloc6                     Allocated to stack - offset 40
                           7259 ;sloc7                     Allocated to stack - offset 43
                           7260 ;sloc8                     Allocated to stack - offset 46
                           7261 ;sloc9                     Allocated to stack - offset 50
                           7262 ;sloc10                    Allocated to stack - offset 53
                           7263 ;sloc11                    Allocated to stack - offset 56
                           7264 ;------------------------------------------------------------
                           7265 ;	FatDrivers/tff.c:913: FRESULT f_read (
                           7266 ;	-----------------------------------------
                           7267 ;	 function f_read
                           7268 ;	-----------------------------------------
   1F0F                    7269 _f_read:
   1F0F C0*00              7270 	push	_bp
   1F11 85 81*00           7271 	mov	_bp,sp
                           7272 ;     genReceive
   1F14 C0 82              7273 	push	dpl
   1F16 C0 83              7274 	push	dph
   1F18 C0 F0              7275 	push	b
   1F1A E5 81              7276 	mov	a,sp
   1F1C 24 3A              7277 	add	a,#0x3a
   1F1E F5 81              7278 	mov	sp,a
                           7279 ;	FatDrivers/tff.c:923: BYTE *rbuff = buff;
                           7280 ;	genAssign
   1F20 E5*00              7281 	mov	a,_bp
   1F22 24 FB              7282 	add	a,#0xfffffffb
   1F24 F8                 7283 	mov	r0,a
   1F25 86 05              7284 	mov	ar5,@r0
   1F27 08                 7285 	inc	r0
   1F28 86 06              7286 	mov	ar6,@r0
   1F2A 08                 7287 	inc	r0
   1F2B 86 07              7288 	mov	ar7,@r0
                           7289 ;	genAssign
   1F2D E5*00              7290 	mov	a,_bp
   1F2F 24 12              7291 	add	a,#0x12
   1F31 F8                 7292 	mov	r0,a
   1F32 A6 05              7293 	mov	@r0,ar5
   1F34 08                 7294 	inc	r0
   1F35 A6 06              7295 	mov	@r0,ar6
   1F37 08                 7296 	inc	r0
   1F38 A6 07              7297 	mov	@r0,ar7
                           7298 ;	FatDrivers/tff.c:925: FATFS *fs = fp->fs;
                           7299 ;	genPlus
   1F3A A8*00              7300 	mov	r0,_bp
   1F3C 08                 7301 	inc	r0
                           7302 ;     genPlusIncr
   1F3D 74 04              7303 	mov	a,#0x04
   1F3F 26                 7304 	add	a,@r0
   1F40 FD                 7305 	mov	r5,a
                           7306 ;	Peephole 181	changed mov to clr
   1F41 E4                 7307 	clr	a
   1F42 08                 7308 	inc	r0
   1F43 36                 7309 	addc	a,@r0
   1F44 FE                 7310 	mov	r6,a
   1F45 08                 7311 	inc	r0
   1F46 86 07              7312 	mov	ar7,@r0
                           7313 ;	genPointerGet
                           7314 ;	genGenPointerGet
   1F48 8D 82              7315 	mov	dpl,r5
   1F4A 8E 83              7316 	mov	dph,r6
   1F4C 8F F0              7317 	mov	b,r7
   1F4E 12s00r00           7318 	lcall	__gptrget
   1F51 FD                 7319 	mov	r5,a
   1F52 A3                 7320 	inc	dptr
   1F53 12s00r00           7321 	lcall	__gptrget
   1F56 FE                 7322 	mov	r6,a
   1F57 A3                 7323 	inc	dptr
   1F58 12s00r00           7324 	lcall	__gptrget
   1F5B FF                 7325 	mov	r7,a
                           7326 ;	genAssign
   1F5C E5*00              7327 	mov	a,_bp
   1F5E 24 15              7328 	add	a,#0x15
   1F60 F8                 7329 	mov	r0,a
   1F61 A6 05              7330 	mov	@r0,ar5
   1F63 08                 7331 	inc	r0
   1F64 A6 06              7332 	mov	@r0,ar6
   1F66 08                 7333 	inc	r0
   1F67 A6 07              7334 	mov	@r0,ar7
                           7335 ;	FatDrivers/tff.c:928: *br = 0;
                           7336 ;	genAssign
   1F69 E5*00              7337 	mov	a,_bp
   1F6B 24 F6              7338 	add	a,#0xfffffff6
   1F6D F8                 7339 	mov	r0,a
   1F6E E5*00              7340 	mov	a,_bp
   1F70 24 18              7341 	add	a,#0x18
   1F72 F9                 7342 	mov	r1,a
   1F73 E6                 7343 	mov	a,@r0
   1F74 F7                 7344 	mov	@r1,a
   1F75 08                 7345 	inc	r0
   1F76 09                 7346 	inc	r1
   1F77 E6                 7347 	mov	a,@r0
   1F78 F7                 7348 	mov	@r1,a
   1F79 08                 7349 	inc	r0
   1F7A 09                 7350 	inc	r1
   1F7B E6                 7351 	mov	a,@r0
   1F7C F7                 7352 	mov	@r1,a
                           7353 ;	genPointerSet
                           7354 ;	genGenPointerSet
   1F7D E5*00              7355 	mov	a,_bp
   1F7F 24 18              7356 	add	a,#0x18
   1F81 F8                 7357 	mov	r0,a
   1F82 86 82              7358 	mov	dpl,@r0
   1F84 08                 7359 	inc	r0
   1F85 86 83              7360 	mov	dph,@r0
   1F87 08                 7361 	inc	r0
   1F88 86 F0              7362 	mov	b,@r0
                           7363 ;	Peephole 181	changed mov to clr
   1F8A E4                 7364 	clr	a
   1F8B 12s00r00           7365 	lcall	__gptrput
   1F8E A3                 7366 	inc	dptr
                           7367 ;	Peephole 181	changed mov to clr
   1F8F E4                 7368 	clr	a
   1F90 12s00r00           7369 	lcall	__gptrput
                           7370 ;	FatDrivers/tff.c:929: res = validate(fs, fp->id);						/* Check validity of the object */
                           7371 ;	genPointerGet
                           7372 ;	genGenPointerGet
   1F93 A8*00              7373 	mov	r0,_bp
   1F95 08                 7374 	inc	r0
   1F96 86 82              7375 	mov	dpl,@r0
   1F98 08                 7376 	inc	r0
   1F99 86 83              7377 	mov	dph,@r0
   1F9B 08                 7378 	inc	r0
   1F9C 86 F0              7379 	mov	b,@r0
   1F9E 12s00r00           7380 	lcall	__gptrget
   1FA1 FA                 7381 	mov	r2,a
   1FA2 A3                 7382 	inc	dptr
   1FA3 12s00r00           7383 	lcall	__gptrget
   1FA6 FB                 7384 	mov	r3,a
                           7385 ;	genIpush
   1FA7 C0 02              7386 	push	ar2
   1FA9 C0 03              7387 	push	ar3
                           7388 ;	genCall
   1FAB E5*00              7389 	mov	a,_bp
   1FAD 24 15              7390 	add	a,#0x15
   1FAF F8                 7391 	mov	r0,a
   1FB0 86 82              7392 	mov	dpl,@r0
   1FB2 08                 7393 	inc	r0
   1FB3 86 83              7394 	mov	dph,@r0
   1FB5 08                 7395 	inc	r0
   1FB6 86 F0              7396 	mov	b,@r0
   1FB8 12s1Br84           7397 	lcall	_validate
   1FBB AA 82              7398 	mov	r2,dpl
   1FBD 15 81              7399 	dec	sp
   1FBF 15 81              7400 	dec	sp
                           7401 ;	genAssign
                           7402 ;	FatDrivers/tff.c:930: if (res != FR_OK) return res;
                           7403 ;	genCmpEq
                           7404 ;	gencjneshort
   1FC1 BA 00 02           7405 	cjne	r2,#0x00,00152$
                           7406 ;	Peephole 112.b	changed ljmp to sjmp
   1FC4 80 05              7407 	sjmp	00102$
   1FC6                    7408 00152$:
                           7409 ;	genRet
   1FC6 8A 82              7410 	mov	dpl,r2
   1FC8 02s26r43           7411 	ljmp	00132$
   1FCB                    7412 00102$:
                           7413 ;	FatDrivers/tff.c:931: if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
                           7414 ;	genPlus
   1FCB A8*00              7415 	mov	r0,_bp
   1FCD 08                 7416 	inc	r0
   1FCE E5*00              7417 	mov	a,_bp
   1FD0 24 38              7418 	add	a,#0x38
   1FD2 F9                 7419 	mov	r1,a
                           7420 ;     genPlusIncr
   1FD3 74 02              7421 	mov	a,#0x02
   1FD5 26                 7422 	add	a,@r0
   1FD6 F7                 7423 	mov	@r1,a
                           7424 ;	Peephole 181	changed mov to clr
   1FD7 E4                 7425 	clr	a
   1FD8 08                 7426 	inc	r0
   1FD9 36                 7427 	addc	a,@r0
   1FDA 09                 7428 	inc	r1
   1FDB F7                 7429 	mov	@r1,a
   1FDC 08                 7430 	inc	r0
   1FDD 09                 7431 	inc	r1
   1FDE E6                 7432 	mov	a,@r0
   1FDF F7                 7433 	mov	@r1,a
                           7434 ;	genPointerGet
                           7435 ;	genGenPointerGet
   1FE0 E5*00              7436 	mov	a,_bp
   1FE2 24 38              7437 	add	a,#0x38
   1FE4 F8                 7438 	mov	r0,a
   1FE5 86 82              7439 	mov	dpl,@r0
   1FE7 08                 7440 	inc	r0
   1FE8 86 83              7441 	mov	dph,@r0
   1FEA 08                 7442 	inc	r0
   1FEB 86 F0              7443 	mov	b,@r0
   1FED 12s00r00           7444 	lcall	__gptrget
                           7445 ;	genAnd
   1FF0 FA                 7446 	mov	r2,a
                           7447 ;	Peephole 105	removed redundant mov
                           7448 ;	genIfxJump
                           7449 ;	Peephole 108.d	removed ljmp by inverse jump logic
   1FF1 30 E7 06           7450 	jnb	acc.7,00104$
                           7451 ;	Peephole 300	removed redundant label 00153$
                           7452 ;	genRet
   1FF4 75 82 08           7453 	mov	dpl,#0x08
   1FF7 02s26r43           7454 	ljmp	00132$
   1FFA                    7455 00104$:
                           7456 ;	FatDrivers/tff.c:932: if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
                           7457 ;	genAnd
   1FFA EA                 7458 	mov	a,r2
                           7459 ;	genIfxJump
                           7460 ;	Peephole 108.e	removed ljmp by inverse jump logic
   1FFB 20 E0 06           7461 	jb	acc.0,00106$
                           7462 ;	Peephole 300	removed redundant label 00154$
                           7463 ;	genRet
   1FFE 75 82 06           7464 	mov	dpl,#0x06
   2001 02s26r43           7465 	ljmp	00132$
   2004                    7466 00106$:
                           7467 ;	FatDrivers/tff.c:933: remain = fp->fsize - fp->fptr;
                           7468 ;	genIpush
                           7469 ;	genPlus
   2004 A8*00              7470 	mov	r0,_bp
   2006 08                 7471 	inc	r0
                           7472 ;     genPlusIncr
   2007 74 0B              7473 	mov	a,#0x0B
   2009 26                 7474 	add	a,@r0
   200A FA                 7475 	mov	r2,a
                           7476 ;	Peephole 181	changed mov to clr
   200B E4                 7477 	clr	a
   200C 08                 7478 	inc	r0
   200D 36                 7479 	addc	a,@r0
   200E FB                 7480 	mov	r3,a
   200F 08                 7481 	inc	r0
   2010 86 04              7482 	mov	ar4,@r0
                           7483 ;	genPointerGet
                           7484 ;	genGenPointerGet
   2012 8A 82              7485 	mov	dpl,r2
   2014 8B 83              7486 	mov	dph,r3
   2016 8C F0              7487 	mov	b,r4
   2018 E5*00              7488 	mov	a,_bp
   201A 24 1E              7489 	add	a,#0x1e
   201C F8                 7490 	mov	r0,a
   201D 12s00r00           7491 	lcall	__gptrget
   2020 F6                 7492 	mov	@r0,a
   2021 A3                 7493 	inc	dptr
   2022 12s00r00           7494 	lcall	__gptrget
   2025 08                 7495 	inc	r0
   2026 F6                 7496 	mov	@r0,a
   2027 A3                 7497 	inc	dptr
   2028 12s00r00           7498 	lcall	__gptrget
   202B 08                 7499 	inc	r0
   202C F6                 7500 	mov	@r0,a
   202D A3                 7501 	inc	dptr
   202E 12s00r00           7502 	lcall	__gptrget
   2031 08                 7503 	inc	r0
   2032 F6                 7504 	mov	@r0,a
                           7505 ;	genPlus
   2033 A8*00              7506 	mov	r0,_bp
   2035 08                 7507 	inc	r0
   2036 E5*00              7508 	mov	a,_bp
   2038 24 1B              7509 	add	a,#0x1b
   203A F9                 7510 	mov	r1,a
                           7511 ;     genPlusIncr
   203B 74 07              7512 	mov	a,#0x07
   203D 26                 7513 	add	a,@r0
   203E F7                 7514 	mov	@r1,a
                           7515 ;	Peephole 181	changed mov to clr
   203F E4                 7516 	clr	a
   2040 08                 7517 	inc	r0
   2041 36                 7518 	addc	a,@r0
   2042 09                 7519 	inc	r1
   2043 F7                 7520 	mov	@r1,a
   2044 08                 7521 	inc	r0
   2045 09                 7522 	inc	r1
   2046 E6                 7523 	mov	a,@r0
   2047 F7                 7524 	mov	@r1,a
                           7525 ;	genPointerGet
                           7526 ;	genGenPointerGet
   2048 E5*00              7527 	mov	a,_bp
   204A 24 1B              7528 	add	a,#0x1b
   204C F8                 7529 	mov	r0,a
   204D 86 82              7530 	mov	dpl,@r0
   204F 08                 7531 	inc	r0
   2050 86 83              7532 	mov	dph,@r0
   2052 08                 7533 	inc	r0
   2053 86 F0              7534 	mov	b,@r0
   2055 12s00r00           7535 	lcall	__gptrget
   2058 FE                 7536 	mov	r6,a
   2059 A3                 7537 	inc	dptr
   205A 12s00r00           7538 	lcall	__gptrget
   205D FF                 7539 	mov	r7,a
   205E A3                 7540 	inc	dptr
   205F 12s00r00           7541 	lcall	__gptrget
   2062 FA                 7542 	mov	r2,a
   2063 A3                 7543 	inc	dptr
   2064 12s00r00           7544 	lcall	__gptrget
   2067 FB                 7545 	mov	r3,a
                           7546 ;	genMinus
   2068 E5*00              7547 	mov	a,_bp
   206A 24 1E              7548 	add	a,#0x1e
   206C F8                 7549 	mov	r0,a
   206D E6                 7550 	mov	a,@r0
   206E C3                 7551 	clr	c
                           7552 ;	Peephole 236.l	used r6 instead of ar6
   206F 9E                 7553 	subb	a,r6
   2070 FE                 7554 	mov	r6,a
   2071 08                 7555 	inc	r0
   2072 E6                 7556 	mov	a,@r0
                           7557 ;	Peephole 236.l	used r7 instead of ar7
   2073 9F                 7558 	subb	a,r7
   2074 FF                 7559 	mov	r7,a
   2075 08                 7560 	inc	r0
   2076 E6                 7561 	mov	a,@r0
                           7562 ;	Peephole 236.l	used r2 instead of ar2
   2077 9A                 7563 	subb	a,r2
   2078 FA                 7564 	mov	r2,a
   2079 08                 7565 	inc	r0
   207A E6                 7566 	mov	a,@r0
                           7567 ;	Peephole 236.l	used r3 instead of ar3
   207B 9B                 7568 	subb	a,r3
   207C FB                 7569 	mov	r3,a
                           7570 ;	genAssign
   207D E5*00              7571 	mov	a,_bp
   207F 24 08              7572 	add	a,#0x08
   2081 F8                 7573 	mov	r0,a
   2082 A6 06              7574 	mov	@r0,ar6
   2084 08                 7575 	inc	r0
   2085 A6 07              7576 	mov	@r0,ar7
   2087 08                 7577 	inc	r0
   2088 A6 02              7578 	mov	@r0,ar2
   208A 08                 7579 	inc	r0
   208B A6 03              7580 	mov	@r0,ar3
                           7581 ;	FatDrivers/tff.c:934: if (btr > remain) btr = (WORD)remain;			/* Truncate read count by number of bytes left */
                           7582 ;	genCast
   208D E5*00              7583 	mov	a,_bp
   208F 24 F9              7584 	add	a,#0xfffffff9
   2091 F8                 7585 	mov	r0,a
   2092 86 02              7586 	mov	ar2,@r0
   2094 08                 7587 	inc	r0
   2095 86 03              7588 	mov	ar3,@r0
                           7589 ;	genCmpGt
                           7590 ;	Peephole 3.c	changed mov to clr
   2097 E4                 7591 	clr	a
   2098 FC                 7592 	mov	r4,a
   2099 FD                 7593 	mov	r5,a
   209A E5*00              7594 	mov	a,_bp
   209C 24 08              7595 	add	a,#0x08
   209E F8                 7596 	mov	r0,a
                           7597 ;	genCmp
   209F C3                 7598 	clr	c
   20A0 E6                 7599 	mov	a,@r0
   20A1 9A                 7600 	subb	a,r2
   20A2 08                 7601 	inc	r0
   20A3 E6                 7602 	mov	a,@r0
   20A4 9B                 7603 	subb	a,r3
   20A5 08                 7604 	inc	r0
   20A6 E6                 7605 	mov	a,@r0
   20A7 9C                 7606 	subb	a,r4
   20A8 08                 7607 	inc	r0
   20A9 E6                 7608 	mov	a,@r0
   20AA 9D                 7609 	subb	a,r5
                           7610 ;	genIpop
                           7611 ;	genIfx
                           7612 ;	genIfxJump
                           7613 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           7614 ;	Peephole 128	jump optimization
   20AB 50 10              7615 	jnc	00151$
                           7616 ;	Peephole 300	removed redundant label 00155$
                           7617 ;	genCast
   20AD E5*00              7618 	mov	a,_bp
   20AF 24 08              7619 	add	a,#0x08
   20B1 F8                 7620 	mov	r0,a
   20B2 E5*00              7621 	mov	a,_bp
   20B4 24 F9              7622 	add	a,#0xfffffff9
   20B6 F9                 7623 	mov	r1,a
   20B7 E6                 7624 	mov	a,@r0
   20B8 F7                 7625 	mov	@r1,a
   20B9 08                 7626 	inc	r0
   20BA 09                 7627 	inc	r1
   20BB E6                 7628 	mov	a,@r0
   20BC F7                 7629 	mov	@r1,a
   20BD                    7630 00151$:
                           7631 ;	genPlus
   20BD A8*00              7632 	mov	r0,_bp
   20BF 08                 7633 	inc	r0
   20C0 E5*00              7634 	mov	a,_bp
   20C2 24 35              7635 	add	a,#0x35
   20C4 F9                 7636 	mov	r1,a
                           7637 ;     genPlusIncr
   20C5 74 13              7638 	mov	a,#0x13
   20C7 26                 7639 	add	a,@r0
   20C8 F7                 7640 	mov	@r1,a
                           7641 ;	Peephole 181	changed mov to clr
   20C9 E4                 7642 	clr	a
   20CA 08                 7643 	inc	r0
   20CB 36                 7644 	addc	a,@r0
   20CC 09                 7645 	inc	r1
   20CD F7                 7646 	mov	@r1,a
   20CE 08                 7647 	inc	r0
   20CF 09                 7648 	inc	r1
   20D0 E6                 7649 	mov	a,@r0
   20D1 F7                 7650 	mov	@r1,a
                           7651 ;	genPlus
   20D2 A8*00              7652 	mov	r0,_bp
   20D4 08                 7653 	inc	r0
   20D5 E5*00              7654 	mov	a,_bp
   20D7 24 1E              7655 	add	a,#0x1e
   20D9 F9                 7656 	mov	r1,a
                           7657 ;     genPlusIncr
   20DA 74 0F              7658 	mov	a,#0x0F
   20DC 26                 7659 	add	a,@r0
   20DD F7                 7660 	mov	@r1,a
                           7661 ;	Peephole 181	changed mov to clr
   20DE E4                 7662 	clr	a
   20DF 08                 7663 	inc	r0
   20E0 36                 7664 	addc	a,@r0
   20E1 09                 7665 	inc	r1
   20E2 F7                 7666 	mov	@r1,a
   20E3 08                 7667 	inc	r0
   20E4 09                 7668 	inc	r1
   20E5 E6                 7669 	mov	a,@r0
   20E6 F7                 7670 	mov	@r1,a
                           7671 ;	genPlus
   20E7 E5*00              7672 	mov	a,_bp
   20E9 24 15              7673 	add	a,#0x15
   20EB F8                 7674 	mov	r0,a
   20EC E5*00              7675 	mov	a,_bp
   20EE 24 22              7676 	add	a,#0x22
   20F0 F9                 7677 	mov	r1,a
                           7678 ;     genPlusIncr
   20F1 74 18              7679 	mov	a,#0x18
   20F3 26                 7680 	add	a,@r0
   20F4 F7                 7681 	mov	@r1,a
                           7682 ;	Peephole 181	changed mov to clr
   20F5 E4                 7683 	clr	a
   20F6 08                 7684 	inc	r0
   20F7 36                 7685 	addc	a,@r0
   20F8 09                 7686 	inc	r1
   20F9 F7                 7687 	mov	@r1,a
   20FA 08                 7688 	inc	r0
   20FB 09                 7689 	inc	r1
   20FC E6                 7690 	mov	a,@r0
   20FD F7                 7691 	mov	@r1,a
                           7692 ;	genPlus
   20FE E5*00              7693 	mov	a,_bp
   2100 24 15              7694 	add	a,#0x15
   2102 F8                 7695 	mov	r0,a
   2103 E5*00              7696 	mov	a,_bp
   2105 24 25              7697 	add	a,#0x25
   2107 F9                 7698 	mov	r1,a
                           7699 ;     genPlusIncr
   2108 74 1D              7700 	mov	a,#0x1D
   210A 26                 7701 	add	a,@r0
   210B F7                 7702 	mov	@r1,a
                           7703 ;	Peephole 181	changed mov to clr
   210C E4                 7704 	clr	a
   210D 08                 7705 	inc	r0
   210E 36                 7706 	addc	a,@r0
   210F 09                 7707 	inc	r1
   2110 F7                 7708 	mov	@r1,a
   2111 08                 7709 	inc	r0
   2112 09                 7710 	inc	r1
   2113 E6                 7711 	mov	a,@r0
   2114 F7                 7712 	mov	@r1,a
                           7713 ;	genPlus
   2115 A8*00              7714 	mov	r0,_bp
   2117 08                 7715 	inc	r0
   2118 E5*00              7716 	mov	a,_bp
   211A 24 28              7717 	add	a,#0x28
   211C F9                 7718 	mov	r1,a
                           7719 ;     genPlusIncr
   211D 74 17              7720 	mov	a,#0x17
   211F 26                 7721 	add	a,@r0
   2120 F7                 7722 	mov	@r1,a
                           7723 ;	Peephole 181	changed mov to clr
   2121 E4                 7724 	clr	a
   2122 08                 7725 	inc	r0
   2123 36                 7726 	addc	a,@r0
   2124 09                 7727 	inc	r1
   2125 F7                 7728 	mov	@r1,a
   2126 08                 7729 	inc	r0
   2127 09                 7730 	inc	r1
   2128 E6                 7731 	mov	a,@r0
   2129 F7                 7732 	mov	@r1,a
                           7733 ;	genPlus
   212A E5*00              7734 	mov	a,_bp
   212C 24 15              7735 	add	a,#0x15
   212E F8                 7736 	mov	r0,a
   212F E5*00              7737 	mov	a,_bp
   2131 24 2B              7738 	add	a,#0x2b
   2133 F9                 7739 	mov	r1,a
                           7740 ;     genPlusIncr
   2134 74 20              7741 	mov	a,#0x20
   2136 26                 7742 	add	a,@r0
   2137 F7                 7743 	mov	@r1,a
                           7744 ;	Peephole 181	changed mov to clr
   2138 E4                 7745 	clr	a
   2139 08                 7746 	inc	r0
   213A 36                 7747 	addc	a,@r0
   213B 09                 7748 	inc	r1
   213C F7                 7749 	mov	@r1,a
   213D 08                 7750 	inc	r0
   213E 09                 7751 	inc	r1
   213F E6                 7752 	mov	a,@r0
   2140 F7                 7753 	mov	@r1,a
   2141                    7754 00127$:
                           7755 ;	FatDrivers/tff.c:936: for ( ;  btr;									/* Repeat until all data transferred */
                           7756 ;	genIfx
   2141 E5*00              7757 	mov	a,_bp
   2143 24 F9              7758 	add	a,#0xfffffff9
   2145 F8                 7759 	mov	r0,a
   2146 E6                 7760 	mov	a,@r0
   2147 08                 7761 	inc	r0
   2148 46                 7762 	orl	a,@r0
                           7763 ;	genIfxJump
   2149 70 03              7764 	jnz	00156$
   214B 02s26r16           7765 	ljmp	00130$
   214E                    7766 00156$:
                           7767 ;	FatDrivers/tff.c:938: if ((fp->fptr % 512) == 0) {				/* On the sector boundary */
                           7768 ;	genPointerGet
                           7769 ;	genGenPointerGet
   214E E5*00              7770 	mov	a,_bp
   2150 24 1B              7771 	add	a,#0x1b
   2152 F8                 7772 	mov	r0,a
   2153 86 82              7773 	mov	dpl,@r0
   2155 08                 7774 	inc	r0
   2156 86 83              7775 	mov	dph,@r0
   2158 08                 7776 	inc	r0
   2159 86 F0              7777 	mov	b,@r0
   215B 12s00r00           7778 	lcall	__gptrget
   215E FB                 7779 	mov	r3,a
   215F A3                 7780 	inc	dptr
   2160 12s00r00           7781 	lcall	__gptrget
   2163 FC                 7782 	mov	r4,a
   2164 A3                 7783 	inc	dptr
   2165 12s00r00           7784 	lcall	__gptrget
   2168 FD                 7785 	mov	r5,a
   2169 A3                 7786 	inc	dptr
   216A 12s00r00           7787 	lcall	__gptrget
   216D FE                 7788 	mov	r6,a
                           7789 ;	genAnd
   216E EB                 7790 	mov	a,r3
   216F 70 04              7791 	jnz	00157$
   2171 EC                 7792 	mov	a,r4
                           7793 ;	Peephole 160.f	removed sjmp by inverse jump logic
   2172 30 E0 03           7794 	jnb	acc.0,00158$
   2175                    7795 00157$:
   2175 02s24r6C           7796 	ljmp	00122$
   2178                    7797 00158$:
                           7798 ;	FatDrivers/tff.c:939: if (--fp->sect_clust) {					/* Decrement left sector counter */
                           7799 ;	genIpush
                           7800 ;	genPlus
   2178 A8*00              7801 	mov	r0,_bp
   217A 08                 7802 	inc	r0
   217B E5*00              7803 	mov	a,_bp
   217D 24 32              7804 	add	a,#0x32
   217F F9                 7805 	mov	r1,a
                           7806 ;     genPlusIncr
   2180 74 03              7807 	mov	a,#0x03
   2182 26                 7808 	add	a,@r0
   2183 F7                 7809 	mov	@r1,a
                           7810 ;	Peephole 181	changed mov to clr
   2184 E4                 7811 	clr	a
   2185 08                 7812 	inc	r0
   2186 36                 7813 	addc	a,@r0
   2187 09                 7814 	inc	r1
   2188 F7                 7815 	mov	@r1,a
   2189 08                 7816 	inc	r0
   218A 09                 7817 	inc	r1
   218B E6                 7818 	mov	a,@r0
   218C F7                 7819 	mov	@r1,a
                           7820 ;	genPointerGet
                           7821 ;	genGenPointerGet
   218D E5*00              7822 	mov	a,_bp
   218F 24 32              7823 	add	a,#0x32
   2191 F8                 7824 	mov	r0,a
   2192 86 82              7825 	mov	dpl,@r0
   2194 08                 7826 	inc	r0
   2195 86 83              7827 	mov	dph,@r0
   2197 08                 7828 	inc	r0
   2198 86 F0              7829 	mov	b,@r0
   219A 12s00r00           7830 	lcall	__gptrget
   219D FA                 7831 	mov	r2,a
                           7832 ;	genMinus
                           7833 ;	genMinusDec
   219E 1A                 7834 	dec	r2
                           7835 ;	genPointerSet
                           7836 ;	genGenPointerSet
   219F E5*00              7837 	mov	a,_bp
   21A1 24 32              7838 	add	a,#0x32
   21A3 F8                 7839 	mov	r0,a
   21A4 86 82              7840 	mov	dpl,@r0
   21A6 08                 7841 	inc	r0
   21A7 86 83              7842 	mov	dph,@r0
   21A9 08                 7843 	inc	r0
   21AA 86 F0              7844 	mov	b,@r0
                           7845 ;	genIfx
   21AC EA                 7846 	mov	a,r2
   21AD 12s00r00           7847 	lcall	__gptrput
                           7848 ;	Peephole 190	removed redundant mov
                           7849 ;	genIpop
                           7850 ;	genIfxJump
                           7851 ;	Peephole 108.c	removed ljmp by inverse jump logic
   21B0 60 38              7852 	jz	00113$
                           7853 ;	Peephole 300	removed redundant label 00159$
                           7854 ;	FatDrivers/tff.c:940: sect = fp->curr_sect + 1;			/* Get current sector */
                           7855 ;	genIpush
                           7856 ;	genPointerGet
                           7857 ;	genGenPointerGet
   21B2 E5*00              7858 	mov	a,_bp
   21B4 24 28              7859 	add	a,#0x28
   21B6 F8                 7860 	mov	r0,a
   21B7 86 82              7861 	mov	dpl,@r0
   21B9 08                 7862 	inc	r0
   21BA 86 83              7863 	mov	dph,@r0
   21BC 08                 7864 	inc	r0
   21BD 86 F0              7865 	mov	b,@r0
   21BF 12s00r00           7866 	lcall	__gptrget
   21C2 FA                 7867 	mov	r2,a
   21C3 A3                 7868 	inc	dptr
   21C4 12s00r00           7869 	lcall	__gptrget
   21C7 FB                 7870 	mov	r3,a
   21C8 A3                 7871 	inc	dptr
   21C9 12s00r00           7872 	lcall	__gptrget
   21CC FC                 7873 	mov	r4,a
   21CD A3                 7874 	inc	dptr
   21CE 12s00r00           7875 	lcall	__gptrget
   21D1 FD                 7876 	mov	r5,a
                           7877 ;	genPlus
   21D2 E5*00              7878 	mov	a,_bp
   21D4 24 04              7879 	add	a,#0x04
   21D6 F8                 7880 	mov	r0,a
                           7881 ;     genPlusIncr
   21D7 74 01              7882 	mov	a,#0x01
                           7883 ;	Peephole 236.a	used r2 instead of ar2
   21D9 2A                 7884 	add	a,r2
   21DA F6                 7885 	mov	@r0,a
                           7886 ;	Peephole 181	changed mov to clr
   21DB E4                 7887 	clr	a
                           7888 ;	Peephole 236.b	used r3 instead of ar3
   21DC 3B                 7889 	addc	a,r3
   21DD 08                 7890 	inc	r0
   21DE F6                 7891 	mov	@r0,a
                           7892 ;	Peephole 181	changed mov to clr
   21DF E4                 7893 	clr	a
                           7894 ;	Peephole 236.b	used r4 instead of ar4
   21E0 3C                 7895 	addc	a,r4
   21E1 08                 7896 	inc	r0
   21E2 F6                 7897 	mov	@r0,a
                           7898 ;	Peephole 181	changed mov to clr
   21E3 E4                 7899 	clr	a
                           7900 ;	Peephole 236.b	used r5 instead of ar5
   21E4 3D                 7901 	addc	a,r5
   21E5 08                 7902 	inc	r0
   21E6 F6                 7903 	mov	@r0,a
                           7904 ;	genIpop
   21E7 02s23r1B           7905 	ljmp	00114$
   21EA                    7906 00113$:
                           7907 ;	FatDrivers/tff.c:942: clust = (fp->fptr == 0) ?
                           7908 ;	genNot
   21EA EB                 7909 	mov	a,r3
   21EB 4C                 7910 	orl	a,r4
   21EC 4D                 7911 	orl	a,r5
   21ED 4E                 7912 	orl	a,r6
   21EE B4 01 00           7913 	cjne	a,#0x01,00160$
   21F1                    7914 00160$:
   21F1 E4                 7915 	clr	a
   21F2 33                 7916 	rlc	a
                           7917 ;	genIfx
   21F3 FD                 7918 	mov	r5,a
                           7919 ;	Peephole 105	removed redundant mov
                           7920 ;	genIfxJump
                           7921 ;	Peephole 108.c	removed ljmp by inverse jump logic
   21F4 60 22              7922 	jz	00134$
                           7923 ;	Peephole 300	removed redundant label 00161$
                           7924 ;	FatDrivers/tff.c:943: fp->org_clust : get_cluster(fp->curr_clust);
                           7925 ;	genPointerGet
                           7926 ;	genGenPointerGet
   21F6 E5*00              7927 	mov	a,_bp
   21F8 24 1E              7928 	add	a,#0x1e
   21FA F8                 7929 	mov	r0,a
   21FB 86 82              7930 	mov	dpl,@r0
   21FD 08                 7931 	inc	r0
   21FE 86 83              7932 	mov	dph,@r0
   2200 08                 7933 	inc	r0
   2201 86 F0              7934 	mov	b,@r0
   2203 12s00r00           7935 	lcall	__gptrget
   2206 FD                 7936 	mov	r5,a
   2207 A3                 7937 	inc	dptr
   2208 12s00r00           7938 	lcall	__gptrget
   220B FE                 7939 	mov	r6,a
   220C A3                 7940 	inc	dptr
   220D 12s00r00           7941 	lcall	__gptrget
   2210 FF                 7942 	mov	r7,a
   2211 A3                 7943 	inc	dptr
   2212 12s00r00           7944 	lcall	__gptrget
   2215 FA                 7945 	mov	r2,a
                           7946 ;	Peephole 112.b	changed ljmp to sjmp
   2216 80 30              7947 	sjmp	00135$
   2218                    7948 00134$:
                           7949 ;	genPointerGet
                           7950 ;	genGenPointerGet
   2218 E5*00              7951 	mov	a,_bp
   221A 24 35              7952 	add	a,#0x35
   221C F8                 7953 	mov	r0,a
   221D 86 82              7954 	mov	dpl,@r0
   221F 08                 7955 	inc	r0
   2220 86 83              7956 	mov	dph,@r0
   2222 08                 7957 	inc	r0
   2223 86 F0              7958 	mov	b,@r0
   2225 12s00r00           7959 	lcall	__gptrget
   2228 FA                 7960 	mov	r2,a
   2229 A3                 7961 	inc	dptr
   222A 12s00r00           7962 	lcall	__gptrget
   222D FB                 7963 	mov	r3,a
   222E A3                 7964 	inc	dptr
   222F 12s00r00           7965 	lcall	__gptrget
   2232 FC                 7966 	mov	r4,a
   2233 A3                 7967 	inc	dptr
   2234 12s00r00           7968 	lcall	__gptrget
                           7969 ;	genCall
   2237 FD                 7970 	mov	r5,a
   2238 8A 82              7971 	mov	dpl,r2
   223A 8B 83              7972 	mov	dph,r3
   223C 8C F0              7973 	mov	b,r4
                           7974 ;	Peephole 191	removed redundant mov
   223E 12s00rEA           7975 	lcall	_get_cluster
   2241 AD 82              7976 	mov	r5,dpl
   2243 AE 83              7977 	mov	r6,dph
   2245 AF F0              7978 	mov	r7,b
   2247 FA                 7979 	mov	r2,a
   2248                    7980 00135$:
                           7981 ;	genAssign
   2248 E5*00              7982 	mov	a,_bp
   224A 24 0E              7983 	add	a,#0x0e
   224C F8                 7984 	mov	r0,a
   224D A6 05              7985 	mov	@r0,ar5
   224F 08                 7986 	inc	r0
   2250 A6 06              7987 	mov	@r0,ar6
   2252 08                 7988 	inc	r0
   2253 A6 07              7989 	mov	@r0,ar7
   2255 08                 7990 	inc	r0
   2256 A6 02              7991 	mov	@r0,ar2
                           7992 ;	FatDrivers/tff.c:944: if (clust < 2 || clust >= fs->max_clust)
                           7993 ;	genCmpLt
   2258 E5*00              7994 	mov	a,_bp
   225A 24 0E              7995 	add	a,#0x0e
   225C F8                 7996 	mov	r0,a
                           7997 ;	genCmp
   225D C3                 7998 	clr	c
   225E E6                 7999 	mov	a,@r0
   225F 94 02              8000 	subb	a,#0x02
   2261 08                 8001 	inc	r0
   2262 E6                 8002 	mov	a,@r0
   2263 94 00              8003 	subb	a,#0x00
   2265 08                 8004 	inc	r0
   2266 E6                 8005 	mov	a,@r0
   2267 94 00              8006 	subb	a,#0x00
   2269 08                 8007 	inc	r0
   226A E6                 8008 	mov	a,@r0
   226B 94 00              8009 	subb	a,#0x00
                           8010 ;	genIfxJump
   226D 50 03              8011 	jnc	00162$
   226F 02s26r1B           8012 	ljmp	00131$
   2272                    8013 00162$:
                           8014 ;	genPointerGet
                           8015 ;	genGenPointerGet
   2272 E5*00              8016 	mov	a,_bp
   2274 24 22              8017 	add	a,#0x22
   2276 F8                 8018 	mov	r0,a
   2277 86 82              8019 	mov	dpl,@r0
   2279 08                 8020 	inc	r0
   227A 86 83              8021 	mov	dph,@r0
   227C 08                 8022 	inc	r0
   227D 86 F0              8023 	mov	b,@r0
   227F 12s00r00           8024 	lcall	__gptrget
   2282 FE                 8025 	mov	r6,a
   2283 A3                 8026 	inc	dptr
   2284 12s00r00           8027 	lcall	__gptrget
   2287 FF                 8028 	mov	r7,a
   2288 A3                 8029 	inc	dptr
   2289 12s00r00           8030 	lcall	__gptrget
   228C FA                 8031 	mov	r2,a
   228D A3                 8032 	inc	dptr
   228E 12s00r00           8033 	lcall	__gptrget
   2291 FB                 8034 	mov	r3,a
                           8035 ;	genCmpLt
   2292 E5*00              8036 	mov	a,_bp
   2294 24 0E              8037 	add	a,#0x0e
   2296 F8                 8038 	mov	r0,a
                           8039 ;	genCmp
   2297 C3                 8040 	clr	c
   2298 E6                 8041 	mov	a,@r0
   2299 9E                 8042 	subb	a,r6
   229A 08                 8043 	inc	r0
   229B E6                 8044 	mov	a,@r0
   229C 9F                 8045 	subb	a,r7
   229D 08                 8046 	inc	r0
   229E E6                 8047 	mov	a,@r0
   229F 9A                 8048 	subb	a,r2
   22A0 08                 8049 	inc	r0
   22A1 E6                 8050 	mov	a,@r0
   22A2 9B                 8051 	subb	a,r3
                           8052 ;	genIfxJump
   22A3 40 03              8053 	jc	00163$
   22A5 02s26r1B           8054 	ljmp	00131$
   22A8                    8055 00163$:
                           8056 ;	FatDrivers/tff.c:946: fp->curr_clust = clust;				/* Current cluster */
                           8057 ;	genPointerSet
                           8058 ;	genGenPointerSet
   22A8 E5*00              8059 	mov	a,_bp
   22AA 24 35              8060 	add	a,#0x35
   22AC F8                 8061 	mov	r0,a
   22AD 86 82              8062 	mov	dpl,@r0
   22AF 08                 8063 	inc	r0
   22B0 86 83              8064 	mov	dph,@r0
   22B2 08                 8065 	inc	r0
   22B3 86 F0              8066 	mov	b,@r0
   22B5 E5*00              8067 	mov	a,_bp
   22B7 24 0E              8068 	add	a,#0x0e
   22B9 F9                 8069 	mov	r1,a
   22BA E7                 8070 	mov	a,@r1
   22BB 12s00r00           8071 	lcall	__gptrput
   22BE A3                 8072 	inc	dptr
   22BF 09                 8073 	inc	r1
   22C0 E7                 8074 	mov	a,@r1
   22C1 12s00r00           8075 	lcall	__gptrput
   22C4 A3                 8076 	inc	dptr
   22C5 09                 8077 	inc	r1
   22C6 E7                 8078 	mov	a,@r1
   22C7 12s00r00           8079 	lcall	__gptrput
   22CA A3                 8080 	inc	dptr
   22CB 09                 8081 	inc	r1
   22CC E7                 8082 	mov	a,@r1
   22CD 12s00r00           8083 	lcall	__gptrput
                           8084 ;	FatDrivers/tff.c:947: sect = clust2sect(clust);			/* Get current sector */
                           8085 ;	genCall
   22D0 E5*00              8086 	mov	a,_bp
   22D2 24 0E              8087 	add	a,#0x0e
   22D4 F8                 8088 	mov	r0,a
   22D5 86 82              8089 	mov	dpl,@r0
   22D7 08                 8090 	inc	r0
   22D8 86 83              8091 	mov	dph,@r0
   22DA 08                 8092 	inc	r0
   22DB 86 F0              8093 	mov	b,@r0
   22DD 08                 8094 	inc	r0
   22DE E6                 8095 	mov	a,@r0
   22DF 12s04r26           8096 	lcall	_clust2sect
   22E2 AA 82              8097 	mov	r2,dpl
   22E4 AB 83              8098 	mov	r3,dph
   22E6 AC F0              8099 	mov	r4,b
   22E8 FD                 8100 	mov	r5,a
                           8101 ;	genAssign
   22E9 E5*00              8102 	mov	a,_bp
   22EB 24 04              8103 	add	a,#0x04
   22ED F8                 8104 	mov	r0,a
   22EE A6 02              8105 	mov	@r0,ar2
   22F0 08                 8106 	inc	r0
   22F1 A6 03              8107 	mov	@r0,ar3
   22F3 08                 8108 	inc	r0
   22F4 A6 04              8109 	mov	@r0,ar4
   22F6 08                 8110 	inc	r0
   22F7 A6 05              8111 	mov	@r0,ar5
                           8112 ;	FatDrivers/tff.c:948: fp->sect_clust = fs->sects_clust;	/* Re-initialize the left sector counter */
                           8113 ;	genPointerGet
                           8114 ;	genGenPointerGet
   22F9 E5*00              8115 	mov	a,_bp
   22FB 24 25              8116 	add	a,#0x25
   22FD F8                 8117 	mov	r0,a
   22FE 86 82              8118 	mov	dpl,@r0
   2300 08                 8119 	inc	r0
   2301 86 83              8120 	mov	dph,@r0
   2303 08                 8121 	inc	r0
   2304 86 F0              8122 	mov	b,@r0
   2306 12s00r00           8123 	lcall	__gptrget
   2309 FA                 8124 	mov	r2,a
                           8125 ;	genPointerSet
                           8126 ;	genGenPointerSet
   230A E5*00              8127 	mov	a,_bp
   230C 24 32              8128 	add	a,#0x32
   230E F8                 8129 	mov	r0,a
   230F 86 82              8130 	mov	dpl,@r0
   2311 08                 8131 	inc	r0
   2312 86 83              8132 	mov	dph,@r0
   2314 08                 8133 	inc	r0
   2315 86 F0              8134 	mov	b,@r0
   2317 EA                 8135 	mov	a,r2
   2318 12s00r00           8136 	lcall	__gptrput
   231B                    8137 00114$:
                           8138 ;	FatDrivers/tff.c:950: fp->curr_sect = sect;					/* Update current sector */
                           8139 ;	genPointerSet
                           8140 ;	genGenPointerSet
   231B E5*00              8141 	mov	a,_bp
   231D 24 28              8142 	add	a,#0x28
   231F F8                 8143 	mov	r0,a
   2320 86 82              8144 	mov	dpl,@r0
   2322 08                 8145 	inc	r0
   2323 86 83              8146 	mov	dph,@r0
   2325 08                 8147 	inc	r0
   2326 86 F0              8148 	mov	b,@r0
   2328 E5*00              8149 	mov	a,_bp
   232A 24 04              8150 	add	a,#0x04
   232C F9                 8151 	mov	r1,a
   232D E7                 8152 	mov	a,@r1
   232E 12s00r00           8153 	lcall	__gptrput
   2331 A3                 8154 	inc	dptr
   2332 09                 8155 	inc	r1
   2333 E7                 8156 	mov	a,@r1
   2334 12s00r00           8157 	lcall	__gptrput
   2337 A3                 8158 	inc	dptr
   2338 09                 8159 	inc	r1
   2339 E7                 8160 	mov	a,@r1
   233A 12s00r00           8161 	lcall	__gptrput
   233D A3                 8162 	inc	dptr
   233E 09                 8163 	inc	r1
   233F E7                 8164 	mov	a,@r1
   2340 12s00r00           8165 	lcall	__gptrput
                           8166 ;	FatDrivers/tff.c:951: cc = btr / 512;							/* When left bytes >= 512, */
                           8167 ;	genRightShift
                           8168 ;	genRightShiftLiteral
   2343 E5*00              8169 	mov	a,_bp
   2345 24 F9              8170 	add	a,#0xfffffff9
                           8171 ;	genrshTwo
                           8172 ;	Peephole 185	changed order of increment (acc incremented also!)
   2347 04                 8173 	inc	a
   2348 F8                 8174 	mov	r0,a
   2349 E6                 8175 	mov	a,@r0
   234A C3                 8176 	clr	c
   234B 13                 8177 	rrc	a
                           8178 ;	FatDrivers/tff.c:952: if (cc) {								/* Read maximum contiguous sectors directly */
                           8179 ;	genIfx
   234C FE                 8180 	mov	r6,a
   234D 7F 00              8181 	mov	r7,#0x00
                           8182 ;	Peephole 177.d	removed redundant move
   234F 4F                 8183 	orl	a,r7
                           8184 ;	genIfxJump
   2350 70 03              8185 	jnz	00164$
   2352 02s24r6C           8186 	ljmp	00122$
   2355                    8187 00164$:
                           8188 ;	FatDrivers/tff.c:953: if (cc > fp->sect_clust) cc = fp->sect_clust;
                           8189 ;	genPointerGet
                           8190 ;	genGenPointerGet
   2355 E5*00              8191 	mov	a,_bp
   2357 24 32              8192 	add	a,#0x32
   2359 F8                 8193 	mov	r0,a
   235A 86 82              8194 	mov	dpl,@r0
   235C 08                 8195 	inc	r0
   235D 86 83              8196 	mov	dph,@r0
   235F 08                 8197 	inc	r0
   2360 86 F0              8198 	mov	b,@r0
   2362 12s00r00           8199 	lcall	__gptrget
   2365 FC                 8200 	mov	r4,a
                           8201 ;	genCast
   2366 7D 00              8202 	mov	r5,#0x00
                           8203 ;	genCmpGt
                           8204 ;	genCmp
   2368 C3                 8205 	clr	c
   2369 EC                 8206 	mov	a,r4
   236A 9E                 8207 	subb	a,r6
   236B ED                 8208 	mov	a,r5
   236C 9F                 8209 	subb	a,r7
                           8210 ;	genIfxJump
                           8211 ;	Peephole 108.a	removed ljmp by inverse jump logic
   236D 50 15              8212 	jnc	00116$
                           8213 ;	Peephole 300	removed redundant label 00165$
                           8214 ;	genPointerGet
                           8215 ;	genGenPointerGet
   236F E5*00              8216 	mov	a,_bp
   2371 24 32              8217 	add	a,#0x32
   2373 F8                 8218 	mov	r0,a
   2374 86 82              8219 	mov	dpl,@r0
   2376 08                 8220 	inc	r0
   2377 86 83              8221 	mov	dph,@r0
   2379 08                 8222 	inc	r0
   237A 86 F0              8223 	mov	b,@r0
   237C 12s00r00           8224 	lcall	__gptrget
   237F FC                 8225 	mov	r4,a
                           8226 ;	genCast
   2380 8C 06              8227 	mov	ar6,r4
   2382 7F 00              8228 	mov	r7,#0x00
   2384                    8229 00116$:
                           8230 ;	FatDrivers/tff.c:954: if(disk_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
                           8231 ;	genCast
   2384 8E 04              8232 	mov	ar4,r6
                           8233 ;	genIpush
   2386 C0 04              8234 	push	ar4
   2388 C0 06              8235 	push	ar6
   238A C0 07              8236 	push	ar7
   238C C0 04              8237 	push	ar4
                           8238 ;	genIpush
   238E E5*00              8239 	mov	a,_bp
   2390 24 04              8240 	add	a,#0x04
   2392 F8                 8241 	mov	r0,a
   2393 E6                 8242 	mov	a,@r0
   2394 C0 E0              8243 	push	acc
   2396 08                 8244 	inc	r0
   2397 E6                 8245 	mov	a,@r0
   2398 C0 E0              8246 	push	acc
   239A 08                 8247 	inc	r0
   239B E6                 8248 	mov	a,@r0
   239C C0 E0              8249 	push	acc
   239E 08                 8250 	inc	r0
   239F E6                 8251 	mov	a,@r0
   23A0 C0 E0              8252 	push	acc
                           8253 ;	genIpush
   23A2 E5*00              8254 	mov	a,_bp
   23A4 24 12              8255 	add	a,#0x12
   23A6 F8                 8256 	mov	r0,a
   23A7 E6                 8257 	mov	a,@r0
   23A8 C0 E0              8258 	push	acc
   23AA 08                 8259 	inc	r0
   23AB E6                 8260 	mov	a,@r0
   23AC C0 E0              8261 	push	acc
   23AE 08                 8262 	inc	r0
   23AF E6                 8263 	mov	a,@r0
   23B0 C0 E0              8264 	push	acc
                           8265 ;	genCall
   23B2 75 82 00           8266 	mov	dpl,#0x00
   23B5 12s00r00           8267 	lcall	_disk_read
   23B8 AD 82              8268 	mov	r5,dpl
   23BA E5 81              8269 	mov	a,sp
   23BC 24 F8              8270 	add	a,#0xf8
   23BE F5 81              8271 	mov	sp,a
   23C0 D0 07              8272 	pop	ar7
   23C2 D0 06              8273 	pop	ar6
   23C4 D0 04              8274 	pop	ar4
                           8275 ;	genCmpEq
                           8276 ;	gencjneshort
   23C6 BD 00 02           8277 	cjne	r5,#0x00,00166$
   23C9 80 03              8278 	sjmp	00167$
   23CB                    8279 00166$:
   23CB 02s26r1B           8280 	ljmp	00131$
   23CE                    8281 00167$:
                           8282 ;	FatDrivers/tff.c:956: fp->sect_clust -= (BYTE)(cc - 1);
                           8283 ;	genPointerGet
                           8284 ;	genGenPointerGet
   23CE E5*00              8285 	mov	a,_bp
   23D0 24 32              8286 	add	a,#0x32
   23D2 F8                 8287 	mov	r0,a
   23D3 86 82              8288 	mov	dpl,@r0
   23D5 08                 8289 	inc	r0
   23D6 86 83              8290 	mov	dph,@r0
   23D8 08                 8291 	inc	r0
   23D9 86 F0              8292 	mov	b,@r0
   23DB 12s00r00           8293 	lcall	__gptrget
   23DE FD                 8294 	mov	r5,a
                           8295 ;	genMinus
                           8296 ;	genMinusDec
   23DF EC                 8297 	mov	a,r4
   23E0 14                 8298 	dec	a
                           8299 ;	genMinus
   23E1 D3                 8300 	setb	c
                           8301 ;	Peephole 236.l	used r5 instead of ar5
   23E2 9D                 8302 	subb	a,r5
   23E3 F4                 8303 	cpl	a
   23E4 FD                 8304 	mov	r5,a
                           8305 ;	genPointerSet
                           8306 ;	genGenPointerSet
   23E5 E5*00              8307 	mov	a,_bp
   23E7 24 32              8308 	add	a,#0x32
   23E9 F8                 8309 	mov	r0,a
   23EA 86 82              8310 	mov	dpl,@r0
   23EC 08                 8311 	inc	r0
   23ED 86 83              8312 	mov	dph,@r0
   23EF 08                 8313 	inc	r0
   23F0 86 F0              8314 	mov	b,@r0
   23F2 ED                 8315 	mov	a,r5
   23F3 12s00r00           8316 	lcall	__gptrput
                           8317 ;	FatDrivers/tff.c:957: fp->curr_sect += cc - 1;
                           8318 ;	genPointerGet
                           8319 ;	genGenPointerGet
   23F6 E5*00              8320 	mov	a,_bp
   23F8 24 28              8321 	add	a,#0x28
   23FA F8                 8322 	mov	r0,a
   23FB 86 82              8323 	mov	dpl,@r0
   23FD 08                 8324 	inc	r0
   23FE 86 83              8325 	mov	dph,@r0
   2400 08                 8326 	inc	r0
   2401 86 F0              8327 	mov	b,@r0
   2403 E5*00              8328 	mov	a,_bp
   2405 24 2E              8329 	add	a,#0x2e
   2407 F9                 8330 	mov	r1,a
   2408 12s00r00           8331 	lcall	__gptrget
   240B F7                 8332 	mov	@r1,a
   240C A3                 8333 	inc	dptr
   240D 12s00r00           8334 	lcall	__gptrget
   2410 09                 8335 	inc	r1
   2411 F7                 8336 	mov	@r1,a
   2412 A3                 8337 	inc	dptr
   2413 12s00r00           8338 	lcall	__gptrget
   2416 09                 8339 	inc	r1
   2417 F7                 8340 	mov	@r1,a
   2418 A3                 8341 	inc	dptr
   2419 12s00r00           8342 	lcall	__gptrget
   241C 09                 8343 	inc	r1
   241D F7                 8344 	mov	@r1,a
                           8345 ;	genMinus
                           8346 ;	genMinusDec
   241E EE                 8347 	mov	a,r6
   241F 24 FF              8348 	add	a,#0xff
   2421 FA                 8349 	mov	r2,a
   2422 EF                 8350 	mov	a,r7
   2423 34 FF              8351 	addc	a,#0xff
   2425 FB                 8352 	mov	r3,a
                           8353 ;	genCast
                           8354 ;	genPlus
                           8355 ;	Peephole 3.c	changed mov to clr
   2426 E4                 8356 	clr	a
   2427 FC                 8357 	mov	r4,a
   2428 FD                 8358 	mov	r5,a
   2429 E5*00              8359 	mov	a,_bp
   242B 24 2E              8360 	add	a,#0x2e
   242D F8                 8361 	mov	r0,a
                           8362 ;	Peephole 236.g	used r2 instead of ar2
   242E EA                 8363 	mov	a,r2
   242F 26                 8364 	add	a,@r0
   2430 FA                 8365 	mov	r2,a
                           8366 ;	Peephole 236.g	used r3 instead of ar3
   2431 EB                 8367 	mov	a,r3
   2432 08                 8368 	inc	r0
   2433 36                 8369 	addc	a,@r0
   2434 FB                 8370 	mov	r3,a
                           8371 ;	Peephole 236.g	used r4 instead of ar4
   2435 EC                 8372 	mov	a,r4
   2436 08                 8373 	inc	r0
   2437 36                 8374 	addc	a,@r0
   2438 FC                 8375 	mov	r4,a
                           8376 ;	Peephole 236.g	used r5 instead of ar5
   2439 ED                 8377 	mov	a,r5
   243A 08                 8378 	inc	r0
   243B 36                 8379 	addc	a,@r0
   243C FD                 8380 	mov	r5,a
                           8381 ;	genPointerSet
                           8382 ;	genGenPointerSet
   243D E5*00              8383 	mov	a,_bp
   243F 24 28              8384 	add	a,#0x28
   2441 F8                 8385 	mov	r0,a
   2442 86 82              8386 	mov	dpl,@r0
   2444 08                 8387 	inc	r0
   2445 86 83              8388 	mov	dph,@r0
   2447 08                 8389 	inc	r0
   2448 86 F0              8390 	mov	b,@r0
   244A EA                 8391 	mov	a,r2
   244B 12s00r00           8392 	lcall	__gptrput
   244E A3                 8393 	inc	dptr
   244F EB                 8394 	mov	a,r3
   2450 12s00r00           8395 	lcall	__gptrput
   2453 A3                 8396 	inc	dptr
   2454 EC                 8397 	mov	a,r4
   2455 12s00r00           8398 	lcall	__gptrput
   2458 A3                 8399 	inc	dptr
   2459 ED                 8400 	mov	a,r5
   245A 12s00r00           8401 	lcall	__gptrput
                           8402 ;	FatDrivers/tff.c:958: rcnt = cc * 512;
                           8403 ;	genLeftShift
                           8404 ;	genLeftShiftLiteral
   245D E5*00              8405 	mov	a,_bp
   245F 24 0C              8406 	add	a,#0x0c
   2461 F8                 8407 	mov	r0,a
                           8408 ;	genlshTwo
   2462 EE                 8409 	mov	a,r6
                           8410 ;	Peephole 254	optimized left shift
   2463 2E                 8411 	add	a,r6
   2464 08                 8412 	inc	r0
   2465 F6                 8413 	mov	@r0,a
   2466 18                 8414 	dec	r0
   2467 76 00              8415 	mov	@r0,#0x00
                           8416 ;	FatDrivers/tff.c:959: continue;
   2469 02s25r4D           8417 	ljmp	00129$
   246C                    8418 00122$:
                           8419 ;	FatDrivers/tff.c:962: if (!move_window(fp->curr_sect)) goto fr_error;	/* Move sector window */
                           8420 ;	genPointerGet
                           8421 ;	genGenPointerGet
   246C E5*00              8422 	mov	a,_bp
   246E 24 28              8423 	add	a,#0x28
   2470 F8                 8424 	mov	r0,a
   2471 86 82              8425 	mov	dpl,@r0
   2473 08                 8426 	inc	r0
   2474 86 83              8427 	mov	dph,@r0
   2476 08                 8428 	inc	r0
   2477 86 F0              8429 	mov	b,@r0
   2479 12s00r00           8430 	lcall	__gptrget
   247C FC                 8431 	mov	r4,a
   247D A3                 8432 	inc	dptr
   247E 12s00r00           8433 	lcall	__gptrget
   2481 FD                 8434 	mov	r5,a
   2482 A3                 8435 	inc	dptr
   2483 12s00r00           8436 	lcall	__gptrget
   2486 FE                 8437 	mov	r6,a
   2487 A3                 8438 	inc	dptr
   2488 12s00r00           8439 	lcall	__gptrget
                           8440 ;	genCall
   248B FF                 8441 	mov	r7,a
   248C 8C 82              8442 	mov	dpl,r4
   248E 8D 83              8443 	mov	dph,r5
   2490 8E F0              8444 	mov	b,r6
                           8445 ;	Peephole 191	removed redundant mov
   2492 12s00r00           8446 	lcall	_move_window
   2495 E5 82              8447 	mov	a,dpl
                           8448 ;	genIfx
                           8449 ;	genIfxJump
   2497 70 03              8450 	jnz	00168$
   2499 02s26r1B           8451 	ljmp	00131$
   249C                    8452 00168$:
                           8453 ;	FatDrivers/tff.c:963: rcnt = 512 - (WORD)(fp->fptr % 512);			/* Copy fractional bytes from sector window */
                           8454 ;	genPointerGet
                           8455 ;	genGenPointerGet
   249C E5*00              8456 	mov	a,_bp
   249E 24 1B              8457 	add	a,#0x1b
   24A0 F8                 8458 	mov	r0,a
   24A1 86 82              8459 	mov	dpl,@r0
   24A3 08                 8460 	inc	r0
   24A4 86 83              8461 	mov	dph,@r0
   24A6 08                 8462 	inc	r0
   24A7 86 F0              8463 	mov	b,@r0
   24A9 12s00r00           8464 	lcall	__gptrget
   24AC FC                 8465 	mov	r4,a
   24AD A3                 8466 	inc	dptr
   24AE 12s00r00           8467 	lcall	__gptrget
   24B1 FD                 8468 	mov	r5,a
   24B2 A3                 8469 	inc	dptr
   24B3 12s00r00           8470 	lcall	__gptrget
   24B6 FE                 8471 	mov	r6,a
   24B7 A3                 8472 	inc	dptr
   24B8 12s00r00           8473 	lcall	__gptrget
   24BB FF                 8474 	mov	r7,a
                           8475 ;	genAnd
   24BC 53 05 01           8476 	anl	ar5,#0x01
                           8477 ;	genCast
                           8478 ;	genMinus
                           8479 ;	Peephole 3.c	changed mov to clr
   24BF E4                 8480 	clr	a
   24C0 FE                 8481 	mov	r6,a
   24C1 FF                 8482 	mov	r7,a
   24C2 E5*00              8483 	mov	a,_bp
   24C4 24 0C              8484 	add	a,#0x0c
   24C6 F8                 8485 	mov	r0,a
                           8486 ;	Peephole 181	changed mov to clr
   24C7 E4                 8487 	clr	a
   24C8 C3                 8488 	clr	c
                           8489 ;	Peephole 236.l	used r4 instead of ar4
   24C9 9C                 8490 	subb	a,r4
   24CA F6                 8491 	mov	@r0,a
   24CB 74 02              8492 	mov	a,#0x02
                           8493 ;	Peephole 236.l	used r5 instead of ar5
   24CD 9D                 8494 	subb	a,r5
   24CE 08                 8495 	inc	r0
   24CF F6                 8496 	mov	@r0,a
                           8497 ;	FatDrivers/tff.c:964: if (rcnt > btr) rcnt = btr;
                           8498 ;	genCmpGt
   24D0 E5*00              8499 	mov	a,_bp
   24D2 24 0C              8500 	add	a,#0x0c
   24D4 F8                 8501 	mov	r0,a
   24D5 E5*00              8502 	mov	a,_bp
   24D7 24 F9              8503 	add	a,#0xfffffff9
   24D9 F9                 8504 	mov	r1,a
                           8505 ;	genCmp
   24DA C3                 8506 	clr	c
   24DB E7                 8507 	mov	a,@r1
   24DC 96                 8508 	subb	a,@r0
   24DD 09                 8509 	inc	r1
   24DE E7                 8510 	mov	a,@r1
   24DF 08                 8511 	inc	r0
   24E0 96                 8512 	subb	a,@r0
                           8513 ;	genIfxJump
                           8514 ;	Peephole 108.a	removed ljmp by inverse jump logic
   24E1 50 10              8515 	jnc	00126$
                           8516 ;	Peephole 300	removed redundant label 00169$
                           8517 ;	genAssign
   24E3 E5*00              8518 	mov	a,_bp
   24E5 24 F9              8519 	add	a,#0xfffffff9
   24E7 F8                 8520 	mov	r0,a
   24E8 E5*00              8521 	mov	a,_bp
   24EA 24 0C              8522 	add	a,#0x0c
   24EC F9                 8523 	mov	r1,a
   24ED E6                 8524 	mov	a,@r0
   24EE F7                 8525 	mov	@r1,a
   24EF 08                 8526 	inc	r0
   24F0 09                 8527 	inc	r1
   24F1 E6                 8528 	mov	a,@r0
   24F2 F7                 8529 	mov	@r1,a
   24F3                    8530 00126$:
                           8531 ;	FatDrivers/tff.c:965: memcpy(rbuff, &fs->win[(WORD)fp->fptr % 512], rcnt);
                           8532 ;	genPointerGet
                           8533 ;	genGenPointerGet
   24F3 E5*00              8534 	mov	a,_bp
   24F5 24 1B              8535 	add	a,#0x1b
   24F7 F8                 8536 	mov	r0,a
   24F8 86 82              8537 	mov	dpl,@r0
   24FA 08                 8538 	inc	r0
   24FB 86 83              8539 	mov	dph,@r0
   24FD 08                 8540 	inc	r0
   24FE 86 F0              8541 	mov	b,@r0
   2500 12s00r00           8542 	lcall	__gptrget
   2503 FC                 8543 	mov	r4,a
   2504 A3                 8544 	inc	dptr
   2505 12s00r00           8545 	lcall	__gptrget
   2508 FD                 8546 	mov	r5,a
   2509 A3                 8547 	inc	dptr
   250A 12s00r00           8548 	lcall	__gptrget
   250D FE                 8549 	mov	r6,a
   250E A3                 8550 	inc	dptr
   250F 12s00r00           8551 	lcall	__gptrget
   2512 FF                 8552 	mov	r7,a
                           8553 ;	genCast
                           8554 ;	genAnd
   2513 53 05 01           8555 	anl	ar5,#0x01
                           8556 ;	genPlus
   2516 E5*00              8557 	mov	a,_bp
   2518 24 2B              8558 	add	a,#0x2b
   251A F8                 8559 	mov	r0,a
                           8560 ;	Peephole 236.g	used r4 instead of ar4
   251B EC                 8561 	mov	a,r4
   251C 26                 8562 	add	a,@r0
   251D FC                 8563 	mov	r4,a
                           8564 ;	Peephole 236.g	used r5 instead of ar5
   251E ED                 8565 	mov	a,r5
   251F 08                 8566 	inc	r0
   2520 36                 8567 	addc	a,@r0
   2521 FD                 8568 	mov	r5,a
   2522 08                 8569 	inc	r0
   2523 86 06              8570 	mov	ar6,@r0
                           8571 ;	genIpush
   2525 E5*00              8572 	mov	a,_bp
   2527 24 0C              8573 	add	a,#0x0c
   2529 F8                 8574 	mov	r0,a
   252A E6                 8575 	mov	a,@r0
   252B C0 E0              8576 	push	acc
   252D 08                 8577 	inc	r0
   252E E6                 8578 	mov	a,@r0
   252F C0 E0              8579 	push	acc
                           8580 ;	genIpush
   2531 C0 04              8581 	push	ar4
   2533 C0 05              8582 	push	ar5
   2535 C0 06              8583 	push	ar6
                           8584 ;	genCall
   2537 E5*00              8585 	mov	a,_bp
   2539 24 12              8586 	add	a,#0x12
   253B F8                 8587 	mov	r0,a
   253C 86 82              8588 	mov	dpl,@r0
   253E 08                 8589 	inc	r0
   253F 86 83              8590 	mov	dph,@r0
   2541 08                 8591 	inc	r0
   2542 86 F0              8592 	mov	b,@r0
   2544 12s00r00           8593 	lcall	_memcpy
   2547 E5 81              8594 	mov	a,sp
   2549 24 FB              8595 	add	a,#0xfb
   254B F5 81              8596 	mov	sp,a
   254D                    8597 00129$:
                           8598 ;	FatDrivers/tff.c:937: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
                           8599 ;	genPlus
   254D E5*00              8600 	mov	a,_bp
   254F 24 12              8601 	add	a,#0x12
   2551 F8                 8602 	mov	r0,a
   2552 E5*00              8603 	mov	a,_bp
   2554 24 0C              8604 	add	a,#0x0c
   2556 F9                 8605 	mov	r1,a
   2557 E7                 8606 	mov	a,@r1
   2558 26                 8607 	add	a,@r0
   2559 F6                 8608 	mov	@r0,a
   255A 09                 8609 	inc	r1
   255B E7                 8610 	mov	a,@r1
   255C 08                 8611 	inc	r0
   255D 36                 8612 	addc	a,@r0
   255E F6                 8613 	mov	@r0,a
                           8614 ;	genPointerGet
                           8615 ;	genGenPointerGet
   255F E5*00              8616 	mov	a,_bp
   2561 24 1B              8617 	add	a,#0x1b
   2563 F8                 8618 	mov	r0,a
   2564 86 82              8619 	mov	dpl,@r0
   2566 08                 8620 	inc	r0
   2567 86 83              8621 	mov	dph,@r0
   2569 08                 8622 	inc	r0
   256A 86 F0              8623 	mov	b,@r0
   256C E5*00              8624 	mov	a,_bp
   256E 24 2E              8625 	add	a,#0x2e
   2570 F9                 8626 	mov	r1,a
   2571 12s00r00           8627 	lcall	__gptrget
   2574 F7                 8628 	mov	@r1,a
   2575 A3                 8629 	inc	dptr
   2576 12s00r00           8630 	lcall	__gptrget
   2579 09                 8631 	inc	r1
   257A F7                 8632 	mov	@r1,a
   257B A3                 8633 	inc	dptr
   257C 12s00r00           8634 	lcall	__gptrget
   257F 09                 8635 	inc	r1
   2580 F7                 8636 	mov	@r1,a
   2581 A3                 8637 	inc	dptr
   2582 12s00r00           8638 	lcall	__gptrget
   2585 09                 8639 	inc	r1
   2586 F7                 8640 	mov	@r1,a
                           8641 ;	genCast
   2587 E5*00              8642 	mov	a,_bp
   2589 24 0C              8643 	add	a,#0x0c
   258B F8                 8644 	mov	r0,a
   258C 86 02              8645 	mov	ar2,@r0
   258E 08                 8646 	inc	r0
   258F 86 03              8647 	mov	ar3,@r0
                           8648 ;	genPlus
                           8649 ;	Peephole 3.c	changed mov to clr
   2591 E4                 8650 	clr	a
   2592 FC                 8651 	mov	r4,a
   2593 FD                 8652 	mov	r5,a
   2594 E5*00              8653 	mov	a,_bp
   2596 24 2E              8654 	add	a,#0x2e
   2598 F8                 8655 	mov	r0,a
                           8656 ;	Peephole 236.g	used r2 instead of ar2
   2599 EA                 8657 	mov	a,r2
   259A 26                 8658 	add	a,@r0
   259B FA                 8659 	mov	r2,a
                           8660 ;	Peephole 236.g	used r3 instead of ar3
   259C EB                 8661 	mov	a,r3
   259D 08                 8662 	inc	r0
   259E 36                 8663 	addc	a,@r0
   259F FB                 8664 	mov	r3,a
                           8665 ;	Peephole 236.g	used r4 instead of ar4
   25A0 EC                 8666 	mov	a,r4
   25A1 08                 8667 	inc	r0
   25A2 36                 8668 	addc	a,@r0
   25A3 FC                 8669 	mov	r4,a
                           8670 ;	Peephole 236.g	used r5 instead of ar5
   25A4 ED                 8671 	mov	a,r5
   25A5 08                 8672 	inc	r0
   25A6 36                 8673 	addc	a,@r0
   25A7 FD                 8674 	mov	r5,a
                           8675 ;	genPointerSet
                           8676 ;	genGenPointerSet
   25A8 E5*00              8677 	mov	a,_bp
   25AA 24 1B              8678 	add	a,#0x1b
   25AC F8                 8679 	mov	r0,a
   25AD 86 82              8680 	mov	dpl,@r0
   25AF 08                 8681 	inc	r0
   25B0 86 83              8682 	mov	dph,@r0
   25B2 08                 8683 	inc	r0
   25B3 86 F0              8684 	mov	b,@r0
   25B5 EA                 8685 	mov	a,r2
   25B6 12s00r00           8686 	lcall	__gptrput
   25B9 A3                 8687 	inc	dptr
   25BA EB                 8688 	mov	a,r3
   25BB 12s00r00           8689 	lcall	__gptrput
   25BE A3                 8690 	inc	dptr
   25BF EC                 8691 	mov	a,r4
   25C0 12s00r00           8692 	lcall	__gptrput
   25C3 A3                 8693 	inc	dptr
   25C4 ED                 8694 	mov	a,r5
   25C5 12s00r00           8695 	lcall	__gptrput
                           8696 ;	genPointerGet
                           8697 ;	genGenPointerGet
   25C8 E5*00              8698 	mov	a,_bp
   25CA 24 18              8699 	add	a,#0x18
   25CC F8                 8700 	mov	r0,a
   25CD 86 82              8701 	mov	dpl,@r0
   25CF 08                 8702 	inc	r0
   25D0 86 83              8703 	mov	dph,@r0
   25D2 08                 8704 	inc	r0
   25D3 86 F0              8705 	mov	b,@r0
   25D5 12s00r00           8706 	lcall	__gptrget
   25D8 FA                 8707 	mov	r2,a
   25D9 A3                 8708 	inc	dptr
   25DA 12s00r00           8709 	lcall	__gptrget
   25DD FB                 8710 	mov	r3,a
                           8711 ;	genPlus
   25DE E5*00              8712 	mov	a,_bp
   25E0 24 0C              8713 	add	a,#0x0c
   25E2 F8                 8714 	mov	r0,a
   25E3 E6                 8715 	mov	a,@r0
                           8716 ;	Peephole 236.a	used r2 instead of ar2
   25E4 2A                 8717 	add	a,r2
   25E5 FA                 8718 	mov	r2,a
   25E6 08                 8719 	inc	r0
   25E7 E6                 8720 	mov	a,@r0
                           8721 ;	Peephole 236.b	used r3 instead of ar3
   25E8 3B                 8722 	addc	a,r3
   25E9 FB                 8723 	mov	r3,a
                           8724 ;	genPointerSet
                           8725 ;	genGenPointerSet
   25EA E5*00              8726 	mov	a,_bp
   25EC 24 18              8727 	add	a,#0x18
   25EE F8                 8728 	mov	r0,a
   25EF 86 82              8729 	mov	dpl,@r0
   25F1 08                 8730 	inc	r0
   25F2 86 83              8731 	mov	dph,@r0
   25F4 08                 8732 	inc	r0
   25F5 86 F0              8733 	mov	b,@r0
   25F7 EA                 8734 	mov	a,r2
   25F8 12s00r00           8735 	lcall	__gptrput
   25FB A3                 8736 	inc	dptr
   25FC EB                 8737 	mov	a,r3
   25FD 12s00r00           8738 	lcall	__gptrput
                           8739 ;	genMinus
   2600 E5*00              8740 	mov	a,_bp
   2602 24 F9              8741 	add	a,#0xfffffff9
   2604 F8                 8742 	mov	r0,a
   2605 E5*00              8743 	mov	a,_bp
   2607 24 0C              8744 	add	a,#0x0c
   2609 F9                 8745 	mov	r1,a
   260A E6                 8746 	mov	a,@r0
   260B C3                 8747 	clr	c
   260C 97                 8748 	subb	a,@r1
   260D F6                 8749 	mov	@r0,a
   260E 08                 8750 	inc	r0
   260F E6                 8751 	mov	a,@r0
   2610 09                 8752 	inc	r1
   2611 97                 8753 	subb	a,@r1
   2612 F6                 8754 	mov	@r0,a
   2613 02s21r41           8755 	ljmp	00127$
   2616                    8756 00130$:
                           8757 ;	FatDrivers/tff.c:968: return FR_OK;
                           8758 ;	genRet
   2616 75 82 00           8759 	mov	dpl,#0x00
                           8760 ;	FatDrivers/tff.c:970: fr_error:	/* Abort this function due to an unrecoverable error */
                           8761 ;	Peephole 112.b	changed ljmp to sjmp
   2619 80 28              8762 	sjmp	00132$
   261B                    8763 00131$:
                           8764 ;	FatDrivers/tff.c:971: fp->flag |= FA__ERROR;
                           8765 ;	genPointerGet
                           8766 ;	genGenPointerGet
   261B E5*00              8767 	mov	a,_bp
   261D 24 38              8768 	add	a,#0x38
   261F F8                 8769 	mov	r0,a
   2620 86 82              8770 	mov	dpl,@r0
   2622 08                 8771 	inc	r0
   2623 86 83              8772 	mov	dph,@r0
   2625 08                 8773 	inc	r0
   2626 86 F0              8774 	mov	b,@r0
   2628 12s00r00           8775 	lcall	__gptrget
   262B FA                 8776 	mov	r2,a
                           8777 ;	genOr
   262C 43 02 80           8778 	orl	ar2,#0x80
                           8779 ;	genPointerSet
                           8780 ;	genGenPointerSet
   262F E5*00              8781 	mov	a,_bp
   2631 24 38              8782 	add	a,#0x38
   2633 F8                 8783 	mov	r0,a
   2634 86 82              8784 	mov	dpl,@r0
   2636 08                 8785 	inc	r0
   2637 86 83              8786 	mov	dph,@r0
   2639 08                 8787 	inc	r0
   263A 86 F0              8788 	mov	b,@r0
   263C EA                 8789 	mov	a,r2
   263D 12s00r00           8790 	lcall	__gptrput
                           8791 ;	FatDrivers/tff.c:972: return FR_RW_ERROR;
                           8792 ;	genRet
   2640 75 82 08           8793 	mov	dpl,#0x08
   2643                    8794 00132$:
   2643 85*00 81           8795 	mov	sp,_bp
   2646 D0*00              8796 	pop	_bp
   2648 22                 8797 	ret
                           8798 ;------------------------------------------------------------
                           8799 ;Allocation info for local variables in function 'f_mp3_read'
                           8800 ;------------------------------------------------------------
                           8801 ;buff                      Allocated to stack - offset -5
                           8802 ;btr                       Allocated to stack - offset -7
                           8803 ;br                        Allocated to stack - offset -10
                           8804 ;fp                        Allocated to stack - offset 1
                           8805 ;sect                      Allocated to stack - offset 4
                           8806 ;remain                    Allocated to stack - offset 8
                           8807 ;rcnt                      Allocated to stack - offset 12
                           8808 ;cc                        Allocated to registers r6 r7 
                           8809 ;clust                     Allocated to stack - offset 14
                           8810 ;rbuff                     Allocated to stack - offset 18
                           8811 ;res                       Allocated to registers r2 
                           8812 ;fs                        Allocated to stack - offset 21
                           8813 ;sloc0                     Allocated to stack - offset 27
                           8814 ;sloc1                     Allocated to stack - offset 24
                           8815 ;sloc2                     Allocated to stack - offset 27
                           8816 ;sloc3                     Allocated to stack - offset 30
                           8817 ;sloc4                     Allocated to stack - offset 34
                           8818 ;sloc5                     Allocated to stack - offset 37
                           8819 ;sloc6                     Allocated to stack - offset 40
                           8820 ;sloc7                     Allocated to stack - offset 43
                           8821 ;sloc8                     Allocated to stack - offset 46
                           8822 ;sloc9                     Allocated to stack - offset 50
                           8823 ;sloc10                    Allocated to stack - offset 53
                           8824 ;sloc11                    Allocated to stack - offset 56
                           8825 ;------------------------------------------------------------
                           8826 ;	FatDrivers/tff.c:979: FRESULT f_mp3_read (
                           8827 ;	-----------------------------------------
                           8828 ;	 function f_mp3_read
                           8829 ;	-----------------------------------------
   2649                    8830 _f_mp3_read:
   2649 C0*00              8831 	push	_bp
   264B 85 81*00           8832 	mov	_bp,sp
                           8833 ;     genReceive
   264E C0 82              8834 	push	dpl
   2650 C0 83              8835 	push	dph
   2652 C0 F0              8836 	push	b
   2654 E5 81              8837 	mov	a,sp
   2656 24 3A              8838 	add	a,#0x3a
   2658 F5 81              8839 	mov	sp,a
                           8840 ;	FatDrivers/tff.c:989: BYTE *rbuff = buff;
                           8841 ;	genAssign
   265A E5*00              8842 	mov	a,_bp
   265C 24 FB              8843 	add	a,#0xfffffffb
   265E F8                 8844 	mov	r0,a
   265F 86 05              8845 	mov	ar5,@r0
   2661 08                 8846 	inc	r0
   2662 86 06              8847 	mov	ar6,@r0
   2664 08                 8848 	inc	r0
   2665 86 07              8849 	mov	ar7,@r0
                           8850 ;	genAssign
   2667 E5*00              8851 	mov	a,_bp
   2669 24 12              8852 	add	a,#0x12
   266B F8                 8853 	mov	r0,a
   266C A6 05              8854 	mov	@r0,ar5
   266E 08                 8855 	inc	r0
   266F A6 06              8856 	mov	@r0,ar6
   2671 08                 8857 	inc	r0
   2672 A6 07              8858 	mov	@r0,ar7
                           8859 ;	FatDrivers/tff.c:991: FATFS *fs = fp->fs;
                           8860 ;	genPlus
   2674 A8*00              8861 	mov	r0,_bp
   2676 08                 8862 	inc	r0
                           8863 ;     genPlusIncr
   2677 74 04              8864 	mov	a,#0x04
   2679 26                 8865 	add	a,@r0
   267A FD                 8866 	mov	r5,a
                           8867 ;	Peephole 181	changed mov to clr
   267B E4                 8868 	clr	a
   267C 08                 8869 	inc	r0
   267D 36                 8870 	addc	a,@r0
   267E FE                 8871 	mov	r6,a
   267F 08                 8872 	inc	r0
   2680 86 07              8873 	mov	ar7,@r0
                           8874 ;	genPointerGet
                           8875 ;	genGenPointerGet
   2682 8D 82              8876 	mov	dpl,r5
   2684 8E 83              8877 	mov	dph,r6
   2686 8F F0              8878 	mov	b,r7
   2688 12s00r00           8879 	lcall	__gptrget
   268B FD                 8880 	mov	r5,a
   268C A3                 8881 	inc	dptr
   268D 12s00r00           8882 	lcall	__gptrget
   2690 FE                 8883 	mov	r6,a
   2691 A3                 8884 	inc	dptr
   2692 12s00r00           8885 	lcall	__gptrget
   2695 FF                 8886 	mov	r7,a
                           8887 ;	genAssign
   2696 E5*00              8888 	mov	a,_bp
   2698 24 15              8889 	add	a,#0x15
   269A F8                 8890 	mov	r0,a
   269B A6 05              8891 	mov	@r0,ar5
   269D 08                 8892 	inc	r0
   269E A6 06              8893 	mov	@r0,ar6
   26A0 08                 8894 	inc	r0
   26A1 A6 07              8895 	mov	@r0,ar7
                           8896 ;	FatDrivers/tff.c:994: *br = 0;
                           8897 ;	genAssign
   26A3 E5*00              8898 	mov	a,_bp
   26A5 24 F6              8899 	add	a,#0xfffffff6
   26A7 F8                 8900 	mov	r0,a
   26A8 E5*00              8901 	mov	a,_bp
   26AA 24 18              8902 	add	a,#0x18
   26AC F9                 8903 	mov	r1,a
   26AD E6                 8904 	mov	a,@r0
   26AE F7                 8905 	mov	@r1,a
   26AF 08                 8906 	inc	r0
   26B0 09                 8907 	inc	r1
   26B1 E6                 8908 	mov	a,@r0
   26B2 F7                 8909 	mov	@r1,a
   26B3 08                 8910 	inc	r0
   26B4 09                 8911 	inc	r1
   26B5 E6                 8912 	mov	a,@r0
   26B6 F7                 8913 	mov	@r1,a
                           8914 ;	genPointerSet
                           8915 ;	genGenPointerSet
   26B7 E5*00              8916 	mov	a,_bp
   26B9 24 18              8917 	add	a,#0x18
   26BB F8                 8918 	mov	r0,a
   26BC 86 82              8919 	mov	dpl,@r0
   26BE 08                 8920 	inc	r0
   26BF 86 83              8921 	mov	dph,@r0
   26C1 08                 8922 	inc	r0
   26C2 86 F0              8923 	mov	b,@r0
                           8924 ;	Peephole 181	changed mov to clr
   26C4 E4                 8925 	clr	a
   26C5 12s00r00           8926 	lcall	__gptrput
   26C8 A3                 8927 	inc	dptr
                           8928 ;	Peephole 181	changed mov to clr
   26C9 E4                 8929 	clr	a
   26CA 12s00r00           8930 	lcall	__gptrput
                           8931 ;	FatDrivers/tff.c:995: res = validate(fs, fp->id);						/* Check validity of the object */
                           8932 ;	genPointerGet
                           8933 ;	genGenPointerGet
   26CD A8*00              8934 	mov	r0,_bp
   26CF 08                 8935 	inc	r0
   26D0 86 82              8936 	mov	dpl,@r0
   26D2 08                 8937 	inc	r0
   26D3 86 83              8938 	mov	dph,@r0
   26D5 08                 8939 	inc	r0
   26D6 86 F0              8940 	mov	b,@r0
   26D8 12s00r00           8941 	lcall	__gptrget
   26DB FA                 8942 	mov	r2,a
   26DC A3                 8943 	inc	dptr
   26DD 12s00r00           8944 	lcall	__gptrget
   26E0 FB                 8945 	mov	r3,a
                           8946 ;	genIpush
   26E1 C0 02              8947 	push	ar2
   26E3 C0 03              8948 	push	ar3
                           8949 ;	genCall
   26E5 E5*00              8950 	mov	a,_bp
   26E7 24 15              8951 	add	a,#0x15
   26E9 F8                 8952 	mov	r0,a
   26EA 86 82              8953 	mov	dpl,@r0
   26EC 08                 8954 	inc	r0
   26ED 86 83              8955 	mov	dph,@r0
   26EF 08                 8956 	inc	r0
   26F0 86 F0              8957 	mov	b,@r0
   26F2 12s1Br84           8958 	lcall	_validate
   26F5 AA 82              8959 	mov	r2,dpl
   26F7 15 81              8960 	dec	sp
   26F9 15 81              8961 	dec	sp
                           8962 ;	genAssign
                           8963 ;	FatDrivers/tff.c:996: if (res != FR_OK) return res;
                           8964 ;	genCmpEq
                           8965 ;	gencjneshort
   26FB BA 00 02           8966 	cjne	r2,#0x00,00152$
                           8967 ;	Peephole 112.b	changed ljmp to sjmp
   26FE 80 05              8968 	sjmp	00102$
   2700                    8969 00152$:
                           8970 ;	genRet
   2700 8A 82              8971 	mov	dpl,r2
   2702 02s2Dr7D           8972 	ljmp	00132$
   2705                    8973 00102$:
                           8974 ;	FatDrivers/tff.c:997: if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
                           8975 ;	genPlus
   2705 A8*00              8976 	mov	r0,_bp
   2707 08                 8977 	inc	r0
   2708 E5*00              8978 	mov	a,_bp
   270A 24 38              8979 	add	a,#0x38
   270C F9                 8980 	mov	r1,a
                           8981 ;     genPlusIncr
   270D 74 02              8982 	mov	a,#0x02
   270F 26                 8983 	add	a,@r0
   2710 F7                 8984 	mov	@r1,a
                           8985 ;	Peephole 181	changed mov to clr
   2711 E4                 8986 	clr	a
   2712 08                 8987 	inc	r0
   2713 36                 8988 	addc	a,@r0
   2714 09                 8989 	inc	r1
   2715 F7                 8990 	mov	@r1,a
   2716 08                 8991 	inc	r0
   2717 09                 8992 	inc	r1
   2718 E6                 8993 	mov	a,@r0
   2719 F7                 8994 	mov	@r1,a
                           8995 ;	genPointerGet
                           8996 ;	genGenPointerGet
   271A E5*00              8997 	mov	a,_bp
   271C 24 38              8998 	add	a,#0x38
   271E F8                 8999 	mov	r0,a
   271F 86 82              9000 	mov	dpl,@r0
   2721 08                 9001 	inc	r0
   2722 86 83              9002 	mov	dph,@r0
   2724 08                 9003 	inc	r0
   2725 86 F0              9004 	mov	b,@r0
   2727 12s00r00           9005 	lcall	__gptrget
                           9006 ;	genAnd
   272A FA                 9007 	mov	r2,a
                           9008 ;	Peephole 105	removed redundant mov
                           9009 ;	genIfxJump
                           9010 ;	Peephole 108.d	removed ljmp by inverse jump logic
   272B 30 E7 06           9011 	jnb	acc.7,00104$
                           9012 ;	Peephole 300	removed redundant label 00153$
                           9013 ;	genRet
   272E 75 82 08           9014 	mov	dpl,#0x08
   2731 02s2Dr7D           9015 	ljmp	00132$
   2734                    9016 00104$:
                           9017 ;	FatDrivers/tff.c:998: if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
                           9018 ;	genAnd
   2734 EA                 9019 	mov	a,r2
                           9020 ;	genIfxJump
                           9021 ;	Peephole 108.e	removed ljmp by inverse jump logic
   2735 20 E0 06           9022 	jb	acc.0,00106$
                           9023 ;	Peephole 300	removed redundant label 00154$
                           9024 ;	genRet
   2738 75 82 06           9025 	mov	dpl,#0x06
   273B 02s2Dr7D           9026 	ljmp	00132$
   273E                    9027 00106$:
                           9028 ;	FatDrivers/tff.c:999: remain = fp->fsize - fp->fptr;
                           9029 ;	genIpush
                           9030 ;	genPlus
   273E A8*00              9031 	mov	r0,_bp
   2740 08                 9032 	inc	r0
                           9033 ;     genPlusIncr
   2741 74 0B              9034 	mov	a,#0x0B
   2743 26                 9035 	add	a,@r0
   2744 FA                 9036 	mov	r2,a
                           9037 ;	Peephole 181	changed mov to clr
   2745 E4                 9038 	clr	a
   2746 08                 9039 	inc	r0
   2747 36                 9040 	addc	a,@r0
   2748 FB                 9041 	mov	r3,a
   2749 08                 9042 	inc	r0
   274A 86 04              9043 	mov	ar4,@r0
                           9044 ;	genPointerGet
                           9045 ;	genGenPointerGet
   274C 8A 82              9046 	mov	dpl,r2
   274E 8B 83              9047 	mov	dph,r3
   2750 8C F0              9048 	mov	b,r4
   2752 E5*00              9049 	mov	a,_bp
   2754 24 1E              9050 	add	a,#0x1e
   2756 F8                 9051 	mov	r0,a
   2757 12s00r00           9052 	lcall	__gptrget
   275A F6                 9053 	mov	@r0,a
   275B A3                 9054 	inc	dptr
   275C 12s00r00           9055 	lcall	__gptrget
   275F 08                 9056 	inc	r0
   2760 F6                 9057 	mov	@r0,a
   2761 A3                 9058 	inc	dptr
   2762 12s00r00           9059 	lcall	__gptrget
   2765 08                 9060 	inc	r0
   2766 F6                 9061 	mov	@r0,a
   2767 A3                 9062 	inc	dptr
   2768 12s00r00           9063 	lcall	__gptrget
   276B 08                 9064 	inc	r0
   276C F6                 9065 	mov	@r0,a
                           9066 ;	genPlus
   276D A8*00              9067 	mov	r0,_bp
   276F 08                 9068 	inc	r0
   2770 E5*00              9069 	mov	a,_bp
   2772 24 1B              9070 	add	a,#0x1b
   2774 F9                 9071 	mov	r1,a
                           9072 ;     genPlusIncr
   2775 74 07              9073 	mov	a,#0x07
   2777 26                 9074 	add	a,@r0
   2778 F7                 9075 	mov	@r1,a
                           9076 ;	Peephole 181	changed mov to clr
   2779 E4                 9077 	clr	a
   277A 08                 9078 	inc	r0
   277B 36                 9079 	addc	a,@r0
   277C 09                 9080 	inc	r1
   277D F7                 9081 	mov	@r1,a
   277E 08                 9082 	inc	r0
   277F 09                 9083 	inc	r1
   2780 E6                 9084 	mov	a,@r0
   2781 F7                 9085 	mov	@r1,a
                           9086 ;	genPointerGet
                           9087 ;	genGenPointerGet
   2782 E5*00              9088 	mov	a,_bp
   2784 24 1B              9089 	add	a,#0x1b
   2786 F8                 9090 	mov	r0,a
   2787 86 82              9091 	mov	dpl,@r0
   2789 08                 9092 	inc	r0
   278A 86 83              9093 	mov	dph,@r0
   278C 08                 9094 	inc	r0
   278D 86 F0              9095 	mov	b,@r0
   278F 12s00r00           9096 	lcall	__gptrget
   2792 FE                 9097 	mov	r6,a
   2793 A3                 9098 	inc	dptr
   2794 12s00r00           9099 	lcall	__gptrget
   2797 FF                 9100 	mov	r7,a
   2798 A3                 9101 	inc	dptr
   2799 12s00r00           9102 	lcall	__gptrget
   279C FA                 9103 	mov	r2,a
   279D A3                 9104 	inc	dptr
   279E 12s00r00           9105 	lcall	__gptrget
   27A1 FB                 9106 	mov	r3,a
                           9107 ;	genMinus
   27A2 E5*00              9108 	mov	a,_bp
   27A4 24 1E              9109 	add	a,#0x1e
   27A6 F8                 9110 	mov	r0,a
   27A7 E6                 9111 	mov	a,@r0
   27A8 C3                 9112 	clr	c
                           9113 ;	Peephole 236.l	used r6 instead of ar6
   27A9 9E                 9114 	subb	a,r6
   27AA FE                 9115 	mov	r6,a
   27AB 08                 9116 	inc	r0
   27AC E6                 9117 	mov	a,@r0
                           9118 ;	Peephole 236.l	used r7 instead of ar7
   27AD 9F                 9119 	subb	a,r7
   27AE FF                 9120 	mov	r7,a
   27AF 08                 9121 	inc	r0
   27B0 E6                 9122 	mov	a,@r0
                           9123 ;	Peephole 236.l	used r2 instead of ar2
   27B1 9A                 9124 	subb	a,r2
   27B2 FA                 9125 	mov	r2,a
   27B3 08                 9126 	inc	r0
   27B4 E6                 9127 	mov	a,@r0
                           9128 ;	Peephole 236.l	used r3 instead of ar3
   27B5 9B                 9129 	subb	a,r3
   27B6 FB                 9130 	mov	r3,a
                           9131 ;	genAssign
   27B7 E5*00              9132 	mov	a,_bp
   27B9 24 08              9133 	add	a,#0x08
   27BB F8                 9134 	mov	r0,a
   27BC A6 06              9135 	mov	@r0,ar6
   27BE 08                 9136 	inc	r0
   27BF A6 07              9137 	mov	@r0,ar7
   27C1 08                 9138 	inc	r0
   27C2 A6 02              9139 	mov	@r0,ar2
   27C4 08                 9140 	inc	r0
   27C5 A6 03              9141 	mov	@r0,ar3
                           9142 ;	FatDrivers/tff.c:1000: if (btr > remain) btr = (WORD)remain;			/* Truncate read count by number of bytes left */
                           9143 ;	genCast
   27C7 E5*00              9144 	mov	a,_bp
   27C9 24 F9              9145 	add	a,#0xfffffff9
   27CB F8                 9146 	mov	r0,a
   27CC 86 02              9147 	mov	ar2,@r0
   27CE 08                 9148 	inc	r0
   27CF 86 03              9149 	mov	ar3,@r0
                           9150 ;	genCmpGt
                           9151 ;	Peephole 3.c	changed mov to clr
   27D1 E4                 9152 	clr	a
   27D2 FC                 9153 	mov	r4,a
   27D3 FD                 9154 	mov	r5,a
   27D4 E5*00              9155 	mov	a,_bp
   27D6 24 08              9156 	add	a,#0x08
   27D8 F8                 9157 	mov	r0,a
                           9158 ;	genCmp
   27D9 C3                 9159 	clr	c
   27DA E6                 9160 	mov	a,@r0
   27DB 9A                 9161 	subb	a,r2
   27DC 08                 9162 	inc	r0
   27DD E6                 9163 	mov	a,@r0
   27DE 9B                 9164 	subb	a,r3
   27DF 08                 9165 	inc	r0
   27E0 E6                 9166 	mov	a,@r0
   27E1 9C                 9167 	subb	a,r4
   27E2 08                 9168 	inc	r0
   27E3 E6                 9169 	mov	a,@r0
   27E4 9D                 9170 	subb	a,r5
                           9171 ;	genIpop
                           9172 ;	genIfx
                           9173 ;	genIfxJump
                           9174 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           9175 ;	Peephole 128	jump optimization
   27E5 50 10              9176 	jnc	00151$
                           9177 ;	Peephole 300	removed redundant label 00155$
                           9178 ;	genCast
   27E7 E5*00              9179 	mov	a,_bp
   27E9 24 08              9180 	add	a,#0x08
   27EB F8                 9181 	mov	r0,a
   27EC E5*00              9182 	mov	a,_bp
   27EE 24 F9              9183 	add	a,#0xfffffff9
   27F0 F9                 9184 	mov	r1,a
   27F1 E6                 9185 	mov	a,@r0
   27F2 F7                 9186 	mov	@r1,a
   27F3 08                 9187 	inc	r0
   27F4 09                 9188 	inc	r1
   27F5 E6                 9189 	mov	a,@r0
   27F6 F7                 9190 	mov	@r1,a
   27F7                    9191 00151$:
                           9192 ;	genPlus
   27F7 A8*00              9193 	mov	r0,_bp
   27F9 08                 9194 	inc	r0
   27FA E5*00              9195 	mov	a,_bp
   27FC 24 35              9196 	add	a,#0x35
   27FE F9                 9197 	mov	r1,a
                           9198 ;     genPlusIncr
   27FF 74 13              9199 	mov	a,#0x13
   2801 26                 9200 	add	a,@r0
   2802 F7                 9201 	mov	@r1,a
                           9202 ;	Peephole 181	changed mov to clr
   2803 E4                 9203 	clr	a
   2804 08                 9204 	inc	r0
   2805 36                 9205 	addc	a,@r0
   2806 09                 9206 	inc	r1
   2807 F7                 9207 	mov	@r1,a
   2808 08                 9208 	inc	r0
   2809 09                 9209 	inc	r1
   280A E6                 9210 	mov	a,@r0
   280B F7                 9211 	mov	@r1,a
                           9212 ;	genPlus
   280C A8*00              9213 	mov	r0,_bp
   280E 08                 9214 	inc	r0
   280F E5*00              9215 	mov	a,_bp
   2811 24 1E              9216 	add	a,#0x1e
   2813 F9                 9217 	mov	r1,a
                           9218 ;     genPlusIncr
   2814 74 0F              9219 	mov	a,#0x0F
   2816 26                 9220 	add	a,@r0
   2817 F7                 9221 	mov	@r1,a
                           9222 ;	Peephole 181	changed mov to clr
   2818 E4                 9223 	clr	a
   2819 08                 9224 	inc	r0
   281A 36                 9225 	addc	a,@r0
   281B 09                 9226 	inc	r1
   281C F7                 9227 	mov	@r1,a
   281D 08                 9228 	inc	r0
   281E 09                 9229 	inc	r1
   281F E6                 9230 	mov	a,@r0
   2820 F7                 9231 	mov	@r1,a
                           9232 ;	genPlus
   2821 E5*00              9233 	mov	a,_bp
   2823 24 15              9234 	add	a,#0x15
   2825 F8                 9235 	mov	r0,a
   2826 E5*00              9236 	mov	a,_bp
   2828 24 22              9237 	add	a,#0x22
   282A F9                 9238 	mov	r1,a
                           9239 ;     genPlusIncr
   282B 74 18              9240 	mov	a,#0x18
   282D 26                 9241 	add	a,@r0
   282E F7                 9242 	mov	@r1,a
                           9243 ;	Peephole 181	changed mov to clr
   282F E4                 9244 	clr	a
   2830 08                 9245 	inc	r0
   2831 36                 9246 	addc	a,@r0
   2832 09                 9247 	inc	r1
   2833 F7                 9248 	mov	@r1,a
   2834 08                 9249 	inc	r0
   2835 09                 9250 	inc	r1
   2836 E6                 9251 	mov	a,@r0
   2837 F7                 9252 	mov	@r1,a
                           9253 ;	genPlus
   2838 E5*00              9254 	mov	a,_bp
   283A 24 15              9255 	add	a,#0x15
   283C F8                 9256 	mov	r0,a
   283D E5*00              9257 	mov	a,_bp
   283F 24 25              9258 	add	a,#0x25
   2841 F9                 9259 	mov	r1,a
                           9260 ;     genPlusIncr
   2842 74 1D              9261 	mov	a,#0x1D
   2844 26                 9262 	add	a,@r0
   2845 F7                 9263 	mov	@r1,a
                           9264 ;	Peephole 181	changed mov to clr
   2846 E4                 9265 	clr	a
   2847 08                 9266 	inc	r0
   2848 36                 9267 	addc	a,@r0
   2849 09                 9268 	inc	r1
   284A F7                 9269 	mov	@r1,a
   284B 08                 9270 	inc	r0
   284C 09                 9271 	inc	r1
   284D E6                 9272 	mov	a,@r0
   284E F7                 9273 	mov	@r1,a
                           9274 ;	genPlus
   284F A8*00              9275 	mov	r0,_bp
   2851 08                 9276 	inc	r0
   2852 E5*00              9277 	mov	a,_bp
   2854 24 28              9278 	add	a,#0x28
   2856 F9                 9279 	mov	r1,a
                           9280 ;     genPlusIncr
   2857 74 17              9281 	mov	a,#0x17
   2859 26                 9282 	add	a,@r0
   285A F7                 9283 	mov	@r1,a
                           9284 ;	Peephole 181	changed mov to clr
   285B E4                 9285 	clr	a
   285C 08                 9286 	inc	r0
   285D 36                 9287 	addc	a,@r0
   285E 09                 9288 	inc	r1
   285F F7                 9289 	mov	@r1,a
   2860 08                 9290 	inc	r0
   2861 09                 9291 	inc	r1
   2862 E6                 9292 	mov	a,@r0
   2863 F7                 9293 	mov	@r1,a
                           9294 ;	genPlus
   2864 E5*00              9295 	mov	a,_bp
   2866 24 15              9296 	add	a,#0x15
   2868 F8                 9297 	mov	r0,a
   2869 E5*00              9298 	mov	a,_bp
   286B 24 2B              9299 	add	a,#0x2b
   286D F9                 9300 	mov	r1,a
                           9301 ;     genPlusIncr
   286E 74 20              9302 	mov	a,#0x20
   2870 26                 9303 	add	a,@r0
   2871 F7                 9304 	mov	@r1,a
                           9305 ;	Peephole 181	changed mov to clr
   2872 E4                 9306 	clr	a
   2873 08                 9307 	inc	r0
   2874 36                 9308 	addc	a,@r0
   2875 09                 9309 	inc	r1
   2876 F7                 9310 	mov	@r1,a
   2877 08                 9311 	inc	r0
   2878 09                 9312 	inc	r1
   2879 E6                 9313 	mov	a,@r0
   287A F7                 9314 	mov	@r1,a
   287B                    9315 00127$:
                           9316 ;	FatDrivers/tff.c:1002: for ( ;  btr;									/* Repeat until all data transferred */
                           9317 ;	genIfx
   287B E5*00              9318 	mov	a,_bp
   287D 24 F9              9319 	add	a,#0xfffffff9
   287F F8                 9320 	mov	r0,a
   2880 E6                 9321 	mov	a,@r0
   2881 08                 9322 	inc	r0
   2882 46                 9323 	orl	a,@r0
                           9324 ;	genIfxJump
   2883 70 03              9325 	jnz	00156$
   2885 02s2Dr50           9326 	ljmp	00130$
   2888                    9327 00156$:
                           9328 ;	FatDrivers/tff.c:1004: if ((fp->fptr % 512) == 0) {				/* On the sector boundary */
                           9329 ;	genPointerGet
                           9330 ;	genGenPointerGet
   2888 E5*00              9331 	mov	a,_bp
   288A 24 1B              9332 	add	a,#0x1b
   288C F8                 9333 	mov	r0,a
   288D 86 82              9334 	mov	dpl,@r0
   288F 08                 9335 	inc	r0
   2890 86 83              9336 	mov	dph,@r0
   2892 08                 9337 	inc	r0
   2893 86 F0              9338 	mov	b,@r0
   2895 12s00r00           9339 	lcall	__gptrget
   2898 FB                 9340 	mov	r3,a
   2899 A3                 9341 	inc	dptr
   289A 12s00r00           9342 	lcall	__gptrget
   289D FC                 9343 	mov	r4,a
   289E A3                 9344 	inc	dptr
   289F 12s00r00           9345 	lcall	__gptrget
   28A2 FD                 9346 	mov	r5,a
   28A3 A3                 9347 	inc	dptr
   28A4 12s00r00           9348 	lcall	__gptrget
   28A7 FE                 9349 	mov	r6,a
                           9350 ;	genAnd
   28A8 EB                 9351 	mov	a,r3
   28A9 70 04              9352 	jnz	00157$
   28AB EC                 9353 	mov	a,r4
                           9354 ;	Peephole 160.f	removed sjmp by inverse jump logic
   28AC 30 E0 03           9355 	jnb	acc.0,00158$
   28AF                    9356 00157$:
   28AF 02s2BrA6           9357 	ljmp	00122$
   28B2                    9358 00158$:
                           9359 ;	FatDrivers/tff.c:1005: if (--fp->sect_clust) {					/* Decrement left sector counter */
                           9360 ;	genIpush
                           9361 ;	genPlus
   28B2 A8*00              9362 	mov	r0,_bp
   28B4 08                 9363 	inc	r0
   28B5 E5*00              9364 	mov	a,_bp
   28B7 24 32              9365 	add	a,#0x32
   28B9 F9                 9366 	mov	r1,a
                           9367 ;     genPlusIncr
   28BA 74 03              9368 	mov	a,#0x03
   28BC 26                 9369 	add	a,@r0
   28BD F7                 9370 	mov	@r1,a
                           9371 ;	Peephole 181	changed mov to clr
   28BE E4                 9372 	clr	a
   28BF 08                 9373 	inc	r0
   28C0 36                 9374 	addc	a,@r0
   28C1 09                 9375 	inc	r1
   28C2 F7                 9376 	mov	@r1,a
   28C3 08                 9377 	inc	r0
   28C4 09                 9378 	inc	r1
   28C5 E6                 9379 	mov	a,@r0
   28C6 F7                 9380 	mov	@r1,a
                           9381 ;	genPointerGet
                           9382 ;	genGenPointerGet
   28C7 E5*00              9383 	mov	a,_bp
   28C9 24 32              9384 	add	a,#0x32
   28CB F8                 9385 	mov	r0,a
   28CC 86 82              9386 	mov	dpl,@r0
   28CE 08                 9387 	inc	r0
   28CF 86 83              9388 	mov	dph,@r0
   28D1 08                 9389 	inc	r0
   28D2 86 F0              9390 	mov	b,@r0
   28D4 12s00r00           9391 	lcall	__gptrget
   28D7 FA                 9392 	mov	r2,a
                           9393 ;	genMinus
                           9394 ;	genMinusDec
   28D8 1A                 9395 	dec	r2
                           9396 ;	genPointerSet
                           9397 ;	genGenPointerSet
   28D9 E5*00              9398 	mov	a,_bp
   28DB 24 32              9399 	add	a,#0x32
   28DD F8                 9400 	mov	r0,a
   28DE 86 82              9401 	mov	dpl,@r0
   28E0 08                 9402 	inc	r0
   28E1 86 83              9403 	mov	dph,@r0
   28E3 08                 9404 	inc	r0
   28E4 86 F0              9405 	mov	b,@r0
                           9406 ;	genIfx
   28E6 EA                 9407 	mov	a,r2
   28E7 12s00r00           9408 	lcall	__gptrput
                           9409 ;	Peephole 190	removed redundant mov
                           9410 ;	genIpop
                           9411 ;	genIfxJump
                           9412 ;	Peephole 108.c	removed ljmp by inverse jump logic
   28EA 60 38              9413 	jz	00113$
                           9414 ;	Peephole 300	removed redundant label 00159$
                           9415 ;	FatDrivers/tff.c:1006: sect = fp->curr_sect + 1;			/* Get current sector */
                           9416 ;	genIpush
                           9417 ;	genPointerGet
                           9418 ;	genGenPointerGet
   28EC E5*00              9419 	mov	a,_bp
   28EE 24 28              9420 	add	a,#0x28
   28F0 F8                 9421 	mov	r0,a
   28F1 86 82              9422 	mov	dpl,@r0
   28F3 08                 9423 	inc	r0
   28F4 86 83              9424 	mov	dph,@r0
   28F6 08                 9425 	inc	r0
   28F7 86 F0              9426 	mov	b,@r0
   28F9 12s00r00           9427 	lcall	__gptrget
   28FC FA                 9428 	mov	r2,a
   28FD A3                 9429 	inc	dptr
   28FE 12s00r00           9430 	lcall	__gptrget
   2901 FB                 9431 	mov	r3,a
   2902 A3                 9432 	inc	dptr
   2903 12s00r00           9433 	lcall	__gptrget
   2906 FC                 9434 	mov	r4,a
   2907 A3                 9435 	inc	dptr
   2908 12s00r00           9436 	lcall	__gptrget
   290B FD                 9437 	mov	r5,a
                           9438 ;	genPlus
   290C E5*00              9439 	mov	a,_bp
   290E 24 04              9440 	add	a,#0x04
   2910 F8                 9441 	mov	r0,a
                           9442 ;     genPlusIncr
   2911 74 01              9443 	mov	a,#0x01
                           9444 ;	Peephole 236.a	used r2 instead of ar2
   2913 2A                 9445 	add	a,r2
   2914 F6                 9446 	mov	@r0,a
                           9447 ;	Peephole 181	changed mov to clr
   2915 E4                 9448 	clr	a
                           9449 ;	Peephole 236.b	used r3 instead of ar3
   2916 3B                 9450 	addc	a,r3
   2917 08                 9451 	inc	r0
   2918 F6                 9452 	mov	@r0,a
                           9453 ;	Peephole 181	changed mov to clr
   2919 E4                 9454 	clr	a
                           9455 ;	Peephole 236.b	used r4 instead of ar4
   291A 3C                 9456 	addc	a,r4
   291B 08                 9457 	inc	r0
   291C F6                 9458 	mov	@r0,a
                           9459 ;	Peephole 181	changed mov to clr
   291D E4                 9460 	clr	a
                           9461 ;	Peephole 236.b	used r5 instead of ar5
   291E 3D                 9462 	addc	a,r5
   291F 08                 9463 	inc	r0
   2920 F6                 9464 	mov	@r0,a
                           9465 ;	genIpop
   2921 02s2Ar55           9466 	ljmp	00114$
   2924                    9467 00113$:
                           9468 ;	FatDrivers/tff.c:1008: clust = (fp->fptr == 0) ?
                           9469 ;	genNot
   2924 EB                 9470 	mov	a,r3
   2925 4C                 9471 	orl	a,r4
   2926 4D                 9472 	orl	a,r5
   2927 4E                 9473 	orl	a,r6
   2928 B4 01 00           9474 	cjne	a,#0x01,00160$
   292B                    9475 00160$:
   292B E4                 9476 	clr	a
   292C 33                 9477 	rlc	a
                           9478 ;	genIfx
   292D FD                 9479 	mov	r5,a
                           9480 ;	Peephole 105	removed redundant mov
                           9481 ;	genIfxJump
                           9482 ;	Peephole 108.c	removed ljmp by inverse jump logic
   292E 60 22              9483 	jz	00134$
                           9484 ;	Peephole 300	removed redundant label 00161$
                           9485 ;	FatDrivers/tff.c:1009: fp->org_clust : get_cluster(fp->curr_clust);
                           9486 ;	genPointerGet
                           9487 ;	genGenPointerGet
   2930 E5*00              9488 	mov	a,_bp
   2932 24 1E              9489 	add	a,#0x1e
   2934 F8                 9490 	mov	r0,a
   2935 86 82              9491 	mov	dpl,@r0
   2937 08                 9492 	inc	r0
   2938 86 83              9493 	mov	dph,@r0
   293A 08                 9494 	inc	r0
   293B 86 F0              9495 	mov	b,@r0
   293D 12s00r00           9496 	lcall	__gptrget
   2940 FD                 9497 	mov	r5,a
   2941 A3                 9498 	inc	dptr
   2942 12s00r00           9499 	lcall	__gptrget
   2945 FE                 9500 	mov	r6,a
   2946 A3                 9501 	inc	dptr
   2947 12s00r00           9502 	lcall	__gptrget
   294A FF                 9503 	mov	r7,a
   294B A3                 9504 	inc	dptr
   294C 12s00r00           9505 	lcall	__gptrget
   294F FA                 9506 	mov	r2,a
                           9507 ;	Peephole 112.b	changed ljmp to sjmp
   2950 80 30              9508 	sjmp	00135$
   2952                    9509 00134$:
                           9510 ;	genPointerGet
                           9511 ;	genGenPointerGet
   2952 E5*00              9512 	mov	a,_bp
   2954 24 35              9513 	add	a,#0x35
   2956 F8                 9514 	mov	r0,a
   2957 86 82              9515 	mov	dpl,@r0
   2959 08                 9516 	inc	r0
   295A 86 83              9517 	mov	dph,@r0
   295C 08                 9518 	inc	r0
   295D 86 F0              9519 	mov	b,@r0
   295F 12s00r00           9520 	lcall	__gptrget
   2962 FA                 9521 	mov	r2,a
   2963 A3                 9522 	inc	dptr
   2964 12s00r00           9523 	lcall	__gptrget
   2967 FB                 9524 	mov	r3,a
   2968 A3                 9525 	inc	dptr
   2969 12s00r00           9526 	lcall	__gptrget
   296C FC                 9527 	mov	r4,a
   296D A3                 9528 	inc	dptr
   296E 12s00r00           9529 	lcall	__gptrget
                           9530 ;	genCall
   2971 FD                 9531 	mov	r5,a
   2972 8A 82              9532 	mov	dpl,r2
   2974 8B 83              9533 	mov	dph,r3
   2976 8C F0              9534 	mov	b,r4
                           9535 ;	Peephole 191	removed redundant mov
   2978 12s00rEA           9536 	lcall	_get_cluster
   297B AD 82              9537 	mov	r5,dpl
   297D AE 83              9538 	mov	r6,dph
   297F AF F0              9539 	mov	r7,b
   2981 FA                 9540 	mov	r2,a
   2982                    9541 00135$:
                           9542 ;	genAssign
   2982 E5*00              9543 	mov	a,_bp
   2984 24 0E              9544 	add	a,#0x0e
   2986 F8                 9545 	mov	r0,a
   2987 A6 05              9546 	mov	@r0,ar5
   2989 08                 9547 	inc	r0
   298A A6 06              9548 	mov	@r0,ar6
   298C 08                 9549 	inc	r0
   298D A6 07              9550 	mov	@r0,ar7
   298F 08                 9551 	inc	r0
   2990 A6 02              9552 	mov	@r0,ar2
                           9553 ;	FatDrivers/tff.c:1010: if (clust < 2 || clust >= fs->max_clust)
                           9554 ;	genCmpLt
   2992 E5*00              9555 	mov	a,_bp
   2994 24 0E              9556 	add	a,#0x0e
   2996 F8                 9557 	mov	r0,a
                           9558 ;	genCmp
   2997 C3                 9559 	clr	c
   2998 E6                 9560 	mov	a,@r0
   2999 94 02              9561 	subb	a,#0x02
   299B 08                 9562 	inc	r0
   299C E6                 9563 	mov	a,@r0
   299D 94 00              9564 	subb	a,#0x00
   299F 08                 9565 	inc	r0
   29A0 E6                 9566 	mov	a,@r0
   29A1 94 00              9567 	subb	a,#0x00
   29A3 08                 9568 	inc	r0
   29A4 E6                 9569 	mov	a,@r0
   29A5 94 00              9570 	subb	a,#0x00
                           9571 ;	genIfxJump
   29A7 50 03              9572 	jnc	00162$
   29A9 02s2Dr55           9573 	ljmp	00131$
   29AC                    9574 00162$:
                           9575 ;	genPointerGet
                           9576 ;	genGenPointerGet
   29AC E5*00              9577 	mov	a,_bp
   29AE 24 22              9578 	add	a,#0x22
   29B0 F8                 9579 	mov	r0,a
   29B1 86 82              9580 	mov	dpl,@r0
   29B3 08                 9581 	inc	r0
   29B4 86 83              9582 	mov	dph,@r0
   29B6 08                 9583 	inc	r0
   29B7 86 F0              9584 	mov	b,@r0
   29B9 12s00r00           9585 	lcall	__gptrget
   29BC FE                 9586 	mov	r6,a
   29BD A3                 9587 	inc	dptr
   29BE 12s00r00           9588 	lcall	__gptrget
   29C1 FF                 9589 	mov	r7,a
   29C2 A3                 9590 	inc	dptr
   29C3 12s00r00           9591 	lcall	__gptrget
   29C6 FA                 9592 	mov	r2,a
   29C7 A3                 9593 	inc	dptr
   29C8 12s00r00           9594 	lcall	__gptrget
   29CB FB                 9595 	mov	r3,a
                           9596 ;	genCmpLt
   29CC E5*00              9597 	mov	a,_bp
   29CE 24 0E              9598 	add	a,#0x0e
   29D0 F8                 9599 	mov	r0,a
                           9600 ;	genCmp
   29D1 C3                 9601 	clr	c
   29D2 E6                 9602 	mov	a,@r0
   29D3 9E                 9603 	subb	a,r6
   29D4 08                 9604 	inc	r0
   29D5 E6                 9605 	mov	a,@r0
   29D6 9F                 9606 	subb	a,r7
   29D7 08                 9607 	inc	r0
   29D8 E6                 9608 	mov	a,@r0
   29D9 9A                 9609 	subb	a,r2
   29DA 08                 9610 	inc	r0
   29DB E6                 9611 	mov	a,@r0
   29DC 9B                 9612 	subb	a,r3
                           9613 ;	genIfxJump
   29DD 40 03              9614 	jc	00163$
   29DF 02s2Dr55           9615 	ljmp	00131$
   29E2                    9616 00163$:
                           9617 ;	FatDrivers/tff.c:1012: fp->curr_clust = clust;				/* Current cluster */
                           9618 ;	genPointerSet
                           9619 ;	genGenPointerSet
   29E2 E5*00              9620 	mov	a,_bp
   29E4 24 35              9621 	add	a,#0x35
   29E6 F8                 9622 	mov	r0,a
   29E7 86 82              9623 	mov	dpl,@r0
   29E9 08                 9624 	inc	r0
   29EA 86 83              9625 	mov	dph,@r0
   29EC 08                 9626 	inc	r0
   29ED 86 F0              9627 	mov	b,@r0
   29EF E5*00              9628 	mov	a,_bp
   29F1 24 0E              9629 	add	a,#0x0e
   29F3 F9                 9630 	mov	r1,a
   29F4 E7                 9631 	mov	a,@r1
   29F5 12s00r00           9632 	lcall	__gptrput
   29F8 A3                 9633 	inc	dptr
   29F9 09                 9634 	inc	r1
   29FA E7                 9635 	mov	a,@r1
   29FB 12s00r00           9636 	lcall	__gptrput
   29FE A3                 9637 	inc	dptr
   29FF 09                 9638 	inc	r1
   2A00 E7                 9639 	mov	a,@r1
   2A01 12s00r00           9640 	lcall	__gptrput
   2A04 A3                 9641 	inc	dptr
   2A05 09                 9642 	inc	r1
   2A06 E7                 9643 	mov	a,@r1
   2A07 12s00r00           9644 	lcall	__gptrput
                           9645 ;	FatDrivers/tff.c:1013: sect = clust2sect(clust);			/* Get current sector */
                           9646 ;	genCall
   2A0A E5*00              9647 	mov	a,_bp
   2A0C 24 0E              9648 	add	a,#0x0e
   2A0E F8                 9649 	mov	r0,a
   2A0F 86 82              9650 	mov	dpl,@r0
   2A11 08                 9651 	inc	r0
   2A12 86 83              9652 	mov	dph,@r0
   2A14 08                 9653 	inc	r0
   2A15 86 F0              9654 	mov	b,@r0
   2A17 08                 9655 	inc	r0
   2A18 E6                 9656 	mov	a,@r0
   2A19 12s04r26           9657 	lcall	_clust2sect
   2A1C AA 82              9658 	mov	r2,dpl
   2A1E AB 83              9659 	mov	r3,dph
   2A20 AC F0              9660 	mov	r4,b
   2A22 FD                 9661 	mov	r5,a
                           9662 ;	genAssign
   2A23 E5*00              9663 	mov	a,_bp
   2A25 24 04              9664 	add	a,#0x04
   2A27 F8                 9665 	mov	r0,a
   2A28 A6 02              9666 	mov	@r0,ar2
   2A2A 08                 9667 	inc	r0
   2A2B A6 03              9668 	mov	@r0,ar3
   2A2D 08                 9669 	inc	r0
   2A2E A6 04              9670 	mov	@r0,ar4
   2A30 08                 9671 	inc	r0
   2A31 A6 05              9672 	mov	@r0,ar5
                           9673 ;	FatDrivers/tff.c:1014: fp->sect_clust = fs->sects_clust;	/* Re-initialize the left sector counter */
                           9674 ;	genPointerGet
                           9675 ;	genGenPointerGet
   2A33 E5*00              9676 	mov	a,_bp
   2A35 24 25              9677 	add	a,#0x25
   2A37 F8                 9678 	mov	r0,a
   2A38 86 82              9679 	mov	dpl,@r0
   2A3A 08                 9680 	inc	r0
   2A3B 86 83              9681 	mov	dph,@r0
   2A3D 08                 9682 	inc	r0
   2A3E 86 F0              9683 	mov	b,@r0
   2A40 12s00r00           9684 	lcall	__gptrget
   2A43 FA                 9685 	mov	r2,a
                           9686 ;	genPointerSet
                           9687 ;	genGenPointerSet
   2A44 E5*00              9688 	mov	a,_bp
   2A46 24 32              9689 	add	a,#0x32
   2A48 F8                 9690 	mov	r0,a
   2A49 86 82              9691 	mov	dpl,@r0
   2A4B 08                 9692 	inc	r0
   2A4C 86 83              9693 	mov	dph,@r0
   2A4E 08                 9694 	inc	r0
   2A4F 86 F0              9695 	mov	b,@r0
   2A51 EA                 9696 	mov	a,r2
   2A52 12s00r00           9697 	lcall	__gptrput
   2A55                    9698 00114$:
                           9699 ;	FatDrivers/tff.c:1016: fp->curr_sect = sect;					/* Update current sector */
                           9700 ;	genPointerSet
                           9701 ;	genGenPointerSet
   2A55 E5*00              9702 	mov	a,_bp
   2A57 24 28              9703 	add	a,#0x28
   2A59 F8                 9704 	mov	r0,a
   2A5A 86 82              9705 	mov	dpl,@r0
   2A5C 08                 9706 	inc	r0
   2A5D 86 83              9707 	mov	dph,@r0
   2A5F 08                 9708 	inc	r0
   2A60 86 F0              9709 	mov	b,@r0
   2A62 E5*00              9710 	mov	a,_bp
   2A64 24 04              9711 	add	a,#0x04
   2A66 F9                 9712 	mov	r1,a
   2A67 E7                 9713 	mov	a,@r1
   2A68 12s00r00           9714 	lcall	__gptrput
   2A6B A3                 9715 	inc	dptr
   2A6C 09                 9716 	inc	r1
   2A6D E7                 9717 	mov	a,@r1
   2A6E 12s00r00           9718 	lcall	__gptrput
   2A71 A3                 9719 	inc	dptr
   2A72 09                 9720 	inc	r1
   2A73 E7                 9721 	mov	a,@r1
   2A74 12s00r00           9722 	lcall	__gptrput
   2A77 A3                 9723 	inc	dptr
   2A78 09                 9724 	inc	r1
   2A79 E7                 9725 	mov	a,@r1
   2A7A 12s00r00           9726 	lcall	__gptrput
                           9727 ;	FatDrivers/tff.c:1017: cc = btr / 512;							/* When left bytes >= 512, */
                           9728 ;	genRightShift
                           9729 ;	genRightShiftLiteral
   2A7D E5*00              9730 	mov	a,_bp
   2A7F 24 F9              9731 	add	a,#0xfffffff9
                           9732 ;	genrshTwo
                           9733 ;	Peephole 185	changed order of increment (acc incremented also!)
   2A81 04                 9734 	inc	a
   2A82 F8                 9735 	mov	r0,a
   2A83 E6                 9736 	mov	a,@r0
   2A84 C3                 9737 	clr	c
   2A85 13                 9738 	rrc	a
                           9739 ;	FatDrivers/tff.c:1018: if (cc) {								/* Read maximum contiguous sectors directly */
                           9740 ;	genIfx
   2A86 FE                 9741 	mov	r6,a
   2A87 7F 00              9742 	mov	r7,#0x00
                           9743 ;	Peephole 177.d	removed redundant move
   2A89 4F                 9744 	orl	a,r7
                           9745 ;	genIfxJump
   2A8A 70 03              9746 	jnz	00164$
   2A8C 02s2BrA6           9747 	ljmp	00122$
   2A8F                    9748 00164$:
                           9749 ;	FatDrivers/tff.c:1019: if (cc > fp->sect_clust) cc = fp->sect_clust;
                           9750 ;	genPointerGet
                           9751 ;	genGenPointerGet
   2A8F E5*00              9752 	mov	a,_bp
   2A91 24 32              9753 	add	a,#0x32
   2A93 F8                 9754 	mov	r0,a
   2A94 86 82              9755 	mov	dpl,@r0
   2A96 08                 9756 	inc	r0
   2A97 86 83              9757 	mov	dph,@r0
   2A99 08                 9758 	inc	r0
   2A9A 86 F0              9759 	mov	b,@r0
   2A9C 12s00r00           9760 	lcall	__gptrget
   2A9F FC                 9761 	mov	r4,a
                           9762 ;	genCast
   2AA0 7D 00              9763 	mov	r5,#0x00
                           9764 ;	genCmpGt
                           9765 ;	genCmp
   2AA2 C3                 9766 	clr	c
   2AA3 EC                 9767 	mov	a,r4
   2AA4 9E                 9768 	subb	a,r6
   2AA5 ED                 9769 	mov	a,r5
   2AA6 9F                 9770 	subb	a,r7
                           9771 ;	genIfxJump
                           9772 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2AA7 50 15              9773 	jnc	00116$
                           9774 ;	Peephole 300	removed redundant label 00165$
                           9775 ;	genPointerGet
                           9776 ;	genGenPointerGet
   2AA9 E5*00              9777 	mov	a,_bp
   2AAB 24 32              9778 	add	a,#0x32
   2AAD F8                 9779 	mov	r0,a
   2AAE 86 82              9780 	mov	dpl,@r0
   2AB0 08                 9781 	inc	r0
   2AB1 86 83              9782 	mov	dph,@r0
   2AB3 08                 9783 	inc	r0
   2AB4 86 F0              9784 	mov	b,@r0
   2AB6 12s00r00           9785 	lcall	__gptrget
   2AB9 FC                 9786 	mov	r4,a
                           9787 ;	genCast
   2ABA 8C 06              9788 	mov	ar6,r4
   2ABC 7F 00              9789 	mov	r7,#0x00
   2ABE                    9790 00116$:
                           9791 ;	FatDrivers/tff.c:1020: if(disk_mp3_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
                           9792 ;	genCast
   2ABE 8E 04              9793 	mov	ar4,r6
                           9794 ;	genIpush
   2AC0 C0 04              9795 	push	ar4
   2AC2 C0 06              9796 	push	ar6
   2AC4 C0 07              9797 	push	ar7
   2AC6 C0 04              9798 	push	ar4
                           9799 ;	genIpush
   2AC8 E5*00              9800 	mov	a,_bp
   2ACA 24 04              9801 	add	a,#0x04
   2ACC F8                 9802 	mov	r0,a
   2ACD E6                 9803 	mov	a,@r0
   2ACE C0 E0              9804 	push	acc
   2AD0 08                 9805 	inc	r0
   2AD1 E6                 9806 	mov	a,@r0
   2AD2 C0 E0              9807 	push	acc
   2AD4 08                 9808 	inc	r0
   2AD5 E6                 9809 	mov	a,@r0
   2AD6 C0 E0              9810 	push	acc
   2AD8 08                 9811 	inc	r0
   2AD9 E6                 9812 	mov	a,@r0
   2ADA C0 E0              9813 	push	acc
                           9814 ;	genIpush
   2ADC E5*00              9815 	mov	a,_bp
   2ADE 24 12              9816 	add	a,#0x12
   2AE0 F8                 9817 	mov	r0,a
   2AE1 E6                 9818 	mov	a,@r0
   2AE2 C0 E0              9819 	push	acc
   2AE4 08                 9820 	inc	r0
   2AE5 E6                 9821 	mov	a,@r0
   2AE6 C0 E0              9822 	push	acc
   2AE8 08                 9823 	inc	r0
   2AE9 E6                 9824 	mov	a,@r0
   2AEA C0 E0              9825 	push	acc
                           9826 ;	genCall
   2AEC 75 82 00           9827 	mov	dpl,#0x00
   2AEF 12s00r00           9828 	lcall	_disk_mp3_read
   2AF2 AD 82              9829 	mov	r5,dpl
   2AF4 E5 81              9830 	mov	a,sp
   2AF6 24 F8              9831 	add	a,#0xf8
   2AF8 F5 81              9832 	mov	sp,a
   2AFA D0 07              9833 	pop	ar7
   2AFC D0 06              9834 	pop	ar6
   2AFE D0 04              9835 	pop	ar4
                           9836 ;	genCmpEq
                           9837 ;	gencjneshort
   2B00 BD 00 02           9838 	cjne	r5,#0x00,00166$
   2B03 80 03              9839 	sjmp	00167$
   2B05                    9840 00166$:
   2B05 02s2Dr55           9841 	ljmp	00131$
   2B08                    9842 00167$:
                           9843 ;	FatDrivers/tff.c:1022: fp->sect_clust -= (BYTE)(cc - 1);
                           9844 ;	genPointerGet
                           9845 ;	genGenPointerGet
   2B08 E5*00              9846 	mov	a,_bp
   2B0A 24 32              9847 	add	a,#0x32
   2B0C F8                 9848 	mov	r0,a
   2B0D 86 82              9849 	mov	dpl,@r0
   2B0F 08                 9850 	inc	r0
   2B10 86 83              9851 	mov	dph,@r0
   2B12 08                 9852 	inc	r0
   2B13 86 F0              9853 	mov	b,@r0
   2B15 12s00r00           9854 	lcall	__gptrget
   2B18 FD                 9855 	mov	r5,a
                           9856 ;	genMinus
                           9857 ;	genMinusDec
   2B19 EC                 9858 	mov	a,r4
   2B1A 14                 9859 	dec	a
                           9860 ;	genMinus
   2B1B D3                 9861 	setb	c
                           9862 ;	Peephole 236.l	used r5 instead of ar5
   2B1C 9D                 9863 	subb	a,r5
   2B1D F4                 9864 	cpl	a
   2B1E FD                 9865 	mov	r5,a
                           9866 ;	genPointerSet
                           9867 ;	genGenPointerSet
   2B1F E5*00              9868 	mov	a,_bp
   2B21 24 32              9869 	add	a,#0x32
   2B23 F8                 9870 	mov	r0,a
   2B24 86 82              9871 	mov	dpl,@r0
   2B26 08                 9872 	inc	r0
   2B27 86 83              9873 	mov	dph,@r0
   2B29 08                 9874 	inc	r0
   2B2A 86 F0              9875 	mov	b,@r0
   2B2C ED                 9876 	mov	a,r5
   2B2D 12s00r00           9877 	lcall	__gptrput
                           9878 ;	FatDrivers/tff.c:1023: fp->curr_sect += cc - 1;
                           9879 ;	genPointerGet
                           9880 ;	genGenPointerGet
   2B30 E5*00              9881 	mov	a,_bp
   2B32 24 28              9882 	add	a,#0x28
   2B34 F8                 9883 	mov	r0,a
   2B35 86 82              9884 	mov	dpl,@r0
   2B37 08                 9885 	inc	r0
   2B38 86 83              9886 	mov	dph,@r0
   2B3A 08                 9887 	inc	r0
   2B3B 86 F0              9888 	mov	b,@r0
   2B3D E5*00              9889 	mov	a,_bp
   2B3F 24 2E              9890 	add	a,#0x2e
   2B41 F9                 9891 	mov	r1,a
   2B42 12s00r00           9892 	lcall	__gptrget
   2B45 F7                 9893 	mov	@r1,a
   2B46 A3                 9894 	inc	dptr
   2B47 12s00r00           9895 	lcall	__gptrget
   2B4A 09                 9896 	inc	r1
   2B4B F7                 9897 	mov	@r1,a
   2B4C A3                 9898 	inc	dptr
   2B4D 12s00r00           9899 	lcall	__gptrget
   2B50 09                 9900 	inc	r1
   2B51 F7                 9901 	mov	@r1,a
   2B52 A3                 9902 	inc	dptr
   2B53 12s00r00           9903 	lcall	__gptrget
   2B56 09                 9904 	inc	r1
   2B57 F7                 9905 	mov	@r1,a
                           9906 ;	genMinus
                           9907 ;	genMinusDec
   2B58 EE                 9908 	mov	a,r6
   2B59 24 FF              9909 	add	a,#0xff
   2B5B FA                 9910 	mov	r2,a
   2B5C EF                 9911 	mov	a,r7
   2B5D 34 FF              9912 	addc	a,#0xff
   2B5F FB                 9913 	mov	r3,a
                           9914 ;	genCast
                           9915 ;	genPlus
                           9916 ;	Peephole 3.c	changed mov to clr
   2B60 E4                 9917 	clr	a
   2B61 FC                 9918 	mov	r4,a
   2B62 FD                 9919 	mov	r5,a
   2B63 E5*00              9920 	mov	a,_bp
   2B65 24 2E              9921 	add	a,#0x2e
   2B67 F8                 9922 	mov	r0,a
                           9923 ;	Peephole 236.g	used r2 instead of ar2
   2B68 EA                 9924 	mov	a,r2
   2B69 26                 9925 	add	a,@r0
   2B6A FA                 9926 	mov	r2,a
                           9927 ;	Peephole 236.g	used r3 instead of ar3
   2B6B EB                 9928 	mov	a,r3
   2B6C 08                 9929 	inc	r0
   2B6D 36                 9930 	addc	a,@r0
   2B6E FB                 9931 	mov	r3,a
                           9932 ;	Peephole 236.g	used r4 instead of ar4
   2B6F EC                 9933 	mov	a,r4
   2B70 08                 9934 	inc	r0
   2B71 36                 9935 	addc	a,@r0
   2B72 FC                 9936 	mov	r4,a
                           9937 ;	Peephole 236.g	used r5 instead of ar5
   2B73 ED                 9938 	mov	a,r5
   2B74 08                 9939 	inc	r0
   2B75 36                 9940 	addc	a,@r0
   2B76 FD                 9941 	mov	r5,a
                           9942 ;	genPointerSet
                           9943 ;	genGenPointerSet
   2B77 E5*00              9944 	mov	a,_bp
   2B79 24 28              9945 	add	a,#0x28
   2B7B F8                 9946 	mov	r0,a
   2B7C 86 82              9947 	mov	dpl,@r0
   2B7E 08                 9948 	inc	r0
   2B7F 86 83              9949 	mov	dph,@r0
   2B81 08                 9950 	inc	r0
   2B82 86 F0              9951 	mov	b,@r0
   2B84 EA                 9952 	mov	a,r2
   2B85 12s00r00           9953 	lcall	__gptrput
   2B88 A3                 9954 	inc	dptr
   2B89 EB                 9955 	mov	a,r3
   2B8A 12s00r00           9956 	lcall	__gptrput
   2B8D A3                 9957 	inc	dptr
   2B8E EC                 9958 	mov	a,r4
   2B8F 12s00r00           9959 	lcall	__gptrput
   2B92 A3                 9960 	inc	dptr
   2B93 ED                 9961 	mov	a,r5
   2B94 12s00r00           9962 	lcall	__gptrput
                           9963 ;	FatDrivers/tff.c:1024: rcnt = cc * 512;
                           9964 ;	genLeftShift
                           9965 ;	genLeftShiftLiteral
   2B97 E5*00              9966 	mov	a,_bp
   2B99 24 0C              9967 	add	a,#0x0c
   2B9B F8                 9968 	mov	r0,a
                           9969 ;	genlshTwo
   2B9C EE                 9970 	mov	a,r6
                           9971 ;	Peephole 254	optimized left shift
   2B9D 2E                 9972 	add	a,r6
   2B9E 08                 9973 	inc	r0
   2B9F F6                 9974 	mov	@r0,a
   2BA0 18                 9975 	dec	r0
   2BA1 76 00              9976 	mov	@r0,#0x00
                           9977 ;	FatDrivers/tff.c:1025: continue;
   2BA3 02s2Cr87           9978 	ljmp	00129$
   2BA6                    9979 00122$:
                           9980 ;	FatDrivers/tff.c:1028: if (!move_window(fp->curr_sect)) goto fr_error;	/* Move sector window */
                           9981 ;	genPointerGet
                           9982 ;	genGenPointerGet
   2BA6 E5*00              9983 	mov	a,_bp
   2BA8 24 28              9984 	add	a,#0x28
   2BAA F8                 9985 	mov	r0,a
   2BAB 86 82              9986 	mov	dpl,@r0
   2BAD 08                 9987 	inc	r0
   2BAE 86 83              9988 	mov	dph,@r0
   2BB0 08                 9989 	inc	r0
   2BB1 86 F0              9990 	mov	b,@r0
   2BB3 12s00r00           9991 	lcall	__gptrget
   2BB6 FC                 9992 	mov	r4,a
   2BB7 A3                 9993 	inc	dptr
   2BB8 12s00r00           9994 	lcall	__gptrget
   2BBB FD                 9995 	mov	r5,a
   2BBC A3                 9996 	inc	dptr
   2BBD 12s00r00           9997 	lcall	__gptrget
   2BC0 FE                 9998 	mov	r6,a
   2BC1 A3                 9999 	inc	dptr
   2BC2 12s00r00          10000 	lcall	__gptrget
                          10001 ;	genCall
   2BC5 FF                10002 	mov	r7,a
   2BC6 8C 82             10003 	mov	dpl,r4
   2BC8 8D 83             10004 	mov	dph,r5
   2BCA 8E F0             10005 	mov	b,r6
                          10006 ;	Peephole 191	removed redundant mov
   2BCC 12s00r00          10007 	lcall	_move_window
   2BCF E5 82             10008 	mov	a,dpl
                          10009 ;	genIfx
                          10010 ;	genIfxJump
   2BD1 70 03             10011 	jnz	00168$
   2BD3 02s2Dr55          10012 	ljmp	00131$
   2BD6                   10013 00168$:
                          10014 ;	FatDrivers/tff.c:1029: rcnt = 512 - (WORD)(fp->fptr % 512);			/* Copy fractional bytes from sector window */
                          10015 ;	genPointerGet
                          10016 ;	genGenPointerGet
   2BD6 E5*00             10017 	mov	a,_bp
   2BD8 24 1B             10018 	add	a,#0x1b
   2BDA F8                10019 	mov	r0,a
   2BDB 86 82             10020 	mov	dpl,@r0
   2BDD 08                10021 	inc	r0
   2BDE 86 83             10022 	mov	dph,@r0
   2BE0 08                10023 	inc	r0
   2BE1 86 F0             10024 	mov	b,@r0
   2BE3 12s00r00          10025 	lcall	__gptrget
   2BE6 FC                10026 	mov	r4,a
   2BE7 A3                10027 	inc	dptr
   2BE8 12s00r00          10028 	lcall	__gptrget
   2BEB FD                10029 	mov	r5,a
   2BEC A3                10030 	inc	dptr
   2BED 12s00r00          10031 	lcall	__gptrget
   2BF0 FE                10032 	mov	r6,a
   2BF1 A3                10033 	inc	dptr
   2BF2 12s00r00          10034 	lcall	__gptrget
   2BF5 FF                10035 	mov	r7,a
                          10036 ;	genAnd
   2BF6 53 05 01          10037 	anl	ar5,#0x01
                          10038 ;	genCast
                          10039 ;	genMinus
                          10040 ;	Peephole 3.c	changed mov to clr
   2BF9 E4                10041 	clr	a
   2BFA FE                10042 	mov	r6,a
   2BFB FF                10043 	mov	r7,a
   2BFC E5*00             10044 	mov	a,_bp
   2BFE 24 0C             10045 	add	a,#0x0c
   2C00 F8                10046 	mov	r0,a
                          10047 ;	Peephole 181	changed mov to clr
   2C01 E4                10048 	clr	a
   2C02 C3                10049 	clr	c
                          10050 ;	Peephole 236.l	used r4 instead of ar4
   2C03 9C                10051 	subb	a,r4
   2C04 F6                10052 	mov	@r0,a
   2C05 74 02             10053 	mov	a,#0x02
                          10054 ;	Peephole 236.l	used r5 instead of ar5
   2C07 9D                10055 	subb	a,r5
   2C08 08                10056 	inc	r0
   2C09 F6                10057 	mov	@r0,a
                          10058 ;	FatDrivers/tff.c:1030: if (rcnt > btr) rcnt = btr;
                          10059 ;	genCmpGt
   2C0A E5*00             10060 	mov	a,_bp
   2C0C 24 0C             10061 	add	a,#0x0c
   2C0E F8                10062 	mov	r0,a
   2C0F E5*00             10063 	mov	a,_bp
   2C11 24 F9             10064 	add	a,#0xfffffff9
   2C13 F9                10065 	mov	r1,a
                          10066 ;	genCmp
   2C14 C3                10067 	clr	c
   2C15 E7                10068 	mov	a,@r1
   2C16 96                10069 	subb	a,@r0
   2C17 09                10070 	inc	r1
   2C18 E7                10071 	mov	a,@r1
   2C19 08                10072 	inc	r0
   2C1A 96                10073 	subb	a,@r0
                          10074 ;	genIfxJump
                          10075 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2C1B 50 10             10076 	jnc	00126$
                          10077 ;	Peephole 300	removed redundant label 00169$
                          10078 ;	genAssign
   2C1D E5*00             10079 	mov	a,_bp
   2C1F 24 F9             10080 	add	a,#0xfffffff9
   2C21 F8                10081 	mov	r0,a
   2C22 E5*00             10082 	mov	a,_bp
   2C24 24 0C             10083 	add	a,#0x0c
   2C26 F9                10084 	mov	r1,a
   2C27 E6                10085 	mov	a,@r0
   2C28 F7                10086 	mov	@r1,a
   2C29 08                10087 	inc	r0
   2C2A 09                10088 	inc	r1
   2C2B E6                10089 	mov	a,@r0
   2C2C F7                10090 	mov	@r1,a
   2C2D                   10091 00126$:
                          10092 ;	FatDrivers/tff.c:1031: memcpy(rbuff, &fs->win[(WORD)fp->fptr % 512], rcnt);
                          10093 ;	genPointerGet
                          10094 ;	genGenPointerGet
   2C2D E5*00             10095 	mov	a,_bp
   2C2F 24 1B             10096 	add	a,#0x1b
   2C31 F8                10097 	mov	r0,a
   2C32 86 82             10098 	mov	dpl,@r0
   2C34 08                10099 	inc	r0
   2C35 86 83             10100 	mov	dph,@r0
   2C37 08                10101 	inc	r0
   2C38 86 F0             10102 	mov	b,@r0
   2C3A 12s00r00          10103 	lcall	__gptrget
   2C3D FC                10104 	mov	r4,a
   2C3E A3                10105 	inc	dptr
   2C3F 12s00r00          10106 	lcall	__gptrget
   2C42 FD                10107 	mov	r5,a
   2C43 A3                10108 	inc	dptr
   2C44 12s00r00          10109 	lcall	__gptrget
   2C47 FE                10110 	mov	r6,a
   2C48 A3                10111 	inc	dptr
   2C49 12s00r00          10112 	lcall	__gptrget
   2C4C FF                10113 	mov	r7,a
                          10114 ;	genCast
                          10115 ;	genAnd
   2C4D 53 05 01          10116 	anl	ar5,#0x01
                          10117 ;	genPlus
   2C50 E5*00             10118 	mov	a,_bp
   2C52 24 2B             10119 	add	a,#0x2b
   2C54 F8                10120 	mov	r0,a
                          10121 ;	Peephole 236.g	used r4 instead of ar4
   2C55 EC                10122 	mov	a,r4
   2C56 26                10123 	add	a,@r0
   2C57 FC                10124 	mov	r4,a
                          10125 ;	Peephole 236.g	used r5 instead of ar5
   2C58 ED                10126 	mov	a,r5
   2C59 08                10127 	inc	r0
   2C5A 36                10128 	addc	a,@r0
   2C5B FD                10129 	mov	r5,a
   2C5C 08                10130 	inc	r0
   2C5D 86 06             10131 	mov	ar6,@r0
                          10132 ;	genIpush
   2C5F E5*00             10133 	mov	a,_bp
   2C61 24 0C             10134 	add	a,#0x0c
   2C63 F8                10135 	mov	r0,a
   2C64 E6                10136 	mov	a,@r0
   2C65 C0 E0             10137 	push	acc
   2C67 08                10138 	inc	r0
   2C68 E6                10139 	mov	a,@r0
   2C69 C0 E0             10140 	push	acc
                          10141 ;	genIpush
   2C6B C0 04             10142 	push	ar4
   2C6D C0 05             10143 	push	ar5
   2C6F C0 06             10144 	push	ar6
                          10145 ;	genCall
   2C71 E5*00             10146 	mov	a,_bp
   2C73 24 12             10147 	add	a,#0x12
   2C75 F8                10148 	mov	r0,a
   2C76 86 82             10149 	mov	dpl,@r0
   2C78 08                10150 	inc	r0
   2C79 86 83             10151 	mov	dph,@r0
   2C7B 08                10152 	inc	r0
   2C7C 86 F0             10153 	mov	b,@r0
   2C7E 12s00r00          10154 	lcall	_memcpy
   2C81 E5 81             10155 	mov	a,sp
   2C83 24 FB             10156 	add	a,#0xfb
   2C85 F5 81             10157 	mov	sp,a
   2C87                   10158 00129$:
                          10159 ;	FatDrivers/tff.c:1003: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
                          10160 ;	genPlus
   2C87 E5*00             10161 	mov	a,_bp
   2C89 24 12             10162 	add	a,#0x12
   2C8B F8                10163 	mov	r0,a
   2C8C E5*00             10164 	mov	a,_bp
   2C8E 24 0C             10165 	add	a,#0x0c
   2C90 F9                10166 	mov	r1,a
   2C91 E7                10167 	mov	a,@r1
   2C92 26                10168 	add	a,@r0
   2C93 F6                10169 	mov	@r0,a
   2C94 09                10170 	inc	r1
   2C95 E7                10171 	mov	a,@r1
   2C96 08                10172 	inc	r0
   2C97 36                10173 	addc	a,@r0
   2C98 F6                10174 	mov	@r0,a
                          10175 ;	genPointerGet
                          10176 ;	genGenPointerGet
   2C99 E5*00             10177 	mov	a,_bp
   2C9B 24 1B             10178 	add	a,#0x1b
   2C9D F8                10179 	mov	r0,a
   2C9E 86 82             10180 	mov	dpl,@r0
   2CA0 08                10181 	inc	r0
   2CA1 86 83             10182 	mov	dph,@r0
   2CA3 08                10183 	inc	r0
   2CA4 86 F0             10184 	mov	b,@r0
   2CA6 E5*00             10185 	mov	a,_bp
   2CA8 24 2E             10186 	add	a,#0x2e
   2CAA F9                10187 	mov	r1,a
   2CAB 12s00r00          10188 	lcall	__gptrget
   2CAE F7                10189 	mov	@r1,a
   2CAF A3                10190 	inc	dptr
   2CB0 12s00r00          10191 	lcall	__gptrget
   2CB3 09                10192 	inc	r1
   2CB4 F7                10193 	mov	@r1,a
   2CB5 A3                10194 	inc	dptr
   2CB6 12s00r00          10195 	lcall	__gptrget
   2CB9 09                10196 	inc	r1
   2CBA F7                10197 	mov	@r1,a
   2CBB A3                10198 	inc	dptr
   2CBC 12s00r00          10199 	lcall	__gptrget
   2CBF 09                10200 	inc	r1
   2CC0 F7                10201 	mov	@r1,a
                          10202 ;	genCast
   2CC1 E5*00             10203 	mov	a,_bp
   2CC3 24 0C             10204 	add	a,#0x0c
   2CC5 F8                10205 	mov	r0,a
   2CC6 86 02             10206 	mov	ar2,@r0
   2CC8 08                10207 	inc	r0
   2CC9 86 03             10208 	mov	ar3,@r0
                          10209 ;	genPlus
                          10210 ;	Peephole 3.c	changed mov to clr
   2CCB E4                10211 	clr	a
   2CCC FC                10212 	mov	r4,a
   2CCD FD                10213 	mov	r5,a
   2CCE E5*00             10214 	mov	a,_bp
   2CD0 24 2E             10215 	add	a,#0x2e
   2CD2 F8                10216 	mov	r0,a
                          10217 ;	Peephole 236.g	used r2 instead of ar2
   2CD3 EA                10218 	mov	a,r2
   2CD4 26                10219 	add	a,@r0
   2CD5 FA                10220 	mov	r2,a
                          10221 ;	Peephole 236.g	used r3 instead of ar3
   2CD6 EB                10222 	mov	a,r3
   2CD7 08                10223 	inc	r0
   2CD8 36                10224 	addc	a,@r0
   2CD9 FB                10225 	mov	r3,a
                          10226 ;	Peephole 236.g	used r4 instead of ar4
   2CDA EC                10227 	mov	a,r4
   2CDB 08                10228 	inc	r0
   2CDC 36                10229 	addc	a,@r0
   2CDD FC                10230 	mov	r4,a
                          10231 ;	Peephole 236.g	used r5 instead of ar5
   2CDE ED                10232 	mov	a,r5
   2CDF 08                10233 	inc	r0
   2CE0 36                10234 	addc	a,@r0
   2CE1 FD                10235 	mov	r5,a
                          10236 ;	genPointerSet
                          10237 ;	genGenPointerSet
   2CE2 E5*00             10238 	mov	a,_bp
   2CE4 24 1B             10239 	add	a,#0x1b
   2CE6 F8                10240 	mov	r0,a
   2CE7 86 82             10241 	mov	dpl,@r0
   2CE9 08                10242 	inc	r0
   2CEA 86 83             10243 	mov	dph,@r0
   2CEC 08                10244 	inc	r0
   2CED 86 F0             10245 	mov	b,@r0
   2CEF EA                10246 	mov	a,r2
   2CF0 12s00r00          10247 	lcall	__gptrput
   2CF3 A3                10248 	inc	dptr
   2CF4 EB                10249 	mov	a,r3
   2CF5 12s00r00          10250 	lcall	__gptrput
   2CF8 A3                10251 	inc	dptr
   2CF9 EC                10252 	mov	a,r4
   2CFA 12s00r00          10253 	lcall	__gptrput
   2CFD A3                10254 	inc	dptr
   2CFE ED                10255 	mov	a,r5
   2CFF 12s00r00          10256 	lcall	__gptrput
                          10257 ;	genPointerGet
                          10258 ;	genGenPointerGet
   2D02 E5*00             10259 	mov	a,_bp
   2D04 24 18             10260 	add	a,#0x18
   2D06 F8                10261 	mov	r0,a
   2D07 86 82             10262 	mov	dpl,@r0
   2D09 08                10263 	inc	r0
   2D0A 86 83             10264 	mov	dph,@r0
   2D0C 08                10265 	inc	r0
   2D0D 86 F0             10266 	mov	b,@r0
   2D0F 12s00r00          10267 	lcall	__gptrget
   2D12 FA                10268 	mov	r2,a
   2D13 A3                10269 	inc	dptr
   2D14 12s00r00          10270 	lcall	__gptrget
   2D17 FB                10271 	mov	r3,a
                          10272 ;	genPlus
   2D18 E5*00             10273 	mov	a,_bp
   2D1A 24 0C             10274 	add	a,#0x0c
   2D1C F8                10275 	mov	r0,a
   2D1D E6                10276 	mov	a,@r0
                          10277 ;	Peephole 236.a	used r2 instead of ar2
   2D1E 2A                10278 	add	a,r2
   2D1F FA                10279 	mov	r2,a
   2D20 08                10280 	inc	r0
   2D21 E6                10281 	mov	a,@r0
                          10282 ;	Peephole 236.b	used r3 instead of ar3
   2D22 3B                10283 	addc	a,r3
   2D23 FB                10284 	mov	r3,a
                          10285 ;	genPointerSet
                          10286 ;	genGenPointerSet
   2D24 E5*00             10287 	mov	a,_bp
   2D26 24 18             10288 	add	a,#0x18
   2D28 F8                10289 	mov	r0,a
   2D29 86 82             10290 	mov	dpl,@r0
   2D2B 08                10291 	inc	r0
   2D2C 86 83             10292 	mov	dph,@r0
   2D2E 08                10293 	inc	r0
   2D2F 86 F0             10294 	mov	b,@r0
   2D31 EA                10295 	mov	a,r2
   2D32 12s00r00          10296 	lcall	__gptrput
   2D35 A3                10297 	inc	dptr
   2D36 EB                10298 	mov	a,r3
   2D37 12s00r00          10299 	lcall	__gptrput
                          10300 ;	genMinus
   2D3A E5*00             10301 	mov	a,_bp
   2D3C 24 F9             10302 	add	a,#0xfffffff9
   2D3E F8                10303 	mov	r0,a
   2D3F E5*00             10304 	mov	a,_bp
   2D41 24 0C             10305 	add	a,#0x0c
   2D43 F9                10306 	mov	r1,a
   2D44 E6                10307 	mov	a,@r0
   2D45 C3                10308 	clr	c
   2D46 97                10309 	subb	a,@r1
   2D47 F6                10310 	mov	@r0,a
   2D48 08                10311 	inc	r0
   2D49 E6                10312 	mov	a,@r0
   2D4A 09                10313 	inc	r1
   2D4B 97                10314 	subb	a,@r1
   2D4C F6                10315 	mov	@r0,a
   2D4D 02s28r7B          10316 	ljmp	00127$
   2D50                   10317 00130$:
                          10318 ;	FatDrivers/tff.c:1034: return FR_OK;
                          10319 ;	genRet
   2D50 75 82 00          10320 	mov	dpl,#0x00
                          10321 ;	FatDrivers/tff.c:1036: fr_error:	/* Abort this function due to an unrecoverable error */
                          10322 ;	Peephole 112.b	changed ljmp to sjmp
   2D53 80 28             10323 	sjmp	00132$
   2D55                   10324 00131$:
                          10325 ;	FatDrivers/tff.c:1037: fp->flag |= FA__ERROR;
                          10326 ;	genPointerGet
                          10327 ;	genGenPointerGet
   2D55 E5*00             10328 	mov	a,_bp
   2D57 24 38             10329 	add	a,#0x38
   2D59 F8                10330 	mov	r0,a
   2D5A 86 82             10331 	mov	dpl,@r0
   2D5C 08                10332 	inc	r0
   2D5D 86 83             10333 	mov	dph,@r0
   2D5F 08                10334 	inc	r0
   2D60 86 F0             10335 	mov	b,@r0
   2D62 12s00r00          10336 	lcall	__gptrget
   2D65 FA                10337 	mov	r2,a
                          10338 ;	genOr
   2D66 43 02 80          10339 	orl	ar2,#0x80
                          10340 ;	genPointerSet
                          10341 ;	genGenPointerSet
   2D69 E5*00             10342 	mov	a,_bp
   2D6B 24 38             10343 	add	a,#0x38
   2D6D F8                10344 	mov	r0,a
   2D6E 86 82             10345 	mov	dpl,@r0
   2D70 08                10346 	inc	r0
   2D71 86 83             10347 	mov	dph,@r0
   2D73 08                10348 	inc	r0
   2D74 86 F0             10349 	mov	b,@r0
   2D76 EA                10350 	mov	a,r2
   2D77 12s00r00          10351 	lcall	__gptrput
                          10352 ;	FatDrivers/tff.c:1038: return FR_RW_ERROR;
                          10353 ;	genRet
   2D7A 75 82 08          10354 	mov	dpl,#0x08
   2D7D                   10355 00132$:
   2D7D 85*00 81          10356 	mov	sp,_bp
   2D80 D0*00             10357 	pop	_bp
   2D82 22                10358 	ret
                          10359 ;------------------------------------------------------------
                          10360 ;Allocation info for local variables in function 'f_txt_read'
                          10361 ;------------------------------------------------------------
                          10362 ;buff                      Allocated to stack - offset -5
                          10363 ;btr                       Allocated to stack - offset -7
                          10364 ;br                        Allocated to stack - offset -10
                          10365 ;fp                        Allocated to stack - offset 1
                          10366 ;sect                      Allocated to stack - offset 4
                          10367 ;remain                    Allocated to stack - offset 8
                          10368 ;rcnt                      Allocated to stack - offset 12
                          10369 ;cc                        Allocated to registers r6 r7 
                          10370 ;clust                     Allocated to stack - offset 14
                          10371 ;rbuff                     Allocated to stack - offset 18
                          10372 ;res                       Allocated to registers r2 
                          10373 ;fs                        Allocated to stack - offset 21
                          10374 ;sloc0                     Allocated to stack - offset 27
                          10375 ;sloc1                     Allocated to stack - offset 24
                          10376 ;sloc2                     Allocated to stack - offset 27
                          10377 ;sloc3                     Allocated to stack - offset 30
                          10378 ;sloc4                     Allocated to stack - offset 34
                          10379 ;sloc5                     Allocated to stack - offset 37
                          10380 ;sloc6                     Allocated to stack - offset 40
                          10381 ;sloc7                     Allocated to stack - offset 43
                          10382 ;sloc8                     Allocated to stack - offset 46
                          10383 ;sloc9                     Allocated to stack - offset 50
                          10384 ;sloc10                    Allocated to stack - offset 53
                          10385 ;sloc11                    Allocated to stack - offset 56
                          10386 ;------------------------------------------------------------
                          10387 ;	FatDrivers/tff.c:1045: FRESULT f_txt_read (
                          10388 ;	-----------------------------------------
                          10389 ;	 function f_txt_read
                          10390 ;	-----------------------------------------
   2D83                   10391 _f_txt_read:
   2D83 C0*00             10392 	push	_bp
   2D85 85 81*00          10393 	mov	_bp,sp
                          10394 ;     genReceive
   2D88 C0 82             10395 	push	dpl
   2D8A C0 83             10396 	push	dph
   2D8C C0 F0             10397 	push	b
   2D8E E5 81             10398 	mov	a,sp
   2D90 24 3A             10399 	add	a,#0x3a
   2D92 F5 81             10400 	mov	sp,a
                          10401 ;	FatDrivers/tff.c:1055: BYTE *rbuff = buff;
                          10402 ;	genAssign
   2D94 E5*00             10403 	mov	a,_bp
   2D96 24 FB             10404 	add	a,#0xfffffffb
   2D98 F8                10405 	mov	r0,a
   2D99 86 05             10406 	mov	ar5,@r0
   2D9B 08                10407 	inc	r0
   2D9C 86 06             10408 	mov	ar6,@r0
   2D9E 08                10409 	inc	r0
   2D9F 86 07             10410 	mov	ar7,@r0
                          10411 ;	genAssign
   2DA1 E5*00             10412 	mov	a,_bp
   2DA3 24 12             10413 	add	a,#0x12
   2DA5 F8                10414 	mov	r0,a
   2DA6 A6 05             10415 	mov	@r0,ar5
   2DA8 08                10416 	inc	r0
   2DA9 A6 06             10417 	mov	@r0,ar6
   2DAB 08                10418 	inc	r0
   2DAC A6 07             10419 	mov	@r0,ar7
                          10420 ;	FatDrivers/tff.c:1057: FATFS *fs = fp->fs;
                          10421 ;	genPlus
   2DAE A8*00             10422 	mov	r0,_bp
   2DB0 08                10423 	inc	r0
                          10424 ;     genPlusIncr
   2DB1 74 04             10425 	mov	a,#0x04
   2DB3 26                10426 	add	a,@r0
   2DB4 FD                10427 	mov	r5,a
                          10428 ;	Peephole 181	changed mov to clr
   2DB5 E4                10429 	clr	a
   2DB6 08                10430 	inc	r0
   2DB7 36                10431 	addc	a,@r0
   2DB8 FE                10432 	mov	r6,a
   2DB9 08                10433 	inc	r0
   2DBA 86 07             10434 	mov	ar7,@r0
                          10435 ;	genPointerGet
                          10436 ;	genGenPointerGet
   2DBC 8D 82             10437 	mov	dpl,r5
   2DBE 8E 83             10438 	mov	dph,r6
   2DC0 8F F0             10439 	mov	b,r7
   2DC2 12s00r00          10440 	lcall	__gptrget
   2DC5 FD                10441 	mov	r5,a
   2DC6 A3                10442 	inc	dptr
   2DC7 12s00r00          10443 	lcall	__gptrget
   2DCA FE                10444 	mov	r6,a
   2DCB A3                10445 	inc	dptr
   2DCC 12s00r00          10446 	lcall	__gptrget
   2DCF FF                10447 	mov	r7,a
                          10448 ;	genAssign
   2DD0 E5*00             10449 	mov	a,_bp
   2DD2 24 15             10450 	add	a,#0x15
   2DD4 F8                10451 	mov	r0,a
   2DD5 A6 05             10452 	mov	@r0,ar5
   2DD7 08                10453 	inc	r0
   2DD8 A6 06             10454 	mov	@r0,ar6
   2DDA 08                10455 	inc	r0
   2DDB A6 07             10456 	mov	@r0,ar7
                          10457 ;	FatDrivers/tff.c:1060: *br = 0;
                          10458 ;	genAssign
   2DDD E5*00             10459 	mov	a,_bp
   2DDF 24 F6             10460 	add	a,#0xfffffff6
   2DE1 F8                10461 	mov	r0,a
   2DE2 E5*00             10462 	mov	a,_bp
   2DE4 24 18             10463 	add	a,#0x18
   2DE6 F9                10464 	mov	r1,a
   2DE7 E6                10465 	mov	a,@r0
   2DE8 F7                10466 	mov	@r1,a
   2DE9 08                10467 	inc	r0
   2DEA 09                10468 	inc	r1
   2DEB E6                10469 	mov	a,@r0
   2DEC F7                10470 	mov	@r1,a
   2DED 08                10471 	inc	r0
   2DEE 09                10472 	inc	r1
   2DEF E6                10473 	mov	a,@r0
   2DF0 F7                10474 	mov	@r1,a
                          10475 ;	genPointerSet
                          10476 ;	genGenPointerSet
   2DF1 E5*00             10477 	mov	a,_bp
   2DF3 24 18             10478 	add	a,#0x18
   2DF5 F8                10479 	mov	r0,a
   2DF6 86 82             10480 	mov	dpl,@r0
   2DF8 08                10481 	inc	r0
   2DF9 86 83             10482 	mov	dph,@r0
   2DFB 08                10483 	inc	r0
   2DFC 86 F0             10484 	mov	b,@r0
                          10485 ;	Peephole 181	changed mov to clr
   2DFE E4                10486 	clr	a
   2DFF 12s00r00          10487 	lcall	__gptrput
   2E02 A3                10488 	inc	dptr
                          10489 ;	Peephole 181	changed mov to clr
   2E03 E4                10490 	clr	a
   2E04 12s00r00          10491 	lcall	__gptrput
                          10492 ;	FatDrivers/tff.c:1061: res = validate(fs, fp->id);						/* Check validity of the object */
                          10493 ;	genPointerGet
                          10494 ;	genGenPointerGet
   2E07 A8*00             10495 	mov	r0,_bp
   2E09 08                10496 	inc	r0
   2E0A 86 82             10497 	mov	dpl,@r0
   2E0C 08                10498 	inc	r0
   2E0D 86 83             10499 	mov	dph,@r0
   2E0F 08                10500 	inc	r0
   2E10 86 F0             10501 	mov	b,@r0
   2E12 12s00r00          10502 	lcall	__gptrget
   2E15 FA                10503 	mov	r2,a
   2E16 A3                10504 	inc	dptr
   2E17 12s00r00          10505 	lcall	__gptrget
   2E1A FB                10506 	mov	r3,a
                          10507 ;	genIpush
   2E1B C0 02             10508 	push	ar2
   2E1D C0 03             10509 	push	ar3
                          10510 ;	genCall
   2E1F E5*00             10511 	mov	a,_bp
   2E21 24 15             10512 	add	a,#0x15
   2E23 F8                10513 	mov	r0,a
   2E24 86 82             10514 	mov	dpl,@r0
   2E26 08                10515 	inc	r0
   2E27 86 83             10516 	mov	dph,@r0
   2E29 08                10517 	inc	r0
   2E2A 86 F0             10518 	mov	b,@r0
   2E2C 12s1Br84          10519 	lcall	_validate
   2E2F AA 82             10520 	mov	r2,dpl
   2E31 15 81             10521 	dec	sp
   2E33 15 81             10522 	dec	sp
                          10523 ;	genAssign
                          10524 ;	FatDrivers/tff.c:1062: if (res != FR_OK) return res;
                          10525 ;	genCmpEq
                          10526 ;	gencjneshort
   2E35 BA 00 02          10527 	cjne	r2,#0x00,00152$
                          10528 ;	Peephole 112.b	changed ljmp to sjmp
   2E38 80 05             10529 	sjmp	00102$
   2E3A                   10530 00152$:
                          10531 ;	genRet
   2E3A 8A 82             10532 	mov	dpl,r2
   2E3C 02s34rB7          10533 	ljmp	00132$
   2E3F                   10534 00102$:
                          10535 ;	FatDrivers/tff.c:1063: if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
                          10536 ;	genPlus
   2E3F A8*00             10537 	mov	r0,_bp
   2E41 08                10538 	inc	r0
   2E42 E5*00             10539 	mov	a,_bp
   2E44 24 38             10540 	add	a,#0x38
   2E46 F9                10541 	mov	r1,a
                          10542 ;     genPlusIncr
   2E47 74 02             10543 	mov	a,#0x02
   2E49 26                10544 	add	a,@r0
   2E4A F7                10545 	mov	@r1,a
                          10546 ;	Peephole 181	changed mov to clr
   2E4B E4                10547 	clr	a
   2E4C 08                10548 	inc	r0
   2E4D 36                10549 	addc	a,@r0
   2E4E 09                10550 	inc	r1
   2E4F F7                10551 	mov	@r1,a
   2E50 08                10552 	inc	r0
   2E51 09                10553 	inc	r1
   2E52 E6                10554 	mov	a,@r0
   2E53 F7                10555 	mov	@r1,a
                          10556 ;	genPointerGet
                          10557 ;	genGenPointerGet
   2E54 E5*00             10558 	mov	a,_bp
   2E56 24 38             10559 	add	a,#0x38
   2E58 F8                10560 	mov	r0,a
   2E59 86 82             10561 	mov	dpl,@r0
   2E5B 08                10562 	inc	r0
   2E5C 86 83             10563 	mov	dph,@r0
   2E5E 08                10564 	inc	r0
   2E5F 86 F0             10565 	mov	b,@r0
   2E61 12s00r00          10566 	lcall	__gptrget
                          10567 ;	genAnd
   2E64 FA                10568 	mov	r2,a
                          10569 ;	Peephole 105	removed redundant mov
                          10570 ;	genIfxJump
                          10571 ;	Peephole 108.d	removed ljmp by inverse jump logic
   2E65 30 E7 06          10572 	jnb	acc.7,00104$
                          10573 ;	Peephole 300	removed redundant label 00153$
                          10574 ;	genRet
   2E68 75 82 08          10575 	mov	dpl,#0x08
   2E6B 02s34rB7          10576 	ljmp	00132$
   2E6E                   10577 00104$:
                          10578 ;	FatDrivers/tff.c:1064: if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
                          10579 ;	genAnd
   2E6E EA                10580 	mov	a,r2
                          10581 ;	genIfxJump
                          10582 ;	Peephole 108.e	removed ljmp by inverse jump logic
   2E6F 20 E0 06          10583 	jb	acc.0,00106$
                          10584 ;	Peephole 300	removed redundant label 00154$
                          10585 ;	genRet
   2E72 75 82 06          10586 	mov	dpl,#0x06
   2E75 02s34rB7          10587 	ljmp	00132$
   2E78                   10588 00106$:
                          10589 ;	FatDrivers/tff.c:1065: remain = fp->fsize - fp->fptr;
                          10590 ;	genIpush
                          10591 ;	genPlus
   2E78 A8*00             10592 	mov	r0,_bp
   2E7A 08                10593 	inc	r0
                          10594 ;     genPlusIncr
   2E7B 74 0B             10595 	mov	a,#0x0B
   2E7D 26                10596 	add	a,@r0
   2E7E FA                10597 	mov	r2,a
                          10598 ;	Peephole 181	changed mov to clr
   2E7F E4                10599 	clr	a
   2E80 08                10600 	inc	r0
   2E81 36                10601 	addc	a,@r0
   2E82 FB                10602 	mov	r3,a
   2E83 08                10603 	inc	r0
   2E84 86 04             10604 	mov	ar4,@r0
                          10605 ;	genPointerGet
                          10606 ;	genGenPointerGet
   2E86 8A 82             10607 	mov	dpl,r2
   2E88 8B 83             10608 	mov	dph,r3
   2E8A 8C F0             10609 	mov	b,r4
   2E8C E5*00             10610 	mov	a,_bp
   2E8E 24 1E             10611 	add	a,#0x1e
   2E90 F8                10612 	mov	r0,a
   2E91 12s00r00          10613 	lcall	__gptrget
   2E94 F6                10614 	mov	@r0,a
   2E95 A3                10615 	inc	dptr
   2E96 12s00r00          10616 	lcall	__gptrget
   2E99 08                10617 	inc	r0
   2E9A F6                10618 	mov	@r0,a
   2E9B A3                10619 	inc	dptr
   2E9C 12s00r00          10620 	lcall	__gptrget
   2E9F 08                10621 	inc	r0
   2EA0 F6                10622 	mov	@r0,a
   2EA1 A3                10623 	inc	dptr
   2EA2 12s00r00          10624 	lcall	__gptrget
   2EA5 08                10625 	inc	r0
   2EA6 F6                10626 	mov	@r0,a
                          10627 ;	genPlus
   2EA7 A8*00             10628 	mov	r0,_bp
   2EA9 08                10629 	inc	r0
   2EAA E5*00             10630 	mov	a,_bp
   2EAC 24 1B             10631 	add	a,#0x1b
   2EAE F9                10632 	mov	r1,a
                          10633 ;     genPlusIncr
   2EAF 74 07             10634 	mov	a,#0x07
   2EB1 26                10635 	add	a,@r0
   2EB2 F7                10636 	mov	@r1,a
                          10637 ;	Peephole 181	changed mov to clr
   2EB3 E4                10638 	clr	a
   2EB4 08                10639 	inc	r0
   2EB5 36                10640 	addc	a,@r0
   2EB6 09                10641 	inc	r1
   2EB7 F7                10642 	mov	@r1,a
   2EB8 08                10643 	inc	r0
   2EB9 09                10644 	inc	r1
   2EBA E6                10645 	mov	a,@r0
   2EBB F7                10646 	mov	@r1,a
                          10647 ;	genPointerGet
                          10648 ;	genGenPointerGet
   2EBC E5*00             10649 	mov	a,_bp
   2EBE 24 1B             10650 	add	a,#0x1b
   2EC0 F8                10651 	mov	r0,a
   2EC1 86 82             10652 	mov	dpl,@r0
   2EC3 08                10653 	inc	r0
   2EC4 86 83             10654 	mov	dph,@r0
   2EC6 08                10655 	inc	r0
   2EC7 86 F0             10656 	mov	b,@r0
   2EC9 12s00r00          10657 	lcall	__gptrget
   2ECC FE                10658 	mov	r6,a
   2ECD A3                10659 	inc	dptr
   2ECE 12s00r00          10660 	lcall	__gptrget
   2ED1 FF                10661 	mov	r7,a
   2ED2 A3                10662 	inc	dptr
   2ED3 12s00r00          10663 	lcall	__gptrget
   2ED6 FA                10664 	mov	r2,a
   2ED7 A3                10665 	inc	dptr
   2ED8 12s00r00          10666 	lcall	__gptrget
   2EDB FB                10667 	mov	r3,a
                          10668 ;	genMinus
   2EDC E5*00             10669 	mov	a,_bp
   2EDE 24 1E             10670 	add	a,#0x1e
   2EE0 F8                10671 	mov	r0,a
   2EE1 E6                10672 	mov	a,@r0
   2EE2 C3                10673 	clr	c
                          10674 ;	Peephole 236.l	used r6 instead of ar6
   2EE3 9E                10675 	subb	a,r6
   2EE4 FE                10676 	mov	r6,a
   2EE5 08                10677 	inc	r0
   2EE6 E6                10678 	mov	a,@r0
                          10679 ;	Peephole 236.l	used r7 instead of ar7
   2EE7 9F                10680 	subb	a,r7
   2EE8 FF                10681 	mov	r7,a
   2EE9 08                10682 	inc	r0
   2EEA E6                10683 	mov	a,@r0
                          10684 ;	Peephole 236.l	used r2 instead of ar2
   2EEB 9A                10685 	subb	a,r2
   2EEC FA                10686 	mov	r2,a
   2EED 08                10687 	inc	r0
   2EEE E6                10688 	mov	a,@r0
                          10689 ;	Peephole 236.l	used r3 instead of ar3
   2EEF 9B                10690 	subb	a,r3
   2EF0 FB                10691 	mov	r3,a
                          10692 ;	genAssign
   2EF1 E5*00             10693 	mov	a,_bp
   2EF3 24 08             10694 	add	a,#0x08
   2EF5 F8                10695 	mov	r0,a
   2EF6 A6 06             10696 	mov	@r0,ar6
   2EF8 08                10697 	inc	r0
   2EF9 A6 07             10698 	mov	@r0,ar7
   2EFB 08                10699 	inc	r0
   2EFC A6 02             10700 	mov	@r0,ar2
   2EFE 08                10701 	inc	r0
   2EFF A6 03             10702 	mov	@r0,ar3
                          10703 ;	FatDrivers/tff.c:1066: if (btr > remain) btr = (WORD)remain;			/* Truncate read count by number of bytes left */
                          10704 ;	genCast
   2F01 E5*00             10705 	mov	a,_bp
   2F03 24 F9             10706 	add	a,#0xfffffff9
   2F05 F8                10707 	mov	r0,a
   2F06 86 02             10708 	mov	ar2,@r0
   2F08 08                10709 	inc	r0
   2F09 86 03             10710 	mov	ar3,@r0
                          10711 ;	genCmpGt
                          10712 ;	Peephole 3.c	changed mov to clr
   2F0B E4                10713 	clr	a
   2F0C FC                10714 	mov	r4,a
   2F0D FD                10715 	mov	r5,a
   2F0E E5*00             10716 	mov	a,_bp
   2F10 24 08             10717 	add	a,#0x08
   2F12 F8                10718 	mov	r0,a
                          10719 ;	genCmp
   2F13 C3                10720 	clr	c
   2F14 E6                10721 	mov	a,@r0
   2F15 9A                10722 	subb	a,r2
   2F16 08                10723 	inc	r0
   2F17 E6                10724 	mov	a,@r0
   2F18 9B                10725 	subb	a,r3
   2F19 08                10726 	inc	r0
   2F1A E6                10727 	mov	a,@r0
   2F1B 9C                10728 	subb	a,r4
   2F1C 08                10729 	inc	r0
   2F1D E6                10730 	mov	a,@r0
   2F1E 9D                10731 	subb	a,r5
                          10732 ;	genIpop
                          10733 ;	genIfx
                          10734 ;	genIfxJump
                          10735 ;	Peephole 108.c	removed ljmp by inverse jump logic
                          10736 ;	Peephole 128	jump optimization
   2F1F 50 10             10737 	jnc	00151$
                          10738 ;	Peephole 300	removed redundant label 00155$
                          10739 ;	genCast
   2F21 E5*00             10740 	mov	a,_bp
   2F23 24 08             10741 	add	a,#0x08
   2F25 F8                10742 	mov	r0,a
   2F26 E5*00             10743 	mov	a,_bp
   2F28 24 F9             10744 	add	a,#0xfffffff9
   2F2A F9                10745 	mov	r1,a
   2F2B E6                10746 	mov	a,@r0
   2F2C F7                10747 	mov	@r1,a
   2F2D 08                10748 	inc	r0
   2F2E 09                10749 	inc	r1
   2F2F E6                10750 	mov	a,@r0
   2F30 F7                10751 	mov	@r1,a
   2F31                   10752 00151$:
                          10753 ;	genPlus
   2F31 A8*00             10754 	mov	r0,_bp
   2F33 08                10755 	inc	r0
   2F34 E5*00             10756 	mov	a,_bp
   2F36 24 35             10757 	add	a,#0x35
   2F38 F9                10758 	mov	r1,a
                          10759 ;     genPlusIncr
   2F39 74 13             10760 	mov	a,#0x13
   2F3B 26                10761 	add	a,@r0
   2F3C F7                10762 	mov	@r1,a
                          10763 ;	Peephole 181	changed mov to clr
   2F3D E4                10764 	clr	a
   2F3E 08                10765 	inc	r0
   2F3F 36                10766 	addc	a,@r0
   2F40 09                10767 	inc	r1
   2F41 F7                10768 	mov	@r1,a
   2F42 08                10769 	inc	r0
   2F43 09                10770 	inc	r1
   2F44 E6                10771 	mov	a,@r0
   2F45 F7                10772 	mov	@r1,a
                          10773 ;	genPlus
   2F46 A8*00             10774 	mov	r0,_bp
   2F48 08                10775 	inc	r0
   2F49 E5*00             10776 	mov	a,_bp
   2F4B 24 1E             10777 	add	a,#0x1e
   2F4D F9                10778 	mov	r1,a
                          10779 ;     genPlusIncr
   2F4E 74 0F             10780 	mov	a,#0x0F
   2F50 26                10781 	add	a,@r0
   2F51 F7                10782 	mov	@r1,a
                          10783 ;	Peephole 181	changed mov to clr
   2F52 E4                10784 	clr	a
   2F53 08                10785 	inc	r0
   2F54 36                10786 	addc	a,@r0
   2F55 09                10787 	inc	r1
   2F56 F7                10788 	mov	@r1,a
   2F57 08                10789 	inc	r0
   2F58 09                10790 	inc	r1
   2F59 E6                10791 	mov	a,@r0
   2F5A F7                10792 	mov	@r1,a
                          10793 ;	genPlus
   2F5B E5*00             10794 	mov	a,_bp
   2F5D 24 15             10795 	add	a,#0x15
   2F5F F8                10796 	mov	r0,a
   2F60 E5*00             10797 	mov	a,_bp
   2F62 24 22             10798 	add	a,#0x22
   2F64 F9                10799 	mov	r1,a
                          10800 ;     genPlusIncr
   2F65 74 18             10801 	mov	a,#0x18
   2F67 26                10802 	add	a,@r0
   2F68 F7                10803 	mov	@r1,a
                          10804 ;	Peephole 181	changed mov to clr
   2F69 E4                10805 	clr	a
   2F6A 08                10806 	inc	r0
   2F6B 36                10807 	addc	a,@r0
   2F6C 09                10808 	inc	r1
   2F6D F7                10809 	mov	@r1,a
   2F6E 08                10810 	inc	r0
   2F6F 09                10811 	inc	r1
   2F70 E6                10812 	mov	a,@r0
   2F71 F7                10813 	mov	@r1,a
                          10814 ;	genPlus
   2F72 E5*00             10815 	mov	a,_bp
   2F74 24 15             10816 	add	a,#0x15
   2F76 F8                10817 	mov	r0,a
   2F77 E5*00             10818 	mov	a,_bp
   2F79 24 25             10819 	add	a,#0x25
   2F7B F9                10820 	mov	r1,a
                          10821 ;     genPlusIncr
   2F7C 74 1D             10822 	mov	a,#0x1D
   2F7E 26                10823 	add	a,@r0
   2F7F F7                10824 	mov	@r1,a
                          10825 ;	Peephole 181	changed mov to clr
   2F80 E4                10826 	clr	a
   2F81 08                10827 	inc	r0
   2F82 36                10828 	addc	a,@r0
   2F83 09                10829 	inc	r1
   2F84 F7                10830 	mov	@r1,a
   2F85 08                10831 	inc	r0
   2F86 09                10832 	inc	r1
   2F87 E6                10833 	mov	a,@r0
   2F88 F7                10834 	mov	@r1,a
                          10835 ;	genPlus
   2F89 A8*00             10836 	mov	r0,_bp
   2F8B 08                10837 	inc	r0
   2F8C E5*00             10838 	mov	a,_bp
   2F8E 24 28             10839 	add	a,#0x28
   2F90 F9                10840 	mov	r1,a
                          10841 ;     genPlusIncr
   2F91 74 17             10842 	mov	a,#0x17
   2F93 26                10843 	add	a,@r0
   2F94 F7                10844 	mov	@r1,a
                          10845 ;	Peephole 181	changed mov to clr
   2F95 E4                10846 	clr	a
   2F96 08                10847 	inc	r0
   2F97 36                10848 	addc	a,@r0
   2F98 09                10849 	inc	r1
   2F99 F7                10850 	mov	@r1,a
   2F9A 08                10851 	inc	r0
   2F9B 09                10852 	inc	r1
   2F9C E6                10853 	mov	a,@r0
   2F9D F7                10854 	mov	@r1,a
                          10855 ;	genPlus
   2F9E E5*00             10856 	mov	a,_bp
   2FA0 24 15             10857 	add	a,#0x15
   2FA2 F8                10858 	mov	r0,a
   2FA3 E5*00             10859 	mov	a,_bp
   2FA5 24 2B             10860 	add	a,#0x2b
   2FA7 F9                10861 	mov	r1,a
                          10862 ;     genPlusIncr
   2FA8 74 20             10863 	mov	a,#0x20
   2FAA 26                10864 	add	a,@r0
   2FAB F7                10865 	mov	@r1,a
                          10866 ;	Peephole 181	changed mov to clr
   2FAC E4                10867 	clr	a
   2FAD 08                10868 	inc	r0
   2FAE 36                10869 	addc	a,@r0
   2FAF 09                10870 	inc	r1
   2FB0 F7                10871 	mov	@r1,a
   2FB1 08                10872 	inc	r0
   2FB2 09                10873 	inc	r1
   2FB3 E6                10874 	mov	a,@r0
   2FB4 F7                10875 	mov	@r1,a
   2FB5                   10876 00127$:
                          10877 ;	FatDrivers/tff.c:1068: for ( ;  btr;									/* Repeat until all data transferred */
                          10878 ;	genIfx
   2FB5 E5*00             10879 	mov	a,_bp
   2FB7 24 F9             10880 	add	a,#0xfffffff9
   2FB9 F8                10881 	mov	r0,a
   2FBA E6                10882 	mov	a,@r0
   2FBB 08                10883 	inc	r0
   2FBC 46                10884 	orl	a,@r0
                          10885 ;	genIfxJump
   2FBD 70 03             10886 	jnz	00156$
   2FBF 02s34r8A          10887 	ljmp	00130$
   2FC2                   10888 00156$:
                          10889 ;	FatDrivers/tff.c:1070: if ((fp->fptr % 512) == 0) {				/* On the sector boundary */
                          10890 ;	genPointerGet
                          10891 ;	genGenPointerGet
   2FC2 E5*00             10892 	mov	a,_bp
   2FC4 24 1B             10893 	add	a,#0x1b
   2FC6 F8                10894 	mov	r0,a
   2FC7 86 82             10895 	mov	dpl,@r0
   2FC9 08                10896 	inc	r0
   2FCA 86 83             10897 	mov	dph,@r0
   2FCC 08                10898 	inc	r0
   2FCD 86 F0             10899 	mov	b,@r0
   2FCF 12s00r00          10900 	lcall	__gptrget
   2FD2 FB                10901 	mov	r3,a
   2FD3 A3                10902 	inc	dptr
   2FD4 12s00r00          10903 	lcall	__gptrget
   2FD7 FC                10904 	mov	r4,a
   2FD8 A3                10905 	inc	dptr
   2FD9 12s00r00          10906 	lcall	__gptrget
   2FDC FD                10907 	mov	r5,a
   2FDD A3                10908 	inc	dptr
   2FDE 12s00r00          10909 	lcall	__gptrget
   2FE1 FE                10910 	mov	r6,a
                          10911 ;	genAnd
   2FE2 EB                10912 	mov	a,r3
   2FE3 70 04             10913 	jnz	00157$
   2FE5 EC                10914 	mov	a,r4
                          10915 ;	Peephole 160.f	removed sjmp by inverse jump logic
   2FE6 30 E0 03          10916 	jnb	acc.0,00158$
   2FE9                   10917 00157$:
   2FE9 02s32rE0          10918 	ljmp	00122$
   2FEC                   10919 00158$:
                          10920 ;	FatDrivers/tff.c:1071: if (--fp->sect_clust) {					/* Decrement left sector counter */
                          10921 ;	genIpush
                          10922 ;	genPlus
   2FEC A8*00             10923 	mov	r0,_bp
   2FEE 08                10924 	inc	r0
   2FEF E5*00             10925 	mov	a,_bp
   2FF1 24 32             10926 	add	a,#0x32
   2FF3 F9                10927 	mov	r1,a
                          10928 ;     genPlusIncr
   2FF4 74 03             10929 	mov	a,#0x03
   2FF6 26                10930 	add	a,@r0
   2FF7 F7                10931 	mov	@r1,a
                          10932 ;	Peephole 181	changed mov to clr
   2FF8 E4                10933 	clr	a
   2FF9 08                10934 	inc	r0
   2FFA 36                10935 	addc	a,@r0
   2FFB 09                10936 	inc	r1
   2FFC F7                10937 	mov	@r1,a
   2FFD 08                10938 	inc	r0
   2FFE 09                10939 	inc	r1
   2FFF E6                10940 	mov	a,@r0
   3000 F7                10941 	mov	@r1,a
                          10942 ;	genPointerGet
                          10943 ;	genGenPointerGet
   3001 E5*00             10944 	mov	a,_bp
   3003 24 32             10945 	add	a,#0x32
   3005 F8                10946 	mov	r0,a
   3006 86 82             10947 	mov	dpl,@r0
   3008 08                10948 	inc	r0
   3009 86 83             10949 	mov	dph,@r0
   300B 08                10950 	inc	r0
   300C 86 F0             10951 	mov	b,@r0
   300E 12s00r00          10952 	lcall	__gptrget
   3011 FA                10953 	mov	r2,a
                          10954 ;	genMinus
                          10955 ;	genMinusDec
   3012 1A                10956 	dec	r2
                          10957 ;	genPointerSet
                          10958 ;	genGenPointerSet
   3013 E5*00             10959 	mov	a,_bp
   3015 24 32             10960 	add	a,#0x32
   3017 F8                10961 	mov	r0,a
   3018 86 82             10962 	mov	dpl,@r0
   301A 08                10963 	inc	r0
   301B 86 83             10964 	mov	dph,@r0
   301D 08                10965 	inc	r0
   301E 86 F0             10966 	mov	b,@r0
                          10967 ;	genIfx
   3020 EA                10968 	mov	a,r2
   3021 12s00r00          10969 	lcall	__gptrput
                          10970 ;	Peephole 190	removed redundant mov
                          10971 ;	genIpop
                          10972 ;	genIfxJump
                          10973 ;	Peephole 108.c	removed ljmp by inverse jump logic
   3024 60 38             10974 	jz	00113$
                          10975 ;	Peephole 300	removed redundant label 00159$
                          10976 ;	FatDrivers/tff.c:1072: sect = fp->curr_sect + 1;			/* Get current sector */
                          10977 ;	genIpush
                          10978 ;	genPointerGet
                          10979 ;	genGenPointerGet
   3026 E5*00             10980 	mov	a,_bp
   3028 24 28             10981 	add	a,#0x28
   302A F8                10982 	mov	r0,a
   302B 86 82             10983 	mov	dpl,@r0
   302D 08                10984 	inc	r0
   302E 86 83             10985 	mov	dph,@r0
   3030 08                10986 	inc	r0
   3031 86 F0             10987 	mov	b,@r0
   3033 12s00r00          10988 	lcall	__gptrget
   3036 FA                10989 	mov	r2,a
   3037 A3                10990 	inc	dptr
   3038 12s00r00          10991 	lcall	__gptrget
   303B FB                10992 	mov	r3,a
   303C A3                10993 	inc	dptr
   303D 12s00r00          10994 	lcall	__gptrget
   3040 FC                10995 	mov	r4,a
   3041 A3                10996 	inc	dptr
   3042 12s00r00          10997 	lcall	__gptrget
   3045 FD                10998 	mov	r5,a
                          10999 ;	genPlus
   3046 E5*00             11000 	mov	a,_bp
   3048 24 04             11001 	add	a,#0x04
   304A F8                11002 	mov	r0,a
                          11003 ;     genPlusIncr
   304B 74 01             11004 	mov	a,#0x01
                          11005 ;	Peephole 236.a	used r2 instead of ar2
   304D 2A                11006 	add	a,r2
   304E F6                11007 	mov	@r0,a
                          11008 ;	Peephole 181	changed mov to clr
   304F E4                11009 	clr	a
                          11010 ;	Peephole 236.b	used r3 instead of ar3
   3050 3B                11011 	addc	a,r3
   3051 08                11012 	inc	r0
   3052 F6                11013 	mov	@r0,a
                          11014 ;	Peephole 181	changed mov to clr
   3053 E4                11015 	clr	a
                          11016 ;	Peephole 236.b	used r4 instead of ar4
   3054 3C                11017 	addc	a,r4
   3055 08                11018 	inc	r0
   3056 F6                11019 	mov	@r0,a
                          11020 ;	Peephole 181	changed mov to clr
   3057 E4                11021 	clr	a
                          11022 ;	Peephole 236.b	used r5 instead of ar5
   3058 3D                11023 	addc	a,r5
   3059 08                11024 	inc	r0
   305A F6                11025 	mov	@r0,a
                          11026 ;	genIpop
   305B 02s31r8F          11027 	ljmp	00114$
   305E                   11028 00113$:
                          11029 ;	FatDrivers/tff.c:1074: clust = (fp->fptr == 0) ?
                          11030 ;	genNot
   305E EB                11031 	mov	a,r3
   305F 4C                11032 	orl	a,r4
   3060 4D                11033 	orl	a,r5
   3061 4E                11034 	orl	a,r6
   3062 B4 01 00          11035 	cjne	a,#0x01,00160$
   3065                   11036 00160$:
   3065 E4                11037 	clr	a
   3066 33                11038 	rlc	a
                          11039 ;	genIfx
   3067 FD                11040 	mov	r5,a
                          11041 ;	Peephole 105	removed redundant mov
                          11042 ;	genIfxJump
                          11043 ;	Peephole 108.c	removed ljmp by inverse jump logic
   3068 60 22             11044 	jz	00134$
                          11045 ;	Peephole 300	removed redundant label 00161$
                          11046 ;	FatDrivers/tff.c:1075: fp->org_clust : get_cluster(fp->curr_clust);
                          11047 ;	genPointerGet
                          11048 ;	genGenPointerGet
   306A E5*00             11049 	mov	a,_bp
   306C 24 1E             11050 	add	a,#0x1e
   306E F8                11051 	mov	r0,a
   306F 86 82             11052 	mov	dpl,@r0
   3071 08                11053 	inc	r0
   3072 86 83             11054 	mov	dph,@r0
   3074 08                11055 	inc	r0
   3075 86 F0             11056 	mov	b,@r0
   3077 12s00r00          11057 	lcall	__gptrget
   307A FD                11058 	mov	r5,a
   307B A3                11059 	inc	dptr
   307C 12s00r00          11060 	lcall	__gptrget
   307F FE                11061 	mov	r6,a
   3080 A3                11062 	inc	dptr
   3081 12s00r00          11063 	lcall	__gptrget
   3084 FF                11064 	mov	r7,a
   3085 A3                11065 	inc	dptr
   3086 12s00r00          11066 	lcall	__gptrget
   3089 FA                11067 	mov	r2,a
                          11068 ;	Peephole 112.b	changed ljmp to sjmp
   308A 80 30             11069 	sjmp	00135$
   308C                   11070 00134$:
                          11071 ;	genPointerGet
                          11072 ;	genGenPointerGet
   308C E5*00             11073 	mov	a,_bp
   308E 24 35             11074 	add	a,#0x35
   3090 F8                11075 	mov	r0,a
   3091 86 82             11076 	mov	dpl,@r0
   3093 08                11077 	inc	r0
   3094 86 83             11078 	mov	dph,@r0
   3096 08                11079 	inc	r0
   3097 86 F0             11080 	mov	b,@r0
   3099 12s00r00          11081 	lcall	__gptrget
   309C FA                11082 	mov	r2,a
   309D A3                11083 	inc	dptr
   309E 12s00r00          11084 	lcall	__gptrget
   30A1 FB                11085 	mov	r3,a
   30A2 A3                11086 	inc	dptr
   30A3 12s00r00          11087 	lcall	__gptrget
   30A6 FC                11088 	mov	r4,a
   30A7 A3                11089 	inc	dptr
   30A8 12s00r00          11090 	lcall	__gptrget
                          11091 ;	genCall
   30AB FD                11092 	mov	r5,a
   30AC 8A 82             11093 	mov	dpl,r2
   30AE 8B 83             11094 	mov	dph,r3
   30B0 8C F0             11095 	mov	b,r4
                          11096 ;	Peephole 191	removed redundant mov
   30B2 12s00rEA          11097 	lcall	_get_cluster
   30B5 AD 82             11098 	mov	r5,dpl
   30B7 AE 83             11099 	mov	r6,dph
   30B9 AF F0             11100 	mov	r7,b
   30BB FA                11101 	mov	r2,a
   30BC                   11102 00135$:
                          11103 ;	genAssign
   30BC E5*00             11104 	mov	a,_bp
   30BE 24 0E             11105 	add	a,#0x0e
   30C0 F8                11106 	mov	r0,a
   30C1 A6 05             11107 	mov	@r0,ar5
   30C3 08                11108 	inc	r0
   30C4 A6 06             11109 	mov	@r0,ar6
   30C6 08                11110 	inc	r0
   30C7 A6 07             11111 	mov	@r0,ar7
   30C9 08                11112 	inc	r0
   30CA A6 02             11113 	mov	@r0,ar2
                          11114 ;	FatDrivers/tff.c:1076: if (clust < 2 || clust >= fs->max_clust)
                          11115 ;	genCmpLt
   30CC E5*00             11116 	mov	a,_bp
   30CE 24 0E             11117 	add	a,#0x0e
   30D0 F8                11118 	mov	r0,a
                          11119 ;	genCmp
   30D1 C3                11120 	clr	c
   30D2 E6                11121 	mov	a,@r0
   30D3 94 02             11122 	subb	a,#0x02
   30D5 08                11123 	inc	r0
   30D6 E6                11124 	mov	a,@r0
   30D7 94 00             11125 	subb	a,#0x00
   30D9 08                11126 	inc	r0
   30DA E6                11127 	mov	a,@r0
   30DB 94 00             11128 	subb	a,#0x00
   30DD 08                11129 	inc	r0
   30DE E6                11130 	mov	a,@r0
   30DF 94 00             11131 	subb	a,#0x00
                          11132 ;	genIfxJump
   30E1 50 03             11133 	jnc	00162$
   30E3 02s34r8F          11134 	ljmp	00131$
   30E6                   11135 00162$:
                          11136 ;	genPointerGet
                          11137 ;	genGenPointerGet
   30E6 E5*00             11138 	mov	a,_bp
   30E8 24 22             11139 	add	a,#0x22
   30EA F8                11140 	mov	r0,a
   30EB 86 82             11141 	mov	dpl,@r0
   30ED 08                11142 	inc	r0
   30EE 86 83             11143 	mov	dph,@r0
   30F0 08                11144 	inc	r0
   30F1 86 F0             11145 	mov	b,@r0
   30F3 12s00r00          11146 	lcall	__gptrget
   30F6 FE                11147 	mov	r6,a
   30F7 A3                11148 	inc	dptr
   30F8 12s00r00          11149 	lcall	__gptrget
   30FB FF                11150 	mov	r7,a
   30FC A3                11151 	inc	dptr
   30FD 12s00r00          11152 	lcall	__gptrget
   3100 FA                11153 	mov	r2,a
   3101 A3                11154 	inc	dptr
   3102 12s00r00          11155 	lcall	__gptrget
   3105 FB                11156 	mov	r3,a
                          11157 ;	genCmpLt
   3106 E5*00             11158 	mov	a,_bp
   3108 24 0E             11159 	add	a,#0x0e
   310A F8                11160 	mov	r0,a
                          11161 ;	genCmp
   310B C3                11162 	clr	c
   310C E6                11163 	mov	a,@r0
   310D 9E                11164 	subb	a,r6
   310E 08                11165 	inc	r0
   310F E6                11166 	mov	a,@r0
   3110 9F                11167 	subb	a,r7
   3111 08                11168 	inc	r0
   3112 E6                11169 	mov	a,@r0
   3113 9A                11170 	subb	a,r2
   3114 08                11171 	inc	r0
   3115 E6                11172 	mov	a,@r0
   3116 9B                11173 	subb	a,r3
                          11174 ;	genIfxJump
   3117 40 03             11175 	jc	00163$
   3119 02s34r8F          11176 	ljmp	00131$
   311C                   11177 00163$:
                          11178 ;	FatDrivers/tff.c:1078: fp->curr_clust = clust;				/* Current cluster */
                          11179 ;	genPointerSet
                          11180 ;	genGenPointerSet
   311C E5*00             11181 	mov	a,_bp
   311E 24 35             11182 	add	a,#0x35
   3120 F8                11183 	mov	r0,a
   3121 86 82             11184 	mov	dpl,@r0
   3123 08                11185 	inc	r0
   3124 86 83             11186 	mov	dph,@r0
   3126 08                11187 	inc	r0
   3127 86 F0             11188 	mov	b,@r0
   3129 E5*00             11189 	mov	a,_bp
   312B 24 0E             11190 	add	a,#0x0e
   312D F9                11191 	mov	r1,a
   312E E7                11192 	mov	a,@r1
   312F 12s00r00          11193 	lcall	__gptrput
   3132 A3                11194 	inc	dptr
   3133 09                11195 	inc	r1
   3134 E7                11196 	mov	a,@r1
   3135 12s00r00          11197 	lcall	__gptrput
   3138 A3                11198 	inc	dptr
   3139 09                11199 	inc	r1
   313A E7                11200 	mov	a,@r1
   313B 12s00r00          11201 	lcall	__gptrput
   313E A3                11202 	inc	dptr
   313F 09                11203 	inc	r1
   3140 E7                11204 	mov	a,@r1
   3141 12s00r00          11205 	lcall	__gptrput
                          11206 ;	FatDrivers/tff.c:1079: sect = clust2sect(clust);			/* Get current sector */
                          11207 ;	genCall
   3144 E5*00             11208 	mov	a,_bp
   3146 24 0E             11209 	add	a,#0x0e
   3148 F8                11210 	mov	r0,a
   3149 86 82             11211 	mov	dpl,@r0
   314B 08                11212 	inc	r0
   314C 86 83             11213 	mov	dph,@r0
   314E 08                11214 	inc	r0
   314F 86 F0             11215 	mov	b,@r0
   3151 08                11216 	inc	r0
   3152 E6                11217 	mov	a,@r0
   3153 12s04r26          11218 	lcall	_clust2sect
   3156 AA 82             11219 	mov	r2,dpl
   3158 AB 83             11220 	mov	r3,dph
   315A AC F0             11221 	mov	r4,b
   315C FD                11222 	mov	r5,a
                          11223 ;	genAssign
   315D E5*00             11224 	mov	a,_bp
   315F 24 04             11225 	add	a,#0x04
   3161 F8                11226 	mov	r0,a
   3162 A6 02             11227 	mov	@r0,ar2
   3164 08                11228 	inc	r0
   3165 A6 03             11229 	mov	@r0,ar3
   3167 08                11230 	inc	r0
   3168 A6 04             11231 	mov	@r0,ar4
   316A 08                11232 	inc	r0
   316B A6 05             11233 	mov	@r0,ar5
                          11234 ;	FatDrivers/tff.c:1080: fp->sect_clust = fs->sects_clust;	/* Re-initialize the left sector counter */
                          11235 ;	genPointerGet
                          11236 ;	genGenPointerGet
   316D E5*00             11237 	mov	a,_bp
   316F 24 25             11238 	add	a,#0x25
   3171 F8                11239 	mov	r0,a
   3172 86 82             11240 	mov	dpl,@r0
   3174 08                11241 	inc	r0
   3175 86 83             11242 	mov	dph,@r0
   3177 08                11243 	inc	r0
   3178 86 F0             11244 	mov	b,@r0
   317A 12s00r00          11245 	lcall	__gptrget
   317D FA                11246 	mov	r2,a
                          11247 ;	genPointerSet
                          11248 ;	genGenPointerSet
   317E E5*00             11249 	mov	a,_bp
   3180 24 32             11250 	add	a,#0x32
   3182 F8                11251 	mov	r0,a
   3183 86 82             11252 	mov	dpl,@r0
   3185 08                11253 	inc	r0
   3186 86 83             11254 	mov	dph,@r0
   3188 08                11255 	inc	r0
   3189 86 F0             11256 	mov	b,@r0
   318B EA                11257 	mov	a,r2
   318C 12s00r00          11258 	lcall	__gptrput
   318F                   11259 00114$:
                          11260 ;	FatDrivers/tff.c:1082: fp->curr_sect = sect;					/* Update current sector */
                          11261 ;	genPointerSet
                          11262 ;	genGenPointerSet
   318F E5*00             11263 	mov	a,_bp
   3191 24 28             11264 	add	a,#0x28
   3193 F8                11265 	mov	r0,a
   3194 86 82             11266 	mov	dpl,@r0
   3196 08                11267 	inc	r0
   3197 86 83             11268 	mov	dph,@r0
   3199 08                11269 	inc	r0
   319A 86 F0             11270 	mov	b,@r0
   319C E5*00             11271 	mov	a,_bp
   319E 24 04             11272 	add	a,#0x04
   31A0 F9                11273 	mov	r1,a
   31A1 E7                11274 	mov	a,@r1
   31A2 12s00r00          11275 	lcall	__gptrput
   31A5 A3                11276 	inc	dptr
   31A6 09                11277 	inc	r1
   31A7 E7                11278 	mov	a,@r1
   31A8 12s00r00          11279 	lcall	__gptrput
   31AB A3                11280 	inc	dptr
   31AC 09                11281 	inc	r1
   31AD E7                11282 	mov	a,@r1
   31AE 12s00r00          11283 	lcall	__gptrput
   31B1 A3                11284 	inc	dptr
   31B2 09                11285 	inc	r1
   31B3 E7                11286 	mov	a,@r1
   31B4 12s00r00          11287 	lcall	__gptrput
                          11288 ;	FatDrivers/tff.c:1083: cc = btr / 512;							/* When left bytes >= 512, */
                          11289 ;	genRightShift
                          11290 ;	genRightShiftLiteral
   31B7 E5*00             11291 	mov	a,_bp
   31B9 24 F9             11292 	add	a,#0xfffffff9
                          11293 ;	genrshTwo
                          11294 ;	Peephole 185	changed order of increment (acc incremented also!)
   31BB 04                11295 	inc	a
   31BC F8                11296 	mov	r0,a
   31BD E6                11297 	mov	a,@r0
   31BE C3                11298 	clr	c
   31BF 13                11299 	rrc	a
                          11300 ;	FatDrivers/tff.c:1084: if (cc) {								/* Read maximum contiguous sectors directly */
                          11301 ;	genIfx
   31C0 FE                11302 	mov	r6,a
   31C1 7F 00             11303 	mov	r7,#0x00
                          11304 ;	Peephole 177.d	removed redundant move
   31C3 4F                11305 	orl	a,r7
                          11306 ;	genIfxJump
   31C4 70 03             11307 	jnz	00164$
   31C6 02s32rE0          11308 	ljmp	00122$
   31C9                   11309 00164$:
                          11310 ;	FatDrivers/tff.c:1085: if (cc > fp->sect_clust) cc = fp->sect_clust;
                          11311 ;	genPointerGet
                          11312 ;	genGenPointerGet
   31C9 E5*00             11313 	mov	a,_bp
   31CB 24 32             11314 	add	a,#0x32
   31CD F8                11315 	mov	r0,a
   31CE 86 82             11316 	mov	dpl,@r0
   31D0 08                11317 	inc	r0
   31D1 86 83             11318 	mov	dph,@r0
   31D3 08                11319 	inc	r0
   31D4 86 F0             11320 	mov	b,@r0
   31D6 12s00r00          11321 	lcall	__gptrget
   31D9 FC                11322 	mov	r4,a
                          11323 ;	genCast
   31DA 7D 00             11324 	mov	r5,#0x00
                          11325 ;	genCmpGt
                          11326 ;	genCmp
   31DC C3                11327 	clr	c
   31DD EC                11328 	mov	a,r4
   31DE 9E                11329 	subb	a,r6
   31DF ED                11330 	mov	a,r5
   31E0 9F                11331 	subb	a,r7
                          11332 ;	genIfxJump
                          11333 ;	Peephole 108.a	removed ljmp by inverse jump logic
   31E1 50 15             11334 	jnc	00116$
                          11335 ;	Peephole 300	removed redundant label 00165$
                          11336 ;	genPointerGet
                          11337 ;	genGenPointerGet
   31E3 E5*00             11338 	mov	a,_bp
   31E5 24 32             11339 	add	a,#0x32
   31E7 F8                11340 	mov	r0,a
   31E8 86 82             11341 	mov	dpl,@r0
   31EA 08                11342 	inc	r0
   31EB 86 83             11343 	mov	dph,@r0
   31ED 08                11344 	inc	r0
   31EE 86 F0             11345 	mov	b,@r0
   31F0 12s00r00          11346 	lcall	__gptrget
   31F3 FC                11347 	mov	r4,a
                          11348 ;	genCast
   31F4 8C 06             11349 	mov	ar6,r4
   31F6 7F 00             11350 	mov	r7,#0x00
   31F8                   11351 00116$:
                          11352 ;	FatDrivers/tff.c:1086: if(disk_txt_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
                          11353 ;	genCast
   31F8 8E 04             11354 	mov	ar4,r6
                          11355 ;	genIpush
   31FA C0 04             11356 	push	ar4
   31FC C0 06             11357 	push	ar6
   31FE C0 07             11358 	push	ar7
   3200 C0 04             11359 	push	ar4
                          11360 ;	genIpush
   3202 E5*00             11361 	mov	a,_bp
   3204 24 04             11362 	add	a,#0x04
   3206 F8                11363 	mov	r0,a
   3207 E6                11364 	mov	a,@r0
   3208 C0 E0             11365 	push	acc
   320A 08                11366 	inc	r0
   320B E6                11367 	mov	a,@r0
   320C C0 E0             11368 	push	acc
   320E 08                11369 	inc	r0
   320F E6                11370 	mov	a,@r0
   3210 C0 E0             11371 	push	acc
   3212 08                11372 	inc	r0
   3213 E6                11373 	mov	a,@r0
   3214 C0 E0             11374 	push	acc
                          11375 ;	genIpush
   3216 E5*00             11376 	mov	a,_bp
   3218 24 12             11377 	add	a,#0x12
   321A F8                11378 	mov	r0,a
   321B E6                11379 	mov	a,@r0
   321C C0 E0             11380 	push	acc
   321E 08                11381 	inc	r0
   321F E6                11382 	mov	a,@r0
   3220 C0 E0             11383 	push	acc
   3222 08                11384 	inc	r0
   3223 E6                11385 	mov	a,@r0
   3224 C0 E0             11386 	push	acc
                          11387 ;	genCall
   3226 75 82 00          11388 	mov	dpl,#0x00
   3229 12s00r00          11389 	lcall	_disk_txt_read
   322C AD 82             11390 	mov	r5,dpl
   322E E5 81             11391 	mov	a,sp
   3230 24 F8             11392 	add	a,#0xf8
   3232 F5 81             11393 	mov	sp,a
   3234 D0 07             11394 	pop	ar7
   3236 D0 06             11395 	pop	ar6
   3238 D0 04             11396 	pop	ar4
                          11397 ;	genCmpEq
                          11398 ;	gencjneshort
   323A BD 00 02          11399 	cjne	r5,#0x00,00166$
   323D 80 03             11400 	sjmp	00167$
   323F                   11401 00166$:
   323F 02s34r8F          11402 	ljmp	00131$
   3242                   11403 00167$:
                          11404 ;	FatDrivers/tff.c:1088: fp->sect_clust -= (BYTE)(cc - 1);
                          11405 ;	genPointerGet
                          11406 ;	genGenPointerGet
   3242 E5*00             11407 	mov	a,_bp
   3244 24 32             11408 	add	a,#0x32
   3246 F8                11409 	mov	r0,a
   3247 86 82             11410 	mov	dpl,@r0
   3249 08                11411 	inc	r0
   324A 86 83             11412 	mov	dph,@r0
   324C 08                11413 	inc	r0
   324D 86 F0             11414 	mov	b,@r0
   324F 12s00r00          11415 	lcall	__gptrget
   3252 FD                11416 	mov	r5,a
                          11417 ;	genMinus
                          11418 ;	genMinusDec
   3253 EC                11419 	mov	a,r4
   3254 14                11420 	dec	a
                          11421 ;	genMinus
   3255 D3                11422 	setb	c
                          11423 ;	Peephole 236.l	used r5 instead of ar5
   3256 9D                11424 	subb	a,r5
   3257 F4                11425 	cpl	a
   3258 FD                11426 	mov	r5,a
                          11427 ;	genPointerSet
                          11428 ;	genGenPointerSet
   3259 E5*00             11429 	mov	a,_bp
   325B 24 32             11430 	add	a,#0x32
   325D F8                11431 	mov	r0,a
   325E 86 82             11432 	mov	dpl,@r0
   3260 08                11433 	inc	r0
   3261 86 83             11434 	mov	dph,@r0
   3263 08                11435 	inc	r0
   3264 86 F0             11436 	mov	b,@r0
   3266 ED                11437 	mov	a,r5
   3267 12s00r00          11438 	lcall	__gptrput
                          11439 ;	FatDrivers/tff.c:1089: fp->curr_sect += cc - 1;
                          11440 ;	genPointerGet
                          11441 ;	genGenPointerGet
   326A E5*00             11442 	mov	a,_bp
   326C 24 28             11443 	add	a,#0x28
   326E F8                11444 	mov	r0,a
   326F 86 82             11445 	mov	dpl,@r0
   3271 08                11446 	inc	r0
   3272 86 83             11447 	mov	dph,@r0
   3274 08                11448 	inc	r0
   3275 86 F0             11449 	mov	b,@r0
   3277 E5*00             11450 	mov	a,_bp
   3279 24 2E             11451 	add	a,#0x2e
   327B F9                11452 	mov	r1,a
   327C 12s00r00          11453 	lcall	__gptrget
   327F F7                11454 	mov	@r1,a
   3280 A3                11455 	inc	dptr
   3281 12s00r00          11456 	lcall	__gptrget
   3284 09                11457 	inc	r1
   3285 F7                11458 	mov	@r1,a
   3286 A3                11459 	inc	dptr
   3287 12s00r00          11460 	lcall	__gptrget
   328A 09                11461 	inc	r1
   328B F7                11462 	mov	@r1,a
   328C A3                11463 	inc	dptr
   328D 12s00r00          11464 	lcall	__gptrget
   3290 09                11465 	inc	r1
   3291 F7                11466 	mov	@r1,a
                          11467 ;	genMinus
                          11468 ;	genMinusDec
   3292 EE                11469 	mov	a,r6
   3293 24 FF             11470 	add	a,#0xff
   3295 FA                11471 	mov	r2,a
   3296 EF                11472 	mov	a,r7
   3297 34 FF             11473 	addc	a,#0xff
   3299 FB                11474 	mov	r3,a
                          11475 ;	genCast
                          11476 ;	genPlus
                          11477 ;	Peephole 3.c	changed mov to clr
   329A E4                11478 	clr	a
   329B FC                11479 	mov	r4,a
   329C FD                11480 	mov	r5,a
   329D E5*00             11481 	mov	a,_bp
   329F 24 2E             11482 	add	a,#0x2e
   32A1 F8                11483 	mov	r0,a
                          11484 ;	Peephole 236.g	used r2 instead of ar2
   32A2 EA                11485 	mov	a,r2
   32A3 26                11486 	add	a,@r0
   32A4 FA                11487 	mov	r2,a
                          11488 ;	Peephole 236.g	used r3 instead of ar3
   32A5 EB                11489 	mov	a,r3
   32A6 08                11490 	inc	r0
   32A7 36                11491 	addc	a,@r0
   32A8 FB                11492 	mov	r3,a
                          11493 ;	Peephole 236.g	used r4 instead of ar4
   32A9 EC                11494 	mov	a,r4
   32AA 08                11495 	inc	r0
   32AB 36                11496 	addc	a,@r0
   32AC FC                11497 	mov	r4,a
                          11498 ;	Peephole 236.g	used r5 instead of ar5
   32AD ED                11499 	mov	a,r5
   32AE 08                11500 	inc	r0
   32AF 36                11501 	addc	a,@r0
   32B0 FD                11502 	mov	r5,a
                          11503 ;	genPointerSet
                          11504 ;	genGenPointerSet
   32B1 E5*00             11505 	mov	a,_bp
   32B3 24 28             11506 	add	a,#0x28
   32B5 F8                11507 	mov	r0,a
   32B6 86 82             11508 	mov	dpl,@r0
   32B8 08                11509 	inc	r0
   32B9 86 83             11510 	mov	dph,@r0
   32BB 08                11511 	inc	r0
   32BC 86 F0             11512 	mov	b,@r0
   32BE EA                11513 	mov	a,r2
   32BF 12s00r00          11514 	lcall	__gptrput
   32C2 A3                11515 	inc	dptr
   32C3 EB                11516 	mov	a,r3
   32C4 12s00r00          11517 	lcall	__gptrput
   32C7 A3                11518 	inc	dptr
   32C8 EC                11519 	mov	a,r4
   32C9 12s00r00          11520 	lcall	__gptrput
   32CC A3                11521 	inc	dptr
   32CD ED                11522 	mov	a,r5
   32CE 12s00r00          11523 	lcall	__gptrput
                          11524 ;	FatDrivers/tff.c:1090: rcnt = cc * 512;
                          11525 ;	genLeftShift
                          11526 ;	genLeftShiftLiteral
   32D1 E5*00             11527 	mov	a,_bp
   32D3 24 0C             11528 	add	a,#0x0c
   32D5 F8                11529 	mov	r0,a
                          11530 ;	genlshTwo
   32D6 EE                11531 	mov	a,r6
                          11532 ;	Peephole 254	optimized left shift
   32D7 2E                11533 	add	a,r6
   32D8 08                11534 	inc	r0
   32D9 F6                11535 	mov	@r0,a
   32DA 18                11536 	dec	r0
   32DB 76 00             11537 	mov	@r0,#0x00
                          11538 ;	FatDrivers/tff.c:1091: continue;
   32DD 02s33rC1          11539 	ljmp	00129$
   32E0                   11540 00122$:
                          11541 ;	FatDrivers/tff.c:1094: if (!move_window(fp->curr_sect)) goto fr_error;	/* Move sector window */
                          11542 ;	genPointerGet
                          11543 ;	genGenPointerGet
   32E0 E5*00             11544 	mov	a,_bp
   32E2 24 28             11545 	add	a,#0x28
   32E4 F8                11546 	mov	r0,a
   32E5 86 82             11547 	mov	dpl,@r0
   32E7 08                11548 	inc	r0
   32E8 86 83             11549 	mov	dph,@r0
   32EA 08                11550 	inc	r0
   32EB 86 F0             11551 	mov	b,@r0
   32ED 12s00r00          11552 	lcall	__gptrget
   32F0 FC                11553 	mov	r4,a
   32F1 A3                11554 	inc	dptr
   32F2 12s00r00          11555 	lcall	__gptrget
   32F5 FD                11556 	mov	r5,a
   32F6 A3                11557 	inc	dptr
   32F7 12s00r00          11558 	lcall	__gptrget
   32FA FE                11559 	mov	r6,a
   32FB A3                11560 	inc	dptr
   32FC 12s00r00          11561 	lcall	__gptrget
                          11562 ;	genCall
   32FF FF                11563 	mov	r7,a
   3300 8C 82             11564 	mov	dpl,r4
   3302 8D 83             11565 	mov	dph,r5
   3304 8E F0             11566 	mov	b,r6
                          11567 ;	Peephole 191	removed redundant mov
   3306 12s00r00          11568 	lcall	_move_window
   3309 E5 82             11569 	mov	a,dpl
                          11570 ;	genIfx
                          11571 ;	genIfxJump
   330B 70 03             11572 	jnz	00168$
   330D 02s34r8F          11573 	ljmp	00131$
   3310                   11574 00168$:
                          11575 ;	FatDrivers/tff.c:1095: rcnt = 512 - (WORD)(fp->fptr % 512);			/* Copy fractional bytes from sector window */
                          11576 ;	genPointerGet
                          11577 ;	genGenPointerGet
   3310 E5*00             11578 	mov	a,_bp
   3312 24 1B             11579 	add	a,#0x1b
   3314 F8                11580 	mov	r0,a
   3315 86 82             11581 	mov	dpl,@r0
   3317 08                11582 	inc	r0
   3318 86 83             11583 	mov	dph,@r0
   331A 08                11584 	inc	r0
   331B 86 F0             11585 	mov	b,@r0
   331D 12s00r00          11586 	lcall	__gptrget
   3320 FC                11587 	mov	r4,a
   3321 A3                11588 	inc	dptr
   3322 12s00r00          11589 	lcall	__gptrget
   3325 FD                11590 	mov	r5,a
   3326 A3                11591 	inc	dptr
   3327 12s00r00          11592 	lcall	__gptrget
   332A FE                11593 	mov	r6,a
   332B A3                11594 	inc	dptr
   332C 12s00r00          11595 	lcall	__gptrget
   332F FF                11596 	mov	r7,a
                          11597 ;	genAnd
   3330 53 05 01          11598 	anl	ar5,#0x01
                          11599 ;	genCast
                          11600 ;	genMinus
                          11601 ;	Peephole 3.c	changed mov to clr
   3333 E4                11602 	clr	a
   3334 FE                11603 	mov	r6,a
   3335 FF                11604 	mov	r7,a
   3336 E5*00             11605 	mov	a,_bp
   3338 24 0C             11606 	add	a,#0x0c
   333A F8                11607 	mov	r0,a
                          11608 ;	Peephole 181	changed mov to clr
   333B E4                11609 	clr	a
   333C C3                11610 	clr	c
                          11611 ;	Peephole 236.l	used r4 instead of ar4
   333D 9C                11612 	subb	a,r4
   333E F6                11613 	mov	@r0,a
   333F 74 02             11614 	mov	a,#0x02
                          11615 ;	Peephole 236.l	used r5 instead of ar5
   3341 9D                11616 	subb	a,r5
   3342 08                11617 	inc	r0
   3343 F6                11618 	mov	@r0,a
                          11619 ;	FatDrivers/tff.c:1096: if (rcnt > btr) rcnt = btr;
                          11620 ;	genCmpGt
   3344 E5*00             11621 	mov	a,_bp
   3346 24 0C             11622 	add	a,#0x0c
   3348 F8                11623 	mov	r0,a
   3349 E5*00             11624 	mov	a,_bp
   334B 24 F9             11625 	add	a,#0xfffffff9
   334D F9                11626 	mov	r1,a
                          11627 ;	genCmp
   334E C3                11628 	clr	c
   334F E7                11629 	mov	a,@r1
   3350 96                11630 	subb	a,@r0
   3351 09                11631 	inc	r1
   3352 E7                11632 	mov	a,@r1
   3353 08                11633 	inc	r0
   3354 96                11634 	subb	a,@r0
                          11635 ;	genIfxJump
                          11636 ;	Peephole 108.a	removed ljmp by inverse jump logic
   3355 50 10             11637 	jnc	00126$
                          11638 ;	Peephole 300	removed redundant label 00169$
                          11639 ;	genAssign
   3357 E5*00             11640 	mov	a,_bp
   3359 24 F9             11641 	add	a,#0xfffffff9
   335B F8                11642 	mov	r0,a
   335C E5*00             11643 	mov	a,_bp
   335E 24 0C             11644 	add	a,#0x0c
   3360 F9                11645 	mov	r1,a
   3361 E6                11646 	mov	a,@r0
   3362 F7                11647 	mov	@r1,a
   3363 08                11648 	inc	r0
   3364 09                11649 	inc	r1
   3365 E6                11650 	mov	a,@r0
   3366 F7                11651 	mov	@r1,a
   3367                   11652 00126$:
                          11653 ;	FatDrivers/tff.c:1097: memcpy(rbuff, &fs->win[(WORD)fp->fptr % 512], rcnt);
                          11654 ;	genPointerGet
                          11655 ;	genGenPointerGet
   3367 E5*00             11656 	mov	a,_bp
   3369 24 1B             11657 	add	a,#0x1b
   336B F8                11658 	mov	r0,a
   336C 86 82             11659 	mov	dpl,@r0
   336E 08                11660 	inc	r0
   336F 86 83             11661 	mov	dph,@r0
   3371 08                11662 	inc	r0
   3372 86 F0             11663 	mov	b,@r0
   3374 12s00r00          11664 	lcall	__gptrget
   3377 FC                11665 	mov	r4,a
   3378 A3                11666 	inc	dptr
   3379 12s00r00          11667 	lcall	__gptrget
   337C FD                11668 	mov	r5,a
   337D A3                11669 	inc	dptr
   337E 12s00r00          11670 	lcall	__gptrget
   3381 FE                11671 	mov	r6,a
   3382 A3                11672 	inc	dptr
   3383 12s00r00          11673 	lcall	__gptrget
   3386 FF                11674 	mov	r7,a
                          11675 ;	genCast
                          11676 ;	genAnd
   3387 53 05 01          11677 	anl	ar5,#0x01
                          11678 ;	genPlus
   338A E5*00             11679 	mov	a,_bp
   338C 24 2B             11680 	add	a,#0x2b
   338E F8                11681 	mov	r0,a
                          11682 ;	Peephole 236.g	used r4 instead of ar4
   338F EC                11683 	mov	a,r4
   3390 26                11684 	add	a,@r0
   3391 FC                11685 	mov	r4,a
                          11686 ;	Peephole 236.g	used r5 instead of ar5
   3392 ED                11687 	mov	a,r5
   3393 08                11688 	inc	r0
   3394 36                11689 	addc	a,@r0
   3395 FD                11690 	mov	r5,a
   3396 08                11691 	inc	r0
   3397 86 06             11692 	mov	ar6,@r0
                          11693 ;	genIpush
   3399 E5*00             11694 	mov	a,_bp
   339B 24 0C             11695 	add	a,#0x0c
   339D F8                11696 	mov	r0,a
   339E E6                11697 	mov	a,@r0
   339F C0 E0             11698 	push	acc
   33A1 08                11699 	inc	r0
   33A2 E6                11700 	mov	a,@r0
   33A3 C0 E0             11701 	push	acc
                          11702 ;	genIpush
   33A5 C0 04             11703 	push	ar4
   33A7 C0 05             11704 	push	ar5
   33A9 C0 06             11705 	push	ar6
                          11706 ;	genCall
   33AB E5*00             11707 	mov	a,_bp
   33AD 24 12             11708 	add	a,#0x12
   33AF F8                11709 	mov	r0,a
   33B0 86 82             11710 	mov	dpl,@r0
   33B2 08                11711 	inc	r0
   33B3 86 83             11712 	mov	dph,@r0
   33B5 08                11713 	inc	r0
   33B6 86 F0             11714 	mov	b,@r0
   33B8 12s00r00          11715 	lcall	_memcpy
   33BB E5 81             11716 	mov	a,sp
   33BD 24 FB             11717 	add	a,#0xfb
   33BF F5 81             11718 	mov	sp,a
   33C1                   11719 00129$:
                          11720 ;	FatDrivers/tff.c:1069: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
                          11721 ;	genPlus
   33C1 E5*00             11722 	mov	a,_bp
   33C3 24 12             11723 	add	a,#0x12
   33C5 F8                11724 	mov	r0,a
   33C6 E5*00             11725 	mov	a,_bp
   33C8 24 0C             11726 	add	a,#0x0c
   33CA F9                11727 	mov	r1,a
   33CB E7                11728 	mov	a,@r1
   33CC 26                11729 	add	a,@r0
   33CD F6                11730 	mov	@r0,a
   33CE 09                11731 	inc	r1
   33CF E7                11732 	mov	a,@r1
   33D0 08                11733 	inc	r0
   33D1 36                11734 	addc	a,@r0
   33D2 F6                11735 	mov	@r0,a
                          11736 ;	genPointerGet
                          11737 ;	genGenPointerGet
   33D3 E5*00             11738 	mov	a,_bp
   33D5 24 1B             11739 	add	a,#0x1b
   33D7 F8                11740 	mov	r0,a
   33D8 86 82             11741 	mov	dpl,@r0
   33DA 08                11742 	inc	r0
   33DB 86 83             11743 	mov	dph,@r0
   33DD 08                11744 	inc	r0
   33DE 86 F0             11745 	mov	b,@r0
   33E0 E5*00             11746 	mov	a,_bp
   33E2 24 2E             11747 	add	a,#0x2e
   33E4 F9                11748 	mov	r1,a
   33E5 12s00r00          11749 	lcall	__gptrget
   33E8 F7                11750 	mov	@r1,a
   33E9 A3                11751 	inc	dptr
   33EA 12s00r00          11752 	lcall	__gptrget
   33ED 09                11753 	inc	r1
   33EE F7                11754 	mov	@r1,a
   33EF A3                11755 	inc	dptr
   33F0 12s00r00          11756 	lcall	__gptrget
   33F3 09                11757 	inc	r1
   33F4 F7                11758 	mov	@r1,a
   33F5 A3                11759 	inc	dptr
   33F6 12s00r00          11760 	lcall	__gptrget
   33F9 09                11761 	inc	r1
   33FA F7                11762 	mov	@r1,a
                          11763 ;	genCast
   33FB E5*00             11764 	mov	a,_bp
   33FD 24 0C             11765 	add	a,#0x0c
   33FF F8                11766 	mov	r0,a
   3400 86 02             11767 	mov	ar2,@r0
   3402 08                11768 	inc	r0
   3403 86 03             11769 	mov	ar3,@r0
                          11770 ;	genPlus
                          11771 ;	Peephole 3.c	changed mov to clr
   3405 E4                11772 	clr	a
   3406 FC                11773 	mov	r4,a
   3407 FD                11774 	mov	r5,a
   3408 E5*00             11775 	mov	a,_bp
   340A 24 2E             11776 	add	a,#0x2e
   340C F8                11777 	mov	r0,a
                          11778 ;	Peephole 236.g	used r2 instead of ar2
   340D EA                11779 	mov	a,r2
   340E 26                11780 	add	a,@r0
   340F FA                11781 	mov	r2,a
                          11782 ;	Peephole 236.g	used r3 instead of ar3
   3410 EB                11783 	mov	a,r3
   3411 08                11784 	inc	r0
   3412 36                11785 	addc	a,@r0
   3413 FB                11786 	mov	r3,a
                          11787 ;	Peephole 236.g	used r4 instead of ar4
   3414 EC                11788 	mov	a,r4
   3415 08                11789 	inc	r0
   3416 36                11790 	addc	a,@r0
   3417 FC                11791 	mov	r4,a
                          11792 ;	Peephole 236.g	used r5 instead of ar5
   3418 ED                11793 	mov	a,r5
   3419 08                11794 	inc	r0
   341A 36                11795 	addc	a,@r0
   341B FD                11796 	mov	r5,a
                          11797 ;	genPointerSet
                          11798 ;	genGenPointerSet
   341C E5*00             11799 	mov	a,_bp
   341E 24 1B             11800 	add	a,#0x1b
   3420 F8                11801 	mov	r0,a
   3421 86 82             11802 	mov	dpl,@r0
   3423 08                11803 	inc	r0
   3424 86 83             11804 	mov	dph,@r0
   3426 08                11805 	inc	r0
   3427 86 F0             11806 	mov	b,@r0
   3429 EA                11807 	mov	a,r2
   342A 12s00r00          11808 	lcall	__gptrput
   342D A3                11809 	inc	dptr
   342E EB                11810 	mov	a,r3
   342F 12s00r00          11811 	lcall	__gptrput
   3432 A3                11812 	inc	dptr
   3433 EC                11813 	mov	a,r4
   3434 12s00r00          11814 	lcall	__gptrput
   3437 A3                11815 	inc	dptr
   3438 ED                11816 	mov	a,r5
   3439 12s00r00          11817 	lcall	__gptrput
                          11818 ;	genPointerGet
                          11819 ;	genGenPointerGet
   343C E5*00             11820 	mov	a,_bp
   343E 24 18             11821 	add	a,#0x18
   3440 F8                11822 	mov	r0,a
   3441 86 82             11823 	mov	dpl,@r0
   3443 08                11824 	inc	r0
   3444 86 83             11825 	mov	dph,@r0
   3446 08                11826 	inc	r0
   3447 86 F0             11827 	mov	b,@r0
   3449 12s00r00          11828 	lcall	__gptrget
   344C FA                11829 	mov	r2,a
   344D A3                11830 	inc	dptr
   344E 12s00r00          11831 	lcall	__gptrget
   3451 FB                11832 	mov	r3,a
                          11833 ;	genPlus
   3452 E5*00             11834 	mov	a,_bp
   3454 24 0C             11835 	add	a,#0x0c
   3456 F8                11836 	mov	r0,a
   3457 E6                11837 	mov	a,@r0
                          11838 ;	Peephole 236.a	used r2 instead of ar2
   3458 2A                11839 	add	a,r2
   3459 FA                11840 	mov	r2,a
   345A 08                11841 	inc	r0
   345B E6                11842 	mov	a,@r0
                          11843 ;	Peephole 236.b	used r3 instead of ar3
   345C 3B                11844 	addc	a,r3
   345D FB                11845 	mov	r3,a
                          11846 ;	genPointerSet
                          11847 ;	genGenPointerSet
   345E E5*00             11848 	mov	a,_bp
   3460 24 18             11849 	add	a,#0x18
   3462 F8                11850 	mov	r0,a
   3463 86 82             11851 	mov	dpl,@r0
   3465 08                11852 	inc	r0
   3466 86 83             11853 	mov	dph,@r0
   3468 08                11854 	inc	r0
   3469 86 F0             11855 	mov	b,@r0
   346B EA                11856 	mov	a,r2
   346C 12s00r00          11857 	lcall	__gptrput
   346F A3                11858 	inc	dptr
   3470 EB                11859 	mov	a,r3
   3471 12s00r00          11860 	lcall	__gptrput
                          11861 ;	genMinus
   3474 E5*00             11862 	mov	a,_bp
   3476 24 F9             11863 	add	a,#0xfffffff9
   3478 F8                11864 	mov	r0,a
   3479 E5*00             11865 	mov	a,_bp
   347B 24 0C             11866 	add	a,#0x0c
   347D F9                11867 	mov	r1,a
   347E E6                11868 	mov	a,@r0
   347F C3                11869 	clr	c
   3480 97                11870 	subb	a,@r1
   3481 F6                11871 	mov	@r0,a
   3482 08                11872 	inc	r0
   3483 E6                11873 	mov	a,@r0
   3484 09                11874 	inc	r1
   3485 97                11875 	subb	a,@r1
   3486 F6                11876 	mov	@r0,a
   3487 02s2FrB5          11877 	ljmp	00127$
   348A                   11878 00130$:
                          11879 ;	FatDrivers/tff.c:1100: return FR_OK;
                          11880 ;	genRet
   348A 75 82 00          11881 	mov	dpl,#0x00
                          11882 ;	FatDrivers/tff.c:1102: fr_error:	/* Abort this function due to an unrecoverable error */
                          11883 ;	Peephole 112.b	changed ljmp to sjmp
   348D 80 28             11884 	sjmp	00132$
   348F                   11885 00131$:
                          11886 ;	FatDrivers/tff.c:1103: fp->flag |= FA__ERROR;
                          11887 ;	genPointerGet
                          11888 ;	genGenPointerGet
   348F E5*00             11889 	mov	a,_bp
   3491 24 38             11890 	add	a,#0x38
   3493 F8                11891 	mov	r0,a
   3494 86 82             11892 	mov	dpl,@r0
   3496 08                11893 	inc	r0
   3497 86 83             11894 	mov	dph,@r0
   3499 08                11895 	inc	r0
   349A 86 F0             11896 	mov	b,@r0
   349C 12s00r00          11897 	lcall	__gptrget
   349F FA                11898 	mov	r2,a
                          11899 ;	genOr
   34A0 43 02 80          11900 	orl	ar2,#0x80
                          11901 ;	genPointerSet
                          11902 ;	genGenPointerSet
   34A3 E5*00             11903 	mov	a,_bp
   34A5 24 38             11904 	add	a,#0x38
   34A7 F8                11905 	mov	r0,a
   34A8 86 82             11906 	mov	dpl,@r0
   34AA 08                11907 	inc	r0
   34AB 86 83             11908 	mov	dph,@r0
   34AD 08                11909 	inc	r0
   34AE 86 F0             11910 	mov	b,@r0
   34B0 EA                11911 	mov	a,r2
   34B1 12s00r00          11912 	lcall	__gptrput
                          11913 ;	FatDrivers/tff.c:1104: return FR_RW_ERROR;
                          11914 ;	genRet
   34B4 75 82 08          11915 	mov	dpl,#0x08
   34B7                   11916 00132$:
   34B7 85*00 81          11917 	mov	sp,_bp
   34BA D0*00             11918 	pop	_bp
   34BC 22                11919 	ret
                          11920 ;------------------------------------------------------------
                          11921 ;Allocation info for local variables in function 'f_close'
                          11922 ;------------------------------------------------------------
                          11923 ;fp                        Allocated to registers r2 r3 r4 
                          11924 ;res                       Allocated to registers r5 
                          11925 ;sloc0                     Allocated to stack - offset 1
                          11926 ;------------------------------------------------------------
                          11927 ;	FatDrivers/tff.c:1237: FRESULT f_close (
                          11928 ;	-----------------------------------------
                          11929 ;	 function f_close
                          11930 ;	-----------------------------------------
   34BD                   11931 _f_close:
   34BD C0*00             11932 	push	_bp
   34BF 85 81*00          11933 	mov	_bp,sp
   34C2 05 81             11934 	inc	sp
   34C4 05 81             11935 	inc	sp
                          11936 ;	genReceive
                          11937 ;	FatDrivers/tff.c:1247: res = validate(fp->fs, fp->id);
                          11938 ;	genPointerGet
                          11939 ;	genGenPointerGet
   34C6 AA 82             11940 	mov	r2,dpl
   34C8 AB 83             11941 	mov	r3,dph
   34CA AC F0             11942 	mov	r4,b
                          11943 ;	Peephole 238.d	removed 3 redundant moves
   34CC A8*00             11944 	mov	r0,_bp
   34CE 08                11945 	inc	r0
   34CF 12s00r00          11946 	lcall	__gptrget
   34D2 F6                11947 	mov	@r0,a
   34D3 A3                11948 	inc	dptr
   34D4 12s00r00          11949 	lcall	__gptrget
   34D7 08                11950 	inc	r0
   34D8 F6                11951 	mov	@r0,a
                          11952 ;	genPlus
                          11953 ;     genPlusIncr
   34D9 74 04             11954 	mov	a,#0x04
                          11955 ;	Peephole 236.a	used r2 instead of ar2
   34DB 2A                11956 	add	a,r2
   34DC FA                11957 	mov	r2,a
                          11958 ;	Peephole 181	changed mov to clr
   34DD E4                11959 	clr	a
                          11960 ;	Peephole 236.b	used r3 instead of ar3
   34DE 3B                11961 	addc	a,r3
   34DF FB                11962 	mov	r3,a
                          11963 ;	genPointerGet
                          11964 ;	genGenPointerGet
   34E0 8A 82             11965 	mov	dpl,r2
   34E2 8B 83             11966 	mov	dph,r3
   34E4 8C F0             11967 	mov	b,r4
   34E6 12s00r00          11968 	lcall	__gptrget
   34E9 FF                11969 	mov	r7,a
   34EA A3                11970 	inc	dptr
   34EB 12s00r00          11971 	lcall	__gptrget
   34EE FD                11972 	mov	r5,a
   34EF A3                11973 	inc	dptr
   34F0 12s00r00          11974 	lcall	__gptrget
   34F3 FE                11975 	mov	r6,a
                          11976 ;	genIpush
   34F4 C0 02             11977 	push	ar2
   34F6 C0 03             11978 	push	ar3
   34F8 C0 04             11979 	push	ar4
   34FA A8*00             11980 	mov	r0,_bp
   34FC 08                11981 	inc	r0
   34FD E6                11982 	mov	a,@r0
   34FE C0 E0             11983 	push	acc
   3500 08                11984 	inc	r0
   3501 E6                11985 	mov	a,@r0
   3502 C0 E0             11986 	push	acc
                          11987 ;	genCall
   3504 8F 82             11988 	mov	dpl,r7
   3506 8D 83             11989 	mov	dph,r5
   3508 8E F0             11990 	mov	b,r6
   350A 12s1Br84          11991 	lcall	_validate
   350D AD 82             11992 	mov	r5,dpl
   350F 15 81             11993 	dec	sp
   3511 15 81             11994 	dec	sp
   3513 D0 04             11995 	pop	ar4
   3515 D0 03             11996 	pop	ar3
   3517 D0 02             11997 	pop	ar2
                          11998 ;	genAssign
                          11999 ;	FatDrivers/tff.c:1249: if (res == FR_OK)
                          12000 ;	genIfx
   3519 ED                12001 	mov	a,r5
                          12002 ;	genIfxJump
                          12003 ;	Peephole 108.b	removed ljmp by inverse jump logic
   351A 70 14             12004 	jnz	00102$
                          12005 ;	Peephole 300	removed redundant label 00106$
                          12006 ;	FatDrivers/tff.c:1250: fp->fs = NULL;
                          12007 ;	genPointerSet
                          12008 ;	genGenPointerSet
   351C 8A 82             12009 	mov	dpl,r2
   351E 8B 83             12010 	mov	dph,r3
   3520 8C F0             12011 	mov	b,r4
                          12012 ;	Peephole 181	changed mov to clr
   3522 E4                12013 	clr	a
   3523 12s00r00          12014 	lcall	__gptrput
   3526 A3                12015 	inc	dptr
                          12016 ;	Peephole 181	changed mov to clr
   3527 E4                12017 	clr	a
   3528 12s00r00          12018 	lcall	__gptrput
   352B A3                12019 	inc	dptr
                          12020 ;	Peephole 181	changed mov to clr
   352C E4                12021 	clr	a
   352D 12s00r00          12022 	lcall	__gptrput
   3530                   12023 00102$:
                          12024 ;	FatDrivers/tff.c:1252: return res;
                          12025 ;	genRet
   3530 8D 82             12026 	mov	dpl,r5
                          12027 ;	Peephole 300	removed redundant label 00103$
   3532 85*00 81          12028 	mov	sp,_bp
   3535 D0*00             12029 	pop	_bp
   3537 22                12030 	ret
                          12031 ;------------------------------------------------------------
                          12032 ;Allocation info for local variables in function 'f_lseek'
                          12033 ;------------------------------------------------------------
                          12034 ;ofs                       Allocated to stack - offset -6
                          12035 ;fp                        Allocated to stack - offset 1
                          12036 ;clust                     Allocated to stack - offset 4
                          12037 ;csize                     Allocated to stack - offset 8
                          12038 ;csect                     Allocated to registers r6 
                          12039 ;res                       Allocated to registers r5 
                          12040 ;fs                        Allocated to stack - offset 12
                          12041 ;sloc0                     Allocated to stack - offset 15
                          12042 ;sloc1                     Allocated to stack - offset 19
                          12043 ;sloc2                     Allocated to stack - offset 22
                          12044 ;sloc3                     Allocated to stack - offset 25
                          12045 ;sloc4                     Allocated to stack - offset 28
                          12046 ;sloc5                     Allocated to stack - offset 31
                          12047 ;------------------------------------------------------------
                          12048 ;	FatDrivers/tff.c:1263: FRESULT f_lseek (
                          12049 ;	-----------------------------------------
                          12050 ;	 function f_lseek
                          12051 ;	-----------------------------------------
   3538                   12052 _f_lseek:
   3538 C0*00             12053 	push	_bp
   353A 85 81*00          12054 	mov	_bp,sp
                          12055 ;     genReceive
   353D C0 82             12056 	push	dpl
   353F C0 83             12057 	push	dph
   3541 C0 F0             12058 	push	b
   3543 E5 81             12059 	mov	a,sp
   3545 24 22             12060 	add	a,#0x22
   3547 F5 81             12061 	mov	sp,a
                          12062 ;	FatDrivers/tff.c:1272: FATFS *fs = fp->fs;
                          12063 ;	genPlus
   3549 A8*00             12064 	mov	r0,_bp
   354B 08                12065 	inc	r0
                          12066 ;     genPlusIncr
   354C 74 04             12067 	mov	a,#0x04
   354E 26                12068 	add	a,@r0
   354F FD                12069 	mov	r5,a
                          12070 ;	Peephole 181	changed mov to clr
   3550 E4                12071 	clr	a
   3551 08                12072 	inc	r0
   3552 36                12073 	addc	a,@r0
   3553 FE                12074 	mov	r6,a
   3554 08                12075 	inc	r0
   3555 86 07             12076 	mov	ar7,@r0
                          12077 ;	genPointerGet
                          12078 ;	genGenPointerGet
   3557 8D 82             12079 	mov	dpl,r5
   3559 8E 83             12080 	mov	dph,r6
   355B 8F F0             12081 	mov	b,r7
   355D 12s00r00          12082 	lcall	__gptrget
   3560 FD                12083 	mov	r5,a
   3561 A3                12084 	inc	dptr
   3562 12s00r00          12085 	lcall	__gptrget
   3565 FE                12086 	mov	r6,a
   3566 A3                12087 	inc	dptr
   3567 12s00r00          12088 	lcall	__gptrget
   356A FF                12089 	mov	r7,a
                          12090 ;	genAssign
   356B E5*00             12091 	mov	a,_bp
   356D 24 0C             12092 	add	a,#0x0c
   356F F8                12093 	mov	r0,a
   3570 A6 05             12094 	mov	@r0,ar5
   3572 08                12095 	inc	r0
   3573 A6 06             12096 	mov	@r0,ar6
   3575 08                12097 	inc	r0
   3576 A6 07             12098 	mov	@r0,ar7
                          12099 ;	FatDrivers/tff.c:1275: res = validate(fs, fp->id);			/* Check validity of the object */
                          12100 ;	genPointerGet
                          12101 ;	genGenPointerGet
   3578 A8*00             12102 	mov	r0,_bp
   357A 08                12103 	inc	r0
   357B 86 82             12104 	mov	dpl,@r0
   357D 08                12105 	inc	r0
   357E 86 83             12106 	mov	dph,@r0
   3580 08                12107 	inc	r0
   3581 86 F0             12108 	mov	b,@r0
   3583 12s00r00          12109 	lcall	__gptrget
   3586 FD                12110 	mov	r5,a
   3587 A3                12111 	inc	dptr
   3588 12s00r00          12112 	lcall	__gptrget
   358B FE                12113 	mov	r6,a
                          12114 ;	genIpush
   358C C0 05             12115 	push	ar5
   358E C0 06             12116 	push	ar6
                          12117 ;	genCall
   3590 E5*00             12118 	mov	a,_bp
   3592 24 0C             12119 	add	a,#0x0c
   3594 F8                12120 	mov	r0,a
   3595 86 82             12121 	mov	dpl,@r0
   3597 08                12122 	inc	r0
   3598 86 83             12123 	mov	dph,@r0
   359A 08                12124 	inc	r0
   359B 86 F0             12125 	mov	b,@r0
   359D 12s1Br84          12126 	lcall	_validate
   35A0 AD 82             12127 	mov	r5,dpl
   35A2 15 81             12128 	dec	sp
   35A4 15 81             12129 	dec	sp
                          12130 ;	genAssign
                          12131 ;	FatDrivers/tff.c:1276: if (res != FR_OK) return res;
                          12132 ;	genCmpEq
                          12133 ;	gencjneshort
   35A6 BD 00 02          12134 	cjne	r5,#0x00,00134$
                          12135 ;	Peephole 112.b	changed ljmp to sjmp
   35A9 80 05             12136 	sjmp	00102$
   35AB                   12137 00134$:
                          12138 ;	genRet
   35AB 8D 82             12139 	mov	dpl,r5
   35AD 02s39rD8          12140 	ljmp	00122$
   35B0                   12141 00102$:
                          12142 ;	FatDrivers/tff.c:1278: if (fp->flag & FA__ERROR) return FR_RW_ERROR;
                          12143 ;	genPlus
   35B0 A8*00             12144 	mov	r0,_bp
   35B2 08                12145 	inc	r0
   35B3 E5*00             12146 	mov	a,_bp
   35B5 24 19             12147 	add	a,#0x19
   35B7 F9                12148 	mov	r1,a
                          12149 ;     genPlusIncr
   35B8 74 02             12150 	mov	a,#0x02
   35BA 26                12151 	add	a,@r0
   35BB F7                12152 	mov	@r1,a
                          12153 ;	Peephole 181	changed mov to clr
   35BC E4                12154 	clr	a
   35BD 08                12155 	inc	r0
   35BE 36                12156 	addc	a,@r0
   35BF 09                12157 	inc	r1
   35C0 F7                12158 	mov	@r1,a
   35C1 08                12159 	inc	r0
   35C2 09                12160 	inc	r1
   35C3 E6                12161 	mov	a,@r0
   35C4 F7                12162 	mov	@r1,a
                          12163 ;	genIpush
                          12164 ;	genPointerGet
                          12165 ;	genGenPointerGet
   35C5 E5*00             12166 	mov	a,_bp
   35C7 24 19             12167 	add	a,#0x19
   35C9 F8                12168 	mov	r0,a
   35CA 86 82             12169 	mov	dpl,@r0
   35CC 08                12170 	inc	r0
   35CD 86 83             12171 	mov	dph,@r0
   35CF 08                12172 	inc	r0
   35D0 86 F0             12173 	mov	b,@r0
   35D2 12s00r00          12174 	lcall	__gptrget
                          12175 ;	genAnd
   35D5 FA                12176 	mov	r2,a
                          12177 ;	Peephole 105	removed redundant mov
   35D6 54 80             12178 	anl	a,#0x80
                          12179 ;	genIpop
                          12180 ;	genIfx
                          12181 ;	genIfxJump
                          12182 ;	Peephole 108.c	removed ljmp by inverse jump logic
   35D8 60 06             12183 	jz	00104$
                          12184 ;	Peephole 300	removed redundant label 00135$
                          12185 ;	genRet
   35DA 75 82 08          12186 	mov	dpl,#0x08
   35DD 02s39rD8          12187 	ljmp	00122$
   35E0                   12188 00104$:
                          12189 ;	FatDrivers/tff.c:1282: if (ofs > fp->fsize)
                          12190 ;	genIpush
                          12191 ;	genPlus
   35E0 A8*00             12192 	mov	r0,_bp
   35E2 08                12193 	inc	r0
                          12194 ;     genPlusIncr
   35E3 74 0B             12195 	mov	a,#0x0B
   35E5 26                12196 	add	a,@r0
   35E6 FD                12197 	mov	r5,a
                          12198 ;	Peephole 181	changed mov to clr
   35E7 E4                12199 	clr	a
   35E8 08                12200 	inc	r0
   35E9 36                12201 	addc	a,@r0
   35EA FE                12202 	mov	r6,a
   35EB 08                12203 	inc	r0
   35EC 86 07             12204 	mov	ar7,@r0
                          12205 ;	genPointerGet
                          12206 ;	genGenPointerGet
   35EE 8D 82             12207 	mov	dpl,r5
   35F0 8E 83             12208 	mov	dph,r6
   35F2 8F F0             12209 	mov	b,r7
   35F4 12s00r00          12210 	lcall	__gptrget
   35F7 FA                12211 	mov	r2,a
   35F8 A3                12212 	inc	dptr
   35F9 12s00r00          12213 	lcall	__gptrget
   35FC FB                12214 	mov	r3,a
   35FD A3                12215 	inc	dptr
   35FE 12s00r00          12216 	lcall	__gptrget
   3601 FC                12217 	mov	r4,a
   3602 A3                12218 	inc	dptr
   3603 12s00r00          12219 	lcall	__gptrget
   3606 FD                12220 	mov	r5,a
                          12221 ;	genCmpGt
   3607 E5*00             12222 	mov	a,_bp
   3609 24 FA             12223 	add	a,#0xfffffffa
   360B F8                12224 	mov	r0,a
                          12225 ;	genCmp
   360C C3                12226 	clr	c
   360D EA                12227 	mov	a,r2
   360E 96                12228 	subb	a,@r0
   360F EB                12229 	mov	a,r3
   3610 08                12230 	inc	r0
   3611 96                12231 	subb	a,@r0
   3612 EC                12232 	mov	a,r4
   3613 08                12233 	inc	r0
   3614 96                12234 	subb	a,@r0
   3615 ED                12235 	mov	a,r5
   3616 08                12236 	inc	r0
   3617 96                12237 	subb	a,@r0
                          12238 ;	genIpop
                          12239 ;	genIfx
                          12240 ;	genIfxJump
                          12241 ;	Peephole 108.c	removed ljmp by inverse jump logic
                          12242 ;	Peephole 128	jump optimization
   3618 50 10             12243 	jnc	00106$
                          12244 ;	Peephole 300	removed redundant label 00136$
                          12245 ;	FatDrivers/tff.c:1284: ofs = fp->fsize;
                          12246 ;	genAssign
   361A E5*00             12247 	mov	a,_bp
   361C 24 FA             12248 	add	a,#0xfffffffa
   361E F8                12249 	mov	r0,a
   361F A6 02             12250 	mov	@r0,ar2
   3621 08                12251 	inc	r0
   3622 A6 03             12252 	mov	@r0,ar3
   3624 08                12253 	inc	r0
   3625 A6 04             12254 	mov	@r0,ar4
   3627 08                12255 	inc	r0
   3628 A6 05             12256 	mov	@r0,ar5
   362A                   12257 00106$:
                          12258 ;	FatDrivers/tff.c:1285: fp->fptr = 0; fp->sect_clust = 1;		/* Set file R/W pointer to top of the file */
                          12259 ;	genPlus
   362A A8*00             12260 	mov	r0,_bp
   362C 08                12261 	inc	r0
   362D E5*00             12262 	mov	a,_bp
   362F 24 0F             12263 	add	a,#0x0f
   3631 F9                12264 	mov	r1,a
                          12265 ;     genPlusIncr
   3632 74 07             12266 	mov	a,#0x07
   3634 26                12267 	add	a,@r0
   3635 F7                12268 	mov	@r1,a
                          12269 ;	Peephole 181	changed mov to clr
   3636 E4                12270 	clr	a
   3637 08                12271 	inc	r0
   3638 36                12272 	addc	a,@r0
   3639 09                12273 	inc	r1
   363A F7                12274 	mov	@r1,a
   363B 08                12275 	inc	r0
   363C 09                12276 	inc	r1
   363D E6                12277 	mov	a,@r0
   363E F7                12278 	mov	@r1,a
                          12279 ;	genPointerSet
                          12280 ;	genGenPointerSet
   363F E5*00             12281 	mov	a,_bp
   3641 24 0F             12282 	add	a,#0x0f
   3643 F8                12283 	mov	r0,a
   3644 86 82             12284 	mov	dpl,@r0
   3646 08                12285 	inc	r0
   3647 86 83             12286 	mov	dph,@r0
   3649 08                12287 	inc	r0
   364A 86 F0             12288 	mov	b,@r0
                          12289 ;	Peephole 181	changed mov to clr
   364C E4                12290 	clr	a
   364D 12s00r00          12291 	lcall	__gptrput
   3650 A3                12292 	inc	dptr
                          12293 ;	Peephole 181	changed mov to clr
   3651 E4                12294 	clr	a
   3652 12s00r00          12295 	lcall	__gptrput
   3655 A3                12296 	inc	dptr
                          12297 ;	Peephole 181	changed mov to clr
   3656 E4                12298 	clr	a
   3657 12s00r00          12299 	lcall	__gptrput
   365A A3                12300 	inc	dptr
                          12301 ;	Peephole 181	changed mov to clr
   365B E4                12302 	clr	a
   365C 12s00r00          12303 	lcall	__gptrput
                          12304 ;	genPlus
   365F A8*00             12305 	mov	r0,_bp
   3661 08                12306 	inc	r0
   3662 E5*00             12307 	mov	a,_bp
   3664 24 13             12308 	add	a,#0x13
   3666 F9                12309 	mov	r1,a
                          12310 ;     genPlusIncr
   3667 74 03             12311 	mov	a,#0x03
   3669 26                12312 	add	a,@r0
   366A F7                12313 	mov	@r1,a
                          12314 ;	Peephole 181	changed mov to clr
   366B E4                12315 	clr	a
   366C 08                12316 	inc	r0
   366D 36                12317 	addc	a,@r0
   366E 09                12318 	inc	r1
   366F F7                12319 	mov	@r1,a
   3670 08                12320 	inc	r0
   3671 09                12321 	inc	r1
   3672 E6                12322 	mov	a,@r0
   3673 F7                12323 	mov	@r1,a
                          12324 ;	genPointerSet
                          12325 ;	genGenPointerSet
   3674 E5*00             12326 	mov	a,_bp
   3676 24 13             12327 	add	a,#0x13
   3678 F8                12328 	mov	r0,a
   3679 86 82             12329 	mov	dpl,@r0
   367B 08                12330 	inc	r0
   367C 86 83             12331 	mov	dph,@r0
   367E 08                12332 	inc	r0
   367F 86 F0             12333 	mov	b,@r0
   3681 74 01             12334 	mov	a,#0x01
   3683 12s00r00          12335 	lcall	__gptrput
                          12336 ;	FatDrivers/tff.c:1288: if (ofs) {
                          12337 ;	genIfx
   3686 E5*00             12338 	mov	a,_bp
   3688 24 FA             12339 	add	a,#0xfffffffa
   368A F8                12340 	mov	r0,a
   368B E6                12341 	mov	a,@r0
   368C 08                12342 	inc	r0
   368D 46                12343 	orl	a,@r0
   368E 08                12344 	inc	r0
   368F 46                12345 	orl	a,@r0
   3690 08                12346 	inc	r0
   3691 46                12347 	orl	a,@r0
                          12348 ;	genIfxJump
   3692 70 03             12349 	jnz	00137$
   3694 02s39rAB          12350 	ljmp	00120$
   3697                   12351 00137$:
                          12352 ;	FatDrivers/tff.c:1289: clust = fp->org_clust;	/* Get start cluster */
                          12353 ;	genIpush
                          12354 ;	genPlus
   3697 A8*00             12355 	mov	r0,_bp
   3699 08                12356 	inc	r0
                          12357 ;     genPlusIncr
   369A 74 0F             12358 	mov	a,#0x0F
   369C 26                12359 	add	a,@r0
   369D FD                12360 	mov	r5,a
                          12361 ;	Peephole 181	changed mov to clr
   369E E4                12362 	clr	a
   369F 08                12363 	inc	r0
   36A0 36                12364 	addc	a,@r0
   36A1 FE                12365 	mov	r6,a
   36A2 08                12366 	inc	r0
   36A3 86 07             12367 	mov	ar7,@r0
                          12368 ;	genPointerGet
                          12369 ;	genGenPointerGet
   36A5 8D 82             12370 	mov	dpl,r5
   36A7 8E 83             12371 	mov	dph,r6
   36A9 8F F0             12372 	mov	b,r7
   36AB 12s00r00          12373 	lcall	__gptrget
   36AE FA                12374 	mov	r2,a
   36AF A3                12375 	inc	dptr
   36B0 12s00r00          12376 	lcall	__gptrget
   36B3 FB                12377 	mov	r3,a
   36B4 A3                12378 	inc	dptr
   36B5 12s00r00          12379 	lcall	__gptrget
   36B8 FC                12380 	mov	r4,a
   36B9 A3                12381 	inc	dptr
   36BA 12s00r00          12382 	lcall	__gptrget
   36BD FD                12383 	mov	r5,a
                          12384 ;	genAssign
   36BE E5*00             12385 	mov	a,_bp
   36C0 24 04             12386 	add	a,#0x04
   36C2 F8                12387 	mov	r0,a
   36C3 A6 02             12388 	mov	@r0,ar2
   36C5 08                12389 	inc	r0
   36C6 A6 03             12390 	mov	@r0,ar3
   36C8 08                12391 	inc	r0
   36C9 A6 04             12392 	mov	@r0,ar4
   36CB 08                12393 	inc	r0
   36CC A6 05             12394 	mov	@r0,ar5
                          12395 ;	FatDrivers/tff.c:1297: if (clust) {			/* If the file has a cluster chain, it can be followed */
                          12396 ;	genIpop
                          12397 ;	genIfx
   36CE E5*00             12398 	mov	a,_bp
   36D0 24 04             12399 	add	a,#0x04
   36D2 F8                12400 	mov	r0,a
   36D3 E6                12401 	mov	a,@r0
   36D4 08                12402 	inc	r0
   36D5 46                12403 	orl	a,@r0
   36D6 08                12404 	inc	r0
   36D7 46                12405 	orl	a,@r0
   36D8 08                12406 	inc	r0
   36D9 46                12407 	orl	a,@r0
                          12408 ;	genIfxJump
   36DA 70 03             12409 	jnz	00138$
   36DC 02s39rAB          12410 	ljmp	00120$
   36DF                   12411 00138$:
                          12412 ;	FatDrivers/tff.c:1298: csize = (DWORD)fs->sects_clust * 512;		/* Cluster size in unit of byte */
                          12413 ;	genIpush
                          12414 ;	genPlus
   36DF E5*00             12415 	mov	a,_bp
   36E1 24 0C             12416 	add	a,#0x0c
   36E3 F8                12417 	mov	r0,a
   36E4 E5*00             12418 	mov	a,_bp
   36E6 24 16             12419 	add	a,#0x16
   36E8 F9                12420 	mov	r1,a
                          12421 ;     genPlusIncr
   36E9 74 1D             12422 	mov	a,#0x1D
   36EB 26                12423 	add	a,@r0
   36EC F7                12424 	mov	@r1,a
                          12425 ;	Peephole 181	changed mov to clr
   36ED E4                12426 	clr	a
   36EE 08                12427 	inc	r0
   36EF 36                12428 	addc	a,@r0
   36F0 09                12429 	inc	r1
   36F1 F7                12430 	mov	@r1,a
   36F2 08                12431 	inc	r0
   36F3 09                12432 	inc	r1
   36F4 E6                12433 	mov	a,@r0
   36F5 F7                12434 	mov	@r1,a
                          12435 ;	genPointerGet
                          12436 ;	genGenPointerGet
   36F6 E5*00             12437 	mov	a,_bp
   36F8 24 16             12438 	add	a,#0x16
   36FA F8                12439 	mov	r0,a
   36FB 86 82             12440 	mov	dpl,@r0
   36FD 08                12441 	inc	r0
   36FE 86 83             12442 	mov	dph,@r0
   3700 08                12443 	inc	r0
   3701 86 F0             12444 	mov	b,@r0
   3703 12s00r00          12445 	lcall	__gptrget
   3706 FD                12446 	mov	r5,a
                          12447 ;	genCast
                          12448 ;	genLeftShift
                          12449 ;	genLeftShiftLiteral
                          12450 ;	Peephole 3.c	changed mov to clr
                          12451 ;	Peephole 3.b	changed mov to clr
   3707 E4                12452 	clr	a
   3708 FE                12453 	mov	r6,a
   3709 FF                12454 	mov	r7,a
   370A FA                12455 	mov	r2,a
   370B E5*00             12456 	mov	a,_bp
   370D 24 08             12457 	add	a,#0x08
   370F F8                12458 	mov	r0,a
                          12459 ;	genlshFour
   3710 ED                12460 	mov	a,r5
                          12461 ;	Peephole 254	optimized left shift
   3711 2D                12462 	add	a,r5
   3712 08                12463 	inc	r0
   3713 F6                12464 	mov	@r0,a
   3714 EE                12465 	mov	a,r6
   3715 33                12466 	rlc	a
   3716 08                12467 	inc	r0
   3717 F6                12468 	mov	@r0,a
   3718 EF                12469 	mov	a,r7
   3719 33                12470 	rlc	a
   371A 08                12471 	inc	r0
   371B F6                12472 	mov	@r0,a
   371C 18                12473 	dec	r0
   371D 18                12474 	dec	r0
   371E 18                12475 	dec	r0
   371F 76 00             12476 	mov	@r0,#0x00
                          12477 ;	FatDrivers/tff.c:1332: return FR_RW_ERROR;
                          12478 ;	genIpop
                          12479 ;	FatDrivers/tff.c:1298: csize = (DWORD)fs->sects_clust * 512;		/* Cluster size in unit of byte */
                          12480 ;	genPlus
   3721 E5*00             12481 	mov	a,_bp
   3723 24 0C             12482 	add	a,#0x0c
   3725 F8                12483 	mov	r0,a
   3726 E5*00             12484 	mov	a,_bp
   3728 24 1C             12485 	add	a,#0x1c
   372A F9                12486 	mov	r1,a
                          12487 ;     genPlusIncr
   372B 74 18             12488 	mov	a,#0x18
   372D 26                12489 	add	a,@r0
   372E F7                12490 	mov	@r1,a
                          12491 ;	Peephole 181	changed mov to clr
   372F E4                12492 	clr	a
   3730 08                12493 	inc	r0
   3731 36                12494 	addc	a,@r0
   3732 09                12495 	inc	r1
   3733 F7                12496 	mov	@r1,a
   3734 08                12497 	inc	r0
   3735 09                12498 	inc	r1
   3736 E6                12499 	mov	a,@r0
   3737 F7                12500 	mov	@r1,a
   3738                   12501 00115$:
                          12502 ;	FatDrivers/tff.c:1300: fp->curr_clust = clust;					/* Update current cluster */
                          12503 ;	genIpush
                          12504 ;	genPlus
   3738 A8*00             12505 	mov	r0,_bp
   373A 08                12506 	inc	r0
                          12507 ;     genPlusIncr
   373B 74 13             12508 	mov	a,#0x13
   373D 26                12509 	add	a,@r0
   373E FA                12510 	mov	r2,a
                          12511 ;	Peephole 181	changed mov to clr
   373F E4                12512 	clr	a
   3740 08                12513 	inc	r0
   3741 36                12514 	addc	a,@r0
   3742 FB                12515 	mov	r3,a
   3743 08                12516 	inc	r0
   3744 86 04             12517 	mov	ar4,@r0
                          12518 ;	genPointerSet
                          12519 ;	genGenPointerSet
   3746 8A 82             12520 	mov	dpl,r2
   3748 8B 83             12521 	mov	dph,r3
   374A 8C F0             12522 	mov	b,r4
   374C E5*00             12523 	mov	a,_bp
   374E 24 04             12524 	add	a,#0x04
   3750 F8                12525 	mov	r0,a
   3751 E6                12526 	mov	a,@r0
   3752 12s00r00          12527 	lcall	__gptrput
   3755 A3                12528 	inc	dptr
   3756 08                12529 	inc	r0
   3757 E6                12530 	mov	a,@r0
   3758 12s00r00          12531 	lcall	__gptrput
   375B A3                12532 	inc	dptr
   375C 08                12533 	inc	r0
   375D E6                12534 	mov	a,@r0
   375E 12s00r00          12535 	lcall	__gptrput
   3761 A3                12536 	inc	dptr
   3762 08                12537 	inc	r0
   3763 E6                12538 	mov	a,@r0
   3764 12s00r00          12539 	lcall	__gptrput
                          12540 ;	FatDrivers/tff.c:1301: if (ofs <= csize) break;
                          12541 ;	genCmpGt
   3767 E5*00             12542 	mov	a,_bp
   3769 24 FA             12543 	add	a,#0xfffffffa
   376B F8                12544 	mov	r0,a
   376C E5*00             12545 	mov	a,_bp
   376E 24 08             12546 	add	a,#0x08
   3770 F9                12547 	mov	r1,a
                          12548 ;	genCmp
   3771 C3                12549 	clr	c
   3772 E7                12550 	mov	a,@r1
   3773 96                12551 	subb	a,@r0
   3774 09                12552 	inc	r1
   3775 E7                12553 	mov	a,@r1
   3776 08                12554 	inc	r0
   3777 96                12555 	subb	a,@r0
   3778 09                12556 	inc	r1
   3779 E7                12557 	mov	a,@r1
   377A 08                12558 	inc	r0
   377B 96                12559 	subb	a,@r0
   377C 09                12560 	inc	r1
   377D E7                12561 	mov	a,@r1
   377E 08                12562 	inc	r0
   377F 96                12563 	subb	a,@r0
                          12564 ;	genIpop
                          12565 ;	genIfx
                          12566 ;	genIfxJump
                          12567 ;	Peephole 129.a	jump optimization
   3780 40 03             12568 	jc	00139$
   3782 02s38r98          12569 	ljmp	00116$
   3785                   12570 00139$:
                          12571 ;	FatDrivers/tff.c:1307: clust = get_cluster(clust);			/* Only follow cluster chain if not in write mode */
                          12572 ;	genIpush
                          12573 ;	genCall
   3785 E5*00             12574 	mov	a,_bp
   3787 24 04             12575 	add	a,#0x04
   3789 F8                12576 	mov	r0,a
   378A 86 82             12577 	mov	dpl,@r0
   378C 08                12578 	inc	r0
   378D 86 83             12579 	mov	dph,@r0
   378F 08                12580 	inc	r0
   3790 86 F0             12581 	mov	b,@r0
   3792 08                12582 	inc	r0
   3793 E6                12583 	mov	a,@r0
   3794 12s00rEA          12584 	lcall	_get_cluster
   3797 AA 82             12585 	mov	r2,dpl
   3799 AB 83             12586 	mov	r3,dph
   379B AC F0             12587 	mov	r4,b
   379D FD                12588 	mov	r5,a
                          12589 ;	genAssign
   379E E5*00             12590 	mov	a,_bp
   37A0 24 04             12591 	add	a,#0x04
   37A2 F8                12592 	mov	r0,a
   37A3 A6 02             12593 	mov	@r0,ar2
   37A5 08                12594 	inc	r0
   37A6 A6 03             12595 	mov	@r0,ar3
   37A8 08                12596 	inc	r0
   37A9 A6 04             12597 	mov	@r0,ar4
   37AB 08                12598 	inc	r0
   37AC A6 05             12599 	mov	@r0,ar5
                          12600 ;	FatDrivers/tff.c:1308: if (clust == 0) {						/* Stop if could not follow the cluster chain */
                          12601 ;	genIpop
                          12602 ;	genIfx
   37AE E5*00             12603 	mov	a,_bp
   37B0 24 04             12604 	add	a,#0x04
   37B2 F8                12605 	mov	r0,a
   37B3 E6                12606 	mov	a,@r0
   37B4 08                12607 	inc	r0
   37B5 46                12608 	orl	a,@r0
   37B6 08                12609 	inc	r0
   37B7 46                12610 	orl	a,@r0
   37B8 08                12611 	inc	r0
   37B9 46                12612 	orl	a,@r0
                          12613 ;	genIfxJump
                          12614 ;	Peephole 108.b	removed ljmp by inverse jump logic
   37BA 70 1B             12615 	jnz	00110$
                          12616 ;	Peephole 300	removed redundant label 00140$
                          12617 ;	FatDrivers/tff.c:1309: ofs = csize; break;
                          12618 ;	genAssign
   37BC E5*00             12619 	mov	a,_bp
   37BE 24 08             12620 	add	a,#0x08
   37C0 F8                12621 	mov	r0,a
   37C1 E5*00             12622 	mov	a,_bp
   37C3 24 FA             12623 	add	a,#0xfffffffa
   37C5 F9                12624 	mov	r1,a
   37C6 E6                12625 	mov	a,@r0
   37C7 F7                12626 	mov	@r1,a
   37C8 08                12627 	inc	r0
   37C9 09                12628 	inc	r1
   37CA E6                12629 	mov	a,@r0
   37CB F7                12630 	mov	@r1,a
   37CC 08                12631 	inc	r0
   37CD 09                12632 	inc	r1
   37CE E6                12633 	mov	a,@r0
   37CF F7                12634 	mov	@r1,a
   37D0 08                12635 	inc	r0
   37D1 09                12636 	inc	r1
   37D2 E6                12637 	mov	a,@r0
   37D3 F7                12638 	mov	@r1,a
   37D4 02s38r98          12639 	ljmp	00116$
   37D7                   12640 00110$:
                          12641 ;	FatDrivers/tff.c:1311: if (clust == 1 || clust >= fs->max_clust) goto fk_error;
                          12642 ;	genCmpEq
   37D7 E5*00             12643 	mov	a,_bp
   37D9 24 04             12644 	add	a,#0x04
   37DB F8                12645 	mov	r0,a
                          12646 ;	gencjneshort
   37DC B6 01 0F          12647 	cjne	@r0,#0x01,00141$
   37DF 08                12648 	inc	r0
   37E0 B6 00 0B          12649 	cjne	@r0,#0x00,00141$
   37E3 08                12650 	inc	r0
   37E4 B6 00 07          12651 	cjne	@r0,#0x00,00141$
   37E7 08                12652 	inc	r0
   37E8 B6 00 03          12653 	cjne	@r0,#0x00,00141$
   37EB 02s39rB0          12654 	ljmp	00121$
   37EE                   12655 00141$:
                          12656 ;	genPointerGet
                          12657 ;	genGenPointerGet
   37EE E5*00             12658 	mov	a,_bp
   37F0 24 1C             12659 	add	a,#0x1c
   37F2 F8                12660 	mov	r0,a
   37F3 86 82             12661 	mov	dpl,@r0
   37F5 08                12662 	inc	r0
   37F6 86 83             12663 	mov	dph,@r0
   37F8 08                12664 	inc	r0
   37F9 86 F0             12665 	mov	b,@r0
   37FB 12s00r00          12666 	lcall	__gptrget
   37FE FD                12667 	mov	r5,a
   37FF A3                12668 	inc	dptr
   3800 12s00r00          12669 	lcall	__gptrget
   3803 FE                12670 	mov	r6,a
   3804 A3                12671 	inc	dptr
   3805 12s00r00          12672 	lcall	__gptrget
   3808 FF                12673 	mov	r7,a
   3809 A3                12674 	inc	dptr
   380A 12s00r00          12675 	lcall	__gptrget
   380D FA                12676 	mov	r2,a
                          12677 ;	genCmpLt
   380E E5*00             12678 	mov	a,_bp
   3810 24 04             12679 	add	a,#0x04
   3812 F8                12680 	mov	r0,a
                          12681 ;	genCmp
   3813 C3                12682 	clr	c
   3814 E6                12683 	mov	a,@r0
   3815 9D                12684 	subb	a,r5
   3816 08                12685 	inc	r0
   3817 E6                12686 	mov	a,@r0
   3818 9E                12687 	subb	a,r6
   3819 08                12688 	inc	r0
   381A E6                12689 	mov	a,@r0
   381B 9F                12690 	subb	a,r7
   381C 08                12691 	inc	r0
   381D E6                12692 	mov	a,@r0
   381E 9A                12693 	subb	a,r2
                          12694 ;	genIfxJump
   381F 40 03             12695 	jc	00142$
   3821 02s39rB0          12696 	ljmp	00121$
   3824                   12697 00142$:
                          12698 ;	FatDrivers/tff.c:1312: fp->fptr += csize;						/* Update R/W pointer */
                          12699 ;	genPointerGet
                          12700 ;	genGenPointerGet
   3824 E5*00             12701 	mov	a,_bp
   3826 24 0F             12702 	add	a,#0x0f
   3828 F8                12703 	mov	r0,a
   3829 86 82             12704 	mov	dpl,@r0
   382B 08                12705 	inc	r0
   382C 86 83             12706 	mov	dph,@r0
   382E 08                12707 	inc	r0
   382F 86 F0             12708 	mov	b,@r0
   3831 12s00r00          12709 	lcall	__gptrget
   3834 FA                12710 	mov	r2,a
   3835 A3                12711 	inc	dptr
   3836 12s00r00          12712 	lcall	__gptrget
   3839 FB                12713 	mov	r3,a
   383A A3                12714 	inc	dptr
   383B 12s00r00          12715 	lcall	__gptrget
   383E FC                12716 	mov	r4,a
   383F A3                12717 	inc	dptr
   3840 12s00r00          12718 	lcall	__gptrget
   3843 FD                12719 	mov	r5,a
                          12720 ;	genPlus
   3844 E5*00             12721 	mov	a,_bp
   3846 24 08             12722 	add	a,#0x08
   3848 F8                12723 	mov	r0,a
   3849 E6                12724 	mov	a,@r0
                          12725 ;	Peephole 236.a	used r2 instead of ar2
   384A 2A                12726 	add	a,r2
   384B FA                12727 	mov	r2,a
   384C 08                12728 	inc	r0
   384D E6                12729 	mov	a,@r0
                          12730 ;	Peephole 236.b	used r3 instead of ar3
   384E 3B                12731 	addc	a,r3
   384F FB                12732 	mov	r3,a
   3850 08                12733 	inc	r0
   3851 E6                12734 	mov	a,@r0
                          12735 ;	Peephole 236.b	used r4 instead of ar4
   3852 3C                12736 	addc	a,r4
   3853 FC                12737 	mov	r4,a
   3854 08                12738 	inc	r0
   3855 E6                12739 	mov	a,@r0
                          12740 ;	Peephole 236.b	used r5 instead of ar5
   3856 3D                12741 	addc	a,r5
   3857 FD                12742 	mov	r5,a
                          12743 ;	genPointerSet
                          12744 ;	genGenPointerSet
   3858 E5*00             12745 	mov	a,_bp
   385A 24 0F             12746 	add	a,#0x0f
   385C F8                12747 	mov	r0,a
   385D 86 82             12748 	mov	dpl,@r0
   385F 08                12749 	inc	r0
   3860 86 83             12750 	mov	dph,@r0
   3862 08                12751 	inc	r0
   3863 86 F0             12752 	mov	b,@r0
   3865 EA                12753 	mov	a,r2
   3866 12s00r00          12754 	lcall	__gptrput
   3869 A3                12755 	inc	dptr
   386A EB                12756 	mov	a,r3
   386B 12s00r00          12757 	lcall	__gptrput
   386E A3                12758 	inc	dptr
   386F EC                12759 	mov	a,r4
   3870 12s00r00          12760 	lcall	__gptrput
   3873 A3                12761 	inc	dptr
   3874 ED                12762 	mov	a,r5
   3875 12s00r00          12763 	lcall	__gptrput
                          12764 ;	FatDrivers/tff.c:1313: ofs -= csize;
                          12765 ;	genMinus
   3878 E5*00             12766 	mov	a,_bp
   387A 24 FA             12767 	add	a,#0xfffffffa
   387C F8                12768 	mov	r0,a
   387D E5*00             12769 	mov	a,_bp
   387F 24 08             12770 	add	a,#0x08
   3881 F9                12771 	mov	r1,a
   3882 E6                12772 	mov	a,@r0
   3883 C3                12773 	clr	c
   3884 97                12774 	subb	a,@r1
   3885 F6                12775 	mov	@r0,a
   3886 08                12776 	inc	r0
   3887 E6                12777 	mov	a,@r0
   3888 09                12778 	inc	r1
   3889 97                12779 	subb	a,@r1
   388A F6                12780 	mov	@r0,a
   388B 08                12781 	inc	r0
   388C E6                12782 	mov	a,@r0
   388D 09                12783 	inc	r1
   388E 97                12784 	subb	a,@r1
   388F F6                12785 	mov	@r0,a
   3890 08                12786 	inc	r0
   3891 E6                12787 	mov	a,@r0
   3892 09                12788 	inc	r1
   3893 97                12789 	subb	a,@r1
   3894 F6                12790 	mov	@r0,a
   3895 02s37r38          12791 	ljmp	00115$
   3898                   12792 00116$:
                          12793 ;	FatDrivers/tff.c:1315: csect = (BYTE)((ofs - 1) / 512);			/* Sector offset in the cluster */
                          12794 ;	genMinus
   3898 E5*00             12795 	mov	a,_bp
   389A 24 FA             12796 	add	a,#0xfffffffa
   389C F8                12797 	mov	r0,a
                          12798 ;	genMinusDec
   389D E6                12799 	mov	a,@r0
   389E 24 FF             12800 	add	a,#0xff
   38A0 FA                12801 	mov	r2,a
   38A1 08                12802 	inc	r0
   38A2 E6                12803 	mov	a,@r0
   38A3 34 FF             12804 	addc	a,#0xff
   38A5 FB                12805 	mov	r3,a
   38A6 08                12806 	inc	r0
   38A7 E6                12807 	mov	a,@r0
   38A8 34 FF             12808 	addc	a,#0xff
   38AA FC                12809 	mov	r4,a
   38AB 08                12810 	inc	r0
   38AC E6                12811 	mov	a,@r0
   38AD 34 FF             12812 	addc	a,#0xff
                          12813 ;	genRightShift
                          12814 ;	genRightShiftLiteral
                          12815 ;	genrshFour
                          12816 ;	Peephole 105	removed redundant mov
                          12817 ;	Peephole 177.c	removed redundant move
   38AF 7D 00             12818 	mov	r5,#0x00
   38B1 C3                12819 	clr	c
   38B2 13                12820 	rrc	a
   38B3 CC                12821 	xch	a,r4
   38B4 13                12822 	rrc	a
   38B5 CB                12823 	xch	a,r3
   38B6 13                12824 	rrc	a
   38B7 FA                12825 	mov	r2,a
                          12826 ;	genCast
   38B8 8A 06             12827 	mov	ar6,r2
                          12828 ;	FatDrivers/tff.c:1316: fp->curr_sect = clust2sect(clust) + csect;	/* Current sector */
                          12829 ;	genPlus
   38BA A8*00             12830 	mov	r0,_bp
   38BC 08                12831 	inc	r0
   38BD E5*00             12832 	mov	a,_bp
   38BF 24 1C             12833 	add	a,#0x1c
   38C1 F9                12834 	mov	r1,a
                          12835 ;     genPlusIncr
   38C2 74 17             12836 	mov	a,#0x17
   38C4 26                12837 	add	a,@r0
   38C5 F7                12838 	mov	@r1,a
                          12839 ;	Peephole 181	changed mov to clr
   38C6 E4                12840 	clr	a
   38C7 08                12841 	inc	r0
   38C8 36                12842 	addc	a,@r0
   38C9 09                12843 	inc	r1
   38CA F7                12844 	mov	@r1,a
   38CB 08                12845 	inc	r0
   38CC 09                12846 	inc	r1
   38CD E6                12847 	mov	a,@r0
   38CE F7                12848 	mov	@r1,a
                          12849 ;	genCall
   38CF E5*00             12850 	mov	a,_bp
   38D1 24 04             12851 	add	a,#0x04
   38D3 F8                12852 	mov	r0,a
   38D4 86 82             12853 	mov	dpl,@r0
   38D6 08                12854 	inc	r0
   38D7 86 83             12855 	mov	dph,@r0
   38D9 08                12856 	inc	r0
   38DA 86 F0             12857 	mov	b,@r0
   38DC 08                12858 	inc	r0
   38DD E6                12859 	mov	a,@r0
   38DE C0 06             12860 	push	ar6
   38E0 12s04r26          12861 	lcall	_clust2sect
   38E3 C0 E0             12862 	push	acc
   38E5 E5*00             12863 	mov	a,_bp
   38E7 24 1F             12864 	add	a,#0x1f
   38E9 F8                12865 	mov	r0,a
   38EA D0 E0             12866 	pop	acc
   38EC A6 82             12867 	mov	@r0,dpl
   38EE 08                12868 	inc	r0
   38EF A6 83             12869 	mov	@r0,dph
   38F1 08                12870 	inc	r0
   38F2 A6 F0             12871 	mov	@r0,b
   38F4 08                12872 	inc	r0
   38F5 F6                12873 	mov	@r0,a
   38F6 D0 06             12874 	pop	ar6
                          12875 ;	genCast
   38F8 8E 04             12876 	mov	ar4,r6
                          12877 ;	genPlus
                          12878 ;	Peephole 3.c	changed mov to clr
                          12879 ;	Peephole 3.b	changed mov to clr
   38FA E4                12880 	clr	a
   38FB FD                12881 	mov	r5,a
   38FC FA                12882 	mov	r2,a
   38FD FB                12883 	mov	r3,a
   38FE E5*00             12884 	mov	a,_bp
   3900 24 1F             12885 	add	a,#0x1f
   3902 F8                12886 	mov	r0,a
                          12887 ;	Peephole 236.g	used r4 instead of ar4
   3903 EC                12888 	mov	a,r4
   3904 26                12889 	add	a,@r0
   3905 FC                12890 	mov	r4,a
                          12891 ;	Peephole 236.g	used r5 instead of ar5
   3906 ED                12892 	mov	a,r5
   3907 08                12893 	inc	r0
   3908 36                12894 	addc	a,@r0
   3909 FD                12895 	mov	r5,a
                          12896 ;	Peephole 236.g	used r2 instead of ar2
   390A EA                12897 	mov	a,r2
   390B 08                12898 	inc	r0
   390C 36                12899 	addc	a,@r0
   390D FA                12900 	mov	r2,a
                          12901 ;	Peephole 236.g	used r3 instead of ar3
   390E EB                12902 	mov	a,r3
   390F 08                12903 	inc	r0
   3910 36                12904 	addc	a,@r0
   3911 FB                12905 	mov	r3,a
                          12906 ;	genPointerSet
                          12907 ;	genGenPointerSet
   3912 E5*00             12908 	mov	a,_bp
   3914 24 1C             12909 	add	a,#0x1c
   3916 F8                12910 	mov	r0,a
   3917 86 82             12911 	mov	dpl,@r0
   3919 08                12912 	inc	r0
   391A 86 83             12913 	mov	dph,@r0
   391C 08                12914 	inc	r0
   391D 86 F0             12915 	mov	b,@r0
   391F EC                12916 	mov	a,r4
   3920 12s00r00          12917 	lcall	__gptrput
   3923 A3                12918 	inc	dptr
   3924 ED                12919 	mov	a,r5
   3925 12s00r00          12920 	lcall	__gptrput
   3928 A3                12921 	inc	dptr
   3929 EA                12922 	mov	a,r2
   392A 12s00r00          12923 	lcall	__gptrput
   392D A3                12924 	inc	dptr
   392E EB                12925 	mov	a,r3
   392F 12s00r00          12926 	lcall	__gptrput
                          12927 ;	FatDrivers/tff.c:1317: fp->sect_clust = fs->sects_clust - csect;	/* Left sector counter in the cluster */
                          12928 ;	genPointerGet
                          12929 ;	genGenPointerGet
   3932 E5*00             12930 	mov	a,_bp
   3934 24 16             12931 	add	a,#0x16
   3936 F8                12932 	mov	r0,a
   3937 86 82             12933 	mov	dpl,@r0
   3939 08                12934 	inc	r0
   393A 86 83             12935 	mov	dph,@r0
   393C 08                12936 	inc	r0
   393D 86 F0             12937 	mov	b,@r0
   393F 12s00r00          12938 	lcall	__gptrget
                          12939 ;	genMinus
   3942 FA                12940 	mov	r2,a
                          12941 ;	Peephole 105	removed redundant mov
   3943 C3                12942 	clr	c
                          12943 ;	Peephole 236.l	used r6 instead of ar6
   3944 9E                12944 	subb	a,r6
   3945 FA                12945 	mov	r2,a
                          12946 ;	genPointerSet
                          12947 ;	genGenPointerSet
   3946 E5*00             12948 	mov	a,_bp
   3948 24 13             12949 	add	a,#0x13
   394A F8                12950 	mov	r0,a
   394B 86 82             12951 	mov	dpl,@r0
   394D 08                12952 	inc	r0
   394E 86 83             12953 	mov	dph,@r0
   3950 08                12954 	inc	r0
   3951 86 F0             12955 	mov	b,@r0
   3953 EA                12956 	mov	a,r2
   3954 12s00r00          12957 	lcall	__gptrput
                          12958 ;	FatDrivers/tff.c:1318: fp->fptr += ofs;							/* Update file R/W pointer */
                          12959 ;	genPointerGet
                          12960 ;	genGenPointerGet
   3957 E5*00             12961 	mov	a,_bp
   3959 24 0F             12962 	add	a,#0x0f
   395B F8                12963 	mov	r0,a
   395C 86 82             12964 	mov	dpl,@r0
   395E 08                12965 	inc	r0
   395F 86 83             12966 	mov	dph,@r0
   3961 08                12967 	inc	r0
   3962 86 F0             12968 	mov	b,@r0
   3964 12s00r00          12969 	lcall	__gptrget
   3967 FA                12970 	mov	r2,a
   3968 A3                12971 	inc	dptr
   3969 12s00r00          12972 	lcall	__gptrget
   396C FB                12973 	mov	r3,a
   396D A3                12974 	inc	dptr
   396E 12s00r00          12975 	lcall	__gptrget
   3971 FC                12976 	mov	r4,a
   3972 A3                12977 	inc	dptr
   3973 12s00r00          12978 	lcall	__gptrget
   3976 FD                12979 	mov	r5,a
                          12980 ;	genPlus
   3977 E5*00             12981 	mov	a,_bp
   3979 24 FA             12982 	add	a,#0xfffffffa
   397B F8                12983 	mov	r0,a
   397C E6                12984 	mov	a,@r0
                          12985 ;	Peephole 236.a	used r2 instead of ar2
   397D 2A                12986 	add	a,r2
   397E FA                12987 	mov	r2,a
   397F 08                12988 	inc	r0
   3980 E6                12989 	mov	a,@r0
                          12990 ;	Peephole 236.b	used r3 instead of ar3
   3981 3B                12991 	addc	a,r3
   3982 FB                12992 	mov	r3,a
   3983 08                12993 	inc	r0
   3984 E6                12994 	mov	a,@r0
                          12995 ;	Peephole 236.b	used r4 instead of ar4
   3985 3C                12996 	addc	a,r4
   3986 FC                12997 	mov	r4,a
   3987 08                12998 	inc	r0
   3988 E6                12999 	mov	a,@r0
                          13000 ;	Peephole 236.b	used r5 instead of ar5
   3989 3D                13001 	addc	a,r5
   398A FD                13002 	mov	r5,a
                          13003 ;	genPointerSet
                          13004 ;	genGenPointerSet
   398B E5*00             13005 	mov	a,_bp
   398D 24 0F             13006 	add	a,#0x0f
   398F F8                13007 	mov	r0,a
   3990 86 82             13008 	mov	dpl,@r0
   3992 08                13009 	inc	r0
   3993 86 83             13010 	mov	dph,@r0
   3995 08                13011 	inc	r0
   3996 86 F0             13012 	mov	b,@r0
   3998 EA                13013 	mov	a,r2
   3999 12s00r00          13014 	lcall	__gptrput
   399C A3                13015 	inc	dptr
   399D EB                13016 	mov	a,r3
   399E 12s00r00          13017 	lcall	__gptrput
   39A1 A3                13018 	inc	dptr
   39A2 EC                13019 	mov	a,r4
   39A3 12s00r00          13020 	lcall	__gptrput
   39A6 A3                13021 	inc	dptr
   39A7 ED                13022 	mov	a,r5
   39A8 12s00r00          13023 	lcall	__gptrput
   39AB                   13024 00120$:
                          13025 ;	FatDrivers/tff.c:1328: return FR_OK;
                          13026 ;	genRet
   39AB 75 82 00          13027 	mov	dpl,#0x00
                          13028 ;	FatDrivers/tff.c:1330: fk_error:	/* Abort this function due to an unrecoverable error */
                          13029 ;	Peephole 112.b	changed ljmp to sjmp
   39AE 80 28             13030 	sjmp	00122$
   39B0                   13031 00121$:
                          13032 ;	FatDrivers/tff.c:1331: fp->flag |= FA__ERROR;
                          13033 ;	genPointerGet
                          13034 ;	genGenPointerGet
   39B0 E5*00             13035 	mov	a,_bp
   39B2 24 19             13036 	add	a,#0x19
   39B4 F8                13037 	mov	r0,a
   39B5 86 82             13038 	mov	dpl,@r0
   39B7 08                13039 	inc	r0
   39B8 86 83             13040 	mov	dph,@r0
   39BA 08                13041 	inc	r0
   39BB 86 F0             13042 	mov	b,@r0
   39BD 12s00r00          13043 	lcall	__gptrget
   39C0 FA                13044 	mov	r2,a
                          13045 ;	genOr
   39C1 43 02 80          13046 	orl	ar2,#0x80
                          13047 ;	genPointerSet
                          13048 ;	genGenPointerSet
   39C4 E5*00             13049 	mov	a,_bp
   39C6 24 19             13050 	add	a,#0x19
   39C8 F8                13051 	mov	r0,a
   39C9 86 82             13052 	mov	dpl,@r0
   39CB 08                13053 	inc	r0
   39CC 86 83             13054 	mov	dph,@r0
   39CE 08                13055 	inc	r0
   39CF 86 F0             13056 	mov	b,@r0
   39D1 EA                13057 	mov	a,r2
   39D2 12s00r00          13058 	lcall	__gptrput
                          13059 ;	FatDrivers/tff.c:1332: return FR_RW_ERROR;
                          13060 ;	genRet
   39D5 75 82 08          13061 	mov	dpl,#0x08
   39D8                   13062 00122$:
   39D8 85*00 81          13063 	mov	sp,_bp
   39DB D0*00             13064 	pop	_bp
   39DD 22                13065 	ret
                          13066 ;------------------------------------------------------------
                          13067 ;Allocation info for local variables in function 'f_opendir'
                          13068 ;------------------------------------------------------------
                          13069 ;path                      Allocated to stack - offset -5
                          13070 ;dirobj                    Allocated to stack - offset 1
                          13071 ;dir                       Allocated to stack - offset 4
                          13072 ;fn                        Allocated to stack - offset 7
                          13073 ;res                       Allocated to registers r5 
                          13074 ;fs                        Allocated to stack - offset 19
                          13075 ;sloc0                     Allocated to stack - offset 22
                          13076 ;sloc1                     Allocated to stack - offset 25
                          13077 ;------------------------------------------------------------
                          13078 ;	FatDrivers/tff.c:1343: FRESULT f_opendir (
                          13079 ;	-----------------------------------------
                          13080 ;	 function f_opendir
                          13081 ;	-----------------------------------------
   39DE                   13082 _f_opendir:
   39DE C0*00             13083 	push	_bp
   39E0 85 81*00          13084 	mov	_bp,sp
                          13085 ;     genReceive
   39E3 C0 82             13086 	push	dpl
   39E5 C0 83             13087 	push	dph
   39E7 C0 F0             13088 	push	b
   39E9 E5 81             13089 	mov	a,sp
   39EB 24 1C             13090 	add	a,#0x1c
   39ED F5 81             13091 	mov	sp,a
                          13092 ;	FatDrivers/tff.c:1351: FATFS *fs = FatFs;
                          13093 ;	genAssign
   39EF E5*00             13094 	mov	a,_bp
   39F1 24 13             13095 	add	a,#0x13
   39F3 F8                13096 	mov	r0,a
   39F4 A6*00             13097 	mov	@r0,_FatFs
   39F6 08                13098 	inc	r0
   39F7 A6*01             13099 	mov	@r0,(_FatFs + 1)
   39F9 08                13100 	inc	r0
   39FA A6*02             13101 	mov	@r0,(_FatFs + 2)
                          13102 ;	FatDrivers/tff.c:1354: res = auto_mount(&path, 0);
                          13103 ;	genAddrOf
   39FC E5*00             13104 	mov	a,_bp
   39FE 24 FB             13105 	add	a,#0xfb
   3A00 FD                13106 	mov	r5,a
                          13107 ;	genCast
   3A01 7E 00             13108 	mov	r6,#0x00
   3A03 7F 40             13109 	mov	r7,#0x40
                          13110 ;	genIpush
                          13111 ;	Peephole 181	changed mov to clr
   3A05 E4                13112 	clr	a
   3A06 C0 E0             13113 	push	acc
                          13114 ;	genCall
   3A08 8D 82             13115 	mov	dpl,r5
   3A0A 8E 83             13116 	mov	dph,r6
   3A0C 8F F0             13117 	mov	b,r7
   3A0E 12s13rB5          13118 	lcall	_auto_mount
   3A11 AD 82             13119 	mov	r5,dpl
   3A13 15 81             13120 	dec	sp
                          13121 ;	genAssign
                          13122 ;	FatDrivers/tff.c:1355: if (res != FR_OK) return res;
                          13123 ;	genCmpEq
                          13124 ;	gencjneshort
   3A15 BD 00 02          13125 	cjne	r5,#0x00,00116$
                          13126 ;	Peephole 112.b	changed ljmp to sjmp
   3A18 80 05             13127 	sjmp	00102$
   3A1A                   13128 00116$:
                          13129 ;	genRet
   3A1A 8D 82             13130 	mov	dpl,r5
   3A1C 02s3BrDF          13131 	ljmp	00110$
   3A1F                   13132 00102$:
                          13133 ;	FatDrivers/tff.c:1357: res = trace_path(dirobj, fn, path, &dir);	/* Trace the directory path */
                          13134 ;	genAddrOf
   3A1F E5*00             13135 	mov	a,_bp
   3A21 24 04             13136 	add	a,#0x04
   3A23 FE                13137 	mov	r6,a
                          13138 ;	genCast
   3A24 7D 00             13139 	mov	r5,#0x00
   3A26 7F 40             13140 	mov	r7,#0x40
                          13141 ;	genAddrOf
   3A28 E5*00             13142 	mov	a,_bp
   3A2A 24 07             13143 	add	a,#0x07
   3A2C FB                13144 	mov	r3,a
                          13145 ;	genCast
   3A2D 7C 00             13146 	mov	r4,#0x00
   3A2F 7A 40             13147 	mov	r2,#0x40
                          13148 ;	genIpush
   3A31 C0 06             13149 	push	ar6
   3A33 C0 05             13150 	push	ar5
   3A35 C0 07             13151 	push	ar7
                          13152 ;	genIpush
   3A37 E5*00             13153 	mov	a,_bp
   3A39 24 FB             13154 	add	a,#0xfffffffb
   3A3B F8                13155 	mov	r0,a
   3A3C E6                13156 	mov	a,@r0
   3A3D C0 E0             13157 	push	acc
   3A3F 08                13158 	inc	r0
   3A40 E6                13159 	mov	a,@r0
   3A41 C0 E0             13160 	push	acc
   3A43 08                13161 	inc	r0
   3A44 E6                13162 	mov	a,@r0
   3A45 C0 E0             13163 	push	acc
                          13164 ;	genIpush
   3A47 C0 03             13165 	push	ar3
   3A49 C0 04             13166 	push	ar4
   3A4B C0 02             13167 	push	ar2
                          13168 ;	genCall
   3A4D A8*00             13169 	mov	r0,_bp
   3A4F 08                13170 	inc	r0
   3A50 86 82             13171 	mov	dpl,@r0
   3A52 08                13172 	inc	r0
   3A53 86 83             13173 	mov	dph,@r0
   3A55 08                13174 	inc	r0
   3A56 86 F0             13175 	mov	b,@r0
   3A58 12s0CrDE          13176 	lcall	_trace_path
   3A5B AA 82             13177 	mov	r2,dpl
   3A5D E5 81             13178 	mov	a,sp
   3A5F 24 F7             13179 	add	a,#0xf7
   3A61 F5 81             13180 	mov	sp,a
                          13181 ;	genAssign
   3A63 8A 05             13182 	mov	ar5,r2
                          13183 ;	FatDrivers/tff.c:1358: if (res == FR_OK) {							/* Trace completed */
                          13184 ;	genIfx
   3A65 ED                13185 	mov	a,r5
                          13186 ;	genIfxJump
   3A66 60 03             13187 	jz	00117$
   3A68 02s3BrDD          13188 	ljmp	00109$
   3A6B                   13189 00117$:
                          13190 ;	FatDrivers/tff.c:1359: if (dir != NULL) {						/* It is not the root dir */
                          13191 ;	genAssign
                          13192 ;	genCmpEq
   3A6B E5*00             13193 	mov	a,_bp
   3A6D 24 04             13194 	add	a,#0x04
   3A6F F8                13195 	mov	r0,a
                          13196 ;	gencjneshort
   3A70 B6 00 0B          13197 	cjne	@r0,#0x00,00118$
   3A73 08                13198 	inc	r0
   3A74 B6 00 07          13199 	cjne	@r0,#0x00,00118$
   3A77 08                13200 	inc	r0
   3A78 B6 00 03          13201 	cjne	@r0,#0x00,00118$
   3A7B 02s3BrB3          13202 	ljmp	00107$
   3A7E                   13203 00118$:
                          13204 ;	FatDrivers/tff.c:1360: if (dir[DIR_Attr] & AM_DIR) {		/* The entry is a directory */
                          13205 ;	genIpush
   3A7E C0 05             13206 	push	ar5
                          13207 ;	genPlus
   3A80 E5*00             13208 	mov	a,_bp
   3A82 24 04             13209 	add	a,#0x04
   3A84 F8                13210 	mov	r0,a
                          13211 ;     genPlusIncr
   3A85 74 0B             13212 	mov	a,#0x0B
   3A87 26                13213 	add	a,@r0
   3A88 FE                13214 	mov	r6,a
                          13215 ;	Peephole 181	changed mov to clr
   3A89 E4                13216 	clr	a
   3A8A 08                13217 	inc	r0
   3A8B 36                13218 	addc	a,@r0
   3A8C FF                13219 	mov	r7,a
   3A8D 08                13220 	inc	r0
   3A8E 86 05             13221 	mov	ar5,@r0
                          13222 ;	genPointerGet
                          13223 ;	genGenPointerGet
   3A90 8E 82             13224 	mov	dpl,r6
   3A92 8F 83             13225 	mov	dph,r7
   3A94 8D F0             13226 	mov	b,r5
   3A96 12s00r00          13227 	lcall	__gptrget
                          13228 ;	genAnd
   3A99 FE                13229 	mov	r6,a
                          13230 ;	Peephole 105	removed redundant mov
   3A9A 54 10             13231 	anl	a,#0x10
                          13232 ;	genIpop
   3A9C D0 05             13233 	pop	ar5
                          13234 ;	genIfx
                          13235 ;	genIfxJump
   3A9E 70 03             13236 	jnz	00119$
   3AA0 02s3BrB1          13237 	ljmp	00104$
   3AA3                   13238 00119$:
                          13239 ;	FatDrivers/tff.c:1361: dirobj->clust =
                          13240 ;	genIpush
   3AA3 C0 05             13241 	push	ar5
                          13242 ;	genPlus
   3AA5 A8*00             13243 	mov	r0,_bp
   3AA7 08                13244 	inc	r0
   3AA8 E5*00             13245 	mov	a,_bp
   3AAA 24 16             13246 	add	a,#0x16
   3AAC F9                13247 	mov	r1,a
                          13248 ;     genPlusIncr
   3AAD 74 0B             13249 	mov	a,#0x0B
   3AAF 26                13250 	add	a,@r0
   3AB0 F7                13251 	mov	@r1,a
                          13252 ;	Peephole 181	changed mov to clr
   3AB1 E4                13253 	clr	a
   3AB2 08                13254 	inc	r0
   3AB3 36                13255 	addc	a,@r0
   3AB4 09                13256 	inc	r1
   3AB5 F7                13257 	mov	@r1,a
   3AB6 08                13258 	inc	r0
   3AB7 09                13259 	inc	r1
   3AB8 E6                13260 	mov	a,@r0
   3AB9 F7                13261 	mov	@r1,a
                          13262 ;	FatDrivers/tff.c:1363: ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
                          13263 ;	genPlus
   3ABA E5*00             13264 	mov	a,_bp
   3ABC 24 04             13265 	add	a,#0x04
   3ABE F8                13266 	mov	r0,a
                          13267 ;     genPlusIncr
   3ABF 74 14             13268 	mov	a,#0x14
   3AC1 26                13269 	add	a,@r0
   3AC2 FA                13270 	mov	r2,a
                          13271 ;	Peephole 181	changed mov to clr
   3AC3 E4                13272 	clr	a
   3AC4 08                13273 	inc	r0
   3AC5 36                13274 	addc	a,@r0
   3AC6 FB                13275 	mov	r3,a
   3AC7 08                13276 	inc	r0
   3AC8 86 04             13277 	mov	ar4,@r0
                          13278 ;	genPointerGet
                          13279 ;	genGenPointerGet
   3ACA 8A 82             13280 	mov	dpl,r2
   3ACC 8B 83             13281 	mov	dph,r3
   3ACE 8C F0             13282 	mov	b,r4
   3AD0 12s00r00          13283 	lcall	__gptrget
   3AD3 FA                13284 	mov	r2,a
   3AD4 A3                13285 	inc	dptr
   3AD5 12s00r00          13286 	lcall	__gptrget
   3AD8 FB                13287 	mov	r3,a
                          13288 ;	genCast
                          13289 ;	genLeftShift
                          13290 ;	genLeftShiftLiteral
                          13291 ;	Peephole 3.c	changed mov to clr
   3AD9 E4                13292 	clr	a
   3ADA FC                13293 	mov	r4,a
   3ADB FD                13294 	mov	r5,a
   3ADC E5*00             13295 	mov	a,_bp
   3ADE 24 19             13296 	add	a,#0x19
                          13297 ;	genlshFour
                          13298 ;	Peephole 185	changed order of increment (acc incremented also!)
   3AE0 04                13299 	inc	a
                          13300 ;	Peephole 185	changed order of increment (acc incremented also!)
   3AE1 04                13301 	inc	a
                          13302 ;	Peephole 185	changed order of increment (acc incremented also!)
   3AE2 04                13303 	inc	a
   3AE3 F8                13304 	mov	r0,a
   3AE4 A6 03             13305 	mov	@r0,ar3
   3AE6 18                13306 	dec	r0
   3AE7 A6 02             13307 	mov	@r0,ar2
   3AE9 18                13308 	dec	r0
   3AEA 76 00             13309 	mov	@r0,#0x00
   3AEC 18                13310 	dec	r0
   3AED 76 00             13311 	mov	@r0,#0x00
                          13312 ;	FatDrivers/tff.c:1365: LD_WORD(&dir[DIR_FstClusLO]);
                          13313 ;	genPlus
   3AEF E5*00             13314 	mov	a,_bp
   3AF1 24 04             13315 	add	a,#0x04
   3AF3 F8                13316 	mov	r0,a
                          13317 ;     genPlusIncr
   3AF4 74 1A             13318 	mov	a,#0x1A
   3AF6 26                13319 	add	a,@r0
   3AF7 FE                13320 	mov	r6,a
                          13321 ;	Peephole 181	changed mov to clr
   3AF8 E4                13322 	clr	a
   3AF9 08                13323 	inc	r0
   3AFA 36                13324 	addc	a,@r0
   3AFB FF                13325 	mov	r7,a
   3AFC 08                13326 	inc	r0
   3AFD 86 02             13327 	mov	ar2,@r0
                          13328 ;	genPointerGet
                          13329 ;	genGenPointerGet
   3AFF 8E 82             13330 	mov	dpl,r6
   3B01 8F 83             13331 	mov	dph,r7
   3B03 8A F0             13332 	mov	b,r2
   3B05 12s00r00          13333 	lcall	__gptrget
   3B08 FE                13334 	mov	r6,a
   3B09 A3                13335 	inc	dptr
   3B0A 12s00r00          13336 	lcall	__gptrget
   3B0D FF                13337 	mov	r7,a
                          13338 ;	genCast
                          13339 ;	genOr
                          13340 ;	Peephole 3.c	changed mov to clr
   3B0E E4                13341 	clr	a
   3B0F FA                13342 	mov	r2,a
   3B10 FB                13343 	mov	r3,a
   3B11 E5*00             13344 	mov	a,_bp
   3B13 24 19             13345 	add	a,#0x19
   3B15 F8                13346 	mov	r0,a
   3B16 EE                13347 	mov	a,r6
   3B17 46                13348 	orl	a,@r0
   3B18 FE                13349 	mov	r6,a
   3B19 EF                13350 	mov	a,r7
   3B1A 08                13351 	inc	r0
   3B1B 46                13352 	orl	a,@r0
   3B1C FC                13353 	mov	r4,a
   3B1D EA                13354 	mov	a,r2
   3B1E 08                13355 	inc	r0
   3B1F 46                13356 	orl	a,@r0
   3B20 FA                13357 	mov	r2,a
   3B21 EB                13358 	mov	a,r3
   3B22 08                13359 	inc	r0
   3B23 46                13360 	orl	a,@r0
   3B24 FB                13361 	mov	r3,a
                          13362 ;	genPointerSet
                          13363 ;	genGenPointerSet
   3B25 E5*00             13364 	mov	a,_bp
   3B27 24 16             13365 	add	a,#0x16
   3B29 F8                13366 	mov	r0,a
   3B2A 86 82             13367 	mov	dpl,@r0
   3B2C 08                13368 	inc	r0
   3B2D 86 83             13369 	mov	dph,@r0
   3B2F 08                13370 	inc	r0
   3B30 86 F0             13371 	mov	b,@r0
   3B32 EE                13372 	mov	a,r6
   3B33 12s00r00          13373 	lcall	__gptrput
   3B36 A3                13374 	inc	dptr
   3B37 EC                13375 	mov	a,r4
   3B38 12s00r00          13376 	lcall	__gptrput
   3B3B A3                13377 	inc	dptr
   3B3C EA                13378 	mov	a,r2
   3B3D 12s00r00          13379 	lcall	__gptrput
   3B40 A3                13380 	inc	dptr
   3B41 EB                13381 	mov	a,r3
   3B42 12s00r00          13382 	lcall	__gptrput
                          13383 ;	FatDrivers/tff.c:1366: dirobj->sect = clust2sect(dirobj->clust);
                          13384 ;	genPlus
   3B45 A8*00             13385 	mov	r0,_bp
   3B47 08                13386 	inc	r0
   3B48 E5*00             13387 	mov	a,_bp
   3B4A 24 16             13388 	add	a,#0x16
   3B4C F9                13389 	mov	r1,a
                          13390 ;     genPlusIncr
   3B4D 74 0F             13391 	mov	a,#0x0F
   3B4F 26                13392 	add	a,@r0
   3B50 F7                13393 	mov	@r1,a
                          13394 ;	Peephole 181	changed mov to clr
   3B51 E4                13395 	clr	a
   3B52 08                13396 	inc	r0
   3B53 36                13397 	addc	a,@r0
   3B54 09                13398 	inc	r1
   3B55 F7                13399 	mov	@r1,a
   3B56 08                13400 	inc	r0
   3B57 09                13401 	inc	r1
   3B58 E6                13402 	mov	a,@r0
   3B59 F7                13403 	mov	@r1,a
                          13404 ;	genCall
   3B5A 8E 82             13405 	mov	dpl,r6
   3B5C 8C 83             13406 	mov	dph,r4
   3B5E 8A F0             13407 	mov	b,r2
   3B60 EB                13408 	mov	a,r3
   3B61 C0 05             13409 	push	ar5
   3B63 12s04r26          13410 	lcall	_clust2sect
   3B66 AB 82             13411 	mov	r3,dpl
   3B68 AE 83             13412 	mov	r6,dph
   3B6A AF F0             13413 	mov	r7,b
   3B6C FA                13414 	mov	r2,a
   3B6D D0 05             13415 	pop	ar5
                          13416 ;	genPointerSet
                          13417 ;	genGenPointerSet
   3B6F E5*00             13418 	mov	a,_bp
   3B71 24 16             13419 	add	a,#0x16
   3B73 F8                13420 	mov	r0,a
   3B74 86 82             13421 	mov	dpl,@r0
   3B76 08                13422 	inc	r0
   3B77 86 83             13423 	mov	dph,@r0
   3B79 08                13424 	inc	r0
   3B7A 86 F0             13425 	mov	b,@r0
   3B7C EB                13426 	mov	a,r3
   3B7D 12s00r00          13427 	lcall	__gptrput
   3B80 A3                13428 	inc	dptr
   3B81 EE                13429 	mov	a,r6
   3B82 12s00r00          13430 	lcall	__gptrput
   3B85 A3                13431 	inc	dptr
   3B86 EF                13432 	mov	a,r7
   3B87 12s00r00          13433 	lcall	__gptrput
   3B8A A3                13434 	inc	dptr
   3B8B EA                13435 	mov	a,r2
   3B8C 12s00r00          13436 	lcall	__gptrput
                          13437 ;	FatDrivers/tff.c:1367: dirobj->index = 2;
                          13438 ;	genPlus
   3B8F A8*00             13439 	mov	r0,_bp
   3B91 08                13440 	inc	r0
                          13441 ;     genPlusIncr
   3B92 74 02             13442 	mov	a,#0x02
   3B94 26                13443 	add	a,@r0
   3B95 FA                13444 	mov	r2,a
                          13445 ;	Peephole 181	changed mov to clr
   3B96 E4                13446 	clr	a
   3B97 08                13447 	inc	r0
   3B98 36                13448 	addc	a,@r0
   3B99 FB                13449 	mov	r3,a
   3B9A 08                13450 	inc	r0
   3B9B 86 04             13451 	mov	ar4,@r0
                          13452 ;	genPointerSet
                          13453 ;	genGenPointerSet
   3B9D 8A 82             13454 	mov	dpl,r2
   3B9F 8B 83             13455 	mov	dph,r3
   3BA1 8C F0             13456 	mov	b,r4
   3BA3 74 02             13457 	mov	a,#0x02
   3BA5 12s00r00          13458 	lcall	__gptrput
   3BA8 A3                13459 	inc	dptr
                          13460 ;	Peephole 181	changed mov to clr
   3BA9 E4                13461 	clr	a
   3BAA 12s00r00          13462 	lcall	__gptrput
                          13463 ;	genIpop
   3BAD D0 05             13464 	pop	ar5
                          13465 ;	Peephole 112.b	changed ljmp to sjmp
   3BAF 80 02             13466 	sjmp	00107$
   3BB1                   13467 00104$:
                          13468 ;	FatDrivers/tff.c:1369: res = FR_NO_FILE;
                          13469 ;	genAssign
   3BB1 7D 02             13470 	mov	r5,#0x02
   3BB3                   13471 00107$:
                          13472 ;	FatDrivers/tff.c:1372: dirobj->id = fs->id;
                          13473 ;	genPointerGet
                          13474 ;	genGenPointerGet
   3BB3 E5*00             13475 	mov	a,_bp
   3BB5 24 13             13476 	add	a,#0x13
   3BB7 F8                13477 	mov	r0,a
   3BB8 86 82             13478 	mov	dpl,@r0
   3BBA 08                13479 	inc	r0
   3BBB 86 83             13480 	mov	dph,@r0
   3BBD 08                13481 	inc	r0
   3BBE 86 F0             13482 	mov	b,@r0
   3BC0 12s00r00          13483 	lcall	__gptrget
   3BC3 FA                13484 	mov	r2,a
   3BC4 A3                13485 	inc	dptr
   3BC5 12s00r00          13486 	lcall	__gptrget
   3BC8 FB                13487 	mov	r3,a
                          13488 ;	genPointerSet
                          13489 ;	genGenPointerSet
   3BC9 A8*00             13490 	mov	r0,_bp
   3BCB 08                13491 	inc	r0
   3BCC 86 82             13492 	mov	dpl,@r0
   3BCE 08                13493 	inc	r0
   3BCF 86 83             13494 	mov	dph,@r0
   3BD1 08                13495 	inc	r0
   3BD2 86 F0             13496 	mov	b,@r0
   3BD4 EA                13497 	mov	a,r2
   3BD5 12s00r00          13498 	lcall	__gptrput
   3BD8 A3                13499 	inc	dptr
   3BD9 EB                13500 	mov	a,r3
   3BDA 12s00r00          13501 	lcall	__gptrput
   3BDD                   13502 00109$:
                          13503 ;	FatDrivers/tff.c:1374: return res;
                          13504 ;	genRet
   3BDD 8D 82             13505 	mov	dpl,r5
   3BDF                   13506 00110$:
   3BDF 85*00 81          13507 	mov	sp,_bp
   3BE2 D0*00             13508 	pop	_bp
   3BE4 22                13509 	ret
                          13510 ;------------------------------------------------------------
                          13511 ;Allocation info for local variables in function 'f_readdir'
                          13512 ;------------------------------------------------------------
                          13513 ;finfo                     Allocated to stack - offset -5
                          13514 ;dirobj                    Allocated to stack - offset 1
                          13515 ;dir                       Allocated to registers r2 r3 r4 
                          13516 ;c                         Allocated to stack - offset 4
                          13517 ;res                       Allocated to registers r5 
                          13518 ;fs                        Allocated to stack - offset 5
                          13519 ;sloc0                     Allocated to stack - offset 8
                          13520 ;sloc1                     Allocated to stack - offset 11
                          13521 ;sloc2                     Allocated to stack - offset 14
                          13522 ;sloc3                     Allocated to stack - offset 17
                          13523 ;sloc4                     Allocated to stack - offset 20
                          13524 ;------------------------------------------------------------
                          13525 ;	FatDrivers/tff.c:1384: FRESULT f_readdir (
                          13526 ;	-----------------------------------------
                          13527 ;	 function f_readdir
                          13528 ;	-----------------------------------------
   3BE5                   13529 _f_readdir:
   3BE5 C0*00             13530 	push	_bp
   3BE7 85 81*00          13531 	mov	_bp,sp
                          13532 ;     genReceive
   3BEA C0 82             13533 	push	dpl
   3BEC C0 83             13534 	push	dph
   3BEE C0 F0             13535 	push	b
   3BF0 E5 81             13536 	mov	a,sp
   3BF2 24 17             13537 	add	a,#0x17
   3BF4 F5 81             13538 	mov	sp,a
                          13539 ;	FatDrivers/tff.c:1391: FATFS *fs = dirobj->fs;
                          13540 ;	genPlus
   3BF6 A8*00             13541 	mov	r0,_bp
   3BF8 08                13542 	inc	r0
                          13543 ;     genPlusIncr
   3BF9 74 04             13544 	mov	a,#0x04
   3BFB 26                13545 	add	a,@r0
   3BFC FD                13546 	mov	r5,a
                          13547 ;	Peephole 181	changed mov to clr
   3BFD E4                13548 	clr	a
   3BFE 08                13549 	inc	r0
   3BFF 36                13550 	addc	a,@r0
   3C00 FE                13551 	mov	r6,a
   3C01 08                13552 	inc	r0
   3C02 86 07             13553 	mov	ar7,@r0
                          13554 ;	genPointerGet
                          13555 ;	genGenPointerGet
   3C04 8D 82             13556 	mov	dpl,r5
   3C06 8E 83             13557 	mov	dph,r6
   3C08 8F F0             13558 	mov	b,r7
   3C0A 12s00r00          13559 	lcall	__gptrget
   3C0D FD                13560 	mov	r5,a
   3C0E A3                13561 	inc	dptr
   3C0F 12s00r00          13562 	lcall	__gptrget
   3C12 FE                13563 	mov	r6,a
   3C13 A3                13564 	inc	dptr
   3C14 12s00r00          13565 	lcall	__gptrget
   3C17 FF                13566 	mov	r7,a
                          13567 ;	genAssign
   3C18 E5*00             13568 	mov	a,_bp
   3C1A 24 05             13569 	add	a,#0x05
   3C1C F8                13570 	mov	r0,a
   3C1D A6 05             13571 	mov	@r0,ar5
   3C1F 08                13572 	inc	r0
   3C20 A6 06             13573 	mov	@r0,ar6
   3C22 08                13574 	inc	r0
   3C23 A6 07             13575 	mov	@r0,ar7
                          13576 ;	FatDrivers/tff.c:1394: res = validate(fs, dirobj->id);			/* Check validity of the object */
                          13577 ;	genPointerGet
                          13578 ;	genGenPointerGet
   3C25 A8*00             13579 	mov	r0,_bp
   3C27 08                13580 	inc	r0
   3C28 86 82             13581 	mov	dpl,@r0
   3C2A 08                13582 	inc	r0
   3C2B 86 83             13583 	mov	dph,@r0
   3C2D 08                13584 	inc	r0
   3C2E 86 F0             13585 	mov	b,@r0
   3C30 12s00r00          13586 	lcall	__gptrget
   3C33 FD                13587 	mov	r5,a
   3C34 A3                13588 	inc	dptr
   3C35 12s00r00          13589 	lcall	__gptrget
   3C38 FE                13590 	mov	r6,a
                          13591 ;	genIpush
   3C39 C0 05             13592 	push	ar5
   3C3B C0 06             13593 	push	ar6
                          13594 ;	genCall
   3C3D E5*00             13595 	mov	a,_bp
   3C3F 24 05             13596 	add	a,#0x05
   3C41 F8                13597 	mov	r0,a
   3C42 86 82             13598 	mov	dpl,@r0
   3C44 08                13599 	inc	r0
   3C45 86 83             13600 	mov	dph,@r0
   3C47 08                13601 	inc	r0
   3C48 86 F0             13602 	mov	b,@r0
   3C4A 12s1Br84          13603 	lcall	_validate
   3C4D AD 82             13604 	mov	r5,dpl
   3C4F 15 81             13605 	dec	sp
   3C51 15 81             13606 	dec	sp
                          13607 ;	genAssign
                          13608 ;	FatDrivers/tff.c:1395: if (res != FR_OK) return res;
                          13609 ;	genCmpEq
                          13610 ;	gencjneshort
   3C53 BD 00 02          13611 	cjne	r5,#0x00,00127$
                          13612 ;	Peephole 112.b	changed ljmp to sjmp
   3C56 80 05             13613 	sjmp	00102$
   3C58                   13614 00127$:
                          13615 ;	genRet
   3C58 8D 82             13616 	mov	dpl,r5
   3C5A 02s3Er47          13617 	ljmp	00117$
   3C5D                   13618 00102$:
                          13619 ;	FatDrivers/tff.c:1397: finfo->fname[0] = 0;
                          13620 ;	genIpush
                          13621 ;	genAssign
   3C5D E5*00             13622 	mov	a,_bp
   3C5F 24 FB             13623 	add	a,#0xfffffffb
   3C61 F8                13624 	mov	r0,a
   3C62 86 05             13625 	mov	ar5,@r0
   3C64 08                13626 	inc	r0
   3C65 86 06             13627 	mov	ar6,@r0
   3C67 08                13628 	inc	r0
   3C68 86 07             13629 	mov	ar7,@r0
                          13630 ;	genPlus
                          13631 ;     genPlusIncr
   3C6A 74 09             13632 	mov	a,#0x09
                          13633 ;	Peephole 236.a	used r5 instead of ar5
   3C6C 2D                13634 	add	a,r5
   3C6D FA                13635 	mov	r2,a
                          13636 ;	Peephole 181	changed mov to clr
   3C6E E4                13637 	clr	a
                          13638 ;	Peephole 236.b	used r6 instead of ar6
   3C6F 3E                13639 	addc	a,r6
   3C70 FB                13640 	mov	r3,a
   3C71 8F 04             13641 	mov	ar4,r7
                          13642 ;	genCast
                          13643 ;	genPointerSet
                          13644 ;	genGenPointerSet
   3C73 8A 82             13645 	mov	dpl,r2
   3C75 8B 83             13646 	mov	dph,r3
   3C77 8C F0             13647 	mov	b,r4
                          13648 ;	Peephole 181	changed mov to clr
   3C79 E4                13649 	clr	a
   3C7A 12s00r00          13650 	lcall	__gptrput
                          13651 ;	FatDrivers/tff.c:1410: return FR_OK;
                          13652 ;	genIpop
                          13653 ;	FatDrivers/tff.c:1398: while (dirobj->sect) {
                          13654 ;	genPlus
   3C7D E5*00             13655 	mov	a,_bp
   3C7F 24 05             13656 	add	a,#0x05
   3C81 F8                13657 	mov	r0,a
   3C82 E5*00             13658 	mov	a,_bp
   3C84 24 08             13659 	add	a,#0x08
   3C86 F9                13660 	mov	r1,a
                          13661 ;     genPlusIncr
   3C87 74 20             13662 	mov	a,#0x20
   3C89 26                13663 	add	a,@r0
   3C8A F7                13664 	mov	@r1,a
                          13665 ;	Peephole 181	changed mov to clr
   3C8B E4                13666 	clr	a
   3C8C 08                13667 	inc	r0
   3C8D 36                13668 	addc	a,@r0
   3C8E 09                13669 	inc	r1
   3C8F F7                13670 	mov	@r1,a
   3C90 08                13671 	inc	r0
   3C91 09                13672 	inc	r1
   3C92 E6                13673 	mov	a,@r0
   3C93 F7                13674 	mov	@r1,a
                          13675 ;	genPlus
   3C94 A8*00             13676 	mov	r0,_bp
   3C96 08                13677 	inc	r0
   3C97 E5*00             13678 	mov	a,_bp
   3C99 24 0B             13679 	add	a,#0x0b
   3C9B F9                13680 	mov	r1,a
                          13681 ;     genPlusIncr
   3C9C 74 02             13682 	mov	a,#0x02
   3C9E 26                13683 	add	a,@r0
   3C9F F7                13684 	mov	@r1,a
                          13685 ;	Peephole 181	changed mov to clr
   3CA0 E4                13686 	clr	a
   3CA1 08                13687 	inc	r0
   3CA2 36                13688 	addc	a,@r0
   3CA3 09                13689 	inc	r1
   3CA4 F7                13690 	mov	@r1,a
   3CA5 08                13691 	inc	r0
   3CA6 09                13692 	inc	r1
   3CA7 E6                13693 	mov	a,@r0
   3CA8 F7                13694 	mov	@r1,a
                          13695 ;	genPlus
   3CA9 E5*00             13696 	mov	a,_bp
   3CAB 24 0E             13697 	add	a,#0x0e
   3CAD F8                13698 	mov	r0,a
                          13699 ;     genPlusIncr
   3CAE 74 09             13700 	mov	a,#0x09
                          13701 ;	Peephole 236.a	used r5 instead of ar5
   3CB0 2D                13702 	add	a,r5
   3CB1 F6                13703 	mov	@r0,a
                          13704 ;	Peephole 181	changed mov to clr
   3CB2 E4                13705 	clr	a
                          13706 ;	Peephole 236.b	used r6 instead of ar6
   3CB3 3E                13707 	addc	a,r6
   3CB4 08                13708 	inc	r0
   3CB5 F6                13709 	mov	@r0,a
   3CB6 08                13710 	inc	r0
   3CB7 A6 07             13711 	mov	@r0,ar7
                          13712 ;	genPlus
   3CB9 A8*00             13713 	mov	r0,_bp
   3CBB 08                13714 	inc	r0
   3CBC E5*00             13715 	mov	a,_bp
   3CBE 24 11             13716 	add	a,#0x11
   3CC0 F9                13717 	mov	r1,a
                          13718 ;     genPlusIncr
   3CC1 74 0F             13719 	mov	a,#0x0F
   3CC3 26                13720 	add	a,@r0
   3CC4 F7                13721 	mov	@r1,a
                          13722 ;	Peephole 181	changed mov to clr
   3CC5 E4                13723 	clr	a
   3CC6 08                13724 	inc	r0
   3CC7 36                13725 	addc	a,@r0
   3CC8 09                13726 	inc	r1
   3CC9 F7                13727 	mov	@r1,a
   3CCA 08                13728 	inc	r0
   3CCB 09                13729 	inc	r1
   3CCC E6                13730 	mov	a,@r0
   3CCD F7                13731 	mov	@r1,a
   3CCE                   13732 00114$:
                          13733 ;	genPointerGet
                          13734 ;	genGenPointerGet
   3CCE E5*00             13735 	mov	a,_bp
   3CD0 24 11             13736 	add	a,#0x11
   3CD2 F8                13737 	mov	r0,a
   3CD3 86 82             13738 	mov	dpl,@r0
   3CD5 08                13739 	inc	r0
   3CD6 86 83             13740 	mov	dph,@r0
   3CD8 08                13741 	inc	r0
   3CD9 86 F0             13742 	mov	b,@r0
   3CDB E5*00             13743 	mov	a,_bp
   3CDD 24 14             13744 	add	a,#0x14
   3CDF F9                13745 	mov	r1,a
   3CE0 12s00r00          13746 	lcall	__gptrget
   3CE3 F7                13747 	mov	@r1,a
   3CE4 A3                13748 	inc	dptr
   3CE5 12s00r00          13749 	lcall	__gptrget
   3CE8 09                13750 	inc	r1
   3CE9 F7                13751 	mov	@r1,a
   3CEA A3                13752 	inc	dptr
   3CEB 12s00r00          13753 	lcall	__gptrget
   3CEE 09                13754 	inc	r1
   3CEF F7                13755 	mov	@r1,a
   3CF0 A3                13756 	inc	dptr
   3CF1 12s00r00          13757 	lcall	__gptrget
   3CF4 09                13758 	inc	r1
   3CF5 F7                13759 	mov	@r1,a
                          13760 ;	genIfx
   3CF6 E5*00             13761 	mov	a,_bp
   3CF8 24 14             13762 	add	a,#0x14
   3CFA F8                13763 	mov	r0,a
   3CFB E6                13764 	mov	a,@r0
   3CFC 08                13765 	inc	r0
   3CFD 46                13766 	orl	a,@r0
   3CFE 08                13767 	inc	r0
   3CFF 46                13768 	orl	a,@r0
   3D00 08                13769 	inc	r0
   3D01 46                13770 	orl	a,@r0
                          13771 ;	genIfxJump
   3D02 70 03             13772 	jnz	00128$
   3D04 02s3Er44          13773 	ljmp	00116$
   3D07                   13774 00128$:
                          13775 ;	FatDrivers/tff.c:1399: if (!move_window(dirobj->sect))
                          13776 ;	genCall
   3D07 E5*00             13777 	mov	a,_bp
   3D09 24 14             13778 	add	a,#0x14
   3D0B F8                13779 	mov	r0,a
   3D0C 86 82             13780 	mov	dpl,@r0
   3D0E 08                13781 	inc	r0
   3D0F 86 83             13782 	mov	dph,@r0
   3D11 08                13783 	inc	r0
   3D12 86 F0             13784 	mov	b,@r0
   3D14 08                13785 	inc	r0
   3D15 E6                13786 	mov	a,@r0
   3D16 C0 05             13787 	push	ar5
   3D18 C0 06             13788 	push	ar6
   3D1A C0 07             13789 	push	ar7
   3D1C 12s00r00          13790 	lcall	_move_window
   3D1F E5 82             13791 	mov	a,dpl
   3D21 D0 07             13792 	pop	ar7
   3D23 D0 06             13793 	pop	ar6
   3D25 D0 05             13794 	pop	ar5
                          13795 ;	genIfx
                          13796 ;	genIfxJump
                          13797 ;	Peephole 108.b	removed ljmp by inverse jump logic
   3D27 70 06             13798 	jnz	00104$
                          13799 ;	Peephole 300	removed redundant label 00129$
                          13800 ;	FatDrivers/tff.c:1400: return FR_RW_ERROR;
                          13801 ;	genRet
   3D29 75 82 08          13802 	mov	dpl,#0x08
   3D2C 02s3Er47          13803 	ljmp	00117$
   3D2F                   13804 00104$:
                          13805 ;	FatDrivers/tff.c:1401: dir = &fs->win[(dirobj->index & 15) * 32];		/* pointer to the directory entry */
                          13806 ;	genIpush
   3D2F C0 05             13807 	push	ar5
   3D31 C0 06             13808 	push	ar6
   3D33 C0 07             13809 	push	ar7
                          13810 ;	genPointerGet
                          13811 ;	genGenPointerGet
   3D35 E5*00             13812 	mov	a,_bp
   3D37 24 0B             13813 	add	a,#0x0b
   3D39 F8                13814 	mov	r0,a
   3D3A 86 82             13815 	mov	dpl,@r0
   3D3C 08                13816 	inc	r0
   3D3D 86 83             13817 	mov	dph,@r0
   3D3F 08                13818 	inc	r0
   3D40 86 F0             13819 	mov	b,@r0
   3D42 12s00r00          13820 	lcall	__gptrget
   3D45 FD                13821 	mov	r5,a
   3D46 A3                13822 	inc	dptr
   3D47 12s00r00          13823 	lcall	__gptrget
   3D4A FE                13824 	mov	r6,a
                          13825 ;	genAnd
   3D4B 53 05 0F          13826 	anl	ar5,#0x0F
                          13827 ;	genLeftShift
                          13828 ;	genLeftShiftLiteral
                          13829 ;	genlshTwo
                          13830 ;	peephole 177.g	optimized mov sequence
                          13831 ;	Peephole 181	changed mov to clr
   3D4E E4                13832 	clr	a
   3D4F FE                13833 	mov	r6,a
   3D50 C4                13834 	swap	a
   3D51 23                13835 	rl	a
   3D52 54 E0             13836 	anl	a,#0xe0
   3D54 CD                13837 	xch	a,r5
   3D55 C4                13838 	swap	a
   3D56 23                13839 	rl	a
   3D57 CD                13840 	xch	a,r5
   3D58 6D                13841 	xrl	a,r5
   3D59 CD                13842 	xch	a,r5
   3D5A 54 E0             13843 	anl	a,#0xe0
   3D5C CD                13844 	xch	a,r5
   3D5D 6D                13845 	xrl	a,r5
   3D5E FE                13846 	mov	r6,a
                          13847 ;	genPlus
   3D5F E5*00             13848 	mov	a,_bp
   3D61 24 08             13849 	add	a,#0x08
   3D63 F8                13850 	mov	r0,a
                          13851 ;	Peephole 236.g	used r5 instead of ar5
   3D64 ED                13852 	mov	a,r5
   3D65 26                13853 	add	a,@r0
   3D66 FD                13854 	mov	r5,a
                          13855 ;	Peephole 236.g	used r6 instead of ar6
   3D67 EE                13856 	mov	a,r6
   3D68 08                13857 	inc	r0
   3D69 36                13858 	addc	a,@r0
   3D6A FE                13859 	mov	r6,a
   3D6B 08                13860 	inc	r0
   3D6C 86 07             13861 	mov	ar7,@r0
                          13862 ;	genAssign
   3D6E 8D 02             13863 	mov	ar2,r5
   3D70 8E 03             13864 	mov	ar3,r6
   3D72 8F 04             13865 	mov	ar4,r7
                          13866 ;	FatDrivers/tff.c:1402: c = dir[DIR_Name];
                          13867 ;	genPointerGet
                          13868 ;	genGenPointerGet
   3D74 8A 82             13869 	mov	dpl,r2
   3D76 8B 83             13870 	mov	dph,r3
   3D78 8C F0             13871 	mov	b,r4
   3D7A 12s00r00          13872 	lcall	__gptrget
   3D7D FD                13873 	mov	r5,a
                          13874 ;	genAssign
   3D7E E5*00             13875 	mov	a,_bp
   3D80 24 04             13876 	add	a,#0x04
   3D82 F8                13877 	mov	r0,a
   3D83 A6 05             13878 	mov	@r0,ar5
                          13879 ;	FatDrivers/tff.c:1403: if (c == 0) break;								/* Has it reached to end of dir? */
                          13880 ;	genIpop
   3D85 D0 07             13881 	pop	ar7
   3D87 D0 06             13882 	pop	ar6
   3D89 D0 05             13883 	pop	ar5
                          13884 ;	genIfx
   3D8B E5*00             13885 	mov	a,_bp
   3D8D 24 04             13886 	add	a,#0x04
   3D8F F8                13887 	mov	r0,a
   3D90 E6                13888 	mov	a,@r0
                          13889 ;	genIfxJump
   3D91 70 03             13890 	jnz	00130$
   3D93 02s3Er44          13891 	ljmp	00116$
   3D96                   13892 00130$:
                          13893 ;	FatDrivers/tff.c:1404: if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))		/* Is it a valid entry? */
                          13894 ;	genCmpEq
   3D96 E5*00             13895 	mov	a,_bp
   3D98 24 04             13896 	add	a,#0x04
   3D9A F8                13897 	mov	r0,a
                          13898 ;	gencjneshort
   3D9B B6 E5 02          13899 	cjne	@r0,#0xE5,00131$
                          13900 ;	Peephole 112.b	changed ljmp to sjmp
   3D9E 80 44             13901 	sjmp	00108$
   3DA0                   13902 00131$:
                          13903 ;	genIpush
   3DA0 C0 05             13904 	push	ar5
   3DA2 C0 06             13905 	push	ar6
   3DA4 C0 07             13906 	push	ar7
                          13907 ;	genPlus
                          13908 ;     genPlusIncr
   3DA6 74 0B             13909 	mov	a,#0x0B
                          13910 ;	Peephole 236.a	used r2 instead of ar2
   3DA8 2A                13911 	add	a,r2
   3DA9 FD                13912 	mov	r5,a
                          13913 ;	Peephole 181	changed mov to clr
   3DAA E4                13914 	clr	a
                          13915 ;	Peephole 236.b	used r3 instead of ar3
   3DAB 3B                13916 	addc	a,r3
   3DAC FE                13917 	mov	r6,a
   3DAD 8C 07             13918 	mov	ar7,r4
                          13919 ;	genPointerGet
                          13920 ;	genGenPointerGet
   3DAF 8D 82             13921 	mov	dpl,r5
   3DB1 8E 83             13922 	mov	dph,r6
   3DB3 8F F0             13923 	mov	b,r7
   3DB5 12s00r00          13924 	lcall	__gptrget
                          13925 ;	genAnd
   3DB8 FD                13926 	mov	r5,a
                          13927 ;	Peephole 105	removed redundant mov
   3DB9 54 08             13928 	anl	a,#0x08
                          13929 ;	genIpop
   3DBB D0 07             13930 	pop	ar7
   3DBD D0 06             13931 	pop	ar6
   3DBF D0 05             13932 	pop	ar5
                          13933 ;	genIfx
                          13934 ;	genIfxJump
                          13935 ;	Peephole 108.b	removed ljmp by inverse jump logic
   3DC1 70 21             13936 	jnz	00108$
                          13937 ;	Peephole 300	removed redundant label 00132$
                          13938 ;	FatDrivers/tff.c:1405: get_fileinfo(finfo, dir);
                          13939 ;	genIpush
   3DC3 C0 05             13940 	push	ar5
   3DC5 C0 06             13941 	push	ar6
   3DC7 C0 07             13942 	push	ar7
   3DC9 C0 02             13943 	push	ar2
   3DCB C0 03             13944 	push	ar3
   3DCD C0 04             13945 	push	ar4
                          13946 ;	genCall
   3DCF 8D 82             13947 	mov	dpl,r5
   3DD1 8E 83             13948 	mov	dph,r6
   3DD3 8F F0             13949 	mov	b,r7
   3DD5 12s07rDA          13950 	lcall	_get_fileinfo
   3DD8 15 81             13951 	dec	sp
   3DDA 15 81             13952 	dec	sp
   3DDC 15 81             13953 	dec	sp
   3DDE D0 07             13954 	pop	ar7
   3DE0 D0 06             13955 	pop	ar6
   3DE2 D0 05             13956 	pop	ar5
   3DE4                   13957 00108$:
                          13958 ;	FatDrivers/tff.c:1406: if (!next_dir_entry(dirobj)) dirobj->sect = 0;	/* Next entry */
                          13959 ;	genCall
   3DE4 A8*00             13960 	mov	r0,_bp
   3DE6 08                13961 	inc	r0
   3DE7 86 82             13962 	mov	dpl,@r0
   3DE9 08                13963 	inc	r0
   3DEA 86 83             13964 	mov	dph,@r0
   3DEC 08                13965 	inc	r0
   3DED 86 F0             13966 	mov	b,@r0
   3DEF C0 05             13967 	push	ar5
   3DF1 C0 06             13968 	push	ar6
   3DF3 C0 07             13969 	push	ar7
   3DF5 12s05r49          13970 	lcall	_next_dir_entry
   3DF8 E5 82             13971 	mov	a,dpl
   3DFA D0 07             13972 	pop	ar7
   3DFC D0 06             13973 	pop	ar6
   3DFE D0 05             13974 	pop	ar5
                          13975 ;	genIfx
                          13976 ;	genIfxJump
                          13977 ;	Peephole 108.b	removed ljmp by inverse jump logic
   3E00 70 27             13978 	jnz	00111$
                          13979 ;	Peephole 300	removed redundant label 00133$
                          13980 ;	genPlus
   3E02 A8*00             13981 	mov	r0,_bp
   3E04 08                13982 	inc	r0
                          13983 ;     genPlusIncr
   3E05 74 0F             13984 	mov	a,#0x0F
   3E07 26                13985 	add	a,@r0
   3E08 FA                13986 	mov	r2,a
                          13987 ;	Peephole 181	changed mov to clr
   3E09 E4                13988 	clr	a
   3E0A 08                13989 	inc	r0
   3E0B 36                13990 	addc	a,@r0
   3E0C FB                13991 	mov	r3,a
   3E0D 08                13992 	inc	r0
   3E0E 86 04             13993 	mov	ar4,@r0
                          13994 ;	genPointerSet
                          13995 ;	genGenPointerSet
   3E10 8A 82             13996 	mov	dpl,r2
   3E12 8B 83             13997 	mov	dph,r3
   3E14 8C F0             13998 	mov	b,r4
                          13999 ;	Peephole 181	changed mov to clr
   3E16 E4                14000 	clr	a
   3E17 12s00r00          14001 	lcall	__gptrput
   3E1A A3                14002 	inc	dptr
                          14003 ;	Peephole 181	changed mov to clr
   3E1B E4                14004 	clr	a
   3E1C 12s00r00          14005 	lcall	__gptrput
   3E1F A3                14006 	inc	dptr
                          14007 ;	Peephole 181	changed mov to clr
   3E20 E4                14008 	clr	a
   3E21 12s00r00          14009 	lcall	__gptrput
   3E24 A3                14010 	inc	dptr
                          14011 ;	Peephole 181	changed mov to clr
   3E25 E4                14012 	clr	a
   3E26 12s00r00          14013 	lcall	__gptrput
   3E29                   14014 00111$:
                          14015 ;	FatDrivers/tff.c:1407: if (finfo->fname[0]) break;						/* Found valid entry */
                          14016 ;	genCast
   3E29 E5*00             14017 	mov	a,_bp
   3E2B 24 0E             14018 	add	a,#0x0e
   3E2D F8                14019 	mov	r0,a
   3E2E 86 02             14020 	mov	ar2,@r0
   3E30 08                14021 	inc	r0
   3E31 86 03             14022 	mov	ar3,@r0
   3E33 08                14023 	inc	r0
   3E34 86 04             14024 	mov	ar4,@r0
                          14025 ;	genPointerGet
                          14026 ;	genGenPointerGet
   3E36 8A 82             14027 	mov	dpl,r2
   3E38 8B 83             14028 	mov	dph,r3
   3E3A 8C F0             14029 	mov	b,r4
   3E3C 12s00r00          14030 	lcall	__gptrget
                          14031 ;	genIfxJump
   3E3F 70 03             14032 	jnz	00134$
   3E41 02s3CrCE          14033 	ljmp	00114$
   3E44                   14034 00134$:
   3E44                   14035 00116$:
                          14036 ;	FatDrivers/tff.c:1410: return FR_OK;
                          14037 ;	genRet
   3E44 75 82 00          14038 	mov	dpl,#0x00
   3E47                   14039 00117$:
   3E47 85*00 81          14040 	mov	sp,_bp
   3E4A D0*00             14041 	pop	_bp
   3E4C 22                14042 	ret
                          14043 	.area CSEG    (CODE)
                          14044 	.area CONST   (CODE)
   0000                   14045 __str_0:
   0000 46 41 54          14046 	.ascii "FAT"
   0003 00                14047 	.db 0x00
   0004                   14048 __str_1:
   0004 46 41 54 33 32    14049 	.ascii "FAT32"
   0009 00                14050 	.db 0x00
                          14051 	.area XINIT   (CODE)
